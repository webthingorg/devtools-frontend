{
  "coverage/CoverageListView.js | Byte": {
    "message": "1 byte"
  },
  "coverage/CoverageListView.js | ByteS": {
    "message": "1 byte, {PH1}"
  },
  "coverage/CoverageListView.js | codeCoverage": {
    "message": "Code Coverage"
  },
  "coverage/CoverageListView.js | css": {
    "message": "CSS"
  },
  "coverage/CoverageListView.js | jsCoverageWithPerBlock": {
    "message": "JS coverage with per block granularity: Once a block of JavaScript was executed, that block is marked as covered."
  },
  "coverage/CoverageListView.js | jsCoverageWithPerFunction": {
    "message": "JS coverage with per function granularity: Once a function was executed, the whole function is marked as covered."
  },
  "coverage/CoverageListView.js | jsPerBlock": {
    "message": "JS (per block)"
  },
  "coverage/CoverageListView.js | jsPerFunction": {
    "message": "JS (per function)"
  },
  "coverage/CoverageListView.js | sBytes": {
    "message": "{PH1} bytes"
  },
  "coverage/CoverageListView.js | sBytesS": {
    "message": "{PH1} bytes, {PH2}"
  },
  "coverage/CoverageListView.js | sBytesSBelongToBlocksOf": {
    "message": "{PH1} bytes ({PH2} %) belong to blocks of JavaScript that have not (yet) been executed."
  },
  "coverage/CoverageListView.js | sBytesSBelongToBlocksOfJavascript": {
    "message": "{PH1} bytes ({PH2} %) belong to blocks of JavaScript that have executed at least once."
  },
  "coverage/CoverageListView.js | sBytesSBelongToFunctionsThatHave": {
    "message": "{PH1} bytes ({PH2} %) belong to functions that have not (yet) been executed."
  },
  "coverage/CoverageListView.js | sBytesSBelongToFunctionsThatHaveExecuted": {
    "message": "{PH1} bytes ({PH2} %) belong to functions that have executed at least once."
  },
  "coverage/CoverageListView.js | sOfFileUnusedSOfFileUsed": {
    "message": "{PH1} % of file unused, {PH2} % of file used"
  },
  "coverage/CoverageListView.js | sPercent": {
    "message": "{PH1} %"
  },
  "coverage/CoverageListView.js | totalBytes": {
    "message": "Total Bytes"
  },
  "coverage/CoverageListView.js | type": {
    "message": "Type"
  },
  "coverage/CoverageListView.js | unusedBytes": {
    "message": "Unused Bytes"
  },
  "coverage/CoverageListView.js | url": {
    "message": "URL"
  },
  "coverage/CoverageListView.js | usageVisualization": {
    "message": "Usage Visualization"
  },
  "coverage/CoverageView.js | all": {
    "message": "All"
  },
  "coverage/CoverageView.js | chooseCoverageGranularityPer": {
    "message": "Choose coverage granularity: Per function has low overhead, per block has significant overhead."
  },
  "coverage/CoverageView.js | clearAll": {
    "message": "Clear all"
  },
  "coverage/CoverageView.js | clickTheRecordButtonSToStart": {
    "message": "Click the record button {PH1} to start capturing coverage."
  },
  "coverage/CoverageView.js | clickTheReloadButtonSToReloadAnd": {
    "message": "Click the reload button {PH1} to reload and start capturing coverage."
  },
  "coverage/CoverageView.js | contentScripts": {
    "message": "Content scripts"
  },
  "coverage/CoverageView.js | css": {
    "message": "CSS"
  },
  "coverage/CoverageView.js | export": {
    "message": "Export..."
  },
  "coverage/CoverageView.js | filterCoverageByType": {
    "message": "Filter coverage by type"
  },
  "coverage/CoverageView.js | filteredSTotalS": {
    "message": "Filtered: {PH1}  Total: {PH2}"
  },
  "coverage/CoverageView.js | includeExtensionContentScripts": {
    "message": "Include extension content scripts"
  },
  "coverage/CoverageView.js | javascript": {
    "message": "JavaScript"
  },
  "coverage/CoverageView.js | perBlock": {
    "message": "Per block"
  },
  "coverage/CoverageView.js | perFunction": {
    "message": "Per function"
  },
  "coverage/CoverageView.js | sOfSSUsedSoFarSUnused": {
    "message": "{PH1} of {PH2} ({PH3}%) used so far,\n        {PH4} unused."
  },
  "coverage/CoverageView.js | urlFilter": {
    "message": "URL filter"
  },
  "coverage/ModuleUIStrings.js | coverage": {
    "message": "Coverage"
  },
  "coverage/ModuleUIStrings.js | instrumentCoverage": {
    "message": "Instrument coverage"
  },
  "coverage/ModuleUIStrings.js | performance": {
    "message": "Performance"
  },
  "coverage/ModuleUIStrings.js | startInstrumentingCoverageAnd": {
    "message": "Start instrumenting coverage and reload page"
  },
  "coverage/ModuleUIStrings.js | stopInstrumentingCoverageAndShow": {
    "message": "Stop instrumenting coverage and show results"
  },
  "devices/DevicesView.js | thisPanelHasBeenDeprecatedIn": {
    "message": "This panel has been deprecated in favor of the {PH1} interface, which has equivalent functionality."
  },
  "devices/ModuleUIStrings.js | android": {
    "message": "android"
  },
  "devices/ModuleUIStrings.js | mobile": {
    "message": "mobile"
  },
  "devices/ModuleUIStrings.js | remoteDevices": {
    "message": "Remote devices"
  },
  "devices/ModuleUIStrings.js | usb": {
    "message": "usb"
  },
  "emulation/DeviceModeModel.js | desktop": {
    "message": "Desktop"
  },
  "emulation/DeviceModeModel.js | desktopTouch": {
    "message": "Desktop (touch)"
  },
  "emulation/DeviceModeModel.js | devicePixelRatioMustBeANumberOr": {
    "message": "Device pixel ratio must be a number or blank."
  },
  "emulation/DeviceModeModel.js | devicePixelRatioMustBeGreater": {
    "message": "Device pixel ratio must be greater than or equal to {PH1}."
  },
  "emulation/DeviceModeModel.js | devicePixelRatioMustBeLessThanOr": {
    "message": "Device pixel ratio must be less than or equal to {PH1}."
  },
  "emulation/DeviceModeModel.js | heightMustBeANumber": {
    "message": "Height must be a number."
  },
  "emulation/DeviceModeModel.js | heightMustBeGreaterThanOrEqualTo": {
    "message": "Height must be greater than or equal to {PH1}."
  },
  "emulation/DeviceModeModel.js | heightMustBeLessThanOrEqualToS": {
    "message": "Height must be less than or equal to {PH1}."
  },
  "emulation/DeviceModeModel.js | mobile": {
    "message": "Mobile"
  },
  "emulation/DeviceModeModel.js | mobileNoTouch": {
    "message": "Mobile (no touch)"
  },
  "emulation/DeviceModeModel.js | widthMustBeANumber": {
    "message": "Width must be a number."
  },
  "emulation/DeviceModeModel.js | widthMustBeGreaterThanOrEqualToS": {
    "message": "Width must be greater than or equal to {PH1}."
  },
  "emulation/DeviceModeModel.js | widthMustBeLessThanOrEqualToS": {
    "message": "Width must be less than or equal to {PH1}."
  },
  "emulation/DeviceModeToolbar.js | addDevicePixelRatio": {
    "message": "Add device pixel ratio"
  },
  "emulation/DeviceModeToolbar.js | addDeviceType": {
    "message": "Add device type"
  },
  "emulation/DeviceModeToolbar.js | autoadjustZoom": {
    "message": "Auto-adjust zoom"
  },
  "emulation/DeviceModeToolbar.js | closeDevtools": {
    "message": "Close DevTools"
  },
  "emulation/DeviceModeToolbar.js | defaultF": {
    "message": "Default: {PH1}"
  },
  "emulation/DeviceModeToolbar.js | devicePixelRatio": {
    "message": "Device pixel ratio"
  },
  "emulation/DeviceModeToolbar.js | deviceType": {
    "message": "Device type"
  },
  "emulation/DeviceModeToolbar.js | edit": {
    "message": "Editâ€¦"
  },
  "emulation/DeviceModeToolbar.js | experimentalWebPlatformFeature": {
    "message": "\"Experimental Web Platform Feature\" flag is enabled. Click to disable it."
  },
  "emulation/DeviceModeToolbar.js | experimentalWebPlatformFeatureFlag": {
    "message": "\"Experimental Web Platform Feature\" flag is disabled. Click to enable it."
  },
  "emulation/DeviceModeToolbar.js | fitToWindowF": {
    "message": "Fit to window ({PH1}%%)"
  },
  "emulation/DeviceModeToolbar.js | heightLeaveEmptyForFull": {
    "message": "Height (leave empty for full)"
  },
  "emulation/DeviceModeToolbar.js | hideDeviceFrame": {
    "message": "Hide device frame"
  },
  "emulation/DeviceModeToolbar.js | hideMediaQueries": {
    "message": "Hide media queries"
  },
  "emulation/DeviceModeToolbar.js | hideRulers": {
    "message": "Hide rulers"
  },
  "emulation/DeviceModeToolbar.js | landscape": {
    "message": "Landscape"
  },
  "emulation/DeviceModeToolbar.js | moreOptions": {
    "message": "More options"
  },
  "emulation/DeviceModeToolbar.js | none": {
    "message": "None"
  },
  "emulation/DeviceModeToolbar.js | portrait": {
    "message": "Portrait"
  },
  "emulation/DeviceModeToolbar.js | removeDevicePixelRatio": {
    "message": "Remove device pixel ratio"
  },
  "emulation/DeviceModeToolbar.js | removeDeviceType": {
    "message": "Remove device type"
  },
  "emulation/DeviceModeToolbar.js | resetToDefaults": {
    "message": "Reset to defaults"
  },
  "emulation/DeviceModeToolbar.js | responsive": {
    "message": "Responsive"
  },
  "emulation/DeviceModeToolbar.js | rotate": {
    "message": "Rotate"
  },
  "emulation/DeviceModeToolbar.js | screenOrientationOptions": {
    "message": "Screen orientation options"
  },
  "emulation/DeviceModeToolbar.js | showDeviceFrame": {
    "message": "Show device frame"
  },
  "emulation/DeviceModeToolbar.js | showMediaQueries": {
    "message": "Show media queries"
  },
  "emulation/DeviceModeToolbar.js | showRulers": {
    "message": "Show rulers"
  },
  "emulation/DeviceModeToolbar.js | toggleDualscreenMode": {
    "message": "Toggle dual-screen mode"
  },
  "emulation/DeviceModeToolbar.js | width": {
    "message": "Width"
  },
  "emulation/DeviceModeToolbar.js | zoom": {
    "message": "Zoom"
  },
  "emulation/DeviceModeView.js | doubleclickForFullHeight": {
    "message": "Double-click for full height"
  },
  "emulation/DeviceModeView.js | k": {
    "message": "4K"
  },
  "emulation/DeviceModeView.js | laptop": {
    "message": "Laptop"
  },
  "emulation/DeviceModeView.js | laptopL": {
    "message": "Laptop L"
  },
  "emulation/DeviceModeView.js | mobileL": {
    "message": "Mobile L"
  },
  "emulation/DeviceModeView.js | mobileM": {
    "message": "Mobile M"
  },
  "emulation/DeviceModeView.js | mobileS": {
    "message": "Mobile S"
  },
  "emulation/DeviceModeView.js | tablet": {
    "message": "Tablet"
  },
  "emulation/DevicesSettingsTab.js | addCustomDevice": {
    "message": "Add custom device..."
  },
  "emulation/DevicesSettingsTab.js | deviceName": {
    "message": "Device Name"
  },
  "emulation/DevicesSettingsTab.js | deviceNameCannotBeEmpty": {
    "message": "Device name cannot be empty."
  },
  "emulation/DevicesSettingsTab.js | deviceNameMustBeLessThanS": {
    "message": "Device name must be less than {PH1} characters."
  },
  "emulation/DevicesSettingsTab.js | devicePixelRatio": {
    "message": "Device pixel ratio"
  },
  "emulation/DevicesSettingsTab.js | emulatedDevices": {
    "message": "Emulated Devices"
  },
  "emulation/DevicesSettingsTab.js | height": {
    "message": "Height"
  },
  "emulation/DevicesSettingsTab.js | userAgentType": {
    "message": "User agent type"
  },
  "emulation/DevicesSettingsTab.js | width": {
    "message": "Width"
  },
  "emulation/LocationsSettingsTab.js | customLocations": {
    "message": "Custom locations"
  },
  "emulation/LocationsSettingsTab.js | lat": {
    "message": "Lat"
  },
  "emulation/LocationsSettingsTab.js | latitude": {
    "message": "Latitude"
  },
  "emulation/LocationsSettingsTab.js | latitudeMustBeANumber": {
    "message": "Latitude must be a number"
  },
  "emulation/LocationsSettingsTab.js | latitudeMustBeGreaterThanOrEqual": {
    "message": "Latitude must be greater than or equal to {PH1}"
  },
  "emulation/LocationsSettingsTab.js | latitudeMustBeLessThanOrEqualToS": {
    "message": "Latitude must be less than or equal to {PH1}"
  },
  "emulation/LocationsSettingsTab.js | locale": {
    "message": "Locale"
  },
  "emulation/LocationsSettingsTab.js | localeMustContainAlphabetic": {
    "message": "Locale must contain alphabetic characters"
  },
  "emulation/LocationsSettingsTab.js | locationName": {
    "message": "Location name"
  },
  "emulation/LocationsSettingsTab.js | locationNameCannotBeEmpty": {
    "message": "Location name cannot be empty"
  },
  "emulation/LocationsSettingsTab.js | locationNameMustBeLessThanS": {
    "message": "Location name must be less than {PH1} characters"
  },
  "emulation/LocationsSettingsTab.js | long": {
    "message": "Long"
  },
  "emulation/LocationsSettingsTab.js | longitude": {
    "message": "Longitude"
  },
  "emulation/LocationsSettingsTab.js | longitudeMustBeANumber": {
    "message": "Longitude must be a number"
  },
  "emulation/LocationsSettingsTab.js | longitudeMustBeGreaterThanOr": {
    "message": "Longitude must be greater than or equal to {PH1}"
  },
  "emulation/LocationsSettingsTab.js | longitudeMustBeLessThanOrEqualTo": {
    "message": "Longitude must be less than or equal to {PH1}"
  },
  "emulation/LocationsSettingsTab.js | timezoneId": {
    "message": "Timezone ID"
  },
  "emulation/LocationsSettingsTab.js | timezoneIdMustContainAlphabetic": {
    "message": "Timezone ID must contain alphabetic characters"
  },
  "emulation/MediaQueryInspector.js | revealInSourceCode": {
    "message": "Reveal in source code"
  },
  "emulation/ModuleUIStrings.js | accelerometer": {
    "message": "accelerometer"
  },
  "emulation/ModuleUIStrings.js | berlin": {
    "message": "Berlin"
  },
  "emulation/ModuleUIStrings.js | captureFullSizeScreenshot": {
    "message": "Capture full size screenshot"
  },
  "emulation/ModuleUIStrings.js | captureNodeScreenshot": {
    "message": "Capture node screenshot"
  },
  "emulation/ModuleUIStrings.js | captureScreenshot": {
    "message": "Capture screenshot"
  },
  "emulation/ModuleUIStrings.js | device": {
    "message": "device"
  },
  "emulation/ModuleUIStrings.js | devicebased": {
    "message": "Device-based"
  },
  "emulation/ModuleUIStrings.js | deviceOrientation": {
    "message": "device orientation"
  },
  "emulation/ModuleUIStrings.js | devices": {
    "message": "Devices"
  },
  "emulation/ModuleUIStrings.js | emulateIdleDetectorState": {
    "message": "Emulate Idle Detector state"
  },
  "emulation/ModuleUIStrings.js | forceEnabled": {
    "message": "Force enabled"
  },
  "emulation/ModuleUIStrings.js | geolocation": {
    "message": "geolocation"
  },
  "emulation/ModuleUIStrings.js | hideDeviceFrame": {
    "message": "Hide device frame"
  },
  "emulation/ModuleUIStrings.js | hideMediaQueries": {
    "message": "Hide media queries"
  },
  "emulation/ModuleUIStrings.js | hideRulers": {
    "message": "Hide rulers"
  },
  "emulation/ModuleUIStrings.js | locale": {
    "message": "locale"
  },
  "emulation/ModuleUIStrings.js | locales": {
    "message": "locales"
  },
  "emulation/ModuleUIStrings.js | locations": {
    "message": "Locations"
  },
  "emulation/ModuleUIStrings.js | london": {
    "message": "London"
  },
  "emulation/ModuleUIStrings.js | mobile": {
    "message": "Mobile"
  },
  "emulation/ModuleUIStrings.js | moscow": {
    "message": "Moscow"
  },
  "emulation/ModuleUIStrings.js | mountainView": {
    "message": "Mountain View"
  },
  "emulation/ModuleUIStrings.js | mumbai": {
    "message": "Mumbai"
  },
  "emulation/ModuleUIStrings.js | noIdleEmulation": {
    "message": "No idle emulation"
  },
  "emulation/ModuleUIStrings.js | sanFrancisco": {
    "message": "San Francisco"
  },
  "emulation/ModuleUIStrings.js | screenshot": {
    "message": "Screenshot"
  },
  "emulation/ModuleUIStrings.js | sensors": {
    "message": "Sensors"
  },
  "emulation/ModuleUIStrings.js | shanghai": {
    "message": "Shanghai"
  },
  "emulation/ModuleUIStrings.js | showDeviceFrame": {
    "message": "Show device frame"
  },
  "emulation/ModuleUIStrings.js | showMediaQueries": {
    "message": "Show media queries"
  },
  "emulation/ModuleUIStrings.js | showRulers": {
    "message": "Show rulers"
  },
  "emulation/ModuleUIStrings.js | soPaulo": {
    "message": "SÃ£o Paulo"
  },
  "emulation/ModuleUIStrings.js | timezones": {
    "message": "timezones"
  },
  "emulation/ModuleUIStrings.js | toggleDeviceToolbar": {
    "message": "Toggle device toolbar"
  },
  "emulation/ModuleUIStrings.js | tokyo": {
    "message": "Tokyo"
  },
  "emulation/ModuleUIStrings.js | touch": {
    "message": "Touch"
  },
  "emulation/ModuleUIStrings.js | userActiveScreenLocked": {
    "message": "User active, screen locked"
  },
  "emulation/ModuleUIStrings.js | userActiveScreenUnlocked": {
    "message": "User active, screen unlocked"
  },
  "emulation/ModuleUIStrings.js | userIdleScreenLocked": {
    "message": "User idle, screen locked"
  },
  "emulation/ModuleUIStrings.js | userIdleScreenUnlocked": {
    "message": "User idle, screen unlocked"
  },
  "emulation/SensorsView.js | adjustWithMousewheelOrUpdownKeys": {
    "message": "Adjust with mousewheel or up/down keys. {PH1}: Â±10, Shift: Â±1, Alt: Â±0.01"
  },
  "emulation/SensorsView.js | customOrientation": {
    "message": "Custom orientation"
  },
  "emulation/SensorsView.js | deviceOrientationSetToAlphaSBeta": {
    "message": "Device orientation set to alpha: {PH1}, beta: {PH2}, gamma: {PH3}"
  },
  "emulation/SensorsView.js | displayDown": {
    "message": "Display down"
  },
  "emulation/SensorsView.js | displayUp": {
    "message": "Display up"
  },
  "emulation/SensorsView.js | enableOrientationToRotate": {
    "message": "Enable orientation to rotate"
  },
  "emulation/SensorsView.js | error": {
    "message": "Error"
  },
  "emulation/SensorsView.js | forcesSelectedIdleStateEmulation": {
    "message": "Forces selected idle state emulation"
  },
  "emulation/SensorsView.js | forcesTouchInsteadOfClick": {
    "message": "Forces touch instead of click"
  },
  "emulation/SensorsView.js | landscapeLeft": {
    "message": "Landscape left"
  },
  "emulation/SensorsView.js | landscapeRight": {
    "message": "Landscape right"
  },
  "emulation/SensorsView.js | latitude": {
    "message": "Latitude"
  },
  "emulation/SensorsView.js | locale": {
    "message": "Locale"
  },
  "emulation/SensorsView.js | location": {
    "message": "Location"
  },
  "emulation/SensorsView.js | locationUnavailable": {
    "message": "Location unavailable"
  },
  "emulation/SensorsView.js | longitude": {
    "message": "Longitude"
  },
  "emulation/SensorsView.js | manage": {
    "message": "Manage"
  },
  "emulation/SensorsView.js | manageTheListOfLocations": {
    "message": "Manage the list of locations"
  },
  "emulation/SensorsView.js | noOverride": {
    "message": "No override"
  },
  "emulation/SensorsView.js | off": {
    "message": "Off"
  },
  "emulation/SensorsView.js | orientation": {
    "message": "Orientation"
  },
  "emulation/SensorsView.js | other": {
    "message": "Otherâ€¦"
  },
  "emulation/SensorsView.js | overrides": {
    "message": "Overrides"
  },
  "emulation/SensorsView.js | portrait": {
    "message": "Portrait"
  },
  "emulation/SensorsView.js | portraitUpsideDown": {
    "message": "Portrait upside down"
  },
  "emulation/SensorsView.js | presets": {
    "message": "Presets"
  },
  "emulation/SensorsView.js | reset": {
    "message": "Reset"
  },
  "emulation/SensorsView.js | resetDeviceOrientation": {
    "message": "Reset device orientation"
  },
  "emulation/SensorsView.js | shiftdragHorizontallyToRotate": {
    "message": "Shift+drag horizontally to rotate around the y-axis"
  },
  "emulation/SensorsView.js | timezoneId": {
    "message": "Timezone ID"
  },
  "resources/ClearStorageView.js | storageQuotaUsed": {
    "message": "{PH1} used out of {PH2} storage quota"
  },
  "resources/ClearStorageView.js | storageQuotaUsedWithBytes": {
    "message": "{PH1} bytes used out of {PH2} bytes storage quota"
  },
  "resources/ClearStorageView.js | storageWithCustomMarker": {
    "message": "{PH1} (custom)"
  },
  "settings/FrameworkBlackboxSettingsTab.js | addFilenamePattern": {
    "message": "Add filename pattern"
  },
  "settings/FrameworkBlackboxSettingsTab.js | addPattern": {
    "message": "Add pattern..."
  },
  "settings/FrameworkBlackboxSettingsTab.js | behavior": {
    "message": "Behavior"
  },
  "settings/FrameworkBlackboxSettingsTab.js | blackbox": {
    "message": "Blackbox"
  },
  "settings/FrameworkBlackboxSettingsTab.js | blackboxContentScripts": {
    "message": "Blackbox content scripts"
  },
  "settings/FrameworkBlackboxSettingsTab.js | blackboxContentScriptsExtension": {
    "message": "Blackbox content scripts (extension scripts in the page)"
  },
  "settings/FrameworkBlackboxSettingsTab.js | blackboxScriptsWhoseNamesMatchS": {
    "message": "Blackbox scripts whose names match '{PH1}'"
  },
  "settings/FrameworkBlackboxSettingsTab.js | debuggerWillSkipThroughThe": {
    "message": "Debugger will skip through the scripts and will not stop on exceptions thrown by them."
  },
  "settings/FrameworkBlackboxSettingsTab.js | disabled": {
    "message": "Disabled"
  },
  "settings/FrameworkBlackboxSettingsTab.js | frameworkBlackboxing": {
    "message": "Framework Blackboxing"
  },
  "settings/FrameworkBlackboxSettingsTab.js | noBlackboxedPatterns": {
    "message": "No blackboxed patterns"
  },
  "settings/FrameworkBlackboxSettingsTab.js | pattern": {
    "message": "Pattern"
  },
  "settings/FrameworkBlackboxSettingsTab.js | patternAlreadyExists": {
    "message": "Pattern already exists"
  },
  "settings/FrameworkBlackboxSettingsTab.js | patternCannotBeEmpty": {
    "message": "Pattern cannot be empty"
  },
  "settings/FrameworkBlackboxSettingsTab.js | patternMustBeAValidRegular": {
    "message": "Pattern must be a valid regular expression"
  },
  "settings/KeybindsSettingsTab.js | addAShortcut": {
    "message": "Add a shortcut"
  },
  "settings/KeybindsSettingsTab.js | confirmChanges": {
    "message": "Confirm changes"
  },
  "settings/KeybindsSettingsTab.js | discardChanges": {
    "message": "Discard changes"
  },
  "settings/KeybindsSettingsTab.js | editShortcut": {
    "message": "Edit shortcut"
  },
  "settings/KeybindsSettingsTab.js | FullListOfDevtoolsKeyboard": {
    "message": "Full list of DevTools keyboard shortcuts and gestures"
  },
  "settings/KeybindsSettingsTab.js | keyboardShortcutsList": {
    "message": "Keyboard shortcuts list"
  },
  "settings/KeybindsSettingsTab.js | matchShortcutsFromPreset": {
    "message": "Match shortcuts from preset"
  },
  "settings/KeybindsSettingsTab.js | noShortcutForAction": {
    "message": "No shortcut for action"
  },
  "settings/KeybindsSettingsTab.js | removeShortcut": {
    "message": "Remove shortcut"
  },
  "settings/KeybindsSettingsTab.js | ResetShortcutsForAction": {
    "message": "Reset shortcuts for action"
  },
  "settings/KeybindsSettingsTab.js | RestoreDefaultShortcuts": {
    "message": "Restore default shortcuts"
  },
  "settings/KeybindsSettingsTab.js | shortcutModified": {
    "message": "Shortcut modified"
  },
  "settings/KeybindsSettingsTab.js | shortcuts": {
    "message": "Shortcuts"
  },
  "settings/KeybindsSettingsTab.js | shortcutsCannotContainOnly": {
    "message": "Shortcuts cannot contain only modifier keys."
  },
  "settings/KeybindsSettingsTab.js | thisShortcutIsInUseByS": {
    "message": "This shortcut is in use by {PH1}: {PH2}."
  },
  "settings/ModuleUIStrings.js | blackboxing": {
    "message": "Blackboxing"
  },
  "settings/ModuleUIStrings.js | documentation": {
    "message": "Documentation"
  },
  "settings/ModuleUIStrings.js | experiments": {
    "message": "Experiments"
  },
  "settings/ModuleUIStrings.js | preferences": {
    "message": "Preferences"
  },
  "settings/ModuleUIStrings.js | settings": {
    "message": "Settings"
  },
  "settings/ModuleUIStrings.js | shortcuts": {
    "message": "Shortcuts"
  },
  "settings/SettingsScreen.js | experiments": {
    "message": "Experiments"
  },
  "settings/SettingsScreen.js | oneOrMoreSettingsHaveChanged": {
    "message": "One or more settings have changed which requires a reload to take effect."
  },
  "settings/SettingsScreen.js | preferences": {
    "message": "Preferences"
  },
  "settings/SettingsScreen.js | restoreDefaultsAndReload": {
    "message": "Restore defaults and reload"
  },
  "settings/SettingsScreen.js | settings": {
    "message": "Settings"
  },
  "settings/SettingsScreen.js | shortcuts": {
    "message": "Shortcuts"
  },
  "settings/SettingsScreen.js | theseExperimentsAreParticularly": {
    "message": "These experiments are particularly unstable. Enable at your own risk."
  },
  "settings/SettingsScreen.js | theseExperimentsCouldBeUnstable": {
    "message": "These experiments could be unstable or unreliable and may require you to restart DevTools."
  },
  "settings/SettingsScreen.js | warning": {
    "message": "WARNING:"
  },
  "web_audio/AudioContextContentBuilder.js | audiocontext": {
    "message": "AudioContext"
  },
  "web_audio/AudioContextContentBuilder.js | callbackBufferSize": {
    "message": "Callback Buffer Size"
  },
  "web_audio/AudioContextContentBuilder.js | callbackInterval": {
    "message": "Callback Interval"
  },
  "web_audio/AudioContextContentBuilder.js | currentTime": {
    "message": "Current Time"
  },
  "web_audio/AudioContextContentBuilder.js | maxOutputChannels": {
    "message": "Max Output Channels"
  },
  "web_audio/AudioContextContentBuilder.js | offlineaudiocontext": {
    "message": "OfflineAudioContext"
  },
  "web_audio/AudioContextContentBuilder.js | renderCapacity": {
    "message": "Render Capacity"
  },
  "web_audio/AudioContextContentBuilder.js | sampleRate": {
    "message": "Sample Rate"
  },
  "web_audio/AudioContextContentBuilder.js | state": {
    "message": "State"
  },
  "web_audio/AudioContextSelector.js | audioContextS": {
    "message": "Audio context: {PH1}"
  },
  "web_audio/AudioContextSelector.js | noRecordings": {
    "message": "(no recordings)"
  },
  "web_audio/ModuleUIStrings.js | audio": {
    "message": "audio"
  },
  "web_audio/ModuleUIStrings.js | webaudio": {
    "message": "WebAudio"
  },
  "web_audio/WebAudioView.js | openAPageThatUsesWebAudioApiTo": {
    "message": "Open a page that uses Web Audio API to start monitoring."
  }
}

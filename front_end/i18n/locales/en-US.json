{
  "animation/AnimationTimeline.ts | animationPreviews": {
    "message": "Animation previews"
  },
  "animation/AnimationTimeline.ts | animationPreviewS": {
    "message": "Animation Preview {PH1}"
  },
  "animation/AnimationTimeline.ts | clearAll": {
    "message": "Clear all"
  },
  "animation/AnimationTimeline.ts | listeningForAnimations": {
    "message": "Listening for animations..."
  },
  "animation/AnimationTimeline.ts | pause": {
    "message": "Pause"
  },
  "animation/AnimationTimeline.ts | pauseAll": {
    "message": "Pause all"
  },
  "animation/AnimationTimeline.ts | pauseTimeline": {
    "message": "Pause timeline"
  },
  "animation/AnimationTimeline.ts | playbackRatePlaceholder": {
    "message": "{PH1}%"
  },
  "animation/AnimationTimeline.ts | playbackRates": {
    "message": "Playback rates"
  },
  "animation/AnimationTimeline.ts | playTimeline": {
    "message": "Play timeline"
  },
  "animation/AnimationTimeline.ts | replayTimeline": {
    "message": "Replay timeline"
  },
  "animation/AnimationTimeline.ts | resumeAll": {
    "message": "Resume all"
  },
  "animation/AnimationTimeline.ts | selectAnEffectAboveToInspectAnd": {
    "message": "Select an effect above to inspect and modify."
  },
  "animation/AnimationTimeline.ts | setSpeedToS": {
    "message": "Set speed to {PH1}"
  },
  "animation/AnimationUI.ts | animationEndpointSlider": {
    "message": "Animation Endpoint slider"
  },
  "animation/AnimationUI.ts | animationKeyframeSlider": {
    "message": "Animation Keyframe slider"
  },
  "animation/AnimationUI.ts | sSlider": {
    "message": "{PH1} slider"
  },
  "browser_sdk/ModuleUIStrings.js | clear": {
    "message": "clear"
  },
  "browser_sdk/ModuleUIStrings.js | doNotPreserveLogOnPageReload": {
    "message": "Do not preserve log on page reload / navigation"
  },
  "browser_sdk/ModuleUIStrings.js | network": {
    "message": "Network"
  },
  "browser_sdk/ModuleUIStrings.js | preserve": {
    "message": "preserve"
  },
  "browser_sdk/ModuleUIStrings.js | preserveLog": {
    "message": "Preserve log"
  },
  "browser_sdk/ModuleUIStrings.js | preserveLogOnPageReload": {
    "message": "Preserve log on page reload / navigation"
  },
  "browser_sdk/ModuleUIStrings.js | recordNetworkLog": {
    "message": "Record network log"
  },
  "browser_sdk/ModuleUIStrings.js | reset": {
    "message": "reset"
  },
  "changes/ChangesSidebar.ts | sFromSourceMap": {
    "message": "{PH1} (from source map)"
  },
  "changes/ChangesTextEditor.ts | additions": {
    "message": "Addition:{PH1}"
  },
  "changes/ChangesTextEditor.ts | deletions": {
    "message": "Deletion:{PH1}"
  },
  "changes/ChangesView.ts | binaryData": {
    "message": "Binary data"
  },
  "changes/ChangesView.ts | changesDiffViewer": {
    "message": "Changes diff viewer"
  },
  "changes/ChangesView.ts | noChanges": {
    "message": "No changes"
  },
  "changes/ChangesView.ts | revertAllChangesToCurrentFile": {
    "message": "Revert all changes to current file"
  },
  "changes/ChangesView.ts | sDeletion": {
    "message": "{PH1} deletion (-)"
  },
  "changes/ChangesView.ts | sDeletions": {
    "message": "{PH1} deletions (-)"
  },
  "changes/ChangesView.ts | sInsertion": {
    "message": "{PH1} insertion (+),"
  },
  "changes/ChangesView.ts | sInsertions": {
    "message": "{PH1} insertions (+),"
  },
  "changes/ChangesView.ts | SkippingDMatchingLines": {
    "message": "( … Skipping {PH1} matching lines … )"
  },
  "changes/ModuleUIStrings.ts | changesDrawer": {
    "message": "Changes drawer"
  },
  "color_picker/ContrastDetails.js | aa": {
    "message": "AA"
  },
  "color_picker/ContrastDetails.js | aaa": {
    "message": "AAA"
  },
  "color_picker/ContrastDetails.js | apca": {
    "message": "APCA"
  },
  "color_picker/ContrastDetails.js | contrastRatio": {
    "message": "Contrast ratio"
  },
  "color_picker/ContrastDetails.js | noContrastInformationAvailable": {
    "message": "No contrast information available"
  },
  "color_picker/ContrastDetails.js | pickBackgroundColor": {
    "message": "Pick background color"
  },
  "color_picker/ContrastDetails.js | placeholderWithColon": {
    "message": ": {PH1}"
  },
  "color_picker/ContrastDetails.js | showLess": {
    "message": "Show less"
  },
  "color_picker/ContrastDetails.js | showMore": {
    "message": "Show more"
  },
  "color_picker/ContrastDetails.js | toggleBackgroundColorPicker": {
    "message": "Toggle background color picker"
  },
  "color_picker/ContrastDetails.js | useSuggestedColorStoFixLow": {
    "message": "Use suggested color {PH1}to fix low contrast"
  },
  "color_picker/Spectrum.js | addToPalette": {
    "message": "Add to palette"
  },
  "color_picker/Spectrum.js | changeAlpha": {
    "message": "Change alpha"
  },
  "color_picker/Spectrum.js | changeColorFormat": {
    "message": "Change color format"
  },
  "color_picker/Spectrum.js | changeHue": {
    "message": "Change hue"
  },
  "color_picker/Spectrum.js | clearPalette": {
    "message": "Clear palette"
  },
  "color_picker/Spectrum.js | colorPalettes": {
    "message": "Color Palettes"
  },
  "color_picker/Spectrum.js | colorS": {
    "message": "Color {PH1}"
  },
  "color_picker/Spectrum.js | copyColorToClipboard": {
    "message": "Copy color to clipboard"
  },
  "color_picker/Spectrum.js | hex": {
    "message": "HEX"
  },
  "color_picker/Spectrum.js | longclickOrLongpressSpaceToShow": {
    "message": "Long-click or long-press space to show alternate shades of {PH1}"
  },
  "color_picker/Spectrum.js | pressArrowKeysMessage": {
    "message": "Press arrow keys with or without modifiers to move swatch position. Arrow key with Shift key moves position largely, with Ctrl key it is less and with Alt key it is even less"
  },
  "color_picker/Spectrum.js | previewPalettes": {
    "message": "Preview palettes"
  },
  "color_picker/Spectrum.js | removeAllToTheRight": {
    "message": "Remove all to the right"
  },
  "color_picker/Spectrum.js | removeColor": {
    "message": "Remove color"
  },
  "color_picker/Spectrum.js | returnToColorPicker": {
    "message": "Return to color picker"
  },
  "color_picker/Spectrum.js | sInS": {
    "message": "{PH1} in {PH2}"
  },
  "color_picker/Spectrum.js | toggleColorPicker": {
    "message": "Toggle color picker"
  },
  "components/ImagePreview.js | imageFromS": {
    "message": "Image from {PH1}"
  },
  "components/ImagePreview.js | sSPx": {
    "message": "{PH1} × {PH2} px"
  },
  "components/ImagePreview.js | sSPxIntrinsicSSPx": {
    "message": "{PH1} × {PH2} px (intrinsic: {PH3} × {PH4} px)"
  },
  "components/ImagePreview.js | unknownSource": {
    "message": "unknown source"
  },
  "components/JSPresentationUtils.js | addToIgnore": {
    "message": "Add script to ignore list"
  },
  "components/JSPresentationUtils.js | removeFromIgnore": {
    "message": "Remove from ignore list"
  },
  "components/JSPresentationUtils.js | showMoreFrame": {
    "message": "Show 1 more frame"
  },
  "components/JSPresentationUtils.js | showSMoreFrames": {
    "message": "Show {PH1} more frames"
  },
  "components/JSPresentationUtils.js | unknownSource": {
    "message": "unknown"
  },
  "components/Linkifier.js | auto": {
    "message": "auto"
  },
  "components/Linkifier.js | linkHandling": {
    "message": "Link handling:"
  },
  "components/Linkifier.js | openUsingS": {
    "message": "Open using {PH1}"
  },
  "components/Linkifier.js | reveal": {
    "message": "Reveal"
  },
  "components/Linkifier.js | revealInS": {
    "message": "Reveal in {PH1}"
  },
  "components/Linkifier.js | unknown": {
    "message": "(unknown)"
  },
  "components/TargetDetachedDialog.js | websocketDisconnected": {
    "message": "WebSocket disconnected"
  },
  "console_counters/WarningErrorCounter.js | openConsoleToViewS": {
    "message": "Open Console to view {PH1}"
  },
  "console_counters/WarningErrorCounter.js | openIssuesToViewS": {
    "message": "Open Issues to view {PH1}"
  },
  "console_counters/WarningErrorCounter.js | openLighthouseToViewS": {
    "message": "Open Lighthouse to view {PH1}"
  },
  "console_counters/WarningErrorCounter.js | sError": {
    "message": "{PH1} error"
  },
  "console_counters/WarningErrorCounter.js | sErrors": {
    "message": "{PH1} errors"
  },
  "console_counters/WarningErrorCounter.js | sIssue": {
    "message": "{PH1} issue"
  },
  "console_counters/WarningErrorCounter.js | sIssues": {
    "message": "{PH1} issues"
  },
  "console_counters/WarningErrorCounter.js | sViolation": {
    "message": "{PH1} violation"
  },
  "console_counters/WarningErrorCounter.js | sViolations": {
    "message": "{PH1} violations"
  },
  "console_counters/WarningErrorCounter.js | sWarning": {
    "message": "{PH1} warning"
  },
  "console_counters/WarningErrorCounter.js | sWarnings": {
    "message": "{PH1} warnings"
  },
  "cookie_table/CookiesTable.ts | cookies": {
    "message": "Cookies"
  },
  "cookie_table/CookiesTable.ts | domain": {
    "message": "Domain"
  },
  "cookie_table/CookiesTable.ts | editableCookies": {
    "message": "Editable Cookies"
  },
  "cookie_table/CookiesTable.ts | expiresMaxage": {
    "message": "Expires / Max-Age"
  },
  "cookie_table/CookiesTable.ts | httponly": {
    "message": "HttpOnly"
  },
  "cookie_table/CookiesTable.ts | na": {
    "message": "N/A"
  },
  "cookie_table/CookiesTable.ts | name": {
    "message": "Name"
  },
  "cookie_table/CookiesTable.ts | path": {
    "message": "Path"
  },
  "cookie_table/CookiesTable.ts | priority": {
    "message": "Priority"
  },
  "cookie_table/CookiesTable.ts | samesite": {
    "message": "SameSite"
  },
  "cookie_table/CookiesTable.ts | secure": {
    "message": "Secure"
  },
  "cookie_table/CookiesTable.ts | session": {
    "message": "Session"
  },
  "cookie_table/CookiesTable.ts | showIssueAssociatedWithThis": {
    "message": "Show issue associated with this cookie"
  },
  "cookie_table/CookiesTable.ts | showRequestsWithThisCookie": {
    "message": "Show Requests With This Cookie"
  },
  "cookie_table/CookiesTable.ts | size": {
    "message": "Size"
  },
  "cookie_table/CookiesTable.ts | value": {
    "message": "Value"
  },
  "coverage/CoverageListView.ts | Byte": {
    "message": "1 byte"
  },
  "coverage/CoverageListView.ts | ByteS": {
    "message": "1 byte, {PH1}"
  },
  "coverage/CoverageListView.ts | codeCoverage": {
    "message": "Code Coverage"
  },
  "coverage/CoverageListView.ts | css": {
    "message": "CSS"
  },
  "coverage/CoverageListView.ts | jsCoverageWithPerBlock": {
    "message": "JS coverage with per block granularity: Once a block of JavaScript was executed, that block is marked as covered."
  },
  "coverage/CoverageListView.ts | jsCoverageWithPerFunction": {
    "message": "JS coverage with per function granularity: Once a function was executed, the whole function is marked as covered."
  },
  "coverage/CoverageListView.ts | jsPerBlock": {
    "message": "JS (per block)"
  },
  "coverage/CoverageListView.ts | jsPerFunction": {
    "message": "JS (per function)"
  },
  "coverage/CoverageListView.ts | sBytes": {
    "message": "{PH1} bytes"
  },
  "coverage/CoverageListView.ts | sBytesS": {
    "message": "{PH1} bytes, {PH2}"
  },
  "coverage/CoverageListView.ts | sBytesSBelongToBlocksOf": {
    "message": "{PH1} bytes ({PH2} %) belong to blocks of JavaScript that have not (yet) been executed."
  },
  "coverage/CoverageListView.ts | sBytesSBelongToBlocksOfJavascript": {
    "message": "{PH1} bytes ({PH2} %) belong to blocks of JavaScript that have executed at least once."
  },
  "coverage/CoverageListView.ts | sBytesSBelongToFunctionsThatHave": {
    "message": "{PH1} bytes ({PH2} %) belong to functions that have not (yet) been executed."
  },
  "coverage/CoverageListView.ts | sBytesSBelongToFunctionsThatHaveExecuted": {
    "message": "{PH1} bytes ({PH2} %) belong to functions that have executed at least once."
  },
  "coverage/CoverageListView.ts | sOfFileUnusedSOfFileUsed": {
    "message": "{PH1} % of file unused, {PH2} % of file used"
  },
  "coverage/CoverageListView.ts | sPercent": {
    "message": "{PH1} %"
  },
  "coverage/CoverageListView.ts | totalBytes": {
    "message": "Total Bytes"
  },
  "coverage/CoverageListView.ts | type": {
    "message": "Type"
  },
  "coverage/CoverageListView.ts | unusedBytes": {
    "message": "Unused Bytes"
  },
  "coverage/CoverageListView.ts | url": {
    "message": "URL"
  },
  "coverage/CoverageListView.ts | usageVisualization": {
    "message": "Usage Visualization"
  },
  "coverage/CoverageView.ts | all": {
    "message": "All"
  },
  "coverage/CoverageView.ts | chooseCoverageGranularityPer": {
    "message": "Choose coverage granularity: Per function has low overhead, per block has significant overhead."
  },
  "coverage/CoverageView.ts | clearAll": {
    "message": "Clear all"
  },
  "coverage/CoverageView.ts | clickTheRecordButtonSToStart": {
    "message": "Click the record button {PH1} to start capturing coverage."
  },
  "coverage/CoverageView.ts | clickTheReloadButtonSToReloadAnd": {
    "message": "Click the reload button {PH1} to reload and start capturing coverage."
  },
  "coverage/CoverageView.ts | contentScripts": {
    "message": "Content scripts"
  },
  "coverage/CoverageView.ts | css": {
    "message": "CSS"
  },
  "coverage/CoverageView.ts | export": {
    "message": "Export..."
  },
  "coverage/CoverageView.ts | filterCoverageByType": {
    "message": "Filter coverage by type"
  },
  "coverage/CoverageView.ts | filteredSTotalS": {
    "message": "Filtered: {PH1}  Total: {PH2}"
  },
  "coverage/CoverageView.ts | includeExtensionContentScripts": {
    "message": "Include extension content scripts"
  },
  "coverage/CoverageView.ts | javascript": {
    "message": "JavaScript"
  },
  "coverage/CoverageView.ts | perBlock": {
    "message": "Per block"
  },
  "coverage/CoverageView.ts | perFunction": {
    "message": "Per function"
  },
  "coverage/CoverageView.ts | sOfSSUsedSoFarSUnused": {
    "message": "{PH1} of {PH2} ({PH3}%) used so far,\n        {PH4} unused."
  },
  "coverage/CoverageView.ts | urlFilter": {
    "message": "URL filter"
  },
  "coverage/ModuleUIStrings.ts | instrumentCoverage": {
    "message": "Instrument coverage"
  },
  "coverage/ModuleUIStrings.ts | performance": {
    "message": "Performance"
  },
  "coverage/ModuleUIStrings.ts | startInstrumentingCoverageAnd": {
    "message": "Start instrumenting coverage and reload page"
  },
  "coverage/ModuleUIStrings.ts | stopInstrumentingCoverageAndShow": {
    "message": "Stop instrumenting coverage and show results"
  },
  "css_overview/css_overview-meta.ts | cssOverview": {
    "message": "CSS Overview"
  },
  "css_overview/CSSOverviewCompletedView.js | aa": {
    "message": "AA"
  },
  "css_overview/CSSOverviewCompletedView.js | aaa": {
    "message": "AAA"
  },
  "css_overview/CSSOverviewCompletedView.js | apca": {
    "message": "APCA"
  },
  "css_overview/CSSOverviewCompletedView.js | attributeSelectors": {
    "message": "Attribute selectors"
  },
  "css_overview/CSSOverviewCompletedView.js | backgroundColorsS": {
    "message": "Background colors: {PH1}"
  },
  "css_overview/CSSOverviewCompletedView.js | borderColorsS": {
    "message": "Border colors: {PH1}"
  },
  "css_overview/CSSOverviewCompletedView.js | classSelectors": {
    "message": "Class selectors"
  },
  "css_overview/CSSOverviewCompletedView.js | colors": {
    "message": "Colors"
  },
  "css_overview/CSSOverviewCompletedView.js | contrastIssues": {
    "message": "Contrast issues"
  },
  "css_overview/CSSOverviewCompletedView.js | contrastIssuesS": {
    "message": "Contrast issues: {PH1}"
  },
  "css_overview/CSSOverviewCompletedView.js | contrastRatio": {
    "message": "Contrast ratio"
  },
  "css_overview/CSSOverviewCompletedView.js | cssOverviewElements": {
    "message": "CSS Overview Elements"
  },
  "css_overview/CSSOverviewCompletedView.js | declaration": {
    "message": "Declaration"
  },
  "css_overview/CSSOverviewCompletedView.js | element": {
    "message": "Element"
  },
  "css_overview/CSSOverviewCompletedView.js | elements": {
    "message": "Elements"
  },
  "css_overview/CSSOverviewCompletedView.js | externalStylesheets": {
    "message": "External stylesheets"
  },
  "css_overview/CSSOverviewCompletedView.js | fillColorsS": {
    "message": "Fill colors: {PH1}"
  },
  "css_overview/CSSOverviewCompletedView.js | fontInfo": {
    "message": "Font info"
  },
  "css_overview/CSSOverviewCompletedView.js | idSelectors": {
    "message": "ID selectors"
  },
  "css_overview/CSSOverviewCompletedView.js | inlineStyleElements": {
    "message": "Inline style elements"
  },
  "css_overview/CSSOverviewCompletedView.js | mediaQueries": {
    "message": "Media queries"
  },
  "css_overview/CSSOverviewCompletedView.js | nonsimpleSelectors": {
    "message": "Non-simple selectors"
  },
  "css_overview/CSSOverviewCompletedView.js | occurrence": {
    "message": "occurrence"
  },
  "css_overview/CSSOverviewCompletedView.js | occurrences": {
    "message": "occurrences"
  },
  "css_overview/CSSOverviewCompletedView.js | overviewSummary": {
    "message": "Overview summary"
  },
  "css_overview/CSSOverviewCompletedView.js | showElement": {
    "message": "Show element"
  },
  "css_overview/CSSOverviewCompletedView.js | source": {
    "message": "Source"
  },
  "css_overview/CSSOverviewCompletedView.js | sS": {
    "message": "{PH1} {PH2}"
  },
  "css_overview/CSSOverviewCompletedView.js | styleRules": {
    "message": "Style rules"
  },
  "css_overview/CSSOverviewCompletedView.js | textColorSOverSBackgroundResults": {
    "message": "Text color {PH1} over {PH2} background results in low contrast for {PH3} elements"
  },
  "css_overview/CSSOverviewCompletedView.js | textColorsS": {
    "message": "Text colors: {PH1}"
  },
  "css_overview/CSSOverviewCompletedView.js | thereAreNoFonts": {
    "message": "There are no fonts."
  },
  "css_overview/CSSOverviewCompletedView.js | thereAreNoMediaQueries": {
    "message": "There are no media queries."
  },
  "css_overview/CSSOverviewCompletedView.js | thereAreNoUnusedDeclarations": {
    "message": "There are no unused declarations."
  },
  "css_overview/CSSOverviewCompletedView.js | typeSelectors": {
    "message": "Type selectors"
  },
  "css_overview/CSSOverviewCompletedView.js | universalSelectors": {
    "message": "Universal selectors"
  },
  "css_overview/CSSOverviewCompletedView.js | unusedDeclarations": {
    "message": "Unused declarations"
  },
  "css_overview/CSSOverviewProcessingView.js | cancel": {
    "message": "Cancel"
  },
  "css_overview/CSSOverviewSidebarPanel.js | clearOverview": {
    "message": "Clear overview"
  },
  "css_overview/CSSOverviewStartView.js | captureOverview": {
    "message": "Capture overview"
  },
  "css_overview/CSSOverviewStartView.js | cssOverview": {
    "message": "CSS Overview"
  },
  "css_overview/CSSOverviewUnusedDeclarations.js | bottomAppliedToAStatically": {
    "message": "Bottom applied to a statically positioned element"
  },
  "css_overview/CSSOverviewUnusedDeclarations.js | heightAppliedToAnInlineElement": {
    "message": "Height applied to an inline element"
  },
  "css_overview/CSSOverviewUnusedDeclarations.js | leftAppliedToAStatically": {
    "message": "Left applied to a statically positioned element"
  },
  "css_overview/CSSOverviewUnusedDeclarations.js | rightAppliedToAStatically": {
    "message": "Right applied to a statically positioned element"
  },
  "css_overview/CSSOverviewUnusedDeclarations.js | topAppliedToAStatically": {
    "message": "Top applied to a statically positioned element"
  },
  "css_overview/CSSOverviewUnusedDeclarations.js | verticalAlignmentAppliedTo": {
    "message": "Vertical alignment applied to element which is neither inline nor table-cell"
  },
  "css_overview/CSSOverviewUnusedDeclarations.js | widthAppliedToAnInlineElement": {
    "message": "Width applied to an inline element"
  },
  "developer_resources/developer_resources-meta.ts | developerResources": {
    "message": "Developer Resources"
  },
  "developer_resources/DeveloperResourcesListView.ts | Byte": {
    "message": "1 byte"
  },
  "developer_resources/DeveloperResourcesListView.ts | copyInitiatorUrl": {
    "message": "Copy initiator URL"
  },
  "developer_resources/DeveloperResourcesListView.ts | copyUrl": {
    "message": "Copy URL"
  },
  "developer_resources/DeveloperResourcesListView.ts | developerResources": {
    "message": "Developer Resources"
  },
  "developer_resources/DeveloperResourcesListView.ts | error": {
    "message": "Error"
  },
  "developer_resources/DeveloperResourcesListView.ts | failure": {
    "message": "failure"
  },
  "developer_resources/DeveloperResourcesListView.ts | initiator": {
    "message": "Initiator"
  },
  "developer_resources/DeveloperResourcesListView.ts | pending": {
    "message": "pending"
  },
  "developer_resources/DeveloperResourcesListView.ts | sBytes": {
    "message": "{PH1} bytes"
  },
  "developer_resources/DeveloperResourcesListView.ts | status": {
    "message": "Status"
  },
  "developer_resources/DeveloperResourcesListView.ts | success": {
    "message": "success"
  },
  "developer_resources/DeveloperResourcesListView.ts | totalBytes": {
    "message": "Total Bytes"
  },
  "developer_resources/DeveloperResourcesListView.ts | url": {
    "message": "URL"
  },
  "developer_resources/DeveloperResourcesView.ts | enableLoadingThroughTarget": {
    "message": "Enable loading through target"
  },
  "developer_resources/DeveloperResourcesView.ts | enterTextToSearchTheUrlAndError": {
    "message": "Enter text to search the URL and Error columns"
  },
  "developer_resources/DeveloperResourcesView.ts | loadHttpsDeveloperResources": {
    "message": "Load HTTP(S) developer resources through the inspected target"
  },
  "developer_resources/DeveloperResourcesView.ts | resources": {
    "message": "{PH1} resources"
  },
  "developer_resources/DeveloperResourcesView.ts | resourcesCurrentlyLoading": {
    "message": "{PH1} resources, {PH2} currently loading"
  },
  "devices/DevicesView.ts | thisPanelHasBeenDeprecatedIn": {
    "message": "This panel has been deprecated in favor of the {PH1} interface, which has equivalent functionality."
  },
  "devices/ModuleUIStrings.ts | android": {
    "message": "android"
  },
  "devices/ModuleUIStrings.ts | mobile": {
    "message": "mobile"
  },
  "devices/ModuleUIStrings.ts | remoteDevices": {
    "message": "Remote devices"
  },
  "devices/ModuleUIStrings.ts | usb": {
    "message": "usb"
  },
  "event_listeners/EventListenersView.ts | deleteEventListener": {
    "message": "Delete event listener"
  },
  "event_listeners/EventListenersView.ts | noEventListeners": {
    "message": "No event listeners"
  },
  "event_listeners/EventListenersView.ts | passive": {
    "message": "Passive"
  },
  "event_listeners/EventListenersView.ts | remove": {
    "message": "Remove"
  },
  "event_listeners/EventListenersView.ts | revealInElementsPanel": {
    "message": "Reveal in Elements panel"
  },
  "event_listeners/EventListenersView.ts | togglePassive": {
    "message": "Toggle Passive"
  },
  "event_listeners/EventListenersView.ts | toggleWhetherEventListenerIs": {
    "message": "Toggle whether event listener is passive or blocking"
  },
  "help/help-meta.ts | whatsNew": {
    "message": "What's New"
  },
  "help/ModuleUIStrings.ts | appearance": {
    "message": "Appearance"
  },
  "help/ModuleUIStrings.ts | bug": {
    "message": "bug"
  },
  "help/ModuleUIStrings.ts | doNotShowWhatsNewAfterEachUpdate": {
    "message": "Do not show What's New after each update"
  },
  "help/ModuleUIStrings.ts | help": {
    "message": "Help"
  },
  "help/ModuleUIStrings.ts | releaseNotes": {
    "message": "Release notes"
  },
  "help/ModuleUIStrings.ts | reportADevtoolsIssue": {
    "message": "Report a DevTools issue"
  },
  "help/ModuleUIStrings.ts | showWhatsNewAfterEachUpdate": {
    "message": "Show What's New after each update"
  },
  "help/ReleaseNoteView.ts | close": {
    "message": "Close"
  },
  "help/ReleaseNoteView.ts | learnMore": {
    "message": "Learn more"
  },
  "help/ReleaseNoteView.ts | s": {
    "message": "{PH1}"
  },
  "inline_editor/ColorSwatch.ts | shiftclickToChangeColorFormat": {
    "message": "Shift-click to change color format"
  },
  "inline_editor/CSSShadowEditor.js | blur": {
    "message": "Blur"
  },
  "inline_editor/CSSShadowEditor.js | inset": {
    "message": "Inset"
  },
  "inline_editor/CSSShadowEditor.js | outset": {
    "message": "Outset"
  },
  "inline_editor/CSSShadowEditor.js | spread": {
    "message": "Spread"
  },
  "inline_editor/CSSShadowEditor.js | type": {
    "message": "Type"
  },
  "inline_editor/CSSShadowEditor.js | xOffset": {
    "message": "X offset"
  },
  "inline_editor/CSSShadowEditor.js | yOffset": {
    "message": "Y offset"
  },
  "inline_editor/CSSVarSwatch.ts | jumpToDefinition": {
    "message": "Jump to definition"
  },
  "inline_editor/CSSVarSwatch.ts | sIsNotDefined": {
    "message": "{PH1} is not defined"
  },
  "inline_editor/FontEditor.js | cssProperties": {
    "message": "CSS Properties"
  },
  "inline_editor/FontEditor.js | deleteS": {
    "message": "Delete {PH1}"
  },
  "inline_editor/FontEditor.js | fallbackS": {
    "message": "Fallback {PH1}"
  },
  "inline_editor/FontEditor.js | fontFamily": {
    "message": "Font Family"
  },
  "inline_editor/FontEditor.js | fontSelectorDeletedAtIndexS": {
    "message": "Font Selector deleted at index: {PH1}"
  },
  "inline_editor/FontEditor.js | fontSize": {
    "message": "Font Size"
  },
  "inline_editor/FontEditor.js | fontWeight": {
    "message": "Font Weight"
  },
  "inline_editor/FontEditor.js | lineHeight": {
    "message": "Line Height"
  },
  "inline_editor/FontEditor.js | PleaseEnterAValidValueForSText": {
    "message": "* Please enter a valid value for {PH1} text input"
  },
  "inline_editor/FontEditor.js | selectorInputMode": {
    "message": "Selector Input Mode"
  },
  "inline_editor/FontEditor.js | sKeyValueSelector": {
    "message": "{PH1} Key Value Selector"
  },
  "inline_editor/FontEditor.js | sliderInputMode": {
    "message": "Slider Input Mode"
  },
  "inline_editor/FontEditor.js | spacing": {
    "message": "Spacing"
  },
  "inline_editor/FontEditor.js | sSliderInput": {
    "message": "{PH1} Slider Input"
  },
  "inline_editor/FontEditor.js | sTextInput": {
    "message": "{PH1} Text Input"
  },
  "inline_editor/FontEditor.js | sToggleInputType": {
    "message": "{PH1} Toggle Input Type"
  },
  "inline_editor/FontEditor.js | sUnitInput": {
    "message": "{PH1} Unit Input"
  },
  "inline_editor/FontEditor.js | thereIsNoValueToDeleteAtIndexS": {
    "message": "There is no value to delete at index: {PH1}"
  },
  "inline_editor/FontEditor.js | thisPropertyIsSetToContainUnits": {
    "message": "This property is set to contain units but does not have a defined corresponding unitsArray: {PH1}"
  },
  "inline_editor/FontEditor.js | units": {
    "message": "Units"
  },
  "input/InputTimeline.ts | clearAll": {
    "message": "Clear all"
  },
  "input/InputTimeline.ts | loadProfile": {
    "message": "Load profile…"
  },
  "input/InputTimeline.ts | saveProfile": {
    "message": "Save profile…"
  },
  "input/ModuleUIStrings.ts | inputs": {
    "message": "Inputs"
  },
  "input/ModuleUIStrings.ts | pause": {
    "message": "Pause"
  },
  "input/ModuleUIStrings.ts | resume": {
    "message": "Resume"
  },
  "input/ModuleUIStrings.ts | startRecording": {
    "message": "Start recording"
  },
  "input/ModuleUIStrings.ts | startReplaying": {
    "message": "Start replaying"
  },
  "input/ModuleUIStrings.ts | stopRecording": {
    "message": "Stop recording"
  },
  "js_profiler/js_profiler-meta.ts | profiler": {
    "message": "Profiler"
  },
  "layer_viewer/LayerDetailsView.ts | compositingReasons": {
    "message": "Compositing Reasons"
  },
  "layer_viewer/LayerDetailsView.ts | containingBlocRectangleDimensions": {
    "message": "Containing Block {PH1} × {PH2} (at {PH3}, {PH4})"
  },
  "layer_viewer/LayerDetailsView.ts | hasABackdropFilter": {
    "message": "Has a backdrop filter."
  },
  "layer_viewer/LayerDetailsView.ts | hasABlendingEffectThatNeedsToBe": {
    "message": "Has a blending effect that needs to be known by compositor because of composited descendants."
  },
  "layer_viewer/LayerDetailsView.ts | hasAClipThatNeedsToBeKnownBy": {
    "message": "Has a clip that needs to be known by compositor because of composited descendants."
  },
  "layer_viewer/LayerDetailsView.ts | hasADTransform": {
    "message": "Has a 3d transform."
  },
  "layer_viewer/LayerDetailsView.ts | hasAFilterEffectThatNeedsToBe": {
    "message": "Has a filter effect that needs to be known by compositor because of composited descendants."
  },
  "layer_viewer/LayerDetailsView.ts | hasAMaskThatNeedsToBeKnownBy": {
    "message": "Has a mask that needs to be known by compositor because of composited descendants."
  },
  "layer_viewer/LayerDetailsView.ts | hasAnActiveAcceleratedBackdrop": {
    "message": "Has an active accelerated backdrop filter animation or transition."
  },
  "layer_viewer/LayerDetailsView.ts | hasAnActiveAcceleratedFilter": {
    "message": "Has an active accelerated filter animation or transition."
  },
  "layer_viewer/LayerDetailsView.ts | hasAnActiveAcceleratedOpacity": {
    "message": "Has an active accelerated opacity animation or transition."
  },
  "layer_viewer/LayerDetailsView.ts | hasAnActiveAcceleratedTransform": {
    "message": "Has an active accelerated transform animation or transition."
  },
  "layer_viewer/LayerDetailsView.ts | hasAPerspectiveTransformThat": {
    "message": "Has a perspective transform that needs to be known by compositor because of 3d descendants."
  },
  "layer_viewer/LayerDetailsView.ts | hasAPreservesdPropertyThatNeeds": {
    "message": "Has a preserves-3d property that needs to be known by compositor because of 3d descendants."
  },
  "layer_viewer/LayerDetailsView.ts | hasAReflectionThatNeedsToBeKnown": {
    "message": "Has a reflection that needs to be known by compositor because of composited descendants."
  },
  "layer_viewer/LayerDetailsView.ts | hasAWillchangeCompositingHint": {
    "message": "Has a will-change compositing hint other than transform and opacity."
  },
  "layer_viewer/LayerDetailsView.ts | hasAWillchangeOpacityCompositing": {
    "message": "Has a will-change: opacity compositing hint."
  },
  "layer_viewer/LayerDetailsView.ts | hasAWillchangeTransform": {
    "message": "Has a will-change: transform compositing hint."
  },
  "layer_viewer/LayerDetailsView.ts | hasBackfacevisibilityHidden": {
    "message": "Has backface-visibility: hidden."
  },
  "layer_viewer/LayerDetailsView.ts | hasClippingAncestor": {
    "message": "Has clipping ancestor."
  },
  "layer_viewer/LayerDetailsView.ts | hasOpacityThatNeedsToBeAppliedBy": {
    "message": "Has opacity that needs to be applied by compositor because of composited descendants."
  },
  "layer_viewer/LayerDetailsView.ts | isAnAcceleratedCanvasOrIsA": {
    "message": "Is an accelerated canvas, or is a display list backed canvas that was promoted to a layer based on a performance heuristic."
  },
  "layer_viewer/LayerDetailsView.ts | isAnAcceleratedIframe": {
    "message": "Is an accelerated iFrame."
  },
  "layer_viewer/LayerDetailsView.ts | isAnAcceleratedPlugin": {
    "message": "Is an accelerated plugin."
  },
  "layer_viewer/LayerDetailsView.ts | isAnAcceleratedVideo": {
    "message": "Is an accelerated video."
  },
  "layer_viewer/LayerDetailsView.ts | isAPositionfixedElementWith": {
    "message": "Is a position:fixed element with composited descendants."
  },
  "layer_viewer/LayerDetailsView.ts | isAScrollableOverflowElement": {
    "message": "Is a scrollable overflow element."
  },
  "layer_viewer/LayerDetailsView.ts | isDomOverlayForWebxrImmersivear": {
    "message": "Is DOM overlay for WebXR immersive-ar mode."
  },
  "layer_viewer/LayerDetailsView.ts | isFixedOrStickyPosition": {
    "message": "Is fixed or sticky position."
  },
  "layer_viewer/LayerDetailsView.ts | isOverlayControlsForVideo": {
    "message": "Is overlay controls for video."
  },
  "layer_viewer/LayerDetailsView.ts | isTheDocumentrootscroller": {
    "message": "Is the document.rootScroller."
  },
  "layer_viewer/LayerDetailsView.ts | isTheRootLayer": {
    "message": "Is the root layer."
  },
  "layer_viewer/LayerDetailsView.ts | layerForLinkHighlightFrame": {
    "message": "Layer for link highlight, frame overlay, etc."
  },
  "layer_viewer/LayerDetailsView.ts | layerPaintedOnTopOfOtherLayersAs": {
    "message": "Layer painted on top of other layers as decoration."
  },
  "layer_viewer/LayerDetailsView.ts | layerWasSeparatelyComposited": {
    "message": "Layer was separately composited because it could not be squashed."
  },
  "layer_viewer/LayerDetailsView.ts | mainThreadScrollingReason": {
    "message": "Main thread scrolling reason"
  },
  "layer_viewer/LayerDetailsView.ts | memoryEstimate": {
    "message": "Memory estimate"
  },
  "layer_viewer/LayerDetailsView.ts | mightOverlapOtherComposited": {
    "message": "Might overlap other composited content."
  },
  "layer_viewer/LayerDetailsView.ts | nearestLayerShiftingContaining": {
    "message": "Nearest Layer Shifting Containing Block"
  },
  "layer_viewer/LayerDetailsView.ts | nearestLayerShiftingStickyBox": {
    "message": "Nearest Layer Shifting Sticky Box"
  },
  "layer_viewer/LayerDetailsView.ts | nonFastScrollable": {
    "message": "Non fast scrollable"
  },
  "layer_viewer/LayerDetailsView.ts | overlapsOtherCompositedContent": {
    "message": "Overlaps other composited content."
  },
  "layer_viewer/LayerDetailsView.ts | paintCount": {
    "message": "Paint count"
  },
  "layer_viewer/LayerDetailsView.ts | paintProfiler": {
    "message": "Paint Profiler"
  },
  "layer_viewer/LayerDetailsView.ts | parentWithCompositedNegative": {
    "message": "Parent with composited negative z-index content."
  },
  "layer_viewer/LayerDetailsView.ts | repaintsOnScroll": {
    "message": "Repaints on scroll"
  },
  "layer_viewer/LayerDetailsView.ts | scrollParentIsNotAnAncestor": {
    "message": "Scroll parent is not an ancestor."
  },
  "layer_viewer/LayerDetailsView.ts | scrollRectangleDimensions": {
    "message": "{PH1} {PH2} × {PH3} (at {PH4}, {PH5})"
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerHomeForAGroupOf": {
    "message": "Secondary layer, home for a group of squashable content."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerNoopLayerToPlace": {
    "message": "Secondary layer, no-op layer to place the squashing layer correctly in the composited layer tree."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerTheHorizontal": {
    "message": "Secondary layer, the horizontal scrollbar layer."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerTheOverflow": {
    "message": "Secondary layer, the overflow controls host layer."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerTheScrollCorner": {
    "message": "Secondary layer, the scroll corner layer."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerTheVertical": {
    "message": "Secondary layer, the vertical scrollbar layer."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerToContainAnyNormal": {
    "message": "Secondary layer, to contain any normal flow and positive z-index contents on top of a negative z-index layer."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerToContainTheMask": {
    "message": "Secondary layer, to contain the mask contents."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerToHouseContents": {
    "message": "Secondary layer, to house contents that can be scrolled."
  },
  "layer_viewer/LayerDetailsView.ts | secondaryLayerUsedToPositionThe": {
    "message": "Secondary layer, used to position the scrolling contents while scrolling."
  },
  "layer_viewer/LayerDetailsView.ts | selectALayerToSeeItsDetails": {
    "message": "Select a layer to see its details"
  },
  "layer_viewer/LayerDetailsView.ts | shouldIsolateDescendantsToApplyA": {
    "message": "Should isolate descendants to apply a blend effect."
  },
  "layer_viewer/LayerDetailsView.ts | size": {
    "message": "Size"
  },
  "layer_viewer/LayerDetailsView.ts | slowScrollRegions": {
    "message": "Slow scroll regions"
  },
  "layer_viewer/LayerDetailsView.ts | stickyAncenstorLayersS": {
    "message": "{PH1}: {PH2} ({PH3})"
  },
  "layer_viewer/LayerDetailsView.ts | stickyBoxRectangleDimensions": {
    "message": "Sticky Box {PH1} × {PH2} (at {PH3}, {PH4})"
  },
  "layer_viewer/LayerDetailsView.ts | stickyPositionConstraint": {
    "message": "Sticky position constraint"
  },
  "layer_viewer/LayerDetailsView.ts | touchEventHandler": {
    "message": "Touch event handler"
  },
  "layer_viewer/LayerDetailsView.ts | unnamed": {
    "message": "<unnamed>"
  },
  "layer_viewer/LayerDetailsView.ts | updateRectangleDimensions": {
    "message": "{PH1} × {PH2} (at {PH3},{PH4})"
  },
  "layer_viewer/LayerDetailsView.ts | wheelEventHandler": {
    "message": "Wheel event handler"
  },
  "layer_viewer/Layers3DView.ts | cantDisplayLayers": {
    "message": "Can't display layers,"
  },
  "layer_viewer/Layers3DView.ts | checkSForPossibleReasons": {
    "message": "Check {PH1} for possible reasons."
  },
  "layer_viewer/Layers3DView.ts | dLayersView": {
    "message": "3D Layers View"
  },
  "layer_viewer/Layers3DView.ts | layerInformationIsNotYet": {
    "message": "Layer information is not yet available."
  },
  "layer_viewer/Layers3DView.ts | mousewheelEventListener": {
    "message": "mousewheel event listener"
  },
  "layer_viewer/Layers3DView.ts | paints": {
    "message": "Paints"
  },
  "layer_viewer/Layers3DView.ts | repaintsOnScroll": {
    "message": "repaints on scroll"
  },
  "layer_viewer/Layers3DView.ts | resetView": {
    "message": "Reset View"
  },
  "layer_viewer/Layers3DView.ts | showPaintProfiler": {
    "message": "Show Paint Profiler"
  },
  "layer_viewer/Layers3DView.ts | slowScrollRects": {
    "message": "Slow scroll rects"
  },
  "layer_viewer/Layers3DView.ts | touchEventListener": {
    "message": "touch event listener"
  },
  "layer_viewer/Layers3DView.ts | webglSupportIsDisabledInYour": {
    "message": "WebGL support is disabled in your browser."
  },
  "layer_viewer/LayerTreeOutline.ts | layersTreePane": {
    "message": "Layers Tree Pane"
  },
  "layer_viewer/LayerTreeOutline.ts | showPaintProfiler": {
    "message": "Show Paint Profiler"
  },
  "layer_viewer/LayerTreeOutline.ts | updateChildDimension": {
    "message": " ({PH1} × {PH2})"
  },
  "layer_viewer/LayerViewHost.ts | showInternalLayers": {
    "message": "Show internal layers"
  },
  "layer_viewer/ModuleUIStrings.ts | layers": {
    "message": "Layers"
  },
  "layer_viewer/ModuleUIStrings.ts | panOrRotateDown": {
    "message": "Pan or rotate down"
  },
  "layer_viewer/ModuleUIStrings.ts | panOrRotateLeft": {
    "message": "Pan or rotate left"
  },
  "layer_viewer/ModuleUIStrings.ts | panOrRotateRight": {
    "message": "Pan or rotate right"
  },
  "layer_viewer/ModuleUIStrings.ts | panOrRotateUp": {
    "message": "Pan or rotate up"
  },
  "layer_viewer/ModuleUIStrings.ts | resetView": {
    "message": "Reset view"
  },
  "layer_viewer/ModuleUIStrings.ts | switchToPanMode": {
    "message": "Switch to pan mode"
  },
  "layer_viewer/ModuleUIStrings.ts | switchToRotateMode": {
    "message": "Switch to rotate mode"
  },
  "layer_viewer/ModuleUIStrings.ts | zoomIn": {
    "message": "Zoom in"
  },
  "layer_viewer/ModuleUIStrings.ts | zoomOut": {
    "message": "Zoom out"
  },
  "layer_viewer/PaintProfilerView.ts | bitmap": {
    "message": "Bitmap"
  },
  "layer_viewer/PaintProfilerView.ts | commandLog": {
    "message": "Command Log"
  },
  "layer_viewer/PaintProfilerView.ts | misc": {
    "message": "Misc"
  },
  "layer_viewer/PaintProfilerView.ts | profiling": {
    "message": "Profiling…"
  },
  "layer_viewer/PaintProfilerView.ts | profilingResults": {
    "message": "Profiling results"
  },
  "layer_viewer/PaintProfilerView.ts | shapes": {
    "message": "Shapes"
  },
  "layer_viewer/PaintProfilerView.ts | text": {
    "message": "Text"
  },
  "layer_viewer/TransformController.ts | panModeX": {
    "message": "Pan mode (X)"
  },
  "layer_viewer/TransformController.ts | resetTransform": {
    "message": "Reset transform (0)"
  },
  "layer_viewer/TransformController.ts | rotateModeV": {
    "message": "Rotate mode (V)"
  },
  "layers/layers-meta.ts | layers": {
    "message": "Layers"
  },
  "layers/LayersPanel.ts | details": {
    "message": "Details"
  },
  "layers/LayersPanel.ts | profiler": {
    "message": "Profiler"
  },
  "lighthouse/lighthouse-meta.ts | lighthouse": {
    "message": "Lighthouse"
  },
  "lighthouse/lighthouse-meta.ts | lighthouseTag": {
    "message": "lighthouse"
  },
  "lighthouse/lighthouse-meta.ts | pwa": {
    "message": "pwa"
  },
  "lighthouse/LighthouseController.ts | accessibility": {
    "message": "Accessibility"
  },
  "lighthouse/LighthouseController.ts | applyMobileEmulation": {
    "message": "Apply mobile emulation"
  },
  "lighthouse/LighthouseController.ts | applyMobileEmulationDuring": {
    "message": "Apply mobile emulation during auditing"
  },
  "lighthouse/LighthouseController.ts | atLeastOneCategoryMustBeSelected": {
    "message": "At least one category must be selected."
  },
  "lighthouse/LighthouseController.ts | bestPractices": {
    "message": "Best practices"
  },
  "lighthouse/LighthouseController.ts | canOnlyAuditHttphttpsPagesAnd": {
    "message": "Can only audit HTTP/HTTPS pages and Chrome extensions. Navigate to a different page to start an audit."
  },
  "lighthouse/LighthouseController.ts | clearStorage": {
    "message": "Clear storage"
  },
  "lighthouse/LighthouseController.ts | desktop": {
    "message": "Desktop"
  },
  "lighthouse/LighthouseController.ts | doesThisPageFollowBestPractices": {
    "message": "Does this page follow best practices for modern web development"
  },
  "lighthouse/LighthouseController.ts | doesThisPageMeetTheStandardOfA": {
    "message": "Does this page meet the standard of a Progressive Web App"
  },
  "lighthouse/LighthouseController.ts | howLongDoesThisAppTakeToShow": {
    "message": "How long does this app take to show content and become usable"
  },
  "lighthouse/LighthouseController.ts | indexeddb": {
    "message": "IndexedDB"
  },
  "lighthouse/LighthouseController.ts | isThisPageOptimizedForAdSpeedAnd": {
    "message": "Is this page optimized for ad speed and quality"
  },
  "lighthouse/LighthouseController.ts | isThisPageOptimizedForSearch": {
    "message": "Is this page optimized for search engine results ranking"
  },
  "lighthouse/LighthouseController.ts | isThisPageUsableByPeopleWith": {
    "message": "Is this page usable by people with disabilities or impairments"
  },
  "lighthouse/LighthouseController.ts | localStorage": {
    "message": "Local Storage"
  },
  "lighthouse/LighthouseController.ts | mobile": {
    "message": "Mobile"
  },
  "lighthouse/LighthouseController.ts | multipleTabsAreBeingControlledBy": {
    "message": "Multiple tabs are being controlled by the same service worker. Close your other tabs on the same origin to audit this page."
  },
  "lighthouse/LighthouseController.ts | performance": {
    "message": "Performance"
  },
  "lighthouse/LighthouseController.ts | progressiveWebApp": {
    "message": "Progressive Web App"
  },
  "lighthouse/LighthouseController.ts | publisherAds": {
    "message": "Publisher Ads"
  },
  "lighthouse/LighthouseController.ts | resetStorageLocalstorage": {
    "message": "Reset storage (localStorage, IndexedDB, etc) before auditing. (Good for performance & PWA testing)"
  },
  "lighthouse/LighthouseController.ts | seo": {
    "message": "SEO"
  },
  "lighthouse/LighthouseController.ts | simulateASlowerPageLoadBasedOn": {
    "message": "Simulate a slower page load, based on data from an initial unthrottled load. If disabled, the page is actually slowed with applied throttling."
  },
  "lighthouse/LighthouseController.ts | simulatedThrottling": {
    "message": "Simulated throttling"
  },
  "lighthouse/LighthouseController.ts | thereMayBeStoredDataAffectingLoadingPlural": {
    "message": "There may be stored data affecting loading performance in these locations: {PH1}. Audit this page in an incognito window to prevent those resources from affecting your scores."
  },
  "lighthouse/LighthouseController.ts | thereMayBeStoredDataAffectingSingular": {
    "message": "There may be stored data affecting loading performance in this location: {PH1}. Audit this page in an incognito window to prevent those resources from affecting your scores."
  },
  "lighthouse/LighthouseController.ts | webSql": {
    "message": "Web SQL"
  },
  "lighthouse/LighthousePanel.ts | cancelling": {
    "message": "Cancelling"
  },
  "lighthouse/LighthousePanel.ts | clearAll": {
    "message": "Clear all"
  },
  "lighthouse/LighthousePanel.ts | dropLighthouseJsonHere": {
    "message": "Drop Lighthouse JSON here"
  },
  "lighthouse/LighthousePanel.ts | lighthouseSettings": {
    "message": "Lighthouse settings"
  },
  "lighthouse/LighthousePanel.ts | performAnAudit": {
    "message": "Perform an audit…"
  },
  "lighthouse/LighthousePanel.ts | printing": {
    "message": "Printing"
  },
  "lighthouse/LighthousePanel.ts | thePrintPopupWindowIsOpenPlease": {
    "message": "The print popup window is open. Please close it to continue."
  },
  "lighthouse/LighthouseReportRenderer.ts | thePerformanceMetricsAboveAre": {
    "message": "The performance metrics above are simulated and won't match the timings found in this trace. Disable simulated throttling in \"Lighthouse Settings\" if you want the timings to match."
  },
  "lighthouse/LighthouseReportRenderer.ts | viewOriginalTrace": {
    "message": "View Original Trace"
  },
  "lighthouse/LighthouseReportRenderer.ts | viewTrace": {
    "message": "View Trace"
  },
  "lighthouse/LighthouseReportSelector.ts | newReport": {
    "message": "(new report)"
  },
  "lighthouse/LighthouseReportSelector.ts | reports": {
    "message": "Reports"
  },
  "lighthouse/LighthouseStartView.ts | categories": {
    "message": "Categories"
  },
  "lighthouse/LighthouseStartView.ts | communityPluginsBeta": {
    "message": "Community Plugins (beta)"
  },
  "lighthouse/LighthouseStartView.ts | device": {
    "message": "Device"
  },
  "lighthouse/LighthouseStartView.ts | generateReport": {
    "message": "Generate report"
  },
  "lighthouse/LighthouseStartView.ts | identifyAndFixCommonProblemsThat": {
    "message": "Identify and fix common problems that affect your site's performance, accessibility, and user experience."
  },
  "lighthouse/LighthouseStartView.ts | learnMore": {
    "message": "Learn more"
  },
  "lighthouse/LighthouseStatusView.ts | ahSorryWeRanIntoAnError": {
    "message": "Ah, sorry! We ran into an error."
  },
  "lighthouse/LighthouseStatusView.ts | almostThereLighthouseIsNow": {
    "message": "Almost there! Lighthouse is now generating your report."
  },
  "lighthouse/LighthouseStatusView.ts | asPageLoadTimeIncreasesFromOne": {
    "message": "As page load time increases from one second to seven seconds, the probability of a mobile site visitor bouncing increases 113%. [Source: Think with Google]"
  },
  "lighthouse/LighthouseStatusView.ts | asTheNumberOfElementsOnAPage": {
    "message": "As the number of elements on a page increases from 400 to 6,000, the probability of conversion drops 95%. [Source: Think with Google]"
  },
  "lighthouse/LighthouseStatusView.ts | auditingS": {
    "message": "Auditing {PH1}"
  },
  "lighthouse/LighthouseStatusView.ts | auditingYourWebPage": {
    "message": "Auditing your web page"
  },
  "lighthouse/LighthouseStatusView.ts | byReducingTheResponseSizeOfJson": {
    "message": "By reducing the response size of JSON needed for displaying comments, Instagram saw increased impressions [Source: WPO Stats]"
  },
  "lighthouse/LighthouseStatusView.ts | cancel": {
    "message": "Cancel"
  },
  "lighthouse/LighthouseStatusView.ts | cancelling": {
    "message": "Cancelling…"
  },
  "lighthouse/LighthouseStatusView.ts | fastFactMessageWithPlaceholder": {
    "message": "💡 {PH1}"
  },
  "lighthouse/LighthouseStatusView.ts | ifASiteTakesSecondToBecome": {
    "message": "If a site takes >1 second to become interactive, users lose attention, and their perception of completing the page task is broken [Source: Google Developers Blog]"
  },
  "lighthouse/LighthouseStatusView.ts | ifThisIssueIsReproduciblePlease": {
    "message": "If this issue is reproducible, please report it at the Lighthouse GitHub repo."
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseIsGatheringInformation": {
    "message": "Lighthouse is gathering information about the page to compute your score."
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseIsLoadingThePage": {
    "message": "Lighthouse is loading the page."
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseIsLoadingYourPage": {
    "message": "Lighthouse is loading your page"
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseIsLoadingYourPageWith": {
    "message": "Lighthouse is loading your page with throttling to measure performance on a mobile device on 3G."
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseIsLoadingYourPageWithMobile": {
    "message": "Lighthouse is loading your page with mobile emulation."
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseIsLoadingYourPageWithThrottling": {
    "message": "Lighthouse is loading your page with throttling to measure performance on a slow desktop on 3G."
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseIsWarmingUp": {
    "message": "Lighthouse is warming up…"
  },
  "lighthouse/LighthouseStatusView.ts | lighthouseOnlySimulatesMobile": {
    "message": "Lighthouse only simulates mobile performance; to measure performance on a real device, try WebPageTest.org [Source: Lighthouse team]"
  },
  "lighthouse/LighthouseStatusView.ts | loading": {
    "message": "Loading…"
  },
  "lighthouse/LighthouseStatusView.ts | mbTakesAMinimumOfSecondsTo": {
    "message": "1MB takes a minimum of 5 seconds to download on a typical 3G connection [Source: WebPageTest and DevTools 3G definition]."
  },
  "lighthouse/LighthouseStatusView.ts | OfGlobalMobileUsersInWereOnGOrG": {
    "message": "75% of global mobile users in 2016 were on 2G or 3G [Source: GSMA Mobile]"
  },
  "lighthouse/LighthouseStatusView.ts | OfMobilePagesTakeNearlySeconds": {
    "message": "70% of mobile pages take nearly 7 seconds for the visual content above the fold to display on the screen. [Source: Think with Google]"
  },
  "lighthouse/LighthouseStatusView.ts | rebuildingPinterestPagesFor": {
    "message": "Rebuilding Pinterest pages for performance increased conversion rates by 15% [Source: WPO Stats]"
  },
  "lighthouse/LighthouseStatusView.ts | SecondsIsTheAverageTimeAMobile": {
    "message": "19 seconds is the average time a mobile web page takes to load on a 3G connection [Source: Google DoubleClick blog]"
  },
  "lighthouse/LighthouseStatusView.ts | theAverageUserDeviceCostsLess": {
    "message": "The average user device costs less than 200 USD. [Source: International Data Corporation]"
  },
  "lighthouse/LighthouseStatusView.ts | tryToNavigateToTheUrlInAFresh": {
    "message": "Try to navigate to the URL in a fresh Chrome profile without any other tabs or extensions open and try again."
  },
  "lighthouse/LighthouseStatusView.ts | walmartSawAIncreaseInRevenueFor": {
    "message": "Walmart saw a 1% increase in revenue for every 100ms improvement in page load [Source: WPO Stats]"
  },
  "media/EventDisplayTable.ts | eventDisplay": {
    "message": "Event display"
  },
  "media/EventDisplayTable.ts | eventName": {
    "message": "Event name"
  },
  "media/EventDisplayTable.ts | timestamp": {
    "message": "Timestamp"
  },
  "media/EventDisplayTable.ts | value": {
    "message": "Value"
  },
  "media/EventTimelineView.ts | bufferingStatus": {
    "message": "Buffering Status"
  },
  "media/EventTimelineView.ts | playbackStatus": {
    "message": "Playback Status"
  },
  "media/media-meta.ts | media": {
    "message": "Media"
  },
  "media/media-meta.ts | video": {
    "message": "video"
  },
  "media/PlayerDetailView.ts | events": {
    "message": "Events"
  },
  "media/PlayerDetailView.ts | messages": {
    "message": "Messages"
  },
  "media/PlayerDetailView.ts | playerEvents": {
    "message": "Player events"
  },
  "media/PlayerDetailView.ts | playerMessages": {
    "message": "Player messages"
  },
  "media/PlayerDetailView.ts | playerProperties": {
    "message": "Player properties"
  },
  "media/PlayerDetailView.ts | playerTimeline": {
    "message": "Player timeline"
  },
  "media/PlayerDetailView.ts | properties": {
    "message": "Properties"
  },
  "media/PlayerDetailView.ts | timeline": {
    "message": "Timeline"
  },
  "media/PlayerListView.ts | hideAllOthers": {
    "message": "Hide all others"
  },
  "media/PlayerListView.ts | hidePlayer": {
    "message": "Hide player"
  },
  "media/PlayerListView.ts | players": {
    "message": "Players"
  },
  "media/PlayerListView.ts | savePlayerInfo": {
    "message": "Save player info"
  },
  "media/PlayerMessagesView.ts | all": {
    "message": "All"
  },
  "media/PlayerMessagesView.ts | custom": {
    "message": "Custom"
  },
  "media/PlayerMessagesView.ts | debug": {
    "message": "Debug"
  },
  "media/PlayerMessagesView.ts | default": {
    "message": "Default"
  },
  "media/PlayerMessagesView.ts | error": {
    "message": "Error"
  },
  "media/PlayerMessagesView.ts | filterLogMessages": {
    "message": "Filter log messages"
  },
  "media/PlayerMessagesView.ts | info": {
    "message": "Info"
  },
  "media/PlayerMessagesView.ts | logLevel": {
    "message": "Log level:"
  },
  "media/PlayerMessagesView.ts | warning": {
    "message": "Warning"
  },
  "media/PlayerPropertiesView.ts | audio": {
    "message": "Audio"
  },
  "media/PlayerPropertiesView.ts | bitrate": {
    "message": "Bitrate"
  },
  "media/PlayerPropertiesView.ts | decoder": {
    "message": "Decoder"
  },
  "media/PlayerPropertiesView.ts | decoderName": {
    "message": "Decoder name"
  },
  "media/PlayerPropertiesView.ts | decryptingDemuxer": {
    "message": "Decrypting demuxer"
  },
  "media/PlayerPropertiesView.ts | duration": {
    "message": "Duration"
  },
  "media/PlayerPropertiesView.ts | encoderName": {
    "message": "Encoder name"
  },
  "media/PlayerPropertiesView.ts | fileSize": {
    "message": "File size"
  },
  "media/PlayerPropertiesView.ts | frameRate": {
    "message": "Frame rate"
  },
  "media/PlayerPropertiesView.ts | hardwareDecoder": {
    "message": "Hardware decoder"
  },
  "media/PlayerPropertiesView.ts | hardwareEncoder": {
    "message": "Hardware encoder"
  },
  "media/PlayerPropertiesView.ts | noDecoder": {
    "message": "No decoder"
  },
  "media/PlayerPropertiesView.ts | noEncoder": {
    "message": "No encoder"
  },
  "media/PlayerPropertiesView.ts | noTextTracks": {
    "message": "No text tracks"
  },
  "media/PlayerPropertiesView.ts | playbackFrameTitle": {
    "message": "Playback frame title"
  },
  "media/PlayerPropertiesView.ts | playbackFrameUrl": {
    "message": "Playback frame URL"
  },
  "media/PlayerPropertiesView.ts | properties": {
    "message": "Properties"
  },
  "media/PlayerPropertiesView.ts | rangeHeaderSupport": {
    "message": "Range header support"
  },
  "media/PlayerPropertiesView.ts | resolution": {
    "message": "Resolution"
  },
  "media/PlayerPropertiesView.ts | singleoriginPlayback": {
    "message": "Single-origin playback"
  },
  "media/PlayerPropertiesView.ts | startTime": {
    "message": "Start time"
  },
  "media/PlayerPropertiesView.ts | streaming": {
    "message": "Streaming"
  },
  "media/PlayerPropertiesView.ts | textTrack": {
    "message": "Text track"
  },
  "media/PlayerPropertiesView.ts | track": {
    "message": "Track"
  },
  "media/PlayerPropertiesView.ts | video": {
    "message": "Video"
  },
  "media/PlayerPropertiesView.ts | videoFreezingScore": {
    "message": "Video freezing score"
  },
  "media/PlayerPropertiesView.ts | videoPlaybackRoughness": {
    "message": "Video playback roughness"
  },
  "mobile_throttling/mobile_throttling-meta.ts | throttling": {
    "message": "Throttling"
  },
  "mobile_throttling/MobileThrottlingSelector.ts | advanced": {
    "message": "Advanced"
  },
  "mobile_throttling/MobileThrottlingSelector.ts | disabled": {
    "message": "Disabled"
  },
  "mobile_throttling/MobileThrottlingSelector.ts | presets": {
    "message": "Presets"
  },
  "mobile_throttling/ModuleUIStrings.ts | device": {
    "message": "device"
  },
  "mobile_throttling/ModuleUIStrings.ts | enableFastGThrottling": {
    "message": "Enable fast 3G throttling"
  },
  "mobile_throttling/ModuleUIStrings.ts | enableSlowGThrottling": {
    "message": "Enable slow 3G throttling"
  },
  "mobile_throttling/ModuleUIStrings.ts | goOffline": {
    "message": "Go offline"
  },
  "mobile_throttling/ModuleUIStrings.ts | goOnline": {
    "message": "Go online"
  },
  "mobile_throttling/ModuleUIStrings.ts | network": {
    "message": "Network"
  },
  "mobile_throttling/ModuleUIStrings.ts | throttling": {
    "message": "throttling"
  },
  "mobile_throttling/NetworkPanelIndicator.ts | networkThrottlingIsEnabled": {
    "message": "Network throttling is enabled"
  },
  "mobile_throttling/NetworkPanelIndicator.ts | requestsMayBeBlocked": {
    "message": "Requests may be blocked"
  },
  "mobile_throttling/NetworkPanelIndicator.ts | requestsMayBeRewrittenByLocal": {
    "message": "Requests may be rewritten by local overrides"
  },
  "mobile_throttling/NetworkThrottlingSelector.ts | custom": {
    "message": "Custom"
  },
  "mobile_throttling/NetworkThrottlingSelector.ts | disabled": {
    "message": "Disabled"
  },
  "mobile_throttling/NetworkThrottlingSelector.ts | presets": {
    "message": "Presets"
  },
  "mobile_throttling/ThrottlingManager.ts | add": {
    "message": "Add…"
  },
  "mobile_throttling/ThrottlingManager.ts | addS": {
    "message": "Add {PH1}"
  },
  "mobile_throttling/ThrottlingManager.ts | cpuThrottling": {
    "message": "CPU throttling"
  },
  "mobile_throttling/ThrottlingManager.ts | cpuThrottlingIsEnabled": {
    "message": "CPU throttling is enabled"
  },
  "mobile_throttling/ThrottlingManager.ts | dSlowdown": {
    "message": "{PH1}× slowdown"
  },
  "mobile_throttling/ThrottlingManager.ts | forceDisconnectedFromNetwork": {
    "message": "Force disconnected from network"
  },
  "mobile_throttling/ThrottlingManager.ts | noThrottling": {
    "message": "No throttling"
  },
  "mobile_throttling/ThrottlingManager.ts | offline": {
    "message": "Offline"
  },
  "mobile_throttling/ThrottlingManager.ts | sS": {
    "message": "{PH1}: {PH2}"
  },
  "mobile_throttling/ThrottlingManager.ts | throttling": {
    "message": "Throttling"
  },
  "mobile_throttling/ThrottlingPresets.ts | checkNetworkAndPerformancePanels": {
    "message": "Check Network and Performance panels"
  },
  "mobile_throttling/ThrottlingPresets.ts | custom": {
    "message": "Custom"
  },
  "mobile_throttling/ThrottlingPresets.ts | fastGXCpuSlowdown": {
    "message": "Fast 3G & 4x CPU slowdown"
  },
  "mobile_throttling/ThrottlingPresets.ts | lowendMobile": {
    "message": "Low-end mobile"
  },
  "mobile_throttling/ThrottlingPresets.ts | midtierMobile": {
    "message": "Mid-tier mobile"
  },
  "mobile_throttling/ThrottlingPresets.ts | noInternetConnectivity": {
    "message": "No internet connectivity"
  },
  "mobile_throttling/ThrottlingPresets.ts | noThrottling": {
    "message": "No throttling"
  },
  "mobile_throttling/ThrottlingPresets.ts | slowGXCpuSlowdown": {
    "message": "Slow 3G & 6x CPU slowdown"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | addCustomProfile": {
    "message": "Add custom profile..."
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | dms": {
    "message": "{PH1}ms"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | download": {
    "message": "Download"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | dskbs": {
    "message": "{PH1}{PH2}kB/s"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | fsmbs": {
    "message": "{PH1}{PH2}MB/s"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | kbs": {
    "message": "kb/s"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | latency": {
    "message": "Latency"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | latencyMustBeAnIntegerBetweenSms": {
    "message": "Latency must be an integer between {PH1}ms to {PH2}ms inclusive"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | ms": {
    "message": "ms"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | networkThrottlingProfiles": {
    "message": "Network Throttling Profiles"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | optional": {
    "message": "optional"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | profileName": {
    "message": "Profile Name"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | profileNameCharactersLengthMust": {
    "message": "Profile Name characters length must be between 1 to {PH1} inclusive"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | sMustBeANumberBetweenSkbsToSkbs": {
    "message": "{PH1} must be a number between {PH2}kb/s to {PH3}kb/s inclusive"
  },
  "mobile_throttling/ThrottlingSettingsTab.ts | upload": {
    "message": "Upload"
  },
  "node_debugger/node_debugger-meta.ts | node": {
    "message": "Node"
  },
  "node_main/node_main-meta.ts | connection": {
    "message": "Connection"
  },
  "node_main/node_main-meta.ts | node": {
    "message": "node"
  },
  "node_main/NodeConnectionsPanel.js | addConnection": {
    "message": "Add connection"
  },
  "node_main/NodeConnectionsPanel.js | networkAddressEgLocalhost": {
    "message": "Network address (e.g. localhost:9229)"
  },
  "node_main/NodeConnectionsPanel.js | noConnectionsSpecified": {
    "message": "No connections specified"
  },
  "node_main/NodeConnectionsPanel.js | nodejsDebuggingGuide": {
    "message": "Node.js debugging guide"
  },
  "node_main/NodeConnectionsPanel.js | specifyNetworkEndpointAnd": {
    "message": "Specify network endpoint and DevTools will connect to it automatically. Read {PH1} to learn more."
  },
  "node_main/NodeMain.js | main": {
    "message": "Main"
  },
  "node_main/NodeMain.js | nodejsS": {
    "message": "Node.js: {PH1}"
  },
  "perf_ui/FilmStripView.js | doubleclickToZoomImageClickTo": {
    "message": "Doubleclick to zoom image. Click to view preceding requests."
  },
  "perf_ui/FilmStripView.js | nextFrame": {
    "message": "Next frame"
  },
  "perf_ui/FilmStripView.js | previousFrame": {
    "message": "Previous frame"
  },
  "perf_ui/FilmStripView.js | screenshot": {
    "message": "Screenshot"
  },
  "perf_ui/FilmStripView.js | screenshotForSSelectToView": {
    "message": "Screenshot for {PH1} - select to view preceding requests."
  },
  "perf_ui/FlameChart.js | flameChart": {
    "message": "Flame Chart"
  },
  "perf_ui/FlameChart.js | sCollapsed": {
    "message": "{PH1} collapsed"
  },
  "perf_ui/FlameChart.js | sExpanded": {
    "message": "{PH1} expanded"
  },
  "perf_ui/FlameChart.js | sHovered": {
    "message": "{PH1} hovered"
  },
  "perf_ui/FlameChart.js | sSelected": {
    "message": "{PH1} selected"
  },
  "perf_ui/LineLevelProfile.js | kb": {
    "message": "kB"
  },
  "perf_ui/LineLevelProfile.js | mb": {
    "message": "MB"
  },
  "perf_ui/LineLevelProfile.js | ms": {
    "message": "ms"
  },
  "perf_ui/ModuleUIStrings.js | collectGarbage": {
    "message": "Collect garbage"
  },
  "perf_ui/ModuleUIStrings.js | flamechartMouseWheelAction": {
    "message": "Flamechart mouse wheel action:"
  },
  "perf_ui/ModuleUIStrings.js | hideLiveMemoryAllocation": {
    "message": "Hide live memory allocation annotations"
  },
  "perf_ui/ModuleUIStrings.js | liveMemoryAllocationAnnotations": {
    "message": "Live memory allocation annotations"
  },
  "perf_ui/ModuleUIStrings.js | memory": {
    "message": "Memory"
  },
  "perf_ui/ModuleUIStrings.js | performance": {
    "message": "Performance"
  },
  "perf_ui/ModuleUIStrings.js | scroll": {
    "message": "Scroll"
  },
  "perf_ui/ModuleUIStrings.js | showLiveMemoryAllocation": {
    "message": "Show live memory allocation annotations"
  },
  "perf_ui/ModuleUIStrings.js | zoom": {
    "message": "Zoom"
  },
  "perf_ui/NetworkPriorities.js | high": {
    "message": "High"
  },
  "perf_ui/NetworkPriorities.js | highest": {
    "message": "Highest"
  },
  "perf_ui/NetworkPriorities.js | low": {
    "message": "Low"
  },
  "perf_ui/NetworkPriorities.js | lowest": {
    "message": "Lowest"
  },
  "perf_ui/NetworkPriorities.js | medium": {
    "message": "Medium"
  },
  "perf_ui/OverviewGrid.js | leftResizer": {
    "message": "Left Resizer"
  },
  "perf_ui/OverviewGrid.js | overviewGridWindow": {
    "message": "Overview grid window"
  },
  "perf_ui/OverviewGrid.js | rightResizer": {
    "message": "Right Resizer"
  },
  "perf_ui/PieChart.ts | total": {
    "message": "Total"
  },
  "performance_monitor/performance_monitor-meta.ts | activity": {
    "message": "activity"
  },
  "performance_monitor/performance_monitor-meta.ts | metrics": {
    "message": "metrics"
  },
  "performance_monitor/performance_monitor-meta.ts | monitor": {
    "message": "monitor"
  },
  "performance_monitor/performance_monitor-meta.ts | performance": {
    "message": "performance"
  },
  "performance_monitor/performance_monitor-meta.ts | performanceMonitor": {
    "message": "Performance monitor"
  },
  "performance_monitor/performance_monitor-meta.ts | systemMonitor": {
    "message": "system monitor"
  },
  "performance_monitor/PerformanceMonitor.ts | cpuUsage": {
    "message": "CPU usage"
  },
  "performance_monitor/PerformanceMonitor.ts | documentFrames": {
    "message": "Document Frames"
  },
  "performance_monitor/PerformanceMonitor.ts | documents": {
    "message": "Documents"
  },
  "performance_monitor/PerformanceMonitor.ts | domNodes": {
    "message": "DOM Nodes"
  },
  "performance_monitor/PerformanceMonitor.ts | graphsDisplayingARealtimeViewOf": {
    "message": "Graphs displaying a real-time view of performance metrics"
  },
  "performance_monitor/PerformanceMonitor.ts | jsEventListeners": {
    "message": "JS event listeners"
  },
  "performance_monitor/PerformanceMonitor.ts | jsHeapSize": {
    "message": "JS heap size"
  },
  "performance_monitor/PerformanceMonitor.ts | layoutsSec": {
    "message": "Layouts / sec"
  },
  "performance_monitor/PerformanceMonitor.ts | paused": {
    "message": "Paused"
  },
  "performance_monitor/PerformanceMonitor.ts | styleRecalcsSec": {
    "message": "Style recalcs / sec"
  },
  "persistence/Automapping.js | theAttemptToBindSInTheWorkspace": {
    "message": "The attempt to bind \"{PH1}\" in the workspace failed as this URI is malformed."
  },
  "persistence/EditFileSystemView.js | add": {
    "message": "Add"
  },
  "persistence/EditFileSystemView.js | enterAPath": {
    "message": "Enter a path"
  },
  "persistence/EditFileSystemView.js | enterAUniquePath": {
    "message": "Enter a unique path"
  },
  "persistence/EditFileSystemView.js | excludedFolders": {
    "message": "Excluded folders"
  },
  "persistence/EditFileSystemView.js | folderPath": {
    "message": "Folder path"
  },
  "persistence/EditFileSystemView.js | none": {
    "message": "None"
  },
  "persistence/EditFileSystemView.js | sViaDevtools": {
    "message": "{PH1} (via .devtools)"
  },
  "persistence/IsolatedFileSystem.js | blobCouldNotBeLoaded": {
    "message": "Blob could not be loaded."
  },
  "persistence/IsolatedFileSystem.js | cantReadFileSS": {
    "message": "Can't read file: {PH1}: {PH2}"
  },
  "persistence/IsolatedFileSystem.js | fileSystemErrorS": {
    "message": "File system error: {PH1}"
  },
  "persistence/IsolatedFileSystem.js | linkedToS": {
    "message": "Linked to {PH1}"
  },
  "persistence/IsolatedFileSystem.js | unknownErrorReadingFileS": {
    "message": "Unknown error reading file: {PH1}"
  },
  "persistence/IsolatedFileSystemManager.js | unableToAddFilesystemS": {
    "message": "Unable to add filesystem: {PH1}"
  },
  "persistence/ModuleUIStrings.js | disableOverrideNetworkRequests": {
    "message": "Disable override network requests"
  },
  "persistence/ModuleUIStrings.js | enableLocalOverrides": {
    "message": "Enable Local Overrides"
  },
  "persistence/ModuleUIStrings.js | enableOverrideNetworkRequests": {
    "message": "Enable override network requests"
  },
  "persistence/ModuleUIStrings.js | interception": {
    "message": "interception"
  },
  "persistence/ModuleUIStrings.js | network": {
    "message": "network"
  },
  "persistence/ModuleUIStrings.js | override": {
    "message": "override"
  },
  "persistence/ModuleUIStrings.js | persistence": {
    "message": "Persistence"
  },
  "persistence/ModuleUIStrings.js | request": {
    "message": "request"
  },
  "persistence/ModuleUIStrings.js | rewrite": {
    "message": "rewrite"
  },
  "persistence/persistence-meta.ts | workspace": {
    "message": "Workspace"
  },
  "persistence/PersistenceActions.js | openInContainingFolder": {
    "message": "Open in containing folder"
  },
  "persistence/PersistenceActions.js | saveAs": {
    "message": "Save as..."
  },
  "persistence/PersistenceActions.js | saveForOverrides": {
    "message": "Save for overrides"
  },
  "persistence/PersistenceActions.js | saveImage": {
    "message": "Save image"
  },
  "persistence/PersistenceUtils.js | linkedToS": {
    "message": "Linked to {PH1}"
  },
  "persistence/PersistenceUtils.js | linkedToSourceMapS": {
    "message": "Linked to source map: {PH1}"
  },
  "persistence/PlatformFileSystem.js | unableToReadFilesWithThis": {
    "message": "Unable to read files with this implementation."
  },
  "persistence/WorkspaceSettingsTab.js | addFolder": {
    "message": "Add folder…"
  },
  "persistence/WorkspaceSettingsTab.js | folderExcludePattern": {
    "message": "Folder exclude pattern"
  },
  "persistence/WorkspaceSettingsTab.js | mappingsAreInferredAutomatically": {
    "message": "Mappings are inferred automatically."
  },
  "persistence/WorkspaceSettingsTab.js | remove": {
    "message": "Remove"
  },
  "persistence/WorkspaceSettingsTab.js | workspace": {
    "message": "Workspace"
  },
  "profiler/CPUProfileView.js | aggregatedSelfTime": {
    "message": "Aggregated self time"
  },
  "profiler/CPUProfileView.js | aggregatedTotalTime": {
    "message": "Aggregated total time"
  },
  "profiler/CPUProfileView.js | cpuProfiles": {
    "message": "CPU PROFILES"
  },
  "profiler/CPUProfileView.js | cpuProfilesShow": {
    "message": "CPU profiles show where the execution time is spent in your page's JavaScript functions."
  },
  "profiler/CPUProfileView.js | fms": {
    "message": "{PH1} ms"
  },
  "profiler/CPUProfileView.js | formatPercent": {
    "message": "{PH1} %"
  },
  "profiler/CPUProfileView.js | name": {
    "message": "Name"
  },
  "profiler/CPUProfileView.js | notOptimized": {
    "message": "Not optimized"
  },
  "profiler/CPUProfileView.js | recording": {
    "message": "Recording…"
  },
  "profiler/CPUProfileView.js | recordJavascriptCpuProfile": {
    "message": "Record JavaScript CPU Profile"
  },
  "profiler/CPUProfileView.js | selfTime": {
    "message": "Self Time"
  },
  "profiler/CPUProfileView.js | startCpuProfiling": {
    "message": "Start CPU profiling"
  },
  "profiler/CPUProfileView.js | stopCpuProfiling": {
    "message": "Stop CPU profiling"
  },
  "profiler/CPUProfileView.js | totalTime": {
    "message": "Total Time"
  },
  "profiler/CPUProfileView.js | url": {
    "message": "URL"
  },
  "profiler/HeapProfilerPanel.js | revealInSummaryView": {
    "message": "Reveal in Summary view"
  },
  "profiler/HeapProfileView.js | allocationSampling": {
    "message": "Allocation sampling"
  },
  "profiler/HeapProfileView.js | formatPercent": {
    "message": "{PH1} %"
  },
  "profiler/HeapProfileView.js | heapProfilerIsRecording": {
    "message": "Heap profiler is recording"
  },
  "profiler/HeapProfileView.js | name": {
    "message": "Name"
  },
  "profiler/HeapProfileView.js | profileD": {
    "message": "Profile {PH1}"
  },
  "profiler/HeapProfileView.js | recording": {
    "message": "Recording…"
  },
  "profiler/HeapProfileView.js | recordMemoryAllocationsUsing": {
    "message": "Record memory allocations using sampling method.\n              This profile type has minimal performance overhead and can be used for long running operations.\n              It provides good approximation of allocations broken down by JavaScript execution stack."
  },
  "profiler/HeapProfileView.js | samplingProfiles": {
    "message": "SAMPLING PROFILES"
  },
  "profiler/HeapProfileView.js | sBytes": {
    "message": "{PH1} bytes"
  },
  "profiler/HeapProfileView.js | selectedSizeS": {
    "message": "Selected size: {PH1}"
  },
  "profiler/HeapProfileView.js | selfSize": {
    "message": "Self size"
  },
  "profiler/HeapProfileView.js | selfSizeBytes": {
    "message": "Self Size (bytes)"
  },
  "profiler/HeapProfileView.js | skb": {
    "message": "{PH1} kB"
  },
  "profiler/HeapProfileView.js | startHeapProfiling": {
    "message": "Start heap profiling"
  },
  "profiler/HeapProfileView.js | stopHeapProfiling": {
    "message": "Stop heap profiling"
  },
  "profiler/HeapProfileView.js | stopping": {
    "message": "Stopping…"
  },
  "profiler/HeapProfileView.js | totalSize": {
    "message": "Total size"
  },
  "profiler/HeapProfileView.js | totalSizeBytes": {
    "message": "Total Size (bytes)"
  },
  "profiler/HeapProfileView.js | url": {
    "message": "URL"
  },
  "profiler/HeapSnapshotDataGrids.js | allocation": {
    "message": "Allocation"
  },
  "profiler/HeapSnapshotDataGrids.js | allocSize": {
    "message": "Alloc. Size"
  },
  "profiler/HeapSnapshotDataGrids.js | constructorString": {
    "message": "Constructor"
  },
  "profiler/HeapSnapshotDataGrids.js | count": {
    "message": "Count"
  },
  "profiler/HeapSnapshotDataGrids.js | Deleted": {
    "message": "# Deleted"
  },
  "profiler/HeapSnapshotDataGrids.js | Delta": {
    "message": "# Delta"
  },
  "profiler/HeapSnapshotDataGrids.js | distance": {
    "message": "Distance"
  },
  "profiler/HeapSnapshotDataGrids.js | distanceFromWindowObject": {
    "message": "Distance from window object"
  },
  "profiler/HeapSnapshotDataGrids.js | freedSize": {
    "message": "Freed Size"
  },
  "profiler/HeapSnapshotDataGrids.js | function": {
    "message": "Function"
  },
  "profiler/HeapSnapshotDataGrids.js | heapSnapshotConstructors": {
    "message": "Heap Snapshot Constructors"
  },
  "profiler/HeapSnapshotDataGrids.js | heapSnapshotDiff": {
    "message": "Heap Snapshot Diff"
  },
  "profiler/HeapSnapshotDataGrids.js | heapSnapshotRetainment": {
    "message": "Heap Snapshot Retainment"
  },
  "profiler/HeapSnapshotDataGrids.js | liveCount": {
    "message": "Live Count"
  },
  "profiler/HeapSnapshotDataGrids.js | liveSize": {
    "message": "Live Size"
  },
  "profiler/HeapSnapshotDataGrids.js | New": {
    "message": "# New"
  },
  "profiler/HeapSnapshotDataGrids.js | object": {
    "message": "Object"
  },
  "profiler/HeapSnapshotDataGrids.js | retainedSize": {
    "message": "Retained Size"
  },
  "profiler/HeapSnapshotDataGrids.js | shallowSize": {
    "message": "Shallow Size"
  },
  "profiler/HeapSnapshotDataGrids.js | size": {
    "message": "Size"
  },
  "profiler/HeapSnapshotDataGrids.js | sizeDelta": {
    "message": "Size Delta"
  },
  "profiler/HeapSnapshotDataGrids.js | sizeOfTheObjectItselfInBytes": {
    "message": "Size of the object itself in bytes"
  },
  "profiler/HeapSnapshotDataGrids.js | sizeOfTheObjectPlusTheGraphIt": {
    "message": "Size of the object plus the graph it retains in bytes"
  },
  "profiler/HeapSnapshotGridNodes.js | detachedFromDomTree": {
    "message": "Detached from DOM tree"
  },
  "profiler/HeapSnapshotGridNodes.js | emptyPlaceholder": {
    "message": "{PH1}"
  },
  "profiler/HeapSnapshotGridNodes.js | genericStringsTwoPlaceholders": {
    "message": "{PH1}, {PH2}"
  },
  "profiler/HeapSnapshotGridNodes.js | inElement": {
    "message": "in"
  },
  "profiler/HeapSnapshotGridNodes.js | internalArray": {
    "message": "(internal array)[]"
  },
  "profiler/HeapSnapshotGridNodes.js | previewIsNotAvailable": {
    "message": "Preview is not available"
  },
  "profiler/HeapSnapshotGridNodes.js | revealInSummaryView": {
    "message": "Reveal in Summary view"
  },
  "profiler/HeapSnapshotGridNodes.js | revealObjectSWithIdSInSummary": {
    "message": "Reveal object '{PH1}' with id @{PH2} in Summary view"
  },
  "profiler/HeapSnapshotGridNodes.js | storeAsGlobalVariable": {
    "message": "Store as global variable"
  },
  "profiler/HeapSnapshotGridNodes.js | summary": {
    "message": "Summary"
  },
  "profiler/HeapSnapshotGridNodes.js | userObjectReachableFromWindow": {
    "message": "User object reachable from window"
  },
  "profiler/HeapSnapshotProxy.js | anErrorOccurredWhenACallToMethod": {
    "message": "An error occurred when a call to method '{PH1}' was requested"
  },
  "profiler/HeapSnapshotView.js | allObjects": {
    "message": "All objects"
  },
  "profiler/HeapSnapshotView.js | allocation": {
    "message": "Allocation"
  },
  "profiler/HeapSnapshotView.js | allocationInstrumentationOn": {
    "message": "Allocation instrumentation on timeline"
  },
  "profiler/HeapSnapshotView.js | allocationStack": {
    "message": "Allocation stack"
  },
  "profiler/HeapSnapshotView.js | allocationTimelines": {
    "message": "ALLOCATION TIMELINES"
  },
  "profiler/HeapSnapshotView.js | AllocationTimelinesShow": {
    "message": "\n        Allocation timelines show instrumented JavaScript memory allocations over time.\n        Once profile is recorded you can select a time interval to see objects that\n        were allocated within it and still alive by the end of recording.\n        Use this profile type to isolate memory leaks."
  },
  "profiler/HeapSnapshotView.js | baseSnapshot": {
    "message": "Base snapshot"
  },
  "profiler/HeapSnapshotView.js | classFilter": {
    "message": "Class filter"
  },
  "profiler/HeapSnapshotView.js | code": {
    "message": "Code"
  },
  "profiler/HeapSnapshotView.js | comparison": {
    "message": "Comparison"
  },
  "profiler/HeapSnapshotView.js | containment": {
    "message": "Containment"
  },
  "profiler/HeapSnapshotView.js | filter": {
    "message": "Filter"
  },
  "profiler/HeapSnapshotView.js | find": {
    "message": "Find"
  },
  "profiler/HeapSnapshotView.js | heapMemoryUsage": {
    "message": "Heap memory usage"
  },
  "profiler/HeapSnapshotView.js | heapSnapshot": {
    "message": "Heap snapshot"
  },
  "profiler/HeapSnapshotView.js | heapSnapshotProfilesShowMemory": {
    "message": "Heap snapshot profiles show memory distribution among your page's JavaScript objects and related DOM nodes."
  },
  "profiler/HeapSnapshotView.js | heapSnapshots": {
    "message": "HEAP SNAPSHOTS"
  },
  "profiler/HeapSnapshotView.js | jsArrays": {
    "message": "JS arrays"
  },
  "profiler/HeapSnapshotView.js | liveObjects": {
    "message": "Live objects"
  },
  "profiler/HeapSnapshotView.js | loading": {
    "message": "Loading…"
  },
  "profiler/HeapSnapshotView.js | objectsAllocatedBeforeS": {
    "message": "Objects allocated before {PH1}"
  },
  "profiler/HeapSnapshotView.js | objectsAllocatedBetweenSAndS": {
    "message": "Objects allocated between {PH1} and {PH2}"
  },
  "profiler/HeapSnapshotView.js | percentagePlaceholder": {
    "message": "{PH1}%"
  },
  "profiler/HeapSnapshotView.js | perspective": {
    "message": "Perspective"
  },
  "profiler/HeapSnapshotView.js | recordAllocationStacksExtra": {
    "message": "Record allocation stacks (extra performance overhead)"
  },
  "profiler/HeapSnapshotView.js | recording": {
    "message": "Recording…"
  },
  "profiler/HeapSnapshotView.js | retainers": {
    "message": "Retainers"
  },
  "profiler/HeapSnapshotView.js | savingD": {
    "message": "Saving… {PH1}%"
  },
  "profiler/HeapSnapshotView.js | selectedSizeS": {
    "message": "Selected size: {PH1}"
  },
  "profiler/HeapSnapshotView.js | sKb": {
    "message": "{PH1} kB"
  },
  "profiler/HeapSnapshotView.js | snapshotD": {
    "message": "Snapshot {PH1}"
  },
  "profiler/HeapSnapshotView.js | snapshotting": {
    "message": "Snapshotting…"
  },
  "profiler/HeapSnapshotView.js | stackWasNotRecordedForThisObject": {
    "message": "Stack was not recorded for this object because it had been allocated before this profile recording started."
  },
  "profiler/HeapSnapshotView.js | startRecordingHeapProfile": {
    "message": "Start recording heap profile"
  },
  "profiler/HeapSnapshotView.js | statistics": {
    "message": "Statistics"
  },
  "profiler/HeapSnapshotView.js | stopRecordingHeapProfile": {
    "message": "Stop recording heap profile"
  },
  "profiler/HeapSnapshotView.js | strings": {
    "message": "Strings"
  },
  "profiler/HeapSnapshotView.js | summary": {
    "message": "Summary"
  },
  "profiler/HeapSnapshotView.js | systemObjects": {
    "message": "System objects"
  },
  "profiler/HeapSnapshotView.js | takeHeapSnapshot": {
    "message": "Take heap snapshot"
  },
  "profiler/HeapSnapshotView.js | treatGlobalObjectsAsRoots": {
    "message": "Treat global objects as roots (recommended, unchecking this exposes internal nodes and introduces excessive detail, but might help debugging cycles in retaining paths)"
  },
  "profiler/HeapSnapshotView.js | typedArrays": {
    "message": "Typed arrays"
  },
  "profiler/IsolateSelector.js | changeRate": {
    "message": "{PH1}/s"
  },
  "profiler/IsolateSelector.js | decreasingBySPerSecond": {
    "message": "decreasing by {PH1} per second"
  },
  "profiler/IsolateSelector.js | empty": {
    "message": "(empty)"
  },
  "profiler/IsolateSelector.js | heapSizeChangeTrendOverTheLastS": {
    "message": "Heap size change trend over the last {PH1} minutes."
  },
  "profiler/IsolateSelector.js | heapSizeInUseByLiveJsObjects": {
    "message": "Heap size in use by live JS objects."
  },
  "profiler/IsolateSelector.js | increasingBySPerSecond": {
    "message": "increasing by {PH1} per second"
  },
  "profiler/IsolateSelector.js | javascriptVmInstances": {
    "message": "JavaScript VM instances"
  },
  "profiler/IsolateSelector.js | totalJsHeapSize": {
    "message": "Total JS heap size"
  },
  "profiler/IsolateSelector.js | totalPageJsHeapSizeAcrossAllVm": {
    "message": "Total page JS heap size across all VM instances."
  },
  "profiler/IsolateSelector.js | totalPageJsHeapSizeChangeTrend": {
    "message": "Total page JS heap size change trend over the last {PH1} minutes."
  },
  "profiler/LiveHeapProfileView.js | allocatedJsHeapSizeCurrentlyIn": {
    "message": "Allocated JS heap size currently in use"
  },
  "profiler/LiveHeapProfileView.js | anonymousScriptS": {
    "message": "(Anonymous Script {PH1})"
  },
  "profiler/LiveHeapProfileView.js | heapProfile": {
    "message": "Heap Profile"
  },
  "profiler/LiveHeapProfileView.js | jsHeap": {
    "message": "JS Heap"
  },
  "profiler/LiveHeapProfileView.js | kb": {
    "message": "kB"
  },
  "profiler/LiveHeapProfileView.js | numberOfVmsSharingTheSameScript": {
    "message": "Number of VMs sharing the same script source"
  },
  "profiler/LiveHeapProfileView.js | scriptUrl": {
    "message": "Script URL"
  },
  "profiler/LiveHeapProfileView.js | urlOfTheScriptSource": {
    "message": "URL of the script source"
  },
  "profiler/LiveHeapProfileView.js | vms": {
    "message": "VMs"
  },
  "profiler/ModuleUIStrings.js | buildingAllocationStatistics": {
    "message": "Building allocation statistics…"
  },
  "profiler/ModuleUIStrings.js | buildingDominatedNodes": {
    "message": "Building dominated nodes…"
  },
  "profiler/ModuleUIStrings.js | buildingDominatorTree": {
    "message": "Building dominator tree…"
  },
  "profiler/ModuleUIStrings.js | buildingEdgeIndexes": {
    "message": "Building edge indexes…"
  },
  "profiler/ModuleUIStrings.js | buildingLocations": {
    "message": "Building locations…"
  },
  "profiler/ModuleUIStrings.js | buildingPostorderIndex": {
    "message": "Building postorder index…"
  },
  "profiler/ModuleUIStrings.js | buildingRetainers": {
    "message": "Building retainers…"
  },
  "profiler/ModuleUIStrings.js | calculatingDistances": {
    "message": "Calculating distances…"
  },
  "profiler/ModuleUIStrings.js | calculatingNodeFlags": {
    "message": "Calculating node flags…"
  },
  "profiler/ModuleUIStrings.js | calculatingRetainedSizes": {
    "message": "Calculating retained sizes…"
  },
  "profiler/ModuleUIStrings.js | calculatingSamples": {
    "message": "Calculating samples…"
  },
  "profiler/ModuleUIStrings.js | calculatingStatistics": {
    "message": "Calculating statistics…"
  },
  "profiler/ModuleUIStrings.js | done": {
    "message": "Done"
  },
  "profiler/ModuleUIStrings.js | finishedProcessing": {
    "message": "Finished processing."
  },
  "profiler/ModuleUIStrings.js | loadingAllocationTracesD": {
    "message": "Loading allocation traces… {PH1}%"
  },
  "profiler/ModuleUIStrings.js | loadingEdgesD": {
    "message": "Loading edges… {PH1}%"
  },
  "profiler/ModuleUIStrings.js | loadingLocations": {
    "message": "Loading locations…"
  },
  "profiler/ModuleUIStrings.js | loadingNodesD": {
    "message": "Loading nodes… {PH1}%"
  },
  "profiler/ModuleUIStrings.js | loadingSamples": {
    "message": "Loading samples…"
  },
  "profiler/ModuleUIStrings.js | loadingSnapshotInfo": {
    "message": "Loading snapshot info…"
  },
  "profiler/ModuleUIStrings.js | loadingStrings": {
    "message": "Loading strings…"
  },
  "profiler/ModuleUIStrings.js | parsingStrings": {
    "message": "Parsing strings…"
  },
  "profiler/ModuleUIStrings.js | processingSnapshot": {
    "message": "Processing snapshot…"
  },
  "profiler/ModuleUIStrings.js | propagatingDomState": {
    "message": "Propagating DOM state…"
  },
  "profiler/ProfileDataGrid.js | genericTextTwoPlaceholders": {
    "message": "{PH1}, {PH2}"
  },
  "profiler/ProfileDataGrid.js | notOptimizedS": {
    "message": "Not optimized: {PH1}"
  },
  "profiler/ProfileLauncherView.js | load": {
    "message": "Load"
  },
  "profiler/ProfileLauncherView.js | selectJavascriptVmInstance": {
    "message": "Select JavaScript VM instance"
  },
  "profiler/ProfileLauncherView.js | selectProfilingType": {
    "message": "Select profiling type"
  },
  "profiler/ProfileLauncherView.js | start": {
    "message": "Start"
  },
  "profiler/ProfileLauncherView.js | stop": {
    "message": "Stop"
  },
  "profiler/ProfileLauncherView.js | takeSnapshot": {
    "message": "Take snapshot"
  },
  "profiler/profiler-meta.ts | liveHeapProfile": {
    "message": "Live Heap Profile"
  },
  "profiler/profiler-meta.ts | memory": {
    "message": "Memory"
  },
  "profiler/profiler-meta.ts | showNativeFunctions": {
    "message": "Show native functions in JS Profile"
  },
  "profiler/profiler-meta.ts | startRecordingHeapAllocations": {
    "message": "Start recording heap allocations"
  },
  "profiler/profiler-meta.ts | startRecordingHeapAllocationsAndReload": {
    "message": "Start recording heap allocations and reload the page"
  },
  "profiler/profiler-meta.ts | startStopRecording": {
    "message": "Start/stop recording"
  },
  "profiler/profiler-meta.ts | stopRecordingHeapAllocations": {
    "message": "Stop recording heap allocations"
  },
  "profiler/ProfileSidebarTreeElement.js | delete": {
    "message": "Delete"
  },
  "profiler/ProfileSidebarTreeElement.js | load": {
    "message": "Load…"
  },
  "profiler/ProfileSidebarTreeElement.js | save": {
    "message": "Save"
  },
  "profiler/ProfileSidebarTreeElement.js | saveWithEllipsis": {
    "message": "Save…"
  },
  "profiler/ProfileSidebarTreeElement.js | singlePlaceholder": {
    "message": "{PH1}"
  },
  "profiler/ProfilesPanel.js | cantLoadFileSupportedFile": {
    "message": "Can’t load file. Supported file extensions: '{PH1}.'"
  },
  "profiler/ProfilesPanel.js | cantLoadProfileWhileAnother": {
    "message": "Can’t load profile while another profile is being recorded."
  },
  "profiler/ProfilesPanel.js | clearAllProfiles": {
    "message": "Clear all profiles"
  },
  "profiler/ProfilesPanel.js | load": {
    "message": "Load…"
  },
  "profiler/ProfilesPanel.js | profileLoadingFailedS": {
    "message": "Profile loading failed: {PH1}."
  },
  "profiler/ProfilesPanel.js | profiles": {
    "message": "Profiles"
  },
  "profiler/ProfilesPanel.js | runD": {
    "message": "Run {PH1}"
  },
  "profiler/ProfileView.js | chart": {
    "message": "Chart"
  },
  "profiler/ProfileView.js | excludeSelectedFunction": {
    "message": "Exclude selected function"
  },
  "profiler/ProfileView.js | failedToReadFile": {
    "message": "Failed to read file"
  },
  "profiler/ProfileView.js | fileSReadErrorS": {
    "message": "File '{PH1}' read error: {PH2}"
  },
  "profiler/ProfileView.js | findByCostMsNameOrFile": {
    "message": "Find by cost (>50ms), name or file"
  },
  "profiler/ProfileView.js | focusSelectedFunction": {
    "message": "Focus selected function"
  },
  "profiler/ProfileView.js | function": {
    "message": "Function"
  },
  "profiler/ProfileView.js | heavyBottomUp": {
    "message": "Heavy (Bottom Up)"
  },
  "profiler/ProfileView.js | loaded": {
    "message": "Loaded"
  },
  "profiler/ProfileView.js | loading": {
    "message": "Loading…"
  },
  "profiler/ProfileView.js | loadingD": {
    "message": "Loading… {PH1}%"
  },
  "profiler/ProfileView.js | parsing": {
    "message": "Parsing…"
  },
  "profiler/ProfileView.js | profile": {
    "message": "Profile"
  },
  "profiler/ProfileView.js | profileD": {
    "message": "Profile {PH1}"
  },
  "profiler/ProfileView.js | profiler": {
    "message": "Profiler"
  },
  "profiler/ProfileView.js | profileViewMode": {
    "message": "Profile view mode"
  },
  "profiler/ProfileView.js | restoreAllFunctions": {
    "message": "Restore all functions"
  },
  "profiler/ProfileView.js | treeTopDown": {
    "message": "Tree (Top Down)"
  },
  "protocol_monitor/protocol_monitor-meta.ts | protocolMonitor": {
    "message": "Protocol monitor"
  },
  "protocol_monitor/ProtocolMonitor.ts | clearAll": {
    "message": "Clear all"
  },
  "protocol_monitor/ProtocolMonitor.ts | direction": {
    "message": "Direction"
  },
  "protocol_monitor/ProtocolMonitor.ts | documentation": {
    "message": "Documentation"
  },
  "protocol_monitor/ProtocolMonitor.ts | filter": {
    "message": "Filter"
  },
  "protocol_monitor/ProtocolMonitor.ts | method": {
    "message": "Method"
  },
  "protocol_monitor/ProtocolMonitor.ts | noMessageSelected": {
    "message": "No message selected"
  },
  "protocol_monitor/ProtocolMonitor.ts | record": {
    "message": "Record"
  },
  "protocol_monitor/ProtocolMonitor.ts | request": {
    "message": "Request"
  },
  "protocol_monitor/ProtocolMonitor.ts | response": {
    "message": "Response"
  },
  "protocol_monitor/ProtocolMonitor.ts | sMs": {
    "message": "{PH1} ms"
  },
  "protocol_monitor/ProtocolMonitor.ts | target": {
    "message": "Target"
  },
  "protocol_monitor/ProtocolMonitor.ts | timestamp": {
    "message": "Timestamp"
  },
  "recorder/RecordingFileSystem.ts | defaultRecordingName": {
    "message": "Recording #{nextId}"
  },
  "recorder/RecordingFileSystem.ts | linkedToS": {
    "message": "Linked to {PH1}"
  },
  "resources/ClearStorageView.js | storageQuotaUsed": {
    "message": "{PH1} used out of {PH2} storage quota"
  },
  "resources/ClearStorageView.js | storageQuotaUsedWithBytes": {
    "message": "{PH1} bytes used out of {PH2} bytes storage quota"
  },
  "resources/ClearStorageView.js | storageWithCustomMarker": {
    "message": "{PH1} (custom)"
  },
  "screencast/ScreencastApp.ts | toggleScreencast": {
    "message": "Toggle screencast"
  },
  "screencast/ScreencastView.ts | addressBar": {
    "message": "Address bar"
  },
  "screencast/ScreencastView.ts | back": {
    "message": "back"
  },
  "screencast/ScreencastView.ts | forward": {
    "message": "forward"
  },
  "screencast/ScreencastView.ts | profilingInProgress": {
    "message": "Profiling in progress"
  },
  "screencast/ScreencastView.ts | reload": {
    "message": "reload"
  },
  "screencast/ScreencastView.ts | screencastViewOfDebugTarget": {
    "message": "Screencast view of debug target"
  },
  "screencast/ScreencastView.ts | theTabIsInactive": {
    "message": "The tab is inactive"
  },
  "search/SearchResultsPane.js | lineS": {
    "message": "Line {PH1}"
  },
  "search/SearchResultsPane.js | matchesCountS": {
    "message": "Matches Count {PH1}"
  },
  "search/SearchResultsPane.js | showDMore": {
    "message": "Show {PH1} more"
  },
  "search/SearchView.js | clear": {
    "message": "Clear"
  },
  "search/SearchView.js | foundDMatchingLinesInDFiles": {
    "message": "Found {PH1} matching lines in {PH2} files."
  },
  "search/SearchView.js | foundDMatchingLinesInFile": {
    "message": "Found {PH1} matching lines in 1 file."
  },
  "search/SearchView.js | foundMatchingLineInFile": {
    "message": "Found 1 matching line in 1 file."
  },
  "search/SearchView.js | indexing": {
    "message": "Indexing…"
  },
  "search/SearchView.js | indexingInterrupted": {
    "message": "Indexing interrupted."
  },
  "search/SearchView.js | matchCase": {
    "message": "Match Case"
  },
  "search/SearchView.js | noMatchesFound": {
    "message": "No matches found."
  },
  "search/SearchView.js | refresh": {
    "message": "Refresh"
  },
  "search/SearchView.js | search": {
    "message": "Search"
  },
  "search/SearchView.js | searchFinished": {
    "message": "Search finished."
  },
  "search/SearchView.js | searching": {
    "message": "Searching…"
  },
  "search/SearchView.js | searchInterrupted": {
    "message": "Search interrupted."
  },
  "search/SearchView.js | searchQuery": {
    "message": "Search Query"
  },
  "search/SearchView.js | useRegularExpression": {
    "message": "Use Regular Expression"
  },
  "security/SecurityModel.ts | cipherWithMAC": {
    "message": "{PH1} with {PH2}"
  },
  "security/SecurityModel.ts | keyExchangeWithGroup": {
    "message": "{PH1} with {PH2}"
  },
  "security/SecurityModel.ts | theSecurityOfThisPageIsUnknown": {
    "message": "The security of this page is unknown."
  },
  "security/SecurityModel.ts | thisPageIsNotSecure": {
    "message": "This page is not secure."
  },
  "security/SecurityModel.ts | thisPageIsNotSecureBrokenHttps": {
    "message": "This page is not secure (broken HTTPS)."
  },
  "security/SecurityModel.ts | thisPageIsSecureValidHttps": {
    "message": "This page is secure (valid HTTPS)."
  },
  "security/SecurityPanel.ts | activeContentWithCertificate": {
    "message": "active content with certificate errors"
  },
  "security/SecurityPanel.ts | activeMixedContent": {
    "message": "active mixed content"
  },
  "security/SecurityPanel.ts | allResourcesOnThisPageAreServed": {
    "message": "All resources on this page are served securely."
  },
  "security/SecurityPanel.ts | allServedSecurely": {
    "message": "all served securely"
  },
  "security/SecurityPanel.ts | blockedMixedContent": {
    "message": "Blocked mixed content"
  },
  "security/SecurityPanel.ts | certificate": {
    "message": "Certificate"
  },
  "security/SecurityPanel.ts | certificateExpiresSoon": {
    "message": "Certificate expires soon"
  },
  "security/SecurityPanel.ts | certificateTransparency": {
    "message": "Certificate Transparency"
  },
  "security/SecurityPanel.ts | chromeHasDeterminedThatThisSite": {
    "message": "Chrome has determined that this site could be fake or fraudulent.\n\nIf you believe this is shown in error please visit https://bugs.chromium.org/p/chromium/issues/entry?template=Safety+Tips+Appeals."
  },
  "security/SecurityPanel.ts | cipher": {
    "message": "Cipher"
  },
  "security/SecurityPanel.ts | connection": {
    "message": "Connection"
  },
  "security/SecurityPanel.ts | contentWithCertificateErrors": {
    "message": "content with certificate errors"
  },
  "security/SecurityPanel.ts | dataWasEnteredInAFieldOnA": {
    "message": "Data was entered in a field on a non-secure page. A warning has been added to the URL bar."
  },
  "security/SecurityPanel.ts | flaggedByGoogleSafeBrowsing": {
    "message": "Flagged by Google Safe Browsing"
  },
  "security/SecurityPanel.ts | formFieldEditedOnANonsecurePage": {
    "message": "Form field edited on a non-secure page"
  },
  "security/SecurityPanel.ts | hashAlgorithm": {
    "message": "Hash algorithm"
  },
  "security/SecurityPanel.ts | hideFullDetails": {
    "message": "Hide full details"
  },
  "security/SecurityPanel.ts | info": {
    "message": "Info"
  },
  "security/SecurityPanel.ts | insecureSha": {
    "message": "insecure (SHA-1)"
  },
  "security/SecurityPanel.ts | issuedAt": {
    "message": "Issued at"
  },
  "security/SecurityPanel.ts | issuer": {
    "message": "Issuer"
  },
  "security/SecurityPanel.ts | keyExchange": {
    "message": "Key exchange"
  },
  "security/SecurityPanel.ts | keyExchangeGroup": {
    "message": "Key exchange group"
  },
  "security/SecurityPanel.ts | logId": {
    "message": "Log ID"
  },
  "security/SecurityPanel.ts | logName": {
    "message": "Log name"
  },
  "security/SecurityPanel.ts | mainOrigin": {
    "message": "Main origin"
  },
  "security/SecurityPanel.ts | mainOriginNonsecure": {
    "message": "Main origin (non-secure)"
  },
  "security/SecurityPanel.ts | mainOriginSecure": {
    "message": "Main origin (secure)"
  },
  "security/SecurityPanel.ts | missing": {
    "message": "missing"
  },
  "security/SecurityPanel.ts | mixedContent": {
    "message": "mixed content"
  },
  "security/SecurityPanel.ts | na": {
    "message": "(n/a)"
  },
  "security/SecurityPanel.ts | nonsecureForm": {
    "message": "non-secure form"
  },
  "security/SecurityPanel.ts | nonsecureOrigins": {
    "message": "Non-secure origins"
  },
  "security/SecurityPanel.ts | noSecurityDetailsAreAvailableFor": {
    "message": "No security details are available for this origin."
  },
  "security/SecurityPanel.ts | noSecurityInformation": {
    "message": "No security information"
  },
  "security/SecurityPanel.ts | notSecure": {
    "message": "Not secure"
  },
  "security/SecurityPanel.ts | notSecureBroken": {
    "message": "Not secure (broken)"
  },
  "security/SecurityPanel.ts | obsoleteConnectionSettings": {
    "message": "obsolete connection settings"
  },
  "security/SecurityPanel.ts | openFullCertificateDetails": {
    "message": "Open full certificate details"
  },
  "security/SecurityPanel.ts | origin": {
    "message": "Origin"
  },
  "security/SecurityPanel.ts | overview": {
    "message": "Overview"
  },
  "security/SecurityPanel.ts | possibleSpoofingUrl": {
    "message": "Possible spoofing URL"
  },
  "security/SecurityPanel.ts | protocol": {
    "message": "Protocol"
  },
  "security/SecurityPanel.ts | publickeypinningBypassed": {
    "message": "Public-Key-Pinning bypassed"
  },
  "security/SecurityPanel.ts | publickeypinningWasBypassedByA": {
    "message": "Public-Key-Pinning was bypassed by a local root certificate."
  },
  "security/SecurityPanel.ts | reloadThePageToRecordRequestsFor": {
    "message": "Reload the page to record requests for HTTP resources."
  },
  "security/SecurityPanel.ts | reloadToViewDetails": {
    "message": "Reload to view details"
  },
  "security/SecurityPanel.ts | resources": {
    "message": "Resources"
  },
  "security/SecurityPanel.ts | rsaKeyExchangeIsObsoleteEnableAn": {
    "message": "RSA key exchange is obsolete. Enable an ECDHE-based cipher suite."
  },
  "security/SecurityPanel.ts | san": {
    "message": "SAN"
  },
  "security/SecurityPanel.ts | sct": {
    "message": "SCT"
  },
  "security/SecurityPanel.ts | secure": {
    "message": "Secure"
  },
  "security/SecurityPanel.ts | secureConnectionSettings": {
    "message": "secure connection settings"
  },
  "security/SecurityPanel.ts | secureOrigins": {
    "message": "Secure origins"
  },
  "security/SecurityPanel.ts | securityOverview": {
    "message": "Security overview"
  },
  "security/SecurityPanel.ts | showFullDetails": {
    "message": "Show full details"
  },
  "security/SecurityPanel.ts | showLess": {
    "message": "Show less"
  },
  "security/SecurityPanel.ts | showMoreSTotal": {
    "message": "Show more ({PH1} total)"
  },
  "security/SecurityPanel.ts | signatureAlgorithm": {
    "message": "Signature algorithm"
  },
  "security/SecurityPanel.ts | signatureData": {
    "message": "Signature data"
  },
  "security/SecurityPanel.ts | sIsObsoleteEnableAnAesgcmbased": {
    "message": "{PH1} is obsolete. Enable an AES-GCM-based cipher suite."
  },
  "security/SecurityPanel.ts | sIsObsoleteEnableTlsOrLater": {
    "message": "{PH1} is obsolete. Enable TLS 1.2 or later."
  },
  "security/SecurityPanel.ts | source": {
    "message": "Source"
  },
  "security/SecurityPanel.ts | subject": {
    "message": "Subject"
  },
  "security/SecurityPanel.ts | subjectAlternativeNameMissing": {
    "message": "Subject Alternative Name missing"
  },
  "security/SecurityPanel.ts | theCertificateChainForThisSite": {
    "message": "The certificate chain for this site contains a certificate signed using SHA-1."
  },
  "security/SecurityPanel.ts | theCertificateForThisSiteDoesNot": {
    "message": "The certificate for this site does not contain a Subject Alternative Name extension containing a domain name or IP address."
  },
  "security/SecurityPanel.ts | theCertificateForThisSiteExpires": {
    "message": "The certificate for this site expires in less than 48 hours and needs to be renewed."
  },
  "security/SecurityPanel.ts | theConnectionToThisSiteIs": {
    "message": "The connection to this site is encrypted and authenticated using {PH1}, {PH2}, and {PH3}."
  },
  "security/SecurityPanel.ts | theConnectionToThisSiteIsUsingA": {
    "message": "The connection to this site is using a valid, trusted server certificate issued by {PH1}."
  },
  "security/SecurityPanel.ts | theSecurityDetailsAboveAreFrom": {
    "message": "The security details above are from the first inspected response."
  },
  "security/SecurityPanel.ts | theSecurityOfThisPageIsUnknown": {
    "message": "The security of this page is unknown."
  },
  "security/SecurityPanel.ts | theServerSignatureUsesShaWhichIs": {
    "message": "The server signature uses SHA-1, which is obsolete. Enable a SHA-2 signature algorithm instead. (Note this is different from the signature in the certificate.)"
  },
  "security/SecurityPanel.ts | thisIsAnErrorPage": {
    "message": "This is an error page."
  },
  "security/SecurityPanel.ts | thisOriginIsANonhttpsSecure": {
    "message": "This origin is a non-HTTPS secure origin."
  },
  "security/SecurityPanel.ts | thisPageHasANonhttpsSecureOrigin": {
    "message": "This page has a non-HTTPS secure origin."
  },
  "security/SecurityPanel.ts | thisPageIncludesAFormWithA": {
    "message": "This page includes a form with a non-secure \"action\" attribute."
  },
  "security/SecurityPanel.ts | thisPageIncludesHttpResources": {
    "message": "This page includes HTTP resources."
  },
  "security/SecurityPanel.ts | thisPageIncludesResourcesThat": {
    "message": "This page includes resources that were loaded with certificate errors."
  },
  "security/SecurityPanel.ts | thisPageIsDangerousFlaggedBy": {
    "message": "This page is dangerous (flagged by Google Safe Browsing)."
  },
  "security/SecurityPanel.ts | thisPageIsInsecureUnencrypted": {
    "message": "This page is insecure (unencrypted HTTP)."
  },
  "security/SecurityPanel.ts | thisPageIsNotSecure": {
    "message": "This page is not secure."
  },
  "security/SecurityPanel.ts | thisPageIsNotSecureBrokenHttps": {
    "message": "This page is not secure (broken HTTPS)."
  },
  "security/SecurityPanel.ts | thisPageIsSecureValidHttps": {
    "message": "This page is secure (valid HTTPS)."
  },
  "security/SecurityPanel.ts | thisPageIsSuspicious": {
    "message": "This page is suspicious"
  },
  "security/SecurityPanel.ts | thisPageIsSuspiciousFlaggedBy": {
    "message": "This page is suspicious (flagged by Chrome)."
  },
  "security/SecurityPanel.ts | thisRequestCompliesWithChromes": {
    "message": "This request complies with Chrome's Certificate Transparency policy."
  },
  "security/SecurityPanel.ts | thisRequestDoesNotComplyWith": {
    "message": "This request does not comply with Chrome's Certificate Transparency policy."
  },
  "security/SecurityPanel.ts | thisResponseWasLoadedFromCache": {
    "message": "This response was loaded from cache. Some security details might be missing."
  },
  "security/SecurityPanel.ts | thisSiteIsMissingAValidTrusted": {
    "message": "This site is missing a valid, trusted certificate ({PH1})."
  },
  "security/SecurityPanel.ts | thisSitesHostnameLooksSimilarToS": {
    "message": "This site's hostname looks similar to {PH1}. Attackers sometimes mimic sites by making small, hard-to-see changes to the domain name.\n\nIf you believe this is shown in error please visit https://bugs.chromium.org/p/chromium/issues/entry?template=Safety+Tips+Appeals."
  },
  "security/SecurityPanel.ts | toCheckThisPagesStatusVisit": {
    "message": "To check this page's status, visit g.co/safebrowsingstatus."
  },
  "security/SecurityPanel.ts | unknownCanceled": {
    "message": "Unknown / canceled"
  },
  "security/SecurityPanel.ts | validAndTrusted": {
    "message": "valid and trusted"
  },
  "security/SecurityPanel.ts | validationStatus": {
    "message": "Validation status"
  },
  "security/SecurityPanel.ts | validFrom": {
    "message": "Valid from"
  },
  "security/SecurityPanel.ts | validUntil": {
    "message": "Valid until"
  },
  "security/SecurityPanel.ts | viewCertificate": {
    "message": "View certificate"
  },
  "security/SecurityPanel.ts | viewDRequestInNetworkPanel": {
    "message": "View {PH1} request in Network Panel"
  },
  "security/SecurityPanel.ts | viewDRequestsInNetworkPanel": {
    "message": "View {PH1} requests in Network Panel"
  },
  "security/SecurityPanel.ts | viewRequestsInNetworkPanel": {
    "message": "View requests in Network Panel"
  },
  "security/SecurityPanel.ts | youHaveRecentlyAllowedContent": {
    "message": "You have recently allowed content loaded with certificate errors (such as scripts or iframes) to run on this site."
  },
  "security/SecurityPanel.ts | youHaveRecentlyAllowedNonsecure": {
    "message": "You have recently allowed non-secure content (such as scripts or iframes) to run on this site."
  },
  "security/SecurityPanel.ts | yourConnectionToThisOriginIsNot": {
    "message": "Your connection to this origin is not secure."
  },
  "security/SecurityPanel.ts | yourPageRequestedNonsecure": {
    "message": "Your page requested non-secure resources that were blocked."
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | addFilenamePattern": {
    "message": "Add filename pattern"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | addPattern": {
    "message": "Add pattern..."
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | behavior": {
    "message": "Behavior"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | debuggerWillSkipThroughThe": {
    "message": "Debugger will skip through the scripts and will not stop on exceptions thrown by them."
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | disabled": {
    "message": "Disabled"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | frameworkIgnoreList": {
    "message": "Framework Ignore List"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | ignoreList": {
    "message": "Ignore List"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | ignoreListContentScripts": {
    "message": "Add content scripts to ignore list"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | ignoreListContentScriptsExtension": {
    "message": "Add content scripts to ignore list (extension scripts in the page)"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | ignoreScriptsWhoseNamesMatchS": {
    "message": "Ignore scripts whose names match '{PH1}'"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | noIgnoreListPatterns": {
    "message": "No ignore list patterns"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | pattern": {
    "message": "Pattern"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | patternAlreadyExists": {
    "message": "Pattern already exists"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | patternCannotBeEmpty": {
    "message": "Pattern cannot be empty"
  },
  "settings/FrameworkIgnoreListSettingsTab.ts | patternMustBeAValidRegular": {
    "message": "Pattern must be a valid regular expression"
  },
  "settings/KeybindsSettingsTab.ts | addAShortcut": {
    "message": "Add a shortcut"
  },
  "settings/KeybindsSettingsTab.ts | confirmChanges": {
    "message": "Confirm changes"
  },
  "settings/KeybindsSettingsTab.ts | discardChanges": {
    "message": "Discard changes"
  },
  "settings/KeybindsSettingsTab.ts | editShortcut": {
    "message": "Edit shortcut"
  },
  "settings/KeybindsSettingsTab.ts | FullListOfDevtoolsKeyboard": {
    "message": "Full list of DevTools keyboard shortcuts and gestures"
  },
  "settings/KeybindsSettingsTab.ts | keyboardShortcutsList": {
    "message": "Keyboard shortcuts list"
  },
  "settings/KeybindsSettingsTab.ts | matchShortcutsFromPreset": {
    "message": "Match shortcuts from preset"
  },
  "settings/KeybindsSettingsTab.ts | noShortcutForAction": {
    "message": "No shortcut for action"
  },
  "settings/KeybindsSettingsTab.ts | removeShortcut": {
    "message": "Remove shortcut"
  },
  "settings/KeybindsSettingsTab.ts | ResetShortcutsForAction": {
    "message": "Reset shortcuts for action"
  },
  "settings/KeybindsSettingsTab.ts | RestoreDefaultShortcuts": {
    "message": "Restore default shortcuts"
  },
  "settings/KeybindsSettingsTab.ts | shortcutModified": {
    "message": "Shortcut modified"
  },
  "settings/KeybindsSettingsTab.ts | shortcuts": {
    "message": "Shortcuts"
  },
  "settings/KeybindsSettingsTab.ts | shortcutsCannotContainOnly": {
    "message": "Shortcuts cannot contain only modifier keys."
  },
  "settings/KeybindsSettingsTab.ts | thisShortcutIsInUseByS": {
    "message": "This shortcut is in use by {PH1}: {PH2}."
  },
  "settings/ModuleUIStrings.ts | documentation": {
    "message": "Documentation"
  },
  "settings/ModuleUIStrings.ts | settings": {
    "message": "Settings"
  },
  "settings/settings-meta.ts | experiments": {
    "message": "Experiments"
  },
  "settings/settings-meta.ts | ignoreList": {
    "message": "Ignore List"
  },
  "settings/settings-meta.ts | preferences": {
    "message": "Preferences"
  },
  "settings/settings-meta.ts | shortcuts": {
    "message": "Shortcuts"
  },
  "settings/SettingsScreen.ts | experiments": {
    "message": "Experiments"
  },
  "settings/SettingsScreen.ts | oneOrMoreSettingsHaveChanged": {
    "message": "One or more settings have changed which requires a reload to take effect."
  },
  "settings/SettingsScreen.ts | preferences": {
    "message": "Preferences"
  },
  "settings/SettingsScreen.ts | restoreDefaultsAndReload": {
    "message": "Restore defaults and reload"
  },
  "settings/SettingsScreen.ts | settings": {
    "message": "Settings"
  },
  "settings/SettingsScreen.ts | shortcuts": {
    "message": "Shortcuts"
  },
  "settings/SettingsScreen.ts | theseExperimentsAreParticularly": {
    "message": "These experiments are particularly unstable. Enable at your own risk."
  },
  "settings/SettingsScreen.ts | theseExperimentsCouldBeUnstable": {
    "message": "These experiments could be unstable or unreliable and may require you to restart DevTools."
  },
  "settings/SettingsScreen.ts | warning": {
    "message": "WARNING:"
  },
  "snippets/ModuleUIStrings.ts | runSnippet": {
    "message": "Run snippet"
  },
  "snippets/ScriptSnippetFileSystem.ts | linkedTo": {
    "message": "Linked to {PH1}"
  },
  "snippets/ScriptSnippetFileSystem.ts | scriptSnippet": {
    "message": "Script snippet #{PH1}"
  },
  "snippets/SnippetsQuickOpen.ts | noSnippetsFound": {
    "message": "No snippets found."
  },
  "text_editor/CodeMirrorTextEditor.js | codeEditor": {
    "message": "Code editor"
  },
  "web_audio/AudioContextContentBuilder.ts | audiocontext": {
    "message": "AudioContext"
  },
  "web_audio/AudioContextContentBuilder.ts | callbackBufferSize": {
    "message": "Callback Buffer Size"
  },
  "web_audio/AudioContextContentBuilder.ts | callbackInterval": {
    "message": "Callback Interval"
  },
  "web_audio/AudioContextContentBuilder.ts | currentTime": {
    "message": "Current Time"
  },
  "web_audio/AudioContextContentBuilder.ts | maxOutputChannels": {
    "message": "Max Output Channels"
  },
  "web_audio/AudioContextContentBuilder.ts | offlineaudiocontext": {
    "message": "OfflineAudioContext"
  },
  "web_audio/AudioContextContentBuilder.ts | renderCapacity": {
    "message": "Render Capacity"
  },
  "web_audio/AudioContextContentBuilder.ts | sampleRate": {
    "message": "Sample Rate"
  },
  "web_audio/AudioContextContentBuilder.ts | state": {
    "message": "State"
  },
  "web_audio/AudioContextSelector.ts | audioContextS": {
    "message": "Audio context: {PH1}"
  },
  "web_audio/AudioContextSelector.ts | noRecordings": {
    "message": "(no recordings)"
  },
  "web_audio/web_audio-meta.ts | audio": {
    "message": "audio"
  },
  "web_audio/web_audio-meta.ts | webaudio": {
    "message": "WebAudio"
  },
  "web_audio/WebAudioView.ts | openAPageThatUsesWebAudioApiTo": {
    "message": "Open a page that uses Web Audio API to start monitoring."
  },
  "webauthn/ModuleUIStrings.ts | webauthn": {
    "message": "WebAuthn"
  },
  "webauthn/webauthn-meta.ts | webauthn": {
    "message": "WebAuthn"
  },
  "webauthn/WebauthnPane.ts | actions": {
    "message": "Actions"
  },
  "webauthn/WebauthnPane.ts | active": {
    "message": "Active"
  },
  "webauthn/WebauthnPane.ts | add": {
    "message": "Add"
  },
  "webauthn/WebauthnPane.ts | addAuthenticator": {
    "message": "Add authenticator"
  },
  "webauthn/WebauthnPane.ts | authenticatorS": {
    "message": "Authenticator {PH1}"
  },
  "webauthn/WebauthnPane.ts | credentials": {
    "message": "Credentials"
  },
  "webauthn/WebauthnPane.ts | editName": {
    "message": "Edit name"
  },
  "webauthn/WebauthnPane.ts | enableVirtualAuthenticator": {
    "message": "Enable virtual authenticator environment"
  },
  "webauthn/WebauthnPane.ts | export": {
    "message": "Export"
  },
  "webauthn/WebauthnPane.ts | id": {
    "message": "ID"
  },
  "webauthn/WebauthnPane.ts | isResident": {
    "message": "Is Resident"
  },
  "webauthn/WebauthnPane.ts | learnMore": {
    "message": "Learn more"
  },
  "webauthn/WebauthnPane.ts | newAuthenticator": {
    "message": "New authenticator"
  },
  "webauthn/WebauthnPane.ts | no": {
    "message": "No"
  },
  "webauthn/WebauthnPane.ts | noCredentialsTryCallingSFromYour": {
    "message": "No credentials. Try calling {PH1} from your website."
  },
  "webauthn/WebauthnPane.ts | privateKeypem": {
    "message": "Private key.pem"
  },
  "webauthn/WebauthnPane.ts | protocol": {
    "message": "Protocol"
  },
  "webauthn/WebauthnPane.ts | remove": {
    "message": "Remove"
  },
  "webauthn/WebauthnPane.ts | rpId": {
    "message": "RP ID"
  },
  "webauthn/WebauthnPane.ts | saveName": {
    "message": "Save name"
  },
  "webauthn/WebauthnPane.ts | setSAsTheActiveAuthenticator": {
    "message": "Set {PH1} as the active authenticator"
  },
  "webauthn/WebauthnPane.ts | signCount": {
    "message": "Sign Count"
  },
  "webauthn/WebauthnPane.ts | supportsResidentKeys": {
    "message": "Supports resident keys"
  },
  "webauthn/WebauthnPane.ts | supportsUserVerification": {
    "message": "Supports user verification"
  },
  "webauthn/WebauthnPane.ts | transport": {
    "message": "Transport"
  },
  "webauthn/WebauthnPane.ts | userHandle": {
    "message": "User Handle"
  },
  "webauthn/WebauthnPane.ts | useWebauthnForPhishingresistant": {
    "message": "Use WebAuthn for phishing-resistant authentication"
  },
  "webauthn/WebauthnPane.ts | uuid": {
    "message": "UUID"
  },
  "webauthn/WebauthnPane.ts | yes": {
    "message": "Yes"
  },
  "workspace/UISourceCode.js | index": {
    "message": "(index)"
  },
  "workspace/UISourceCode.js | thisFileWasChangedExternally": {
    "message": "This file was changed externally. Would you like to reload it?"
  }
}

// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated from scripts/webidl-properties/index.js

/**
 * All the specs used when generating the DOM pinned properties dataset.
 */
export const SPECS = {
  html: 1,
  dom: 2,
  uievents: 4,
  pointerevents: 8,
  cssom: 16,
  'wai-aria': 32,
};

/**
 * The DOM pinned properties dataset. Generated from WebIDL data parsed from
 * the SPECS above.
 *
 * This is an object with WebIDL type names as keys and their WebIDL properties
 * and inheritance/include chains as values. The shape of each entry is:
 *
 * [TypeName: string]: { // a type name such as "HTMLInputElement"
 *   inheritance?: string, // an inherited Type
 *   includes?: Array<string>, // a set of Types to also include properties from
 *   props?: { // properties defined on this Type
 *     [PropName: string]: { // a property name such as "checked"
 *       global?: boolean // whether it's a "global" attribute
 *       specs?: number // bitfield of the specs in which the property is found
 *     }
 *   },
 *   states?: { // "states" in which only certain properties are "applicable"
 *    [selector: string]: { // a CSS selector such as "[type=checkbox]".
 *      ...props
 *    }
 *   }
 * }
 */
export const DOMPinnedProperties = {
  HTMLAllCollection: { props: { length: { specs: 1 } } },
  HTMLFormControlsCollection: { inheritance: 'HTMLCollection' },
  RadioNodeList: { inheritance: 'NodeList', props: { value: { specs: 1 } } },
  HTMLOptionsCollection: {
    inheritance: 'HTMLCollection',
    props: { length: { specs: 1 }, selectedIndex: { specs: 1 } },
  },
  DOMStringList: { props: { length: { specs: 1 } } },
  Document: {
    inheritance: 'Node',
    includes: [
      'GlobalEventHandlers',
      'DocumentAndElementEventHandlers',
      'NonElementParentNode',
      'DocumentOrShadowRoot',
      'ParentNode',
      'XPathEvaluatorBase',
    ],
    props: {
      location: { specs: 1 },
      domain: { specs: 1 },
      referrer: { specs: 1 },
      cookie: { specs: 1 },
      lastModified: { specs: 1 },
      readyState: { specs: 1 },
      title: { global: true, specs: 1 },
      dir: { global: true, specs: 1 },
      body: { specs: 1 },
      head: { specs: 1 },
      images: { specs: 1 },
      embeds: { specs: 1 },
      plugins: { specs: 1 },
      links: { specs: 1 },
      forms: { specs: 1 },
      scripts: { specs: 1 },
      currentScript: { specs: 1 },
      defaultView: { specs: 1 },
      designMode: { specs: 1 },
      hidden: { global: true, specs: 1 },
      visibilityState: { specs: 1 },
      onreadystatechange: { specs: 1 },
      onvisibilitychange: { specs: 1 },
      fgColor: { specs: 1 },
      linkColor: { specs: 1 },
      vlinkColor: { specs: 1 },
      alinkColor: { specs: 1 },
      bgColor: { specs: 1 },
      anchors: { specs: 1 },
      applets: { specs: 1 },
      all: { specs: 1 },
      implementation: { specs: 2 },
      URL: { specs: 2 },
      documentURI: { specs: 2 },
      compatMode: { specs: 2 },
      characterSet: { specs: 2 },
      charset: { specs: 2 },
      inputEncoding: { specs: 2 },
      contentType: { specs: 2 },
      doctype: { specs: 2 },
      documentElement: { specs: 2 },
    },
  },
  DocumentOrShadowRoot: {
    props: {
      activeElement: { specs: 1 },
      styleSheets: { specs: 16 },
      adoptedStyleSheets: { specs: 16 },
    },
  },
  HTMLElement: {
    inheritance: 'Element',
    includes: [
      'GlobalEventHandlers',
      'DocumentAndElementEventHandlers',
      'ElementContentEditable',
      'HTMLOrSVGElement',
      'ElementCSSInlineStyle',
    ],
    props: {
      title: { global: true, specs: 1 },
      lang: { global: true, specs: 1 },
      translate: { global: true, specs: 1 },
      dir: { global: true, specs: 1 },
      hidden: { global: true, specs: 1 },
      inert: { specs: 1 },
      accessKey: { specs: 1 },
      accessKeyLabel: { specs: 1 },
      draggable: { global: true, specs: 1 },
      spellcheck: { global: true, specs: 1 },
      autocapitalize: { global: true, specs: 1 },
      innerText: { specs: 1 },
      outerText: { specs: 1 },
    },
  },
  HTMLUnknownElement: { inheritance: 'HTMLElement' },
  HTMLOrSVGElement: {
    props: {
      dataset: { specs: 1 },
      nonce: { global: true, specs: 1 },
      autofocus: { global: true, specs: 1 },
      tabIndex: { specs: 1 },
    },
  },
  HTMLHtmlElement: {
    inheritance: 'HTMLElement',
    props: { version: { specs: 1 } },
  },
  HTMLHeadElement: { inheritance: 'HTMLElement' },
  HTMLTitleElement: {
    inheritance: 'HTMLElement',
    props: { text: { specs: 1 } },
  },
  HTMLBaseElement: {
    inheritance: 'HTMLElement',
    props: { href: { specs: 1 }, target: { specs: 1 } },
  },
  HTMLLinkElement: {
    inheritance: 'HTMLElement',
    includes: ['LinkStyle'],
    props: {
      href: { specs: 1 },
      crossOrigin: { specs: 1 },
      rel: { specs: 1 },
      as: { specs: 1 },
      relList: { specs: 1 },
      media: { specs: 1 },
      integrity: { specs: 1 },
      hreflang: { specs: 1 },
      type: { specs: 1 },
      sizes: { specs: 1 },
      imageSrcset: { specs: 1 },
      imageSizes: { specs: 1 },
      referrerPolicy: { specs: 1 },
      blocking: { specs: 1 },
      disabled: { specs: 1 },
      charset: { specs: 1 },
      rev: { specs: 1 },
      target: { specs: 1 },
    },
  },
  HTMLMetaElement: {
    inheritance: 'HTMLElement',
    props: {
      name: { specs: 1 },
      httpEquiv: { specs: 1 },
      content: { specs: 1 },
      media: { specs: 1 },
      scheme: { specs: 1 },
    },
  },
  HTMLStyleElement: {
    inheritance: 'HTMLElement',
    includes: ['LinkStyle'],
    props: {
      disabled: { specs: 1 },
      media: { specs: 1 },
      blocking: { specs: 1 },
      type: { specs: 1 },
    },
  },
  HTMLBodyElement: {
    inheritance: 'HTMLElement',
    includes: ['WindowEventHandlers'],
    props: {
      text: { specs: 1 },
      link: { specs: 1 },
      vLink: { specs: 1 },
      aLink: { specs: 1 },
      bgColor: { specs: 1 },
      background: { specs: 1 },
    },
  },
  HTMLHeadingElement: {
    inheritance: 'HTMLElement',
    props: { align: { specs: 1 } },
  },
  HTMLParagraphElement: {
    inheritance: 'HTMLElement',
    props: { align: { specs: 1 } },
  },
  HTMLHRElement: {
    inheritance: 'HTMLElement',
    props: {
      align: { specs: 1 },
      color: { specs: 1 },
      noShade: { specs: 1 },
      size: { specs: 1 },
      width: { specs: 1 },
    },
  },
  HTMLPreElement: {
    inheritance: 'HTMLElement',
    props: { width: { specs: 1 } },
  },
  HTMLQuoteElement: {
    inheritance: 'HTMLElement',
    props: { cite: { specs: 1 } },
  },
  HTMLOListElement: {
    inheritance: 'HTMLElement',
    props: {
      reversed: { specs: 1 },
      start: { specs: 1 },
      type: { specs: 1 },
      compact: { specs: 1 },
    },
  },
  HTMLUListElement: {
    inheritance: 'HTMLElement',
    props: { compact: { specs: 1 }, type: { specs: 1 } },
  },
  HTMLMenuElement: {
    inheritance: 'HTMLElement',
    props: { compact: { specs: 1 } },
  },
  HTMLLIElement: {
    inheritance: 'HTMLElement',
    props: { value: { specs: 1 }, type: { specs: 1 } },
  },
  HTMLDListElement: {
    inheritance: 'HTMLElement',
    props: { compact: { specs: 1 } },
  },
  HTMLDivElement: {
    inheritance: 'HTMLElement',
    props: { align: { specs: 1 } },
  },
  HTMLAnchorElement: {
    inheritance: 'HTMLElement',
    includes: ['HTMLHyperlinkElementUtils'],
    props: {
      target: { specs: 1 },
      download: { specs: 1 },
      ping: { specs: 1 },
      rel: { specs: 1 },
      relList: { specs: 1 },
      hreflang: { specs: 1 },
      type: { specs: 1 },
      text: { specs: 1 },
      referrerPolicy: { specs: 1 },
      coords: { specs: 1 },
      charset: { specs: 1 },
      name: { specs: 1 },
      rev: { specs: 1 },
      shape: { specs: 1 },
    },
  },
  HTMLDataElement: {
    inheritance: 'HTMLElement',
    props: { value: { specs: 1 } },
  },
  HTMLTimeElement: {
    inheritance: 'HTMLElement',
    props: { dateTime: { specs: 1 } },
  },
  HTMLSpanElement: { inheritance: 'HTMLElement' },
  HTMLBRElement: { inheritance: 'HTMLElement', props: { clear: { specs: 1 } } },
  HTMLHyperlinkElementUtils: {
    props: {
      href: { specs: 1 },
      origin: { specs: 1 },
      protocol: { specs: 1 },
      username: { specs: 1 },
      password: { specs: 1 },
      host: { specs: 1 },
      hostname: { specs: 1 },
      port: { specs: 1 },
      pathname: { specs: 1 },
      search: { specs: 1 },
      hash: { specs: 1 },
    },
  },
  HTMLModElement: {
    inheritance: 'HTMLElement',
    props: { cite: { specs: 1 }, dateTime: { specs: 1 } },
  },
  HTMLPictureElement: { inheritance: 'HTMLElement' },
  HTMLSourceElement: {
    inheritance: 'HTMLElement',
    props: {
      src: { specs: 1 },
      type: { specs: 1 },
      srcset: { specs: 1 },
      sizes: { specs: 1 },
      media: { specs: 1 },
      width: { specs: 1 },
      height: { specs: 1 },
    },
  },
  HTMLImageElement: {
    inheritance: 'HTMLElement',
    props: {
      alt: { specs: 1 },
      src: { specs: 1 },
      srcset: { specs: 1 },
      sizes: { specs: 1 },
      crossOrigin: { specs: 1 },
      useMap: { specs: 1 },
      isMap: { specs: 1 },
      width: { specs: 1 },
      height: { specs: 1 },
      naturalWidth: { specs: 1 },
      naturalHeight: { specs: 1 },
      complete: { specs: 1 },
      currentSrc: { specs: 1 },
      referrerPolicy: { specs: 1 },
      decoding: { specs: 1 },
      loading: { specs: 1 },
      name: { specs: 1 },
      lowsrc: { specs: 1 },
      align: { specs: 1 },
      hspace: { specs: 1 },
      vspace: { specs: 1 },
      longDesc: { specs: 1 },
      border: { specs: 1 },
    },
  },
  HTMLIFrameElement: {
    inheritance: 'HTMLElement',
    props: {
      src: { specs: 1 },
      srcdoc: { specs: 1 },
      name: { specs: 1 },
      sandbox: { specs: 1 },
      allow: { specs: 1 },
      allowFullscreen: { specs: 1 },
      width: { specs: 1 },
      height: { specs: 1 },
      referrerPolicy: { specs: 1 },
      loading: { specs: 1 },
      contentDocument: { specs: 1 },
      contentWindow: { specs: 1 },
      align: { specs: 1 },
      scrolling: { specs: 1 },
      frameBorder: { specs: 1 },
      longDesc: { specs: 1 },
      marginHeight: { specs: 1 },
      marginWidth: { specs: 1 },
    },
  },
  HTMLEmbedElement: {
    inheritance: 'HTMLElement',
    props: {
      src: { specs: 1 },
      type: { specs: 1 },
      width: { specs: 1 },
      height: { specs: 1 },
      align: { specs: 1 },
      name: { specs: 1 },
    },
  },
  HTMLObjectElement: {
    inheritance: 'HTMLElement',
    props: {
      data: { specs: 1 },
      type: { specs: 1 },
      name: { specs: 1 },
      form: { specs: 1 },
      width: { specs: 1 },
      height: { specs: 1 },
      contentDocument: { specs: 1 },
      contentWindow: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
      align: { specs: 1 },
      archive: { specs: 1 },
      code: { specs: 1 },
      declare: { specs: 1 },
      hspace: { specs: 1 },
      standby: { specs: 1 },
      vspace: { specs: 1 },
      codeBase: { specs: 1 },
      codeType: { specs: 1 },
      useMap: { specs: 1 },
      border: { specs: 1 },
    },
  },
  HTMLVideoElement: {
    inheritance: 'HTMLMediaElement',
    props: {
      width: { specs: 1 },
      height: { specs: 1 },
      videoWidth: { specs: 1 },
      videoHeight: { specs: 1 },
      poster: { specs: 1 },
      playsInline: { specs: 1 },
    },
  },
  HTMLAudioElement: { inheritance: 'HTMLMediaElement' },
  HTMLTrackElement: {
    inheritance: 'HTMLElement',
    props: {
      kind: { specs: 1 },
      src: { specs: 1 },
      srclang: { specs: 1 },
      label: { specs: 1 },
      default: { specs: 1 },
      readyState: { specs: 1 },
      track: { specs: 1 },
    },
  },
  HTMLMediaElement: {
    inheritance: 'HTMLElement',
    props: {
      error: { specs: 1 },
      src: { specs: 1 },
      srcObject: { specs: 1 },
      currentSrc: { specs: 1 },
      crossOrigin: { specs: 1 },
      networkState: { specs: 1 },
      preload: { specs: 1 },
      buffered: { specs: 1 },
      readyState: { specs: 1 },
      seeking: { specs: 1 },
      currentTime: { specs: 1 },
      duration: { specs: 1 },
      paused: { specs: 1 },
      defaultPlaybackRate: { specs: 1 },
      playbackRate: { specs: 1 },
      preservesPitch: { specs: 1 },
      played: { specs: 1 },
      seekable: { specs: 1 },
      ended: { specs: 1 },
      autoplay: { specs: 1 },
      loop: { specs: 1 },
      controls: { specs: 1 },
      volume: { specs: 1 },
      muted: { specs: 1 },
      defaultMuted: { specs: 1 },
      audioTracks: { specs: 1 },
      videoTracks: { specs: 1 },
      textTracks: { specs: 1 },
    },
  },
  MediaError: { props: { code: { specs: 1 }, message: { specs: 1 } } },
  AudioTrackList: {
    inheritance: 'EventTarget',
    props: {
      length: { specs: 1 },
      onchange: { specs: 1 },
      onaddtrack: { specs: 1 },
      onremovetrack: { specs: 1 },
    },
  },
  AudioTrack: {
    props: {
      id: { specs: 1 },
      kind: { specs: 1 },
      label: { specs: 1 },
      language: { specs: 1 },
      enabled: { specs: 1 },
    },
  },
  VideoTrackList: {
    inheritance: 'EventTarget',
    props: {
      length: { specs: 1 },
      selectedIndex: { specs: 1 },
      onchange: { specs: 1 },
      onaddtrack: { specs: 1 },
      onremovetrack: { specs: 1 },
    },
  },
  VideoTrack: {
    props: {
      id: { specs: 1 },
      kind: { specs: 1 },
      label: { specs: 1 },
      language: { specs: 1 },
      selected: { specs: 1 },
    },
  },
  TextTrackList: {
    inheritance: 'EventTarget',
    props: {
      length: { specs: 1 },
      onchange: { specs: 1 },
      onaddtrack: { specs: 1 },
      onremovetrack: { specs: 1 },
    },
  },
  TextTrack: {
    inheritance: 'EventTarget',
    props: {
      kind: { specs: 1 },
      label: { specs: 1 },
      language: { specs: 1 },
      id: { specs: 1 },
      inBandMetadataTrackDispatchType: { specs: 1 },
      mode: { specs: 1 },
      cues: { specs: 1 },
      activeCues: { specs: 1 },
      oncuechange: { specs: 1 },
    },
  },
  TextTrackCueList: { props: { length: { specs: 1 } } },
  TextTrackCue: {
    inheritance: 'EventTarget',
    props: {
      track: { specs: 1 },
      id: { specs: 1 },
      startTime: { specs: 1 },
      endTime: { specs: 1 },
      pauseOnExit: { specs: 1 },
      onenter: { specs: 1 },
      onexit: { specs: 1 },
    },
  },
  TimeRanges: { props: { length: { specs: 1 } } },
  TrackEvent: { inheritance: 'Event', props: { track: { specs: 1 } } },
  TrackEventInit: { inheritance: 'EventInit', props: { track: { specs: 1 } } },
  HTMLMapElement: {
    inheritance: 'HTMLElement',
    props: { name: { specs: 1 }, areas: { specs: 1 } },
  },
  HTMLAreaElement: {
    inheritance: 'HTMLElement',
    includes: ['HTMLHyperlinkElementUtils'],
    props: {
      alt: { specs: 1 },
      coords: { specs: 1 },
      shape: { specs: 1 },
      target: { specs: 1 },
      download: { specs: 1 },
      ping: { specs: 1 },
      rel: { specs: 1 },
      relList: { specs: 1 },
      referrerPolicy: { specs: 1 },
      noHref: { specs: 1 },
    },
  },
  HTMLTableElement: {
    inheritance: 'HTMLElement',
    props: {
      caption: { specs: 1 },
      tHead: { specs: 1 },
      tFoot: { specs: 1 },
      tBodies: { specs: 1 },
      rows: { specs: 1 },
      align: { specs: 1 },
      border: { specs: 1 },
      frame: { specs: 1 },
      rules: { specs: 1 },
      summary: { specs: 1 },
      width: { specs: 1 },
      bgColor: { specs: 1 },
      cellPadding: { specs: 1 },
      cellSpacing: { specs: 1 },
    },
  },
  HTMLTableCaptionElement: {
    inheritance: 'HTMLElement',
    props: { align: { specs: 1 } },
  },
  HTMLTableColElement: {
    inheritance: 'HTMLElement',
    props: {
      span: { specs: 1 },
      align: { specs: 1 },
      ch: { specs: 1 },
      chOff: { specs: 1 },
      vAlign: { specs: 1 },
      width: { specs: 1 },
    },
  },
  HTMLTableSectionElement: {
    inheritance: 'HTMLElement',
    props: {
      rows: { specs: 1 },
      align: { specs: 1 },
      ch: { specs: 1 },
      chOff: { specs: 1 },
      vAlign: { specs: 1 },
    },
  },
  HTMLTableRowElement: {
    inheritance: 'HTMLElement',
    props: {
      rowIndex: { specs: 1 },
      sectionRowIndex: { specs: 1 },
      cells: { specs: 1 },
      align: { specs: 1 },
      ch: { specs: 1 },
      chOff: { specs: 1 },
      vAlign: { specs: 1 },
      bgColor: { specs: 1 },
    },
  },
  HTMLTableCellElement: {
    inheritance: 'HTMLElement',
    props: {
      colSpan: { specs: 1 },
      rowSpan: { specs: 1 },
      headers: { specs: 1 },
      cellIndex: { specs: 1 },
      scope: { specs: 1 },
      abbr: { specs: 1 },
      align: { specs: 1 },
      axis: { specs: 1 },
      height: { specs: 1 },
      width: { specs: 1 },
      ch: { specs: 1 },
      chOff: { specs: 1 },
      noWrap: { specs: 1 },
      vAlign: { specs: 1 },
      bgColor: { specs: 1 },
    },
  },
  HTMLFormElement: {
    inheritance: 'HTMLElement',
    props: {
      acceptCharset: { specs: 1 },
      action: { specs: 1 },
      autocomplete: { specs: 1 },
      enctype: { specs: 1 },
      encoding: { specs: 1 },
      method: { specs: 1 },
      name: { specs: 1 },
      noValidate: { specs: 1 },
      target: { specs: 1 },
      rel: { specs: 1 },
      relList: { specs: 1 },
      elements: { specs: 1 },
      length: { specs: 1 },
    },
  },
  HTMLLabelElement: {
    inheritance: 'HTMLElement',
    props: { form: { specs: 1 }, htmlFor: { specs: 1 }, control: { specs: 1 } },
  },
  HTMLInputElement: {
    inheritance: 'HTMLElement',
    props: {
      accept: { specs: 1 },
      alt: { specs: 1 },
      autocomplete: { specs: 1 },
      defaultChecked: { specs: 1 },
      checked: { specs: 1 },
      dirName: { specs: 1 },
      disabled: { specs: 1 },
      form: { specs: 1 },
      files: { specs: 1 },
      formAction: { specs: 1 },
      formEnctype: { specs: 1 },
      formMethod: { specs: 1 },
      formNoValidate: { specs: 1 },
      formTarget: { specs: 1 },
      height: { specs: 1 },
      indeterminate: { specs: 1 },
      list: { specs: 1 },
      max: { specs: 1 },
      maxLength: { specs: 1 },
      min: { specs: 1 },
      minLength: { specs: 1 },
      multiple: { specs: 1 },
      name: { specs: 1 },
      pattern: { specs: 1 },
      placeholder: { specs: 1 },
      readOnly: { specs: 1 },
      required: { specs: 1 },
      size: { specs: 1 },
      src: { specs: 1 },
      step: { specs: 1 },
      type: { specs: 1 },
      defaultValue: { specs: 1 },
      value: { specs: 1 },
      valueAsDate: { specs: 1 },
      valueAsNumber: { specs: 1 },
      width: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
      labels: { specs: 1 },
      selectionStart: { specs: 1 },
      selectionEnd: { specs: 1 },
      selectionDirection: { specs: 1 },
      align: { specs: 1 },
      useMap: { specs: 1 },
    },
    states: {
      '[type=hidden]': { autocomplete: { specs: 1 }, value: { specs: 1 } },
      '[type=text]': {
        autocomplete: { specs: 1 },
        dirName: { specs: 1 },
        list: { specs: 1 },
        maxLength: { specs: 1 },
        minLength: { specs: 1 },
        pattern: { specs: 1 },
        placeholder: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        size: { specs: 1 },
        value: { specs: 1 },
        selectionStart: { specs: 1 },
        selectionEnd: { specs: 1 },
        selectionDirection: { specs: 1 },
      },
      '[type=search]': {
        autocomplete: { specs: 1 },
        dirName: { specs: 1 },
        list: { specs: 1 },
        maxLength: { specs: 1 },
        minLength: { specs: 1 },
        pattern: { specs: 1 },
        placeholder: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        size: { specs: 1 },
        value: { specs: 1 },
        selectionStart: { specs: 1 },
        selectionEnd: { specs: 1 },
        selectionDirection: { specs: 1 },
      },
      '[type=url]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        maxLength: { specs: 1 },
        minLength: { specs: 1 },
        pattern: { specs: 1 },
        placeholder: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        size: { specs: 1 },
        value: { specs: 1 },
        selectionStart: { specs: 1 },
        selectionEnd: { specs: 1 },
        selectionDirection: { specs: 1 },
      },
      '[type=tel]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        maxLength: { specs: 1 },
        minLength: { specs: 1 },
        pattern: { specs: 1 },
        placeholder: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        size: { specs: 1 },
        value: { specs: 1 },
        selectionStart: { specs: 1 },
        selectionEnd: { specs: 1 },
        selectionDirection: { specs: 1 },
      },
      '[type=email]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        maxLength: { specs: 1 },
        minLength: { specs: 1 },
        multiple: { specs: 1 },
        pattern: { specs: 1 },
        placeholder: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        size: { specs: 1 },
        value: { specs: 1 },
      },
      '[type=password]': {
        autocomplete: { specs: 1 },
        maxLength: { specs: 1 },
        minLength: { specs: 1 },
        pattern: { specs: 1 },
        placeholder: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        size: { specs: 1 },
        value: { specs: 1 },
        selectionStart: { specs: 1 },
        selectionEnd: { specs: 1 },
        selectionDirection: { specs: 1 },
      },
      '[type=date]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        max: { specs: 1 },
        min: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        step: { specs: 1 },
        value: { specs: 1 },
        valueAsDate: { specs: 1 },
        valueAsNumber: { specs: 1 },
      },
      '[type=month]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        max: { specs: 1 },
        min: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        step: { specs: 1 },
        value: { specs: 1 },
        valueAsDate: { specs: 1 },
        valueAsNumber: { specs: 1 },
      },
      '[type=week]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        max: { specs: 1 },
        min: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        step: { specs: 1 },
        value: { specs: 1 },
        valueAsDate: { specs: 1 },
        valueAsNumber: { specs: 1 },
      },
      '[type=time]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        max: { specs: 1 },
        min: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        step: { specs: 1 },
        value: { specs: 1 },
        valueAsDate: { specs: 1 },
        valueAsNumber: { specs: 1 },
      },
      '[type=datetime-local]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        max: { specs: 1 },
        min: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        step: { specs: 1 },
        value: { specs: 1 },
        valueAsNumber: { specs: 1 },
      },
      '[type=number]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        max: { specs: 1 },
        min: { specs: 1 },
        placeholder: { specs: 1 },
        readOnly: { specs: 1 },
        required: { specs: 1 },
        step: { specs: 1 },
        value: { specs: 1 },
        valueAsNumber: { specs: 1 },
      },
      '[type=range]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        max: { specs: 1 },
        min: { specs: 1 },
        step: { specs: 1 },
        value: { specs: 1 },
        valueAsNumber: { specs: 1 },
      },
      '[type=color]': {
        autocomplete: { specs: 1 },
        list: { specs: 1 },
        value: { specs: 1 },
      },
      '[type=checkbox]': {
        checked: { specs: 1 },
        required: { specs: 1 },
        value: { specs: 1 },
      },
      '[type=radio]': {
        checked: { specs: 1 },
        required: { specs: 1 },
        value: { specs: 1 },
      },
      '[type=file]': {
        accept: { specs: 1 },
        files: { specs: 1 },
        multiple: { specs: 1 },
        required: { specs: 1 },
        value: { specs: 1 },
      },
      '[type=submit]': {
        formAction: { specs: 1 },
        formEnctype: { specs: 1 },
        formMethod: { specs: 1 },
        formNoValidate: { specs: 1 },
        formTarget: { specs: 1 },
        value: { specs: 1 },
      },
      '[type=image]': {
        alt: { specs: 1 },
        formAction: { specs: 1 },
        formEnctype: { specs: 1 },
        formMethod: { specs: 1 },
        formNoValidate: { specs: 1 },
        formTarget: { specs: 1 },
        height: { specs: 1 },
        src: { specs: 1 },
        value: { specs: 1 },
        width: { specs: 1 },
      },
      '[type=reset]': { value: { specs: 1 } },
      '[type=button]': { value: { specs: 1 } },
    },
  },
  HTMLButtonElement: {
    inheritance: 'HTMLElement',
    props: {
      disabled: { specs: 1 },
      form: { specs: 1 },
      formAction: { specs: 1 },
      formEnctype: { specs: 1 },
      formMethod: { specs: 1 },
      formNoValidate: { specs: 1 },
      formTarget: { specs: 1 },
      name: { specs: 1 },
      type: { specs: 1 },
      value: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
      labels: { specs: 1 },
    },
  },
  HTMLSelectElement: {
    inheritance: 'HTMLElement',
    props: {
      autocomplete: { specs: 1 },
      disabled: { specs: 1 },
      form: { specs: 1 },
      multiple: { specs: 1 },
      name: { specs: 1 },
      required: { specs: 1 },
      size: { specs: 1 },
      type: { specs: 1 },
      options: { specs: 1 },
      length: { specs: 1 },
      selectedOptions: { specs: 1 },
      selectedIndex: { specs: 1 },
      value: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
      labels: { specs: 1 },
    },
  },
  HTMLDataListElement: {
    inheritance: 'HTMLElement',
    props: { options: { specs: 1 } },
  },
  HTMLOptGroupElement: {
    inheritance: 'HTMLElement',
    props: { disabled: { specs: 1 }, label: { specs: 1 } },
  },
  HTMLOptionElement: {
    inheritance: 'HTMLElement',
    props: {
      disabled: { specs: 1 },
      form: { specs: 1 },
      label: { specs: 1 },
      defaultSelected: { specs: 1 },
      selected: { specs: 1 },
      value: { specs: 1 },
      text: { specs: 1 },
      index: { specs: 1 },
    },
  },
  HTMLTextAreaElement: {
    inheritance: 'HTMLElement',
    props: {
      autocomplete: { specs: 1 },
      cols: { specs: 1 },
      dirName: { specs: 1 },
      disabled: { specs: 1 },
      form: { specs: 1 },
      maxLength: { specs: 1 },
      minLength: { specs: 1 },
      name: { specs: 1 },
      placeholder: { specs: 1 },
      readOnly: { specs: 1 },
      required: { specs: 1 },
      rows: { specs: 1 },
      wrap: { specs: 1 },
      type: { specs: 1 },
      defaultValue: { specs: 1 },
      value: { specs: 1 },
      textLength: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
      labels: { specs: 1 },
      selectionStart: { specs: 1 },
      selectionEnd: { specs: 1 },
      selectionDirection: { specs: 1 },
    },
  },
  HTMLOutputElement: {
    inheritance: 'HTMLElement',
    props: {
      htmlFor: { specs: 1 },
      form: { specs: 1 },
      name: { specs: 1 },
      type: { specs: 1 },
      defaultValue: { specs: 1 },
      value: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
      labels: { specs: 1 },
    },
  },
  HTMLProgressElement: {
    inheritance: 'HTMLElement',
    props: {
      value: { specs: 1 },
      max: { specs: 1 },
      position: { specs: 1 },
      labels: { specs: 1 },
    },
  },
  HTMLMeterElement: {
    inheritance: 'HTMLElement',
    props: {
      value: { specs: 1 },
      min: { specs: 1 },
      max: { specs: 1 },
      low: { specs: 1 },
      high: { specs: 1 },
      optimum: { specs: 1 },
      labels: { specs: 1 },
    },
  },
  HTMLFieldSetElement: {
    inheritance: 'HTMLElement',
    props: {
      disabled: { specs: 1 },
      form: { specs: 1 },
      name: { specs: 1 },
      type: { specs: 1 },
      elements: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
    },
  },
  HTMLLegendElement: {
    inheritance: 'HTMLElement',
    props: { form: { specs: 1 }, align: { specs: 1 } },
  },
  ValidityState: {
    props: {
      valueMissing: { specs: 1 },
      typeMismatch: { specs: 1 },
      patternMismatch: { specs: 1 },
      tooLong: { specs: 1 },
      tooShort: { specs: 1 },
      rangeUnderflow: { specs: 1 },
      rangeOverflow: { specs: 1 },
      stepMismatch: { specs: 1 },
      badInput: { specs: 1 },
      customError: { specs: 1 },
      valid: { specs: 1 },
    },
  },
  SubmitEvent: { inheritance: 'Event', props: { submitter: { specs: 1 } } },
  SubmitEventInit: {
    inheritance: 'EventInit',
    props: { submitter: { specs: 1 } },
  },
  FormDataEvent: { inheritance: 'Event', props: { formData: { specs: 1 } } },
  FormDataEventInit: {
    inheritance: 'EventInit',
    props: { formData: { specs: 1 } },
  },
  HTMLDetailsElement: {
    inheritance: 'HTMLElement',
    props: { open: { specs: 1 } },
  },
  HTMLDialogElement: {
    inheritance: 'HTMLElement',
    props: { open: { specs: 1 }, returnValue: { specs: 1 } },
  },
  HTMLScriptElement: {
    inheritance: 'HTMLElement',
    props: {
      src: { specs: 1 },
      type: { specs: 1 },
      noModule: { specs: 1 },
      async: { specs: 1 },
      defer: { specs: 1 },
      crossOrigin: { specs: 1 },
      text: { specs: 1 },
      integrity: { specs: 1 },
      referrerPolicy: { specs: 1 },
      blocking: { specs: 1 },
      charset: { specs: 1 },
      event: { specs: 1 },
      htmlFor: { specs: 1 },
    },
  },
  HTMLTemplateElement: {
    inheritance: 'HTMLElement',
    props: { content: { specs: 1 } },
  },
  HTMLSlotElement: {
    inheritance: 'HTMLElement',
    props: { name: { specs: 1 } },
  },
  AssignedNodesOptions: { props: { flatten: { specs: 1 } } },
  HTMLCanvasElement: {
    inheritance: 'HTMLElement',
    props: { width: { specs: 1 }, height: { specs: 1 } },
  },
  CanvasRenderingContext2DSettings: {
    props: {
      alpha: { specs: 1 },
      desynchronized: { specs: 1 },
      colorSpace: { specs: 1 },
      willReadFrequently: { specs: 1 },
    },
  },
  CanvasRenderingContext2D: {
    includes: [
      'CanvasState',
      'CanvasTransform',
      'CanvasCompositing',
      'CanvasImageSmoothing',
      'CanvasFillStrokeStyles',
      'CanvasShadowStyles',
      'CanvasFilters',
      'CanvasRect',
      'CanvasDrawPath',
      'CanvasUserInterface',
      'CanvasText',
      'CanvasDrawImage',
      'CanvasImageData',
      'CanvasPathDrawingStyles',
      'CanvasTextDrawingStyles',
      'CanvasPath',
    ],
    props: { canvas: { specs: 1 } },
  },
  CanvasCompositing: {
    props: {
      globalAlpha: { specs: 1 },
      globalCompositeOperation: { specs: 1 },
    },
  },
  CanvasImageSmoothing: {
    props: {
      imageSmoothingEnabled: { specs: 1 },
      imageSmoothingQuality: { specs: 1 },
    },
  },
  CanvasFillStrokeStyles: {
    props: { strokeStyle: { specs: 1 }, fillStyle: { specs: 1 } },
  },
  CanvasShadowStyles: {
    props: {
      shadowOffsetX: { specs: 1 },
      shadowOffsetY: { specs: 1 },
      shadowBlur: { specs: 1 },
      shadowColor: { specs: 1 },
    },
  },
  CanvasFilters: { props: { filter: { specs: 1 } } },
  CanvasPathDrawingStyles: {
    props: {
      lineWidth: { specs: 1 },
      lineCap: { specs: 1 },
      lineJoin: { specs: 1 },
      miterLimit: { specs: 1 },
      lineDashOffset: { specs: 1 },
    },
  },
  CanvasTextDrawingStyles: {
    props: {
      font: { specs: 1 },
      textAlign: { specs: 1 },
      textBaseline: { specs: 1 },
      direction: { specs: 1 },
      letterSpacing: { specs: 1 },
      fontKerning: { specs: 1 },
      fontStretch: { specs: 1 },
      fontVariantCaps: { specs: 1 },
      textRendering: { specs: 1 },
      wordSpacing: { specs: 1 },
    },
  },
  TextMetrics: {
    props: {
      width: { specs: 1 },
      actualBoundingBoxLeft: { specs: 1 },
      actualBoundingBoxRight: { specs: 1 },
      fontBoundingBoxAscent: { specs: 1 },
      fontBoundingBoxDescent: { specs: 1 },
      actualBoundingBoxAscent: { specs: 1 },
      actualBoundingBoxDescent: { specs: 1 },
      emHeightAscent: { specs: 1 },
      emHeightDescent: { specs: 1 },
      hangingBaseline: { specs: 1 },
      alphabeticBaseline: { specs: 1 },
      ideographicBaseline: { specs: 1 },
    },
  },
  ImageDataSettings: { props: { colorSpace: { specs: 1 } } },
  ImageData: {
    props: {
      width: { specs: 1 },
      height: { specs: 1 },
      data: { specs: 1 },
      colorSpace: { specs: 1 },
    },
  },
  Path2D: { includes: ['CanvasPath'] },
  ImageBitmapRenderingContext: { props: { canvas: { specs: 1 } } },
  ImageBitmapRenderingContextSettings: { props: { alpha: { specs: 1 } } },
  ImageEncodeOptions: { props: { type: { specs: 1 }, quality: { specs: 1 } } },
  OffscreenCanvas: {
    inheritance: 'EventTarget',
    props: {
      width: { specs: 1 },
      height: { specs: 1 },
      oncontextlost: { specs: 1 },
      oncontextrestored: { specs: 1 },
    },
  },
  OffscreenCanvasRenderingContext2D: {
    includes: [
      'CanvasState',
      'CanvasTransform',
      'CanvasCompositing',
      'CanvasImageSmoothing',
      'CanvasFillStrokeStyles',
      'CanvasShadowStyles',
      'CanvasFilters',
      'CanvasRect',
      'CanvasDrawPath',
      'CanvasText',
      'CanvasDrawImage',
      'CanvasImageData',
      'CanvasPathDrawingStyles',
      'CanvasTextDrawingStyles',
      'CanvasPath',
    ],
    props: { canvas: { specs: 1 } },
  },
  ElementDefinitionOptions: { props: { extends: { specs: 1 } } },
  ElementInternals: {
    includes: ['ARIAMixin'],
    props: {
      shadowRoot: { specs: 1 },
      form: { specs: 1 },
      willValidate: { specs: 1 },
      validity: { specs: 1 },
      validationMessage: { specs: 1 },
      labels: { specs: 1 },
    },
  },
  ValidityStateFlags: {
    props: {
      valueMissing: { specs: 1 },
      typeMismatch: { specs: 1 },
      patternMismatch: { specs: 1 },
      tooLong: { specs: 1 },
      tooShort: { specs: 1 },
      rangeUnderflow: { specs: 1 },
      rangeOverflow: { specs: 1 },
      stepMismatch: { specs: 1 },
      badInput: { specs: 1 },
      customError: { specs: 1 },
    },
  },
  FocusOptions: { props: { preventScroll: { specs: 1 } } },
  ElementContentEditable: {
    props: {
      contentEditable: { specs: 1 },
      enterKeyHint: { specs: 1 },
      isContentEditable: { specs: 1 },
      inputMode: { specs: 1 },
    },
  },
  DataTransfer: {
    props: {
      dropEffect: { specs: 1 },
      effectAllowed: { specs: 1 },
      items: { specs: 1 },
      types: { specs: 1 },
      files: { specs: 1 },
    },
  },
  DataTransferItemList: { props: { length: { specs: 1 } } },
  DataTransferItem: { props: { kind: { specs: 1 }, type: { specs: 1 } } },
  DragEvent: {
    inheritance: 'MouseEvent',
    props: { dataTransfer: { specs: 1 } },
  },
  DragEventInit: {
    inheritance: 'MouseEventInit',
    props: { dataTransfer: { specs: 1 } },
  },
  Window: {
    inheritance: 'EventTarget',
    includes: [
      'GlobalEventHandlers',
      'WindowEventHandlers',
      'WindowOrWorkerGlobalScope',
      'AnimationFrameProvider',
      'WindowSessionStorage',
      'WindowLocalStorage',
    ],
    props: {
      window: { specs: 1 },
      self: { specs: 1 },
      document: { specs: 1 },
      name: { specs: 1 },
      location: { specs: 1 },
      history: { specs: 1 },
      customElements: { specs: 1 },
      locationbar: { specs: 1 },
      menubar: { specs: 1 },
      personalbar: { specs: 1 },
      scrollbars: { specs: 1 },
      statusbar: { specs: 1 },
      toolbar: { specs: 1 },
      status: { specs: 1 },
      closed: { specs: 1 },
      frames: { specs: 1 },
      length: { specs: 1 },
      top: { specs: 1 },
      opener: { specs: 1 },
      parent: { specs: 1 },
      frameElement: { specs: 1 },
      navigator: { specs: 1 },
      clientInformation: { specs: 1 },
      originAgentCluster: { specs: 1 },
      external: { specs: 1 },
      event: { specs: 2 },
    },
  },
  WindowPostMessageOptions: {
    inheritance: 'StructuredSerializeOptions',
    props: { targetOrigin: { specs: 1 } },
  },
  BarProp: { props: { visible: { specs: 1 } } },
  History: {
    props: {
      length: { specs: 1 },
      scrollRestoration: { specs: 1 },
      state: { specs: 1 },
    },
  },
  Location: {
    props: {
      href: { specs: 1 },
      origin: { specs: 1 },
      protocol: { specs: 1 },
      host: { specs: 1 },
      hostname: { specs: 1 },
      port: { specs: 1 },
      pathname: { specs: 1 },
      search: { specs: 1 },
      hash: { specs: 1 },
      ancestorOrigins: { specs: 1 },
    },
  },
  PopStateEvent: { inheritance: 'Event', props: { state: { specs: 1 } } },
  PopStateEventInit: {
    inheritance: 'EventInit',
    props: { state: { specs: 1 } },
  },
  HashChangeEvent: {
    inheritance: 'Event',
    props: { oldURL: { specs: 1 }, newURL: { specs: 1 } },
  },
  HashChangeEventInit: {
    inheritance: 'EventInit',
    props: { oldURL: { specs: 1 }, newURL: { specs: 1 } },
  },
  PageTransitionEvent: {
    inheritance: 'Event',
    props: { persisted: { specs: 1 } },
  },
  PageTransitionEventInit: {
    inheritance: 'EventInit',
    props: { persisted: { specs: 1 } },
  },
  BeforeUnloadEvent: {
    inheritance: 'Event',
    props: { returnValue: { specs: 1 } },
  },
  ErrorEvent: {
    inheritance: 'Event',
    props: {
      message: { specs: 1 },
      filename: { specs: 1 },
      lineno: { specs: 1 },
      colno: { specs: 1 },
      error: { specs: 1 },
    },
  },
  ErrorEventInit: {
    inheritance: 'EventInit',
    props: {
      message: { specs: 1 },
      filename: { specs: 1 },
      lineno: { specs: 1 },
      colno: { specs: 1 },
      error: { specs: 1 },
    },
  },
  PromiseRejectionEvent: {
    inheritance: 'Event',
    props: { promise: { specs: 1 }, reason: { specs: 1 } },
  },
  PromiseRejectionEventInit: {
    inheritance: 'EventInit',
    props: { promise: { specs: 1 }, reason: { specs: 1 } },
  },
  GlobalEventHandlers: {
    props: {
      onabort: { specs: 1 },
      onauxclick: { specs: 1 },
      onbeforematch: { specs: 1 },
      onblur: { specs: 1 },
      oncancel: { specs: 1 },
      oncanplay: { specs: 1 },
      oncanplaythrough: { specs: 1 },
      onchange: { specs: 1 },
      onclick: { specs: 1 },
      onclose: { specs: 1 },
      oncontextlost: { specs: 1 },
      oncontextmenu: { specs: 1 },
      oncontextrestored: { specs: 1 },
      oncuechange: { specs: 1 },
      ondblclick: { specs: 1 },
      ondrag: { specs: 1 },
      ondragend: { specs: 1 },
      ondragenter: { specs: 1 },
      ondragleave: { specs: 1 },
      ondragover: { specs: 1 },
      ondragstart: { specs: 1 },
      ondrop: { specs: 1 },
      ondurationchange: { specs: 1 },
      onemptied: { specs: 1 },
      onended: { specs: 1 },
      onerror: { specs: 1 },
      onfocus: { specs: 1 },
      onformdata: { specs: 1 },
      oninput: { specs: 1 },
      oninvalid: { specs: 1 },
      onkeydown: { specs: 1 },
      onkeypress: { specs: 1 },
      onkeyup: { specs: 1 },
      onload: { specs: 1 },
      onloadeddata: { specs: 1 },
      onloadedmetadata: { specs: 1 },
      onloadstart: { specs: 1 },
      onmousedown: { specs: 1 },
      onmouseenter: { specs: 1 },
      onmouseleave: { specs: 1 },
      onmousemove: { specs: 1 },
      onmouseout: { specs: 1 },
      onmouseover: { specs: 1 },
      onmouseup: { specs: 1 },
      onpause: { specs: 1 },
      onplay: { specs: 1 },
      onplaying: { specs: 1 },
      onprogress: { specs: 1 },
      onratechange: { specs: 1 },
      onreset: { specs: 1 },
      onresize: { specs: 1 },
      onscroll: { specs: 1 },
      onsecuritypolicyviolation: { specs: 1 },
      onseeked: { specs: 1 },
      onseeking: { specs: 1 },
      onselect: { specs: 1 },
      onslotchange: { specs: 1 },
      onstalled: { specs: 1 },
      onsubmit: { specs: 1 },
      onsuspend: { specs: 1 },
      ontimeupdate: { specs: 1 },
      ontoggle: { specs: 1 },
      onvolumechange: { specs: 1 },
      onwaiting: { specs: 1 },
      onwebkitanimationend: { specs: 1 },
      onwebkitanimationiteration: { specs: 1 },
      onwebkitanimationstart: { specs: 1 },
      onwebkittransitionend: { specs: 1 },
      onwheel: { specs: 1 },
      ongotpointercapture: { specs: 8 },
      onlostpointercapture: { specs: 8 },
      onpointerdown: { specs: 8 },
      onpointermove: { specs: 8 },
      onpointerrawupdate: { specs: 8 },
      onpointerup: { specs: 8 },
      onpointercancel: { specs: 8 },
      onpointerover: { specs: 8 },
      onpointerout: { specs: 8 },
      onpointerenter: { specs: 8 },
      onpointerleave: { specs: 8 },
    },
  },
  WindowEventHandlers: {
    props: {
      onafterprint: { specs: 1 },
      onbeforeprint: { specs: 1 },
      onbeforeunload: { specs: 1 },
      onhashchange: { specs: 1 },
      onlanguagechange: { specs: 1 },
      onmessage: { specs: 1 },
      onmessageerror: { specs: 1 },
      onoffline: { specs: 1 },
      ononline: { specs: 1 },
      onpagehide: { specs: 1 },
      onpageshow: { specs: 1 },
      onpopstate: { specs: 1 },
      onrejectionhandled: { specs: 1 },
      onstorage: { specs: 1 },
      onunhandledrejection: { specs: 1 },
      onunload: { specs: 1 },
    },
  },
  DocumentAndElementEventHandlers: {
    props: { oncopy: { specs: 1 }, oncut: { specs: 1 }, onpaste: { specs: 1 } },
  },
  WindowOrWorkerGlobalScope: {
    props: {
      origin: { specs: 1 },
      isSecureContext: { specs: 1 },
      crossOriginIsolated: { specs: 1 },
    },
  },
  WorkerGlobalScope: {
    inheritance: 'EventTarget',
    includes: ['WindowOrWorkerGlobalScope'],
    props: {
      self: { specs: 1 },
      location: { specs: 1 },
      navigator: { specs: 1 },
      onerror: { specs: 1 },
      onlanguagechange: { specs: 1 },
      onoffline: { specs: 1 },
      ononline: { specs: 1 },
      onrejectionhandled: { specs: 1 },
      onunhandledrejection: { specs: 1 },
    },
  },
  Navigator: {
    includes: [
      'NavigatorID',
      'NavigatorLanguage',
      'NavigatorOnLine',
      'NavigatorContentUtils',
      'NavigatorCookies',
      'NavigatorPlugins',
      'NavigatorConcurrentHardware',
    ],
    props: { maxTouchPoints: { specs: 8 } },
  },
  NavigatorID: {
    props: {
      appCodeName: { specs: 1 },
      appName: { specs: 1 },
      appVersion: { specs: 1 },
      platform: { specs: 1 },
      product: { specs: 1 },
      productSub: { specs: 1 },
      userAgent: { specs: 1 },
      vendor: { specs: 1 },
      vendorSub: { specs: 1 },
      oscpu: { specs: 1 },
    },
  },
  NavigatorLanguage: {
    props: { language: { specs: 1 }, languages: { specs: 1 } },
  },
  NavigatorOnLine: { props: { onLine: { specs: 1 } } },
  NavigatorCookies: { props: { cookieEnabled: { specs: 1 } } },
  NavigatorPlugins: {
    props: {
      plugins: { specs: 1 },
      mimeTypes: { specs: 1 },
      pdfViewerEnabled: { specs: 1 },
    },
  },
  PluginArray: { props: { length: { specs: 1 } } },
  MimeTypeArray: { props: { length: { specs: 1 } } },
  Plugin: {
    props: {
      name: { specs: 1 },
      description: { specs: 1 },
      filename: { specs: 1 },
      length: { specs: 1 },
    },
  },
  MimeType: {
    props: {
      type: { specs: 1 },
      description: { specs: 1 },
      suffixes: { specs: 1 },
      enabledPlugin: { specs: 1 },
    },
  },
  ImageBitmap: { props: { width: { specs: 1 }, height: { specs: 1 } } },
  ImageBitmapOptions: {
    props: {
      imageOrientation: { specs: 1 },
      premultiplyAlpha: { specs: 1 },
      colorSpaceConversion: { specs: 1 },
      resizeWidth: { specs: 1 },
      resizeHeight: { specs: 1 },
      resizeQuality: { specs: 1 },
    },
  },
  DedicatedWorkerGlobalScope: {
    inheritance: 'WorkerGlobalScope',
    includes: ['AnimationFrameProvider'],
    props: {
      name: { specs: 1 },
      onmessage: { specs: 1 },
      onmessageerror: { specs: 1 },
    },
  },
  MessageEvent: {
    inheritance: 'Event',
    props: {
      data: { specs: 1 },
      origin: { specs: 1 },
      lastEventId: { specs: 1 },
      source: { specs: 1 },
      ports: { specs: 1 },
    },
  },
  MessageEventInit: {
    inheritance: 'EventInit',
    props: {
      data: { specs: 1 },
      origin: { specs: 1 },
      lastEventId: { specs: 1 },
      source: { specs: 1 },
      ports: { specs: 1 },
    },
  },
  EventSource: {
    inheritance: 'EventTarget',
    props: {
      url: { specs: 1 },
      withCredentials: { specs: 1 },
      readyState: { specs: 1 },
      onopen: { specs: 1 },
      onmessage: { specs: 1 },
      onerror: { specs: 1 },
    },
  },
  EventSourceInit: { props: { withCredentials: { specs: 1 } } },
  MessageChannel: { props: { port1: { specs: 1 }, port2: { specs: 1 } } },
  MessagePort: {
    inheritance: 'EventTarget',
    props: { onmessage: { specs: 1 }, onmessageerror: { specs: 1 } },
  },
  StructuredSerializeOptions: { props: { transfer: { specs: 1 } } },
  BroadcastChannel: {
    inheritance: 'EventTarget',
    props: {
      name: { specs: 1 },
      onmessage: { specs: 1 },
      onmessageerror: { specs: 1 },
    },
  },
  SharedWorkerGlobalScope: {
    inheritance: 'WorkerGlobalScope',
    props: { name: { specs: 1 }, onconnect: { specs: 1 } },
  },
  AbstractWorker: { props: { onerror: { specs: 1 } } },
  Worker: {
    inheritance: 'EventTarget',
    includes: ['AbstractWorker'],
    props: { onmessage: { specs: 1 }, onmessageerror: { specs: 1 } },
  },
  WorkerOptions: {
    props: {
      type: { specs: 1 },
      credentials: { specs: 1 },
      name: { specs: 1 },
    },
  },
  SharedWorker: {
    inheritance: 'EventTarget',
    includes: ['AbstractWorker'],
    props: { port: { specs: 1 } },
  },
  NavigatorConcurrentHardware: { props: { hardwareConcurrency: { specs: 1 } } },
  WorkerNavigator: {
    includes: [
      'NavigatorID',
      'NavigatorLanguage',
      'NavigatorOnLine',
      'NavigatorConcurrentHardware',
    ],
  },
  WorkerLocation: {
    props: {
      href: { specs: 1 },
      origin: { specs: 1 },
      protocol: { specs: 1 },
      host: { specs: 1 },
      hostname: { specs: 1 },
      port: { specs: 1 },
      pathname: { specs: 1 },
      search: { specs: 1 },
      hash: { specs: 1 },
    },
  },
  WorkletOptions: { props: { credentials: { specs: 1 } } },
  Storage: { props: { length: { specs: 1 } } },
  WindowSessionStorage: { props: { sessionStorage: { specs: 1 } } },
  WindowLocalStorage: { props: { localStorage: { specs: 1 } } },
  StorageEvent: {
    inheritance: 'Event',
    props: {
      key: { specs: 1 },
      oldValue: { specs: 1 },
      newValue: { specs: 1 },
      url: { specs: 1 },
      storageArea: { specs: 1 },
    },
  },
  StorageEventInit: {
    inheritance: 'EventInit',
    props: {
      key: { specs: 1 },
      oldValue: { specs: 1 },
      newValue: { specs: 1 },
      url: { specs: 1 },
      storageArea: { specs: 1 },
    },
  },
  HTMLMarqueeElement: {
    inheritance: 'HTMLElement',
    props: {
      behavior: { specs: 1 },
      bgColor: { specs: 1 },
      direction: { specs: 1 },
      height: { specs: 1 },
      hspace: { specs: 1 },
      loop: { specs: 1 },
      scrollAmount: { specs: 1 },
      scrollDelay: { specs: 1 },
      trueSpeed: { specs: 1 },
      vspace: { specs: 1 },
      width: { specs: 1 },
    },
  },
  HTMLFrameSetElement: {
    inheritance: 'HTMLElement',
    includes: ['WindowEventHandlers'],
    props: { cols: { specs: 1 }, rows: { specs: 1 } },
  },
  HTMLFrameElement: {
    inheritance: 'HTMLElement',
    props: {
      name: { specs: 1 },
      scrolling: { specs: 1 },
      src: { specs: 1 },
      frameBorder: { specs: 1 },
      longDesc: { specs: 1 },
      noResize: { specs: 1 },
      contentDocument: { specs: 1 },
      contentWindow: { specs: 1 },
      marginHeight: { specs: 1 },
      marginWidth: { specs: 1 },
    },
  },
  HTMLDirectoryElement: {
    inheritance: 'HTMLElement',
    props: { compact: { specs: 1 } },
  },
  HTMLFontElement: {
    inheritance: 'HTMLElement',
    props: { color: { specs: 1 }, face: { specs: 1 }, size: { specs: 1 } },
  },
  HTMLParamElement: {
    inheritance: 'HTMLElement',
    props: {
      name: { specs: 1 },
      value: { specs: 1 },
      type: { specs: 1 },
      valueType: { specs: 1 },
    },
  },
  Event: {
    props: {
      type: { specs: 2 },
      target: { specs: 2 },
      srcElement: { specs: 2 },
      currentTarget: { specs: 2 },
      eventPhase: { specs: 2 },
      cancelBubble: { specs: 2 },
      bubbles: { specs: 2 },
      cancelable: { specs: 2 },
      returnValue: { specs: 2 },
      defaultPrevented: { specs: 2 },
      composed: { specs: 2 },
      isTrusted: { specs: 2 },
      timeStamp: { specs: 2 },
    },
  },
  EventInit: {
    props: {
      bubbles: { specs: 2 },
      cancelable: { specs: 2 },
      composed: { specs: 2 },
    },
  },
  CustomEvent: { inheritance: 'Event', props: { detail: { specs: 2 } } },
  CustomEventInit: {
    inheritance: 'EventInit',
    props: { detail: { specs: 2 } },
  },
  EventListenerOptions: { props: { capture: { specs: 2 } } },
  AddEventListenerOptions: {
    inheritance: 'EventListenerOptions',
    props: { passive: { specs: 2 }, once: { specs: 2 }, signal: { specs: 2 } },
  },
  AbortController: { props: { signal: { specs: 2 } } },
  AbortSignal: {
    inheritance: 'EventTarget',
    props: {
      aborted: { specs: 2 },
      reason: { specs: 2 },
      onabort: { specs: 2 },
    },
  },
  DocumentFragment: {
    inheritance: 'Node',
    includes: ['NonElementParentNode', 'ParentNode'],
  },
  ShadowRoot: {
    inheritance: 'DocumentFragment',
    includes: ['DocumentOrShadowRoot'],
    props: {
      mode: { specs: 2 },
      delegatesFocus: { specs: 2 },
      slotAssignment: { specs: 2 },
      host: { specs: 2 },
      onslotchange: { specs: 2 },
    },
  },
  ParentNode: {
    props: {
      children: { specs: 2 },
      firstElementChild: { specs: 2 },
      lastElementChild: { specs: 2 },
      childElementCount: { specs: 2 },
    },
  },
  Element: {
    inheritance: 'Node',
    includes: [
      'ParentNode',
      'NonDocumentTypeChildNode',
      'ChildNode',
      'Slottable',
      'ARIAMixin',
    ],
    props: {
      namespaceURI: { specs: 2 },
      prefix: { specs: 2 },
      localName: { specs: 2 },
      tagName: { specs: 2 },
      id: { specs: 2 },
      className: { specs: 2 },
      classList: { specs: 2 },
      slot: { specs: 2 },
      attributes: { specs: 2 },
      shadowRoot: { specs: 2 },
    },
  },
  NonDocumentTypeChildNode: {
    props: {
      previousElementSibling: { specs: 2 },
      nextElementSibling: { specs: 2 },
    },
  },
  CharacterData: {
    inheritance: 'Node',
    includes: ['NonDocumentTypeChildNode', 'ChildNode'],
    props: { data: { specs: 2 }, length: { specs: 2 } },
  },
  DocumentType: {
    inheritance: 'Node',
    includes: ['ChildNode'],
    props: {
      name: { specs: 2 },
      publicId: { specs: 2 },
      systemId: { specs: 2 },
    },
  },
  Slottable: { props: { assignedSlot: { specs: 2 } } },
  Text: {
    inheritance: 'CharacterData',
    includes: ['Slottable'],
    props: { wholeText: { specs: 2 } },
  },
  NodeList: { props: { length: { specs: 2 } } },
  HTMLCollection: { props: { length: { specs: 2 } } },
  MutationObserverInit: {
    props: {
      childList: { specs: 2 },
      attributes: { specs: 2 },
      characterData: { specs: 2 },
      subtree: { specs: 2 },
      attributeOldValue: { specs: 2 },
      characterDataOldValue: { specs: 2 },
      attributeFilter: { specs: 2 },
    },
  },
  MutationRecord: {
    props: {
      type: { specs: 2 },
      target: { specs: 2 },
      addedNodes: { specs: 2 },
      removedNodes: { specs: 2 },
      previousSibling: { specs: 2 },
      nextSibling: { specs: 2 },
      attributeName: { specs: 2 },
      attributeNamespace: { specs: 2 },
      oldValue: { specs: 2 },
    },
  },
  Node: {
    inheritance: 'EventTarget',
    props: {
      nodeType: { specs: 2 },
      nodeName: { specs: 2 },
      baseURI: { specs: 2 },
      isConnected: { specs: 2 },
      ownerDocument: { specs: 2 },
      parentNode: { specs: 2 },
      parentElement: { specs: 2 },
      childNodes: { specs: 2 },
      firstChild: { specs: 2 },
      lastChild: { specs: 2 },
      previousSibling: { specs: 2 },
      nextSibling: { specs: 2 },
      nodeValue: { specs: 2 },
      textContent: { specs: 2 },
    },
  },
  GetRootNodeOptions: { props: { composed: { specs: 2 } } },
  XMLDocument: { inheritance: 'Document' },
  ElementCreationOptions: { props: { is: { global: true, specs: 2 } } },
  ShadowRootInit: {
    props: {
      mode: { specs: 2 },
      delegatesFocus: { specs: 2 },
      slotAssignment: { specs: 2 },
    },
  },
  NamedNodeMap: { props: { length: { specs: 2 } } },
  Attr: {
    inheritance: 'Node',
    props: {
      namespaceURI: { specs: 2 },
      prefix: { specs: 2 },
      localName: { specs: 2 },
      name: { specs: 2 },
      value: { specs: 2 },
      ownerElement: { specs: 2 },
      specified: { specs: 2 },
    },
  },
  CDATASection: { inheritance: 'Text' },
  ProcessingInstruction: {
    inheritance: 'CharacterData',
    includes: ['LinkStyle'],
    props: { target: { specs: 2 } },
  },
  Comment: { inheritance: 'CharacterData' },
  AbstractRange: {
    props: {
      startContainer: { specs: 2 },
      startOffset: { specs: 2 },
      endContainer: { specs: 2 },
      endOffset: { specs: 2 },
      collapsed: { specs: 2 },
    },
  },
  StaticRangeInit: {
    props: {
      startContainer: { specs: 2 },
      startOffset: { specs: 2 },
      endContainer: { specs: 2 },
      endOffset: { specs: 2 },
    },
  },
  StaticRange: { inheritance: 'AbstractRange' },
  Range: {
    inheritance: 'AbstractRange',
    props: { commonAncestorContainer: { specs: 2 } },
  },
  NodeIterator: {
    props: {
      root: { specs: 2 },
      referenceNode: { specs: 2 },
      pointerBeforeReferenceNode: { specs: 2 },
      whatToShow: { specs: 2 },
      filter: { specs: 2 },
    },
  },
  TreeWalker: {
    props: {
      root: { specs: 2 },
      whatToShow: { specs: 2 },
      filter: { specs: 2 },
      currentNode: { specs: 2 },
    },
  },
  DOMTokenList: { props: { length: { specs: 2 }, value: { specs: 2 } } },
  XPathResult: {
    props: {
      resultType: { specs: 2 },
      numberValue: { specs: 2 },
      stringValue: { specs: 2 },
      booleanValue: { specs: 2 },
      singleNodeValue: { specs: 2 },
      invalidIteratorState: { specs: 2 },
      snapshotLength: { specs: 2 },
    },
  },
  XPathEvaluator: { includes: ['XPathEvaluatorBase'] },
  UIEvent: {
    inheritance: 'Event',
    props: { view: { specs: 4 }, detail: { specs: 4 }, which: { specs: 4 } },
  },
  UIEventInit: {
    inheritance: 'EventInit',
    props: { view: { specs: 4 }, detail: { specs: 4 }, which: { specs: 4 } },
  },
  FocusEvent: {
    inheritance: 'UIEvent',
    props: { relatedTarget: { specs: 4 } },
  },
  FocusEventInit: {
    inheritance: 'UIEventInit',
    props: { relatedTarget: { specs: 4 } },
  },
  MouseEvent: {
    inheritance: 'UIEvent',
    props: {
      screenX: { specs: 4 },
      screenY: { specs: 4 },
      clientX: { specs: 4 },
      clientY: { specs: 4 },
      ctrlKey: { specs: 4 },
      shiftKey: { specs: 4 },
      altKey: { specs: 4 },
      metaKey: { specs: 4 },
      button: { specs: 4 },
      buttons: { specs: 4 },
      relatedTarget: { specs: 4 },
    },
  },
  MouseEventInit: {
    inheritance: 'EventModifierInit',
    props: {
      screenX: { specs: 4 },
      screenY: { specs: 4 },
      clientX: { specs: 4 },
      clientY: { specs: 4 },
      button: { specs: 4 },
      buttons: { specs: 4 },
      relatedTarget: { specs: 4 },
    },
  },
  EventModifierInit: {
    inheritance: 'UIEventInit',
    props: {
      ctrlKey: { specs: 4 },
      shiftKey: { specs: 4 },
      altKey: { specs: 4 },
      metaKey: { specs: 4 },
      modifierAltGraph: { specs: 4 },
      modifierCapsLock: { specs: 4 },
      modifierFn: { specs: 4 },
      modifierFnLock: { specs: 4 },
      modifierHyper: { specs: 4 },
      modifierNumLock: { specs: 4 },
      modifierScrollLock: { specs: 4 },
      modifierSuper: { specs: 4 },
      modifierSymbol: { specs: 4 },
      modifierSymbolLock: { specs: 4 },
    },
  },
  WheelEvent: {
    inheritance: 'MouseEvent',
    props: {
      deltaX: { specs: 4 },
      deltaY: { specs: 4 },
      deltaZ: { specs: 4 },
      deltaMode: { specs: 4 },
    },
  },
  WheelEventInit: {
    inheritance: 'MouseEventInit',
    props: {
      deltaX: { specs: 4 },
      deltaY: { specs: 4 },
      deltaZ: { specs: 4 },
      deltaMode: { specs: 4 },
    },
  },
  InputEvent: {
    inheritance: 'UIEvent',
    props: {
      data: { specs: 4 },
      isComposing: { specs: 4 },
      inputType: { specs: 4 },
    },
  },
  InputEventInit: {
    inheritance: 'UIEventInit',
    props: {
      data: { specs: 4 },
      isComposing: { specs: 4 },
      inputType: { specs: 4 },
    },
  },
  KeyboardEvent: {
    inheritance: 'UIEvent',
    props: {
      key: { specs: 4 },
      code: { specs: 4 },
      location: { specs: 4 },
      ctrlKey: { specs: 4 },
      shiftKey: { specs: 4 },
      altKey: { specs: 4 },
      metaKey: { specs: 4 },
      repeat: { specs: 4 },
      isComposing: { specs: 4 },
      charCode: { specs: 4 },
      keyCode: { specs: 4 },
    },
  },
  KeyboardEventInit: {
    inheritance: 'EventModifierInit',
    props: {
      key: { specs: 4 },
      code: { specs: 4 },
      location: { specs: 4 },
      repeat: { specs: 4 },
      isComposing: { specs: 4 },
      charCode: { specs: 4 },
      keyCode: { specs: 4 },
    },
  },
  CompositionEvent: { inheritance: 'UIEvent', props: { data: { specs: 4 } } },
  CompositionEventInit: {
    inheritance: 'UIEventInit',
    props: { data: { specs: 4 } },
  },
  MutationEvent: {
    inheritance: 'Event',
    props: {
      relatedNode: { specs: 4 },
      prevValue: { specs: 4 },
      newValue: { specs: 4 },
      attrName: { specs: 4 },
      attrChange: { specs: 4 },
    },
  },
  PointerEventInit: {
    inheritance: 'MouseEventInit',
    props: {
      pointerId: { specs: 8 },
      width: { specs: 8 },
      height: { specs: 8 },
      pressure: { specs: 8 },
      tangentialPressure: { specs: 8 },
      tiltX: { specs: 8 },
      tiltY: { specs: 8 },
      twist: { specs: 8 },
      altitudeAngle: { specs: 8 },
      azimuthAngle: { specs: 8 },
      pointerType: { specs: 8 },
      isPrimary: { specs: 8 },
      coalescedEvents: { specs: 8 },
      predictedEvents: { specs: 8 },
    },
  },
  PointerEvent: {
    inheritance: 'MouseEvent',
    props: {
      pointerId: { specs: 8 },
      width: { specs: 8 },
      height: { specs: 8 },
      pressure: { specs: 8 },
      tangentialPressure: { specs: 8 },
      tiltX: { specs: 8 },
      tiltY: { specs: 8 },
      twist: { specs: 8 },
      altitudeAngle: { specs: 8 },
      azimuthAngle: { specs: 8 },
      pointerType: { specs: 8 },
      isPrimary: { specs: 8 },
    },
  },
  MediaList: { props: { mediaText: { specs: 16 }, length: { specs: 16 } } },
  StyleSheet: {
    props: {
      type: { specs: 16 },
      href: { specs: 16 },
      ownerNode: { specs: 16 },
      parentStyleSheet: { specs: 16 },
      title: { global: true, specs: 16 },
      media: { specs: 16 },
      disabled: { specs: 16 },
    },
  },
  CSSStyleSheet: {
    inheritance: 'StyleSheet',
    props: {
      ownerRule: { specs: 16 },
      cssRules: { specs: 16 },
      rules: { specs: 16 },
    },
  },
  CSSStyleSheetInit: {
    props: {
      baseURL: { specs: 16 },
      media: { specs: 16 },
      disabled: { specs: 16 },
    },
  },
  StyleSheetList: { props: { length: { specs: 16 } } },
  LinkStyle: { props: { sheet: { specs: 16 } } },
  CSSRuleList: { props: { length: { specs: 16 } } },
  CSSRule: {
    props: {
      cssText: { specs: 16 },
      parentRule: { specs: 16 },
      parentStyleSheet: { specs: 16 },
      type: { specs: 16 },
    },
  },
  CSSStyleRule: {
    inheritance: 'CSSRule',
    props: { selectorText: { specs: 16 }, style: { global: true, specs: 16 } },
  },
  CSSImportRule: {
    inheritance: 'CSSRule',
    props: {
      href: { specs: 16 },
      media: { specs: 16 },
      styleSheet: { specs: 16 },
    },
  },
  CSSGroupingRule: {
    inheritance: 'CSSRule',
    props: { cssRules: { specs: 16 } },
  },
  CSSPageRule: {
    inheritance: 'CSSGroupingRule',
    props: { selectorText: { specs: 16 }, style: { global: true, specs: 16 } },
  },
  CSSMarginRule: {
    inheritance: 'CSSRule',
    props: { name: { specs: 16 }, style: { global: true, specs: 16 } },
  },
  CSSNamespaceRule: {
    inheritance: 'CSSRule',
    props: { namespaceURI: { specs: 16 }, prefix: { specs: 16 } },
  },
  CSSStyleDeclaration: {
    props: {
      cssText: { specs: 16 },
      length: { specs: 16 },
      parentRule: { specs: 16 },
      cssFloat: { specs: 16 },
    },
  },
  ElementCSSInlineStyle: { props: { style: { global: true, specs: 16 } } },
  SVGElement: { includes: ['ElementCSSInlineStyle'] },
  MathMLElement: { includes: ['ElementCSSInlineStyle'] },
  ARIAMixin: {
    props: {
      role: { specs: 32 },
      ariaAtomic: { specs: 32 },
      ariaAutoComplete: { specs: 32 },
      ariaBusy: { specs: 32 },
      ariaChecked: { specs: 32 },
      ariaColCount: { specs: 32 },
      ariaColIndex: { specs: 32 },
      ariaColIndexText: { specs: 32 },
      ariaColSpan: { specs: 32 },
      ariaCurrent: { specs: 32 },
      ariaDescription: { specs: 32 },
      ariaDisabled: { specs: 32 },
      ariaExpanded: { specs: 32 },
      ariaHasPopup: { specs: 32 },
      ariaHidden: { specs: 32 },
      ariaInvalid: { specs: 32 },
      ariaKeyShortcuts: { specs: 32 },
      ariaLabel: { specs: 32 },
      ariaLevel: { specs: 32 },
      ariaLive: { specs: 32 },
      ariaModal: { specs: 32 },
      ariaMultiLine: { specs: 32 },
      ariaMultiSelectable: { specs: 32 },
      ariaOrientation: { specs: 32 },
      ariaPlaceholder: { specs: 32 },
      ariaPosInSet: { specs: 32 },
      ariaPressed: { specs: 32 },
      ariaReadOnly: { specs: 32 },
      ariaRequired: { specs: 32 },
      ariaRoleDescription: { specs: 32 },
      ariaRowCount: { specs: 32 },
      ariaRowIndex: { specs: 32 },
      ariaRowIndexText: { specs: 32 },
      ariaRowSpan: { specs: 32 },
      ariaSelected: { specs: 32 },
      ariaSetSize: { specs: 32 },
      ariaSort: { specs: 32 },
      ariaValueMax: { specs: 32 },
      ariaValueMin: { specs: 32 },
      ariaValueNow: { specs: 32 },
      ariaValueText: { specs: 32 },
    },
  },
};

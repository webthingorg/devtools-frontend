/**
 * Copyright (c) Microsoft Corp.
 * Licensed under the MIT License.
 */


// Generated by dts-bundle v0.7.3

declare module 'network-console-shared' {
    export { HttpVerb } from 'network-console-shared/net/verb';
    export { CacheMode, CorsMode, CredentialsMode, HttpAuthorizationScheme, IBasicAuthorization, IFetchParams, IHttpAuthorization, IHttpHeader, IHttpRequest, IHttpResponse, ISerializableHttpBody, RedirectMode, } from 'network-console-shared/net/http-base';
    export { IFormDataParameter, INetConsoleAuthorization, INetConsoleParameter, INetConsoleRequest, INetConsoleResponse, NetworkConsoleAuthorizationScheme, ResponseStatus, isFormDataParameter, ms, } from 'network-console-shared/net/net-console-http';
    export { Base64String, binFromB64, binToB64, strFromB64, toB64, } from 'network-console-shared/util/base64';
    export { FrontendMessage, IConsoleReadyMessage, IExecuteRequestMessage, ILogMessage, IOpenWebLinkMessage, ISaveCollectionAuthorizationMessage, ISaveEnvironmentVariablesMessage, ISaveRequestMessage, IUpdateDirtyFlagMessage, } from 'network-console-shared/hosting/frontend-messages';
    export { HostMessage, isResponseMessage, IClearEnvironmentMessage, ICloseViewMessage, ICssStylesUpdatedMessage, IEditCollectionAuthorizationMessage, IEditEnvironmentMessage, IHostCollection, IInitHostMessage, ILoadRequestMessage, IRequestCompleteMessage, ISetPreferencesMessage, IShowViewMessage, IUpdateCollectionsTreeMessage, IUpdateEnvironmentMessage, } from 'network-console-shared/hosting/host-messages';
    export { Lazy, default as lazy } from 'network-console-shared/util/lazy';
    import { Postman21NativeReader as P21NativeReader } from 'network-console-shared/collections/postman/v2.1/postman-2.1-file-format';
    import { NCNativeReader as NCReader } from 'network-console-shared/collections/native/native-file-format';
    import { default as SwaggerReader } from 'network-console-shared/collections/openapi/openapi-file-format';
    import { tryReadCollection } from 'network-console-shared/collections/shared/reader';
    import { tryReadEnvironment } from 'network-console-shared/environments';
    import { serializeNativeEnvironment } from 'network-console-shared/environments/native/native-env-format';
    export namespace Collections {
        const Postman21NativeReader: typeof P21NativeReader;
        const NCNativeReader: typeof NCReader;
        const SwaggerFileFormatReader: typeof SwaggerReader;
        const tryReadCollectionAsync: typeof tryReadCollection;
    }
    export namespace Environments {
        const tryReadEnvironmentAsync: typeof tryReadEnvironment;
        const serializeNativeEnvironmentFormat: typeof serializeNativeEnvironment;
    }
    export { CollectionItemType, ICollectionEntryReader, ICollectionFolderReader, ICollectionItemBase, ICollectionRootReader, ICollectionsReader, } from 'network-console-shared/collections/shared/reader';
    export { EnvironmentItemType, IEnvironment, IEnvironmentRoot, } from 'network-console-shared/environments';
}

declare module 'network-console-shared/net/verb' {
    /**
      * Verbs supported for use from Network Console.
      */
    export type HttpVerb = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS';
}

declare module 'network-console-shared/net/http-base' {
    import { HttpVerb } from 'network-console-shared/net/verb';
    import { Base64String } from 'network-console-shared/util/base64';
    export interface IHttpHeader {
            key: string;
            value: string;
    }
    export type CorsMode = 'cors' | 'no-cors' | 'same-origin';
    export type CredentialsMode = 'same-origin' | 'include' | 'omit';
    export type CacheMode = 'default' | 'no-store' | 'reload' | 'no-cache' | 'force-cache' | 'only-if-cached';
    export type RedirectMode = 'follow' | 'error' | 'manual';
    /**
        * When using `fetch` to invoke a web request, the below parameters can be used
        * to modify the default behavior of the fetch request.
        */
    export interface IFetchParams {
            /**
                * Indicates how the CORS protocol should be negotiated. Defaults to `cors`.
                */
            corsMode: CorsMode;
            /**
                * Indicates how browser-supported credentials should be used, irrespective of
                * the default authorization scheme. Defaults to `same-origin`.
                */
            credentialsMode: CredentialsMode;
            /**
                * Indicates the cache policy the request should use. Because of the use case,
                * this defaults to `no-store` within most hosts.
                */
            cacheMode: CacheMode;
            /**
                * Indicates the redirect policy that should be used. Almost all requests should
                * use `follow`, which is the default.
                */
            redirectMode: RedirectMode;
    }
    /**
        * For all cases in which an HTTP body entity is passed around, the body is encoded as
        * base64. This allows byte-accurate preservation to be shared across process and
        * data boundaries.
        */
    export interface ISerializableHttpBody {
            /**
                * The content of the body, always encoded in base64.
                */
            content: Base64String;
    }
    /**
        * Specifies the types of authorization scheme leveraged by HTTP. Each host must know
        * specifics about implementing these schemes at the HTTP layer.
        */
    export type HttpAuthorizationScheme = 'none' | 'basic';
    /**
        * Documents the parameters required for Basic authorization.
        */
    export interface IBasicAuthorization {
            username: string;
            password: string;
    }
    /**
        * The tuple type for authorization settings for an HTTP request.
        */
    export interface IHttpAuthorization {
            type: string;
            /**
                * Required if `type` is `'basic'`.
                */
            basic?: IBasicAuthorization;
    }
    /**
        * The parameters that should be used
        */
    export interface IHttpRequest {
            verb: HttpVerb;
            url: string;
            headers: IHttpHeader[];
            body: ISerializableHttpBody;
            /**
                * Optional; if not included, assumes `'none'` or depends on the value of
                * `fetchParams.credentialsMode`.
                */
            authorization?: IHttpAuthorization;
            /**
                * Optional; defaults are documented in `IFetchParams`.
                */
            fetchParams?: Partial<IFetchParams>;
    }
    export interface IHttpResponse {
            statusCode: number;
            statusText: string;
            headers: IHttpHeader[];
            body: ISerializableHttpBody;
            size: number;
    }
}

declare module 'network-console-shared/net/net-console-http' {
    import { Base64String } from 'network-console-shared/util/base64';
    import { HttpAuthorizationScheme, IHttpHeader, IHttpAuthorization, IHttpRequest, IHttpResponse, IBasicAuthorization } from 'network-console-shared/net/http-base';
    export interface INetConsoleParameter extends IHttpHeader {
            description: string;
            isActive: boolean;
    }
    export interface IFormDataParameter extends INetConsoleParameter {
            type: 'text' | 'file';
            /**
                * When `type` === `'file'`, the `value` property contains the name
                * of the file.
                */
            value: string;
            fileContents?: Base64String;
    }
    export function isFormDataParameter(param: INetConsoleParameter): param is IFormDataParameter;
    export type NetworkConsoleAuthorizationScheme = HttpAuthorizationScheme | 'inherit' | 'token';
    interface INetConsoleBearerTokenAuthorization {
            token: string;
    }
    interface INetConsoleBasicAuthorization extends IBasicAuthorization {
            showPassword: boolean;
    }
    export interface INetConsoleAuthorization extends IHttpAuthorization {
            type: NetworkConsoleAuthorizationScheme;
            token?: INetConsoleBearerTokenAuthorization;
            basic?: INetConsoleBasicAuthorization;
    }
    export type BodyFormat = 'none' | 'form-data' | 'x-www-form-urlencoded' | 'raw';
    /**
        * This is the main item that is presented to users and is put into native files.
        */
    export interface INetConsoleRequest extends IHttpRequest {
            /**
                * For `IBaseNetConsoleRequest`: the URL should not contain a hash, query
                * string, or substituted route parameters. That is to say it would look
                * like this:
                *
                *     {{scheme}}://{{domain}}/foo/bar/:id
                *
                * Here, there are multiple things going on:
                *
                *  - `{{scheme}}` and `{{domain}}` are environment variables which are substituted
                *  - `:id` is a route parameter which should appear in the `routeParameters` field
                *
                * When the frontend issues a request, it will compose the environment variables,
                * route parameters, and query parameters into a single URL which is then put into
                * the `IHttpRequest#url` property.
                */
            url: string;
            /**
                * The friendly name of the request as set by the user.
                */
            name: string;
            /**
                * An additional description of the request as set by the user.
                */
            description: string;
            authorization: INetConsoleAuthorization;
            /**
                * The headers of the request.
                */
            headers: INetConsoleParameter[];
            /**
                * Query parameters to be included at the end of the URL.
                */
            queryParameters: INetConsoleParameter[];
            /**
                * Route parameters to be substituted.
                */
            routeParameters: INetConsoleParameter[];
            /**
                * Persisted body components and configuration. While not required, the format may persist
                * all of the values (so that the user doesn't lose data in "raw text" mode when switching
                * to "form-data" mode); but only the value indicated by the `bodySelection` discriminator
                * will be used to compose the final request.
                */
            bodyComponents: {
                    /**
                        * "Raw text" is typically for some content that the user has entered manually into
                        * the text editor (for example, for JSON, plain text, or CSV). This content is *not*
                        * encoded into Base64 since the content is typically considered to have been entered
                        * as plain text.
                        */
                    rawTextBody?: {
                            text: string;
                            /**
                                * Contains the UI-selected content type of the text (for the default mode of
                                * syntax highlighting).
                                */
                            contentType: string;
                    };
                    /**
                        * Contains key-value pairs of form data. Because form data parameters do contain the
                        * contents of files, the host can decide whether to persist the file contents into the
                        * save file.
                        */
                    formData?: IFormDataParameter[];
                    /**
                        * Contains key-value pairs of x-www-form-urlencoded data.
                        */
                    xWwwFormUrlencoded?: INetConsoleParameter[];
                    /**
                        * The discriminator for which mode the request uses to compose the body.
                        */
                    bodySelection: BodyFormat;
            };
    }
    /**
        * Milliseconds
        */
    export type ms = number;
    /**
        * Represents the latest "response" status of a particular request.
        */
    export type ResponseStatus = 'NOT_SENT' | 'PENDING' | 'ERROR_BELOW_APPLICATION_LAYER' | 'COMPLETE';
    /**
        * Wraps an HTTP response with some additional metadata, including detection of below-HTTP errors
        * and the duration of the request.
        */
    export interface INetConsoleResponse {
            response: IHttpResponse;
            duration: ms;
            status: ResponseStatus;
    }
    export {};
}

declare module 'network-console-shared/util/base64' {
    export type Base64String = string & {
        __isB64String?: void;
    };
    export function toB64(source: string): Base64String;
    export function strFromB64(source: Base64String): string;
    export function binFromB64(source: Base64String): ArrayBuffer;
    export function binToB64(source: ArrayBuffer): Base64String;
}

declare module 'network-console-shared/hosting/frontend-messages' {
    import { IHttpRequest } from 'network-console-shared/net/http-base';
    import { INetConsoleRequest, INetConsoleAuthorization, INetConsoleParameter } from 'network-console-shared/net/net-console-http';
    interface IMessage<T extends string> {
        type: T;
    }
    interface IMessageWithResponse<T extends string> extends IMessage<T> {
        id: number;
    }
    export type IConsoleReadyMessage = IMessage<'CONSOLE_READY'>;
    export interface IExecuteRequestMessage extends IMessageWithResponse<'EXECUTE_REQUEST'> {
        configuration: IHttpRequest;
        /**
          * For this message, `inherit` is not allowed. The final calculated authorization must be included.
          * No environment substitution occurs on the embedder's part.
          */
        authorization: INetConsoleAuthorization;
    }
    export interface ISaveRequestMessage extends IMessageWithResponse<'SAVE_REQUEST'> {
        request: INetConsoleRequest;
        requestId: string;
        toCollectionId: string;
    }
    export interface ISaveCollectionAuthorizationMessage extends IMessageWithResponse<'SAVE_COLLECTION_AUTHORIZATION_PARAMETERS'> {
        collectionId: string;
        authorization: INetConsoleAuthorization;
    }
    export interface ISaveEnvironmentVariablesMessage extends IMessageWithResponse<'SAVE_ENVIRONMENT_VARIABLES'> {
        variables: INetConsoleParameter[];
        environmentId: string;
    }
    export interface IOpenWebLinkMessage extends IMessage<'OPEN_WEB_LINK'> {
        url: string;
    }
    export interface IUpdateDirtyFlagMessage extends IMessage<'UPDATE_DIRTY_FLAG'> {
        requestId: string;
        isDirty: boolean;
    }
    export interface IOpenUnattachedRequestMessage extends IMessage<'OPEN_NEW_UNATTACHED_REQUEST'> {
        requestId: string;
    }
    export type ILogMessage = IMessage<'LOG'> & {
        [s: string]: any;
    };
    export type FrontendMessage = IConsoleReadyMessage | IExecuteRequestMessage | ISaveRequestMessage | ISaveCollectionAuthorizationMessage | ISaveEnvironmentVariablesMessage | IOpenWebLinkMessage | IOpenUnattachedRequestMessage | IUpdateDirtyFlagMessage | ILogMessage;
    export {};
}

declare module 'network-console-shared/hosting/host-messages' {
    import { INetConsoleRequest, INetConsoleAuthorization, INetConsoleResponse, INetConsoleParameter } from 'network-console-shared/net/net-console-http';
    interface IMessage<T extends string> {
        type: T;
    }
    interface IResponseMessage<TResult> {
        /** ID of the request message */
        id: number;
        result?: TResult;
        error?: string;
    }
    export function isResponseMessage<TResult>(msg: object): msg is IResponseMessage<TResult>;
    export interface IInitHostMessage extends IMessage<'INIT_HOST'> {
        cssVariables: string;
        isDark: boolean;
        isHighContrast: boolean;
        persistedState?: string;
        messagePort?: MessagePort;
    }
    export interface ICssStylesUpdatedMessage extends IMessage<'CSS_STYLE_UPDATED'> {
        cssVariables: string;
        isDark: boolean;
        isHighContrast: boolean;
    }
    export interface ISetPreferencesMessage extends IMessage<'SET_PREFERENCES'> {
        shouldShowDescription: boolean;
    }
    interface ILoadRequestMessageBase extends IMessage<'LOAD_REQUEST'> {
        request: INetConsoleRequest;
        requestId: string;
        environmentAuth?: INetConsoleAuthorization;
        environmentAuthPath?: string[];
    }
    interface ILoadRequestMessageEnvironment {
        environmentAuth: INetConsoleAuthorization;
        environmentAuthPath: string;
    }
    export type ILoadRequestMessage = ILoadRequestMessageBase | (ILoadRequestMessageBase & ILoadRequestMessageEnvironment);
    export type IRequestCompleteMessage = IMessage<'REQUEST_COMPLETE'> & IResponseMessage<INetConsoleResponse>;
    export interface IEditCollectionAuthorizationMessage extends IMessage<'EDIT_COLLECTION_AUTHORIZATION_PARAMETERS'> {
        collectionId: string;
        path: string[];
        authorization: INetConsoleAuthorization;
    }
    export interface IHostCollection {
        id: string;
        name: string;
        children: IHostCollection[];
    }
    export interface IUpdateCollectionsTreeMessage extends IMessage<'UPDATE_COLLECTIONS_TREE'> {
        collections: IHostCollection[];
    }
    export interface IEditEnvironmentMessage extends IMessage<'EDIT_ENVIRONMENT_VARIABLES'> {
        id: string;
        environment: {
            name: string;
            options: INetConsoleParameter[];
        };
        file: string;
        collectionName: string;
    }
    export interface IUpdateEnvironmentMessage extends IMessage<'UPDATE_ENVIRONMENT'> {
        environment: {
            id: string;
            name: string;
            options: INetConsoleParameter[];
        };
    }
    export interface ICloseViewMessage extends IMessage<'CLOSE_VIEW'> {
        requestId: string;
    }
    export interface IShowViewMessage extends IMessage<'SHOW_OPEN_REQUEST'> {
        requestId: string;
    }
    export type IClearEnvironmentMessage = IMessage<'CLEAR_ENVIRONMENT'>;
    export type HostMessage = IInitHostMessage | ICssStylesUpdatedMessage | ISetPreferencesMessage | ILoadRequestMessage | IRequestCompleteMessage | IClearEnvironmentMessage | IEditCollectionAuthorizationMessage | IUpdateCollectionsTreeMessage | IEditEnvironmentMessage | IUpdateEnvironmentMessage | ICloseViewMessage | IShowViewMessage;
    export {};
}

declare module 'network-console-shared/util/lazy' {
    export default function lazy<T>(producer: () => T): Lazy<T>;
    export type Lazy<T> = () => T;
}

declare module 'network-console-shared/collections/postman/v2.1/postman-2.1-file-format' {
    import { ICollectionRootReader, ICollectionItemBase } from 'network-console-shared/collections/shared/reader';
    import { INetConsoleAuthorization } from 'network-console-shared/net/net-console-http';
    export class Postman21NativeReader implements ICollectionRootReader {
        readonly url: string;
        readonly type = "root";
        readonly canWrite = false;
        constructor(url: string, json: string);
        get name(): string;
        get children(): ICollectionItemBase[];
        get authorization(): INetConsoleAuthorization;
    }
}

declare module 'network-console-shared/collections/native/native-file-format' {
    import { ICollectionRootReader, ICollectionItemBase, ICollectionFolderReader, ICollectionEntryReader } from 'network-console-shared/collections/shared/reader';
    import { INetConsoleAuthorization, INetConsoleRequest } from 'network-console-shared/net/net-console-http';
    import { IHostFileSystem, ICollectionFolderWriter } from 'network-console-shared/collections/shared/writer';
    export class NCNativeReader implements ICollectionRootReader, ICollectionFolderWriter {
        readonly url: string;
        readonly type = "root";
        readonly canWrite = true;
        constructor(url: string, json: string, fileSystem?: IHostFileSystem | undefined);
        get name(): string;
        get children(): ICollectionItemBase[];
        get authorization(): INetConsoleAuthorization;
        persist(): Promise<boolean>;
        deleteChild(childIndex: number): Promise<boolean>;
        updateAuthorization(authorization: INetConsoleAuthorization): Promise<void>;
        rename(newName: string): Promise<void>;
        appendFolder(newFolderName: string): Promise<ICollectionFolderReader>;
        appendRequest(request: INetConsoleRequest): Promise<ICollectionEntryReader>;
    }
}

declare module 'network-console-shared/collections/openapi/openapi-file-format' {
    import { ICollectionRootReader, ICollectionEntryReader } from 'network-console-shared/collections/shared/reader';
    import { INetConsoleAuthorization } from 'network-console-shared/net/net-console-http';
    export default class SwaggerFileFormatReader implements ICollectionRootReader {
        readonly url: string;
        readonly canWrite = false;
        readonly type = "root";
        baseUrl: string | undefined;
        static fromText(fileUri: string, fileContents: string): Promise<SwaggerFileFormatReader>;
        get name(): string;
        get children(): ICollectionEntryReader[];
        get authorization(): INetConsoleAuthorization;
    }
}

declare module 'network-console-shared/collections/shared/reader' {
    import { INetConsoleAuthorization, INetConsoleRequest } from 'network-console-shared/net/net-console-http';
    export interface ICollectionsReader {
            readCollection(fileContents: string): Promise<ICollectionRootReader>;
    }
    export type CollectionItemType = 'root' | 'folder' | 'entry';
    export interface ICollectionItemBase {
            readonly name: string;
            readonly type: CollectionItemType;
            readonly canWrite: boolean;
    }
    /**
        * Represents the reader-part of a root of a collection.
        */
    export interface ICollectionRootReader extends ICollectionItemBase {
            readonly type: 'root';
            readonly children: ICollectionItemBase[];
            readonly authorization: INetConsoleAuthorization;
            readonly url: string;
            readonly baseUrl?: string;
    }
    /**
        * Represents the reader-part of a folder of a collection.
        */
    export interface ICollectionFolderReader extends ICollectionItemBase {
            readonly type: 'folder';
            readonly children: ICollectionItemBase[];
            readonly authorization: INetConsoleAuthorization;
    }
    /**
        * Represents the reader-part of a leaf entry in a collection (that represents a request).
        */
    export interface ICollectionEntryReader extends ICollectionItemBase {
            readonly type: 'entry';
            readonly request: INetConsoleRequest;
    }
    export function tryReadCollection(sourceUrl: string, collectionText: string): Promise<ICollectionRootReader | null>;
}

declare module 'network-console-shared/environments' {
    import { INetConsoleParameter } from 'network-console-shared/net/net-console-http';
    export type EnvironmentItemType = 'root' | 'environment';
    export interface IEnvironmentRoot {
        readonly type: 'root';
        readonly name: string;
        readonly environments: IEnvironment[];
    }
    export interface IEnvironment {
        readonly type: 'environment';
        readonly name: string;
        readonly settings: INetConsoleParameter[];
    }
    export function tryReadEnvironment(sourceUrl: string, collectionText: string): Promise<IEnvironmentRoot | null>;
}

declare module 'network-console-shared/environments/native/native-env-format' {
    interface INCEnvironmentFolder {
        readonly name: string;
        readonly environments: INCEnvironment[];
        readonly meta: {
            networkConsoleEnvironmentVersion: string;
        };
    }
    interface INCEnvironment {
        name: string;
        settings: INCSetting[];
    }
    interface INCSetting {
        key: string;
        value: string;
        description: string;
        isActive: boolean;
    }
    import { IEnvironmentRoot, IEnvironment } from 'network-console-shared/environments/index';
    import { INetConsoleParameter } from 'network-console-shared/net/net-console-http';
    export class NCNativeEnvironmentReader implements IEnvironmentRoot {
        readonly sourceUrl: string;
        readonly type = "root";
        readonly name: string;
        constructor(sourceUrl: string, sourceObject: INCEnvironmentFolder);
        get environments(): NCEnvironmentReader[];
    }
    class NCEnvironmentReader implements IEnvironment {
        readonly type = "environment";
        readonly name: string;
        constructor(src: INCEnvironment);
        get settings(): INCSetting[];
    }
    export function serializeNativeEnvironment(collectionName: string, environmentName: string, settings: INetConsoleParameter[], addTabs?: boolean): string;
    export {};
}

declare module 'network-console-shared/collections/shared/writer' {
    import { INetConsoleAuthorization, INetConsoleRequest } from 'network-console-shared/net/net-console-http';
    import { ICollectionEntryReader, ICollectionFolderReader, ICollectionRootReader } from 'network-console-shared/collections/shared/reader';
    export interface ICollectionEntryWriter extends ICollectionEntryReader {
        save(newParameters: INetConsoleRequest): Promise<void>;
    }
    export interface ICollectionFolderWriter {
        deleteChild(childIndex: number): Promise<boolean>;
        updateAuthorization(authorization: INetConsoleAuthorization): Promise<void>;
        rename(newName: string): Promise<void>;
        appendFolder(newFolderName: string): Promise<ICollectionFolderReader>;
        appendRequest(request: INetConsoleRequest): Promise<ICollectionEntryReader>;
    }
    export interface IHostFileSystem {
        write(url: string, contents: string): Promise<void>;
    }
    export function isWritableEntry(entry: ICollectionEntryReader): entry is ICollectionEntryWriter;
    type Maybe<T> = T | never;
    export function isWritableFolder<T extends (ICollectionFolderReader | ICollectionRootReader)>(folder: T & Maybe<ICollectionFolderWriter>): folder is (T & ICollectionFolderWriter);
    export {};
}

declare module 'network-console-shared/environments/index' {
    import { INetConsoleParameter } from 'network-console-shared/net/net-console-http';
    export type EnvironmentItemType = 'root' | 'environment';
    export interface IEnvironmentRoot {
        readonly type: 'root';
        readonly name: string;
        readonly environments: IEnvironment[];
    }
    export interface IEnvironment {
        readonly type: 'environment';
        readonly name: string;
        readonly settings: INetConsoleParameter[];
    }
    export function tryReadEnvironment(sourceUrl: string, collectionText: string): Promise<IEnvironmentRoot | null>;
}




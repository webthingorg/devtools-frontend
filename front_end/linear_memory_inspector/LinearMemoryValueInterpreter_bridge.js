// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
* WARNING: do not modify this file by hand!
* it was automatically generated by the bridge generator
* if you made changes to the source code and need to update this file, run:
*  npm run generate-bridge-file front_end/linear_memory_inspector/LinearMemoryValueInterpreter.ts
*/

import './LinearMemoryValueInterpreter.js';
/**
* @typedef {{
* value:!ArrayBuffer,
* valueTypes:!Array.<!ValueType>,
* endianness:!Endianness,
* valueTypeModes:(!Map<ValueType, !ValueTypeMode>|undefined),
* }}
*/
// @ts-ignore we export this for Closure not TS
export let LinearMemoryValueInterpreterData;
/**
* @enum {string}
*/
// @ts-ignore we export this for Closure not TS
export let ValueType = {
  Int8: 'Integer 8-bit',
  Int16: 'Integer 16-bit',
  Int32: 'Integer 32-bit',
  Int64: 'Integer 64-bit',
  Float32: 'Float 32-bit',
  Float64: 'Float 64-bit',
  Boolean: 'Boolean',
  String: 'String',
};
/**
* @enum {string}
*/
// @ts-ignore we export this for Closure not TS
export let Endianness = {
  Little: 'Little Endian',
  Big: 'Big Endian',
};
/**
* @enum {string}
*/
// @ts-ignore we export this for Closure not TS
export let ValueTypeMode = {
  Decimal: 'dec',
  Hexadecimal: 'hex',
  Octal: 'oct',
  Scientific: 'sci',
  None: 'none',
};
// eslint-disable-next-line no-unused-vars
export class LinearMemoryValueInterpreterClosureInterface extends HTMLElement {
  /**
  * @param {!LinearMemoryValueInterpreterData} data
  */
  set data(data) {
  }
}
/**
* @return {!LinearMemoryValueInterpreterClosureInterface}
*/
export function createLinearMemoryValueInterpreter() {
  return /** @type {!LinearMemoryValueInterpreterClosureInterface} */ (
      document.createElement('devtools-linear-memory-inspector-interpreter'));
}

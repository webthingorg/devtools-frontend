// Copyright (c) 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// File is generated by devtools-frontend/scripts/build/code_generator_frontend.py

/**
 * @typedef {{
 *  registerCommand: function(string&any, !Array.<!{name: string, type: string, optional: boolean, typeRef?: string}>, !Array.<string>):void,
 *  registerEnum: function(string&any, !Object<string, string>):void,
 *  registerEvent: function(string&any, !Array<string>):void,
 *  registerType: function(string&any, !Array.<!{name: string, type: string, optional: boolean}>):void,
 * }}
 */
// @ts-ignore typedef
export let InspectorBackendAPI;

/**
 * @param {!InspectorBackendAPI} inspectorBackend
 */
export function registerCommands(inspectorBackend) {


// Accessibility.
inspectorBackend.registerEnum("Accessibility.AXValueType", {Boolean: "boolean", Tristate: "tristate", BooleanOrUndefined: "booleanOrUndefined", Idref: "idref", IdrefList: "idrefList", Integer: "integer", Node: "node", NodeList: "nodeList", Number: "number", String: "string", ComputedString: "computedString", Token: "token", TokenList: "tokenList", DomRelation: "domRelation", Role: "role", InternalRole: "internalRole", ValueUndefined: "valueUndefined"});
inspectorBackend.registerEnum("Accessibility.AXValueSourceType", {Attribute: "attribute", Implicit: "implicit", Style: "style", Contents: "contents", Placeholder: "placeholder", RelatedElement: "relatedElement"});
inspectorBackend.registerEnum("Accessibility.AXValueNativeSourceType", {Description: "description", Figcaption: "figcaption", Label: "label", Labelfor: "labelfor", Labelwrapped: "labelwrapped", Legend: "legend", Rubyannotation: "rubyannotation", Tablecaption: "tablecaption", Title: "title", Other: "other"});
inspectorBackend.registerEnum("Accessibility.AXPropertyName", {Busy: "busy", Disabled: "disabled", Editable: "editable", Focusable: "focusable", Focused: "focused", Hidden: "hidden", HiddenRoot: "hiddenRoot", Invalid: "invalid", Keyshortcuts: "keyshortcuts", Settable: "settable", Roledescription: "roledescription", Live: "live", Atomic: "atomic", Relevant: "relevant", Root: "root", Autocomplete: "autocomplete", HasPopup: "hasPopup", Level: "level", Multiselectable: "multiselectable", Orientation: "orientation", Multiline: "multiline", Readonly: "readonly", Required: "required", Valuemin: "valuemin", Valuemax: "valuemax", Valuetext: "valuetext", Checked: "checked", Expanded: "expanded", Modal: "modal", Pressed: "pressed", Selected: "selected", Activedescendant: "activedescendant", Controls: "controls", Describedby: "describedby", Details: "details", Errormessage: "errormessage", Flowto: "flowto", Labelledby: "labelledby", Owns: "owns"});
inspectorBackend.registerEvent("Accessibility.loadComplete", ["root"]);
inspectorBackend.registerEvent("Accessibility.nodesUpdated", ["nodes"]);
inspectorBackend.registerCommand("Accessibility.disable", [], []);
inspectorBackend.registerCommand("Accessibility.enable", [], []);
inspectorBackend.registerCommand("Accessibility.getPartialAXTree", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "DOM.NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "DOM.BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}, {"name": "fetchRelatives", "type": "boolean", "optional": true}], ["nodes"]);
inspectorBackend.registerCommand("Accessibility.getFullAXTree", [{"name": "depth", "type": "number", "optional": true}, {"name": "frameId", "type": "string", "optional": true, "typeRef": "Page.FrameId"}], ["nodes"]);
inspectorBackend.registerCommand("Accessibility.getRootAXNode", [{"name": "frameId", "type": "string", "optional": true, "typeRef": "Page.FrameId"}], ["node"]);
inspectorBackend.registerCommand("Accessibility.getAXNodeAndAncestors", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "DOM.NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "DOM.BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}], ["nodes"]);
inspectorBackend.registerCommand("Accessibility.getChildAXNodes", [{"name": "id", "type": "string", "optional": false, "typeRef": "AXNodeId"}, {"name": "frameId", "type": "string", "optional": true, "typeRef": "Page.FrameId"}], ["nodes"]);
inspectorBackend.registerCommand("Accessibility.queryAXTree", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "DOM.NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "DOM.BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}, {"name": "accessibleName", "type": "string", "optional": true}, {"name": "role", "type": "string", "optional": true}], ["nodes"]);
inspectorBackend.registerType("Accessibility.AXValueSource", [{"name": "type", "type": "string", "optional": false}, {"name": "value", "type": "object", "optional": true}, {"name": "attribute", "type": "string", "optional": true}, {"name": "attributeValue", "type": "object", "optional": true}, {"name": "superseded", "type": "boolean", "optional": true}, {"name": "nativeSource", "type": "string", "optional": true}, {"name": "nativeSourceValue", "type": "object", "optional": true}, {"name": "invalid", "type": "boolean", "optional": true}, {"name": "invalidReason", "type": "string", "optional": true}]);
inspectorBackend.registerType("Accessibility.AXRelatedNode", [{"name": "backendDOMNodeId", "type": "number", "optional": false}, {"name": "idref", "type": "string", "optional": true}, {"name": "text", "type": "string", "optional": true}]);
inspectorBackend.registerType("Accessibility.AXProperty", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "object", "optional": false}]);
inspectorBackend.registerType("Accessibility.AXValue", [{"name": "type", "type": "string", "optional": false}, {"name": "value", "type": "any", "optional": true}, {"name": "relatedNodes", "type": "array", "optional": true}, {"name": "sources", "type": "array", "optional": true}]);
inspectorBackend.registerType("Accessibility.AXNode", [{"name": "nodeId", "type": "string", "optional": false}, {"name": "ignored", "type": "boolean", "optional": false}, {"name": "ignoredReasons", "type": "array", "optional": true}, {"name": "role", "type": "object", "optional": true}, {"name": "chromeRole", "type": "object", "optional": true}, {"name": "name", "type": "object", "optional": true}, {"name": "description", "type": "object", "optional": true}, {"name": "value", "type": "object", "optional": true}, {"name": "properties", "type": "array", "optional": true}, {"name": "parentId", "type": "string", "optional": true}, {"name": "childIds", "type": "array", "optional": true}, {"name": "backendDOMNodeId", "type": "number", "optional": true}, {"name": "frameId", "type": "string", "optional": true}]);

// Animation.
inspectorBackend.registerEnum("Animation.AnimationType", {CSSTransition: "CSSTransition", CSSAnimation: "CSSAnimation", WebAnimation: "WebAnimation"});
inspectorBackend.registerEvent("Animation.animationCanceled", ["id"]);
inspectorBackend.registerEvent("Animation.animationCreated", ["id"]);
inspectorBackend.registerEvent("Animation.animationStarted", ["animation"]);
inspectorBackend.registerCommand("Animation.disable", [], []);
inspectorBackend.registerCommand("Animation.enable", [], []);
inspectorBackend.registerCommand("Animation.getCurrentTime", [{"name": "id", "type": "string", "optional": false}], ["currentTime"]);
inspectorBackend.registerCommand("Animation.getPlaybackRate", [], ["playbackRate"]);
inspectorBackend.registerCommand("Animation.releaseAnimations", [{"name": "animations", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Animation.resolveAnimation", [{"name": "animationId", "type": "string", "optional": false}], ["remoteObject"]);
inspectorBackend.registerCommand("Animation.seekAnimations", [{"name": "animations", "type": "array", "optional": false}, {"name": "currentTime", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Animation.setPaused", [{"name": "animations", "type": "array", "optional": false}, {"name": "paused", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Animation.setPlaybackRate", [{"name": "playbackRate", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Animation.setTiming", [{"name": "animationId", "type": "string", "optional": false}, {"name": "duration", "type": "number", "optional": false}, {"name": "delay", "type": "number", "optional": false}], []);
inspectorBackend.registerType("Animation.Animation", [{"name": "id", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "pausedState", "type": "boolean", "optional": false}, {"name": "playState", "type": "string", "optional": false}, {"name": "playbackRate", "type": "number", "optional": false}, {"name": "startTime", "type": "number", "optional": false}, {"name": "currentTime", "type": "number", "optional": false}, {"name": "type", "type": "string", "optional": false}, {"name": "source", "type": "object", "optional": true}, {"name": "cssId", "type": "string", "optional": true}]);
inspectorBackend.registerType("Animation.AnimationEffect", [{"name": "delay", "type": "number", "optional": false}, {"name": "endDelay", "type": "number", "optional": false}, {"name": "iterationStart", "type": "number", "optional": false}, {"name": "iterations", "type": "number", "optional": false}, {"name": "duration", "type": "number", "optional": false}, {"name": "direction", "type": "string", "optional": false}, {"name": "fill", "type": "string", "optional": false}, {"name": "backendNodeId", "type": "number", "optional": true}, {"name": "keyframesRule", "type": "object", "optional": true}, {"name": "easing", "type": "string", "optional": false}]);
inspectorBackend.registerType("Animation.KeyframesRule", [{"name": "name", "type": "string", "optional": true}, {"name": "keyframes", "type": "array", "optional": false}]);
inspectorBackend.registerType("Animation.KeyframeStyle", [{"name": "offset", "type": "string", "optional": false}, {"name": "easing", "type": "string", "optional": false}]);

// Audits.
inspectorBackend.registerEnum("Audits.CookieExclusionReason", {ExcludeSameSiteUnspecifiedTreatedAsLax: "ExcludeSameSiteUnspecifiedTreatedAsLax", ExcludeSameSiteNoneInsecure: "ExcludeSameSiteNoneInsecure", ExcludeSameSiteLax: "ExcludeSameSiteLax", ExcludeSameSiteStrict: "ExcludeSameSiteStrict", ExcludeInvalidSameParty: "ExcludeInvalidSameParty", ExcludeSamePartyCrossPartyContext: "ExcludeSamePartyCrossPartyContext", ExcludeDomainNonASCII: "ExcludeDomainNonASCII", ExcludeThirdPartyCookieBlockedInFirstPartySet: "ExcludeThirdPartyCookieBlockedInFirstPartySet"});
inspectorBackend.registerEnum("Audits.CookieWarningReason", {WarnSameSiteUnspecifiedCrossSiteContext: "WarnSameSiteUnspecifiedCrossSiteContext", WarnSameSiteNoneInsecure: "WarnSameSiteNoneInsecure", WarnSameSiteUnspecifiedLaxAllowUnsafe: "WarnSameSiteUnspecifiedLaxAllowUnsafe", WarnSameSiteStrictLaxDowngradeStrict: "WarnSameSiteStrictLaxDowngradeStrict", WarnSameSiteStrictCrossDowngradeStrict: "WarnSameSiteStrictCrossDowngradeStrict", WarnSameSiteStrictCrossDowngradeLax: "WarnSameSiteStrictCrossDowngradeLax", WarnSameSiteLaxCrossDowngradeStrict: "WarnSameSiteLaxCrossDowngradeStrict", WarnSameSiteLaxCrossDowngradeLax: "WarnSameSiteLaxCrossDowngradeLax", WarnAttributeValueExceedsMaxSize: "WarnAttributeValueExceedsMaxSize", WarnDomainNonASCII: "WarnDomainNonASCII"});
inspectorBackend.registerEnum("Audits.CookieOperation", {SetCookie: "SetCookie", ReadCookie: "ReadCookie"});
inspectorBackend.registerEnum("Audits.MixedContentResolutionStatus", {MixedContentBlocked: "MixedContentBlocked", MixedContentAutomaticallyUpgraded: "MixedContentAutomaticallyUpgraded", MixedContentWarning: "MixedContentWarning"});
inspectorBackend.registerEnum("Audits.MixedContentResourceType", {AttributionSrc: "AttributionSrc", Audio: "Audio", Beacon: "Beacon", CSPReport: "CSPReport", Download: "Download", EventSource: "EventSource", Favicon: "Favicon", Font: "Font", Form: "Form", Frame: "Frame", Image: "Image", Import: "Import", Manifest: "Manifest", Ping: "Ping", PluginData: "PluginData", PluginResource: "PluginResource", Prefetch: "Prefetch", Resource: "Resource", Script: "Script", ServiceWorker: "ServiceWorker", SharedWorker: "SharedWorker", Stylesheet: "Stylesheet", Track: "Track", Video: "Video", Worker: "Worker", XMLHttpRequest: "XMLHttpRequest", XSLT: "XSLT"});
inspectorBackend.registerEnum("Audits.BlockedByResponseReason", {CoepFrameResourceNeedsCoepHeader: "CoepFrameResourceNeedsCoepHeader", CoopSandboxedIFrameCannotNavigateToCoopPage: "CoopSandboxedIFrameCannotNavigateToCoopPage", CorpNotSameOrigin: "CorpNotSameOrigin", CorpNotSameOriginAfterDefaultedToSameOriginByCoep: "CorpNotSameOriginAfterDefaultedToSameOriginByCoep", CorpNotSameSite: "CorpNotSameSite"});
inspectorBackend.registerEnum("Audits.HeavyAdResolutionStatus", {HeavyAdBlocked: "HeavyAdBlocked", HeavyAdWarning: "HeavyAdWarning"});
inspectorBackend.registerEnum("Audits.HeavyAdReason", {NetworkTotalLimit: "NetworkTotalLimit", CpuTotalLimit: "CpuTotalLimit", CpuPeakLimit: "CpuPeakLimit"});
inspectorBackend.registerEnum("Audits.ContentSecurityPolicyViolationType", {KInlineViolation: "kInlineViolation", KEvalViolation: "kEvalViolation", KURLViolation: "kURLViolation", KTrustedTypesSinkViolation: "kTrustedTypesSinkViolation", KTrustedTypesPolicyViolation: "kTrustedTypesPolicyViolation", KWasmEvalViolation: "kWasmEvalViolation"});
inspectorBackend.registerEnum("Audits.SharedArrayBufferIssueType", {TransferIssue: "TransferIssue", CreationIssue: "CreationIssue"});
inspectorBackend.registerEnum("Audits.AttributionReportingIssueType", {PermissionPolicyDisabled: "PermissionPolicyDisabled", UntrustworthyReportingOrigin: "UntrustworthyReportingOrigin", InsecureContext: "InsecureContext", InvalidHeader: "InvalidHeader", InvalidRegisterTriggerHeader: "InvalidRegisterTriggerHeader", SourceAndTriggerHeaders: "SourceAndTriggerHeaders", SourceIgnored: "SourceIgnored", TriggerIgnored: "TriggerIgnored", OsSourceIgnored: "OsSourceIgnored", OsTriggerIgnored: "OsTriggerIgnored", InvalidRegisterOsSourceHeader: "InvalidRegisterOsSourceHeader", InvalidRegisterOsTriggerHeader: "InvalidRegisterOsTriggerHeader", WebAndOsHeaders: "WebAndOsHeaders", NoWebOrOsSupport: "NoWebOrOsSupport"});
inspectorBackend.registerEnum("Audits.GenericIssueErrorType", {CrossOriginPortalPostMessageError: "CrossOriginPortalPostMessageError", FormLabelForNameError: "FormLabelForNameError", FormDuplicateIdForInputError: "FormDuplicateIdForInputError", FormInputWithNoLabelError: "FormInputWithNoLabelError", FormAutocompleteAttributeEmptyError: "FormAutocompleteAttributeEmptyError", FormEmptyIdAndNameAttributesForInputError: "FormEmptyIdAndNameAttributesForInputError", FormAriaLabelledByToNonExistingId: "FormAriaLabelledByToNonExistingId", FormInputAssignedAutocompleteValueToIdOrNameAttributeError: "FormInputAssignedAutocompleteValueToIdOrNameAttributeError", FormLabelHasNeitherForNorNestedInput: "FormLabelHasNeitherForNorNestedInput", FormLabelForMatchesNonExistingIdError: "FormLabelForMatchesNonExistingIdError", FormInputHasWrongButWellIntendedAutocompleteValueError: "FormInputHasWrongButWellIntendedAutocompleteValueError"});
inspectorBackend.registerEnum("Audits.ClientHintIssueReason", {MetaTagAllowListInvalidOrigin: "MetaTagAllowListInvalidOrigin", MetaTagModifiedHTML: "MetaTagModifiedHTML"});
inspectorBackend.registerEnum("Audits.FederatedAuthRequestIssueReason", {ShouldEmbargo: "ShouldEmbargo", TooManyRequests: "TooManyRequests", WellKnownHttpNotFound: "WellKnownHttpNotFound", WellKnownNoResponse: "WellKnownNoResponse", WellKnownInvalidResponse: "WellKnownInvalidResponse", WellKnownListEmpty: "WellKnownListEmpty", WellKnownInvalidContentType: "WellKnownInvalidContentType", ConfigNotInWellKnown: "ConfigNotInWellKnown", WellKnownTooBig: "WellKnownTooBig", ConfigHttpNotFound: "ConfigHttpNotFound", ConfigNoResponse: "ConfigNoResponse", ConfigInvalidResponse: "ConfigInvalidResponse", ConfigInvalidContentType: "ConfigInvalidContentType", ClientMetadataHttpNotFound: "ClientMetadataHttpNotFound", ClientMetadataNoResponse: "ClientMetadataNoResponse", ClientMetadataInvalidResponse: "ClientMetadataInvalidResponse", ClientMetadataInvalidContentType: "ClientMetadataInvalidContentType", DisabledInSettings: "DisabledInSettings", ErrorFetchingSignin: "ErrorFetchingSignin", InvalidSigninResponse: "InvalidSigninResponse", AccountsHttpNotFound: "AccountsHttpNotFound", AccountsNoResponse: "AccountsNoResponse", AccountsInvalidResponse: "AccountsInvalidResponse", AccountsListEmpty: "AccountsListEmpty", AccountsInvalidContentType: "AccountsInvalidContentType", IdTokenHttpNotFound: "IdTokenHttpNotFound", IdTokenNoResponse: "IdTokenNoResponse", IdTokenInvalidResponse: "IdTokenInvalidResponse", IdTokenInvalidRequest: "IdTokenInvalidRequest", IdTokenInvalidContentType: "IdTokenInvalidContentType", ErrorIdToken: "ErrorIdToken", Canceled: "Canceled", RpPageNotVisible: "RpPageNotVisible", SilentMediationFailure: "SilentMediationFailure", ThirdPartyCookiesBlocked: "ThirdPartyCookiesBlocked"});
inspectorBackend.registerEnum("Audits.FederatedAuthUserInfoRequestIssueReason", {NotSameOrigin: "NotSameOrigin", NotIframe: "NotIframe", NotPotentiallyTrustworthy: "NotPotentiallyTrustworthy", NoAPIPermission: "NoApiPermission", NotSignedInWithIdp: "NotSignedInWithIdp", NoAccountSharingPermission: "NoAccountSharingPermission", InvalidConfigOrWellKnown: "InvalidConfigOrWellKnown", InvalidAccountsResponse: "InvalidAccountsResponse", NoReturningUserFromFetchedAccounts: "NoReturningUserFromFetchedAccounts"});
inspectorBackend.registerEnum("Audits.StyleSheetLoadingIssueReason", {LateImportRule: "LateImportRule", RequestFailed: "RequestFailed"});
inspectorBackend.registerEnum("Audits.InspectorIssueCode", {CookieIssue: "CookieIssue", MixedContentIssue: "MixedContentIssue", BlockedByResponseIssue: "BlockedByResponseIssue", HeavyAdIssue: "HeavyAdIssue", ContentSecurityPolicyIssue: "ContentSecurityPolicyIssue", SharedArrayBufferIssue: "SharedArrayBufferIssue", LowTextContrastIssue: "LowTextContrastIssue", CorsIssue: "CorsIssue", AttributionReportingIssue: "AttributionReportingIssue", QuirksModeIssue: "QuirksModeIssue", NavigatorUserAgentIssue: "NavigatorUserAgentIssue", GenericIssue: "GenericIssue", DeprecationIssue: "DeprecationIssue", ClientHintIssue: "ClientHintIssue", FederatedAuthRequestIssue: "FederatedAuthRequestIssue", BounceTrackingIssue: "BounceTrackingIssue", StylesheetLoadingIssue: "StylesheetLoadingIssue", FederatedAuthUserInfoRequestIssue: "FederatedAuthUserInfoRequestIssue"});
inspectorBackend.registerEvent("Audits.issueAdded", ["issue"]);
inspectorBackend.registerEnum("Audits.GetEncodedResponseRequestEncoding", {Webp: "webp", Jpeg: "jpeg", Png: "png"});
inspectorBackend.registerCommand("Audits.getEncodedResponse", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "Network.RequestId"}, {"name": "encoding", "type": "string", "optional": false}, {"name": "quality", "type": "number", "optional": true}, {"name": "sizeOnly", "type": "boolean", "optional": true}], ["body", "originalSize", "encodedSize"]);
inspectorBackend.registerCommand("Audits.disable", [], []);
inspectorBackend.registerCommand("Audits.enable", [], []);
inspectorBackend.registerCommand("Audits.checkContrast", [{"name": "reportAAA", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Audits.checkFormsIssues", [], ["formIssues"]);
inspectorBackend.registerType("Audits.AffectedCookie", [{"name": "name", "type": "string", "optional": false}, {"name": "path", "type": "string", "optional": false}, {"name": "domain", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.AffectedRequest", [{"name": "requestId", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": true}]);
inspectorBackend.registerType("Audits.AffectedFrame", [{"name": "frameId", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.CookieIssueDetails", [{"name": "cookie", "type": "object", "optional": true}, {"name": "rawCookieLine", "type": "string", "optional": true}, {"name": "cookieWarningReasons", "type": "array", "optional": false}, {"name": "cookieExclusionReasons", "type": "array", "optional": false}, {"name": "operation", "type": "string", "optional": false}, {"name": "siteForCookies", "type": "string", "optional": true}, {"name": "cookieUrl", "type": "string", "optional": true}, {"name": "request", "type": "object", "optional": true}]);
inspectorBackend.registerType("Audits.MixedContentIssueDetails", [{"name": "resourceType", "type": "string", "optional": true}, {"name": "resolutionStatus", "type": "string", "optional": false}, {"name": "insecureURL", "type": "string", "optional": false}, {"name": "mainResourceURL", "type": "string", "optional": false}, {"name": "request", "type": "object", "optional": true}, {"name": "frame", "type": "object", "optional": true}]);
inspectorBackend.registerType("Audits.BlockedByResponseIssueDetails", [{"name": "request", "type": "object", "optional": false}, {"name": "parentFrame", "type": "object", "optional": true}, {"name": "blockedFrame", "type": "object", "optional": true}, {"name": "reason", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.HeavyAdIssueDetails", [{"name": "resolution", "type": "string", "optional": false}, {"name": "reason", "type": "string", "optional": false}, {"name": "frame", "type": "object", "optional": false}]);
inspectorBackend.registerType("Audits.SourceCodeLocation", [{"name": "scriptId", "type": "string", "optional": true}, {"name": "url", "type": "string", "optional": false}, {"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": false}]);
inspectorBackend.registerType("Audits.ContentSecurityPolicyIssueDetails", [{"name": "blockedURL", "type": "string", "optional": true}, {"name": "violatedDirective", "type": "string", "optional": false}, {"name": "isReportOnly", "type": "boolean", "optional": false}, {"name": "contentSecurityPolicyViolationType", "type": "string", "optional": false}, {"name": "frameAncestor", "type": "object", "optional": true}, {"name": "sourceCodeLocation", "type": "object", "optional": true}, {"name": "violatingNodeId", "type": "number", "optional": true}]);
inspectorBackend.registerType("Audits.SharedArrayBufferIssueDetails", [{"name": "sourceCodeLocation", "type": "object", "optional": false}, {"name": "isWarning", "type": "boolean", "optional": false}, {"name": "type", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.LowTextContrastIssueDetails", [{"name": "violatingNodeId", "type": "number", "optional": false}, {"name": "violatingNodeSelector", "type": "string", "optional": false}, {"name": "contrastRatio", "type": "number", "optional": false}, {"name": "thresholdAA", "type": "number", "optional": false}, {"name": "thresholdAAA", "type": "number", "optional": false}, {"name": "fontSize", "type": "string", "optional": false}, {"name": "fontWeight", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.CorsIssueDetails", [{"name": "corsErrorStatus", "type": "object", "optional": false}, {"name": "isWarning", "type": "boolean", "optional": false}, {"name": "request", "type": "object", "optional": false}, {"name": "location", "type": "object", "optional": true}, {"name": "initiatorOrigin", "type": "string", "optional": true}, {"name": "resourceIPAddressSpace", "type": "string", "optional": true}, {"name": "clientSecurityState", "type": "object", "optional": true}]);
inspectorBackend.registerType("Audits.AttributionReportingIssueDetails", [{"name": "violationType", "type": "string", "optional": false}, {"name": "request", "type": "object", "optional": true}, {"name": "violatingNodeId", "type": "number", "optional": true}, {"name": "invalidParameter", "type": "string", "optional": true}]);
inspectorBackend.registerType("Audits.QuirksModeIssueDetails", [{"name": "isLimitedQuirksMode", "type": "boolean", "optional": false}, {"name": "documentNodeId", "type": "number", "optional": false}, {"name": "url", "type": "string", "optional": false}, {"name": "frameId", "type": "string", "optional": false}, {"name": "loaderId", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.NavigatorUserAgentIssueDetails", [{"name": "url", "type": "string", "optional": false}, {"name": "location", "type": "object", "optional": true}]);
inspectorBackend.registerType("Audits.GenericIssueDetails", [{"name": "errorType", "type": "string", "optional": false}, {"name": "frameId", "type": "string", "optional": true}, {"name": "violatingNodeId", "type": "number", "optional": true}, {"name": "violatingNodeAttribute", "type": "string", "optional": true}]);
inspectorBackend.registerType("Audits.DeprecationIssueDetails", [{"name": "affectedFrame", "type": "object", "optional": true}, {"name": "sourceCodeLocation", "type": "object", "optional": false}, {"name": "type", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.BounceTrackingIssueDetails", [{"name": "trackingSites", "type": "array", "optional": false}]);
inspectorBackend.registerType("Audits.FederatedAuthRequestIssueDetails", [{"name": "federatedAuthRequestIssueReason", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.FederatedAuthUserInfoRequestIssueDetails", [{"name": "federatedAuthUserInfoRequestIssueReason", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.ClientHintIssueDetails", [{"name": "sourceCodeLocation", "type": "object", "optional": false}, {"name": "clientHintIssueReason", "type": "string", "optional": false}]);
inspectorBackend.registerType("Audits.FailedRequestInfo", [{"name": "url", "type": "string", "optional": false}, {"name": "failureMessage", "type": "string", "optional": false}, {"name": "requestId", "type": "string", "optional": true}]);
inspectorBackend.registerType("Audits.StylesheetLoadingIssueDetails", [{"name": "sourceCodeLocation", "type": "object", "optional": false}, {"name": "styleSheetLoadingIssueReason", "type": "string", "optional": false}, {"name": "failedRequestInfo", "type": "object", "optional": true}]);
inspectorBackend.registerType("Audits.InspectorIssueDetails", [{"name": "cookieIssueDetails", "type": "object", "optional": true}, {"name": "mixedContentIssueDetails", "type": "object", "optional": true}, {"name": "blockedByResponseIssueDetails", "type": "object", "optional": true}, {"name": "heavyAdIssueDetails", "type": "object", "optional": true}, {"name": "contentSecurityPolicyIssueDetails", "type": "object", "optional": true}, {"name": "sharedArrayBufferIssueDetails", "type": "object", "optional": true}, {"name": "lowTextContrastIssueDetails", "type": "object", "optional": true}, {"name": "corsIssueDetails", "type": "object", "optional": true}, {"name": "attributionReportingIssueDetails", "type": "object", "optional": true}, {"name": "quirksModeIssueDetails", "type": "object", "optional": true}, {"name": "navigatorUserAgentIssueDetails", "type": "object", "optional": true}, {"name": "genericIssueDetails", "type": "object", "optional": true}, {"name": "deprecationIssueDetails", "type": "object", "optional": true}, {"name": "clientHintIssueDetails", "type": "object", "optional": true}, {"name": "federatedAuthRequestIssueDetails", "type": "object", "optional": true}, {"name": "bounceTrackingIssueDetails", "type": "object", "optional": true}, {"name": "stylesheetLoadingIssueDetails", "type": "object", "optional": true}, {"name": "federatedAuthUserInfoRequestIssueDetails", "type": "object", "optional": true}]);
inspectorBackend.registerType("Audits.InspectorIssue", [{"name": "code", "type": "string", "optional": false}, {"name": "details", "type": "object", "optional": false}, {"name": "issueId", "type": "string", "optional": true}]);

// Autofill.
inspectorBackend.registerCommand("Autofill.trigger", [{"name": "fieldId", "type": "number", "optional": false, "typeRef": "DOM.BackendNodeId"}, {"name": "frameId", "type": "string", "optional": true, "typeRef": "Page.FrameId"}, {"name": "card", "type": "object", "optional": false, "typeRef": "Autofill.CreditCard"}], []);
inspectorBackend.registerCommand("Autofill.setAddresses", [{"name": "addresses", "type": "array", "optional": false}], []);
inspectorBackend.registerType("Autofill.CreditCard", [{"name": "number", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "expiryMonth", "type": "string", "optional": false}, {"name": "expiryYear", "type": "string", "optional": false}, {"name": "cvc", "type": "string", "optional": false}]);
inspectorBackend.registerType("Autofill.AddressField", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("Autofill.Address", [{"name": "fields", "type": "array", "optional": false}]);

// BackgroundService.
inspectorBackend.registerEnum("BackgroundService.ServiceName", {BackgroundFetch: "backgroundFetch", BackgroundSync: "backgroundSync", PushMessaging: "pushMessaging", Notifications: "notifications", PaymentHandler: "paymentHandler", PeriodicBackgroundSync: "periodicBackgroundSync"});
inspectorBackend.registerEvent("BackgroundService.recordingStateChanged", ["isRecording", "service"]);
inspectorBackend.registerEvent("BackgroundService.backgroundServiceEventReceived", ["backgroundServiceEvent"]);
inspectorBackend.registerCommand("BackgroundService.startObserving", [{"name": "service", "type": "string", "optional": false, "typeRef": "ServiceName"}], []);
inspectorBackend.registerCommand("BackgroundService.stopObserving", [{"name": "service", "type": "string", "optional": false, "typeRef": "ServiceName"}], []);
inspectorBackend.registerCommand("BackgroundService.setRecording", [{"name": "shouldRecord", "type": "boolean", "optional": false}, {"name": "service", "type": "string", "optional": false, "typeRef": "ServiceName"}], []);
inspectorBackend.registerCommand("BackgroundService.clearEvents", [{"name": "service", "type": "string", "optional": false, "typeRef": "ServiceName"}], []);
inspectorBackend.registerType("BackgroundService.EventMetadata", [{"name": "key", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("BackgroundService.BackgroundServiceEvent", [{"name": "timestamp", "type": "number", "optional": false}, {"name": "origin", "type": "string", "optional": false}, {"name": "serviceWorkerRegistrationId", "type": "string", "optional": false}, {"name": "service", "type": "string", "optional": false}, {"name": "eventName", "type": "string", "optional": false}, {"name": "instanceId", "type": "string", "optional": false}, {"name": "eventMetadata", "type": "array", "optional": false}, {"name": "storageKey", "type": "string", "optional": false}]);

// Browser.
inspectorBackend.registerEnum("Browser.WindowState", {Normal: "normal", Minimized: "minimized", Maximized: "maximized", Fullscreen: "fullscreen"});
inspectorBackend.registerEnum("Browser.PermissionType", {AccessibilityEvents: "accessibilityEvents", AudioCapture: "audioCapture", BackgroundSync: "backgroundSync", BackgroundFetch: "backgroundFetch", ClipboardReadWrite: "clipboardReadWrite", ClipboardSanitizedWrite: "clipboardSanitizedWrite", DisplayCapture: "displayCapture", DurableStorage: "durableStorage", Flash: "flash", Geolocation: "geolocation", IdleDetection: "idleDetection", LocalFonts: "localFonts", Midi: "midi", MidiSysex: "midiSysex", Nfc: "nfc", Notifications: "notifications", PaymentHandler: "paymentHandler", PeriodicBackgroundSync: "periodicBackgroundSync", ProtectedMediaIdentifier: "protectedMediaIdentifier", Sensors: "sensors", StorageAccess: "storageAccess", TopLevelStorageAccess: "topLevelStorageAccess", VideoCapture: "videoCapture", VideoCapturePanTiltZoom: "videoCapturePanTiltZoom", WakeLockScreen: "wakeLockScreen", WakeLockSystem: "wakeLockSystem", WindowManagement: "windowManagement"});
inspectorBackend.registerEnum("Browser.PermissionSetting", {Granted: "granted", Denied: "denied", Prompt: "prompt"});
inspectorBackend.registerEnum("Browser.BrowserCommandId", {OpenTabSearch: "openTabSearch", CloseTabSearch: "closeTabSearch"});
inspectorBackend.registerEvent("Browser.downloadWillBegin", ["frameId", "guid", "url", "suggestedFilename"]);
inspectorBackend.registerEnum("Browser.DownloadProgressEventState", {InProgress: "inProgress", Completed: "completed", Canceled: "canceled"});
inspectorBackend.registerEvent("Browser.downloadProgress", ["guid", "totalBytes", "receivedBytes", "state"]);
inspectorBackend.registerCommand("Browser.setPermission", [{"name": "permission", "type": "object", "optional": false, "typeRef": "Browser.PermissionDescriptor"}, {"name": "setting", "type": "string", "optional": false, "typeRef": "PermissionSetting"}, {"name": "origin", "type": "string", "optional": true}, {"name": "browserContextId", "type": "string", "optional": true, "typeRef": "BrowserContextID"}], []);
inspectorBackend.registerCommand("Browser.grantPermissions", [{"name": "permissions", "type": "array", "optional": false}, {"name": "origin", "type": "string", "optional": true}, {"name": "browserContextId", "type": "string", "optional": true, "typeRef": "BrowserContextID"}], []);
inspectorBackend.registerCommand("Browser.resetPermissions", [{"name": "browserContextId", "type": "string", "optional": true, "typeRef": "BrowserContextID"}], []);
inspectorBackend.registerEnum("Browser.SetDownloadBehaviorRequestBehavior", {Deny: "deny", Allow: "allow", AllowAndName: "allowAndName", Default: "default"});
inspectorBackend.registerCommand("Browser.setDownloadBehavior", [{"name": "behavior", "type": "string", "optional": false}, {"name": "browserContextId", "type": "string", "optional": true, "typeRef": "BrowserContextID"}, {"name": "downloadPath", "type": "string", "optional": true}, {"name": "eventsEnabled", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Browser.cancelDownload", [{"name": "guid", "type": "string", "optional": false}, {"name": "browserContextId", "type": "string", "optional": true, "typeRef": "BrowserContextID"}], []);
inspectorBackend.registerCommand("Browser.close", [], []);
inspectorBackend.registerCommand("Browser.crash", [], []);
inspectorBackend.registerCommand("Browser.crashGpuProcess", [], []);
inspectorBackend.registerCommand("Browser.getVersion", [], ["protocolVersion", "product", "revision", "userAgent", "jsVersion"]);
inspectorBackend.registerCommand("Browser.getBrowserCommandLine", [], ["arguments"]);
inspectorBackend.registerCommand("Browser.getHistograms", [{"name": "query", "type": "string", "optional": true}, {"name": "delta", "type": "boolean", "optional": true}], ["histograms"]);
inspectorBackend.registerCommand("Browser.getHistogram", [{"name": "name", "type": "string", "optional": false}, {"name": "delta", "type": "boolean", "optional": true}], ["histogram"]);
inspectorBackend.registerCommand("Browser.getWindowBounds", [{"name": "windowId", "type": "number", "optional": false, "typeRef": "WindowID"}], ["bounds"]);
inspectorBackend.registerCommand("Browser.getWindowForTarget", [{"name": "targetId", "type": "string", "optional": true, "typeRef": "Target.TargetID"}], ["windowId", "bounds"]);
inspectorBackend.registerCommand("Browser.setWindowBounds", [{"name": "windowId", "type": "number", "optional": false, "typeRef": "WindowID"}, {"name": "bounds", "type": "object", "optional": false, "typeRef": "Browser.Bounds"}], []);
inspectorBackend.registerCommand("Browser.setDockTile", [{"name": "badgeLabel", "type": "string", "optional": true}, {"name": "image", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Browser.executeBrowserCommand", [{"name": "commandId", "type": "string", "optional": false, "typeRef": "BrowserCommandId"}], []);
inspectorBackend.registerCommand("Browser.addPrivacySandboxEnrollmentOverride", [{"name": "url", "type": "string", "optional": false}], []);
inspectorBackend.registerType("Browser.Bounds", [{"name": "left", "type": "number", "optional": true}, {"name": "top", "type": "number", "optional": true}, {"name": "width", "type": "number", "optional": true}, {"name": "height", "type": "number", "optional": true}, {"name": "windowState", "type": "string", "optional": true}]);
inspectorBackend.registerType("Browser.PermissionDescriptor", [{"name": "name", "type": "string", "optional": false}, {"name": "sysex", "type": "boolean", "optional": true}, {"name": "userVisibleOnly", "type": "boolean", "optional": true}, {"name": "allowWithoutSanitization", "type": "boolean", "optional": true}, {"name": "panTiltZoom", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("Browser.Bucket", [{"name": "low", "type": "number", "optional": false}, {"name": "high", "type": "number", "optional": false}, {"name": "count", "type": "number", "optional": false}]);
inspectorBackend.registerType("Browser.Histogram", [{"name": "name", "type": "string", "optional": false}, {"name": "sum", "type": "number", "optional": false}, {"name": "count", "type": "number", "optional": false}, {"name": "buckets", "type": "array", "optional": false}]);

// CSS.
inspectorBackend.registerEnum("CSS.StyleSheetOrigin", {Injected: "injected", UserAgent: "user-agent", Inspector: "inspector", Regular: "regular"});
inspectorBackend.registerEnum("CSS.CSSMediaSource", {MediaRule: "mediaRule", ImportRule: "importRule", LinkedSheet: "linkedSheet", InlineSheet: "inlineSheet"});
inspectorBackend.registerEvent("CSS.fontsUpdated", ["font"]);
inspectorBackend.registerEvent("CSS.mediaQueryResultChanged", []);
inspectorBackend.registerEvent("CSS.styleSheetAdded", ["header"]);
inspectorBackend.registerEvent("CSS.styleSheetChanged", ["styleSheetId"]);
inspectorBackend.registerEvent("CSS.styleSheetRemoved", ["styleSheetId"]);
inspectorBackend.registerCommand("CSS.addRule", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "ruleText", "type": "string", "optional": false}, {"name": "location", "type": "object", "optional": false, "typeRef": "CSS.SourceRange"}], ["rule"]);
inspectorBackend.registerCommand("CSS.collectClassNames", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}], ["classNames"]);
inspectorBackend.registerCommand("CSS.createStyleSheet", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "Page.FrameId"}], ["styleSheetId"]);
inspectorBackend.registerCommand("CSS.disable", [], []);
inspectorBackend.registerCommand("CSS.enable", [], []);
inspectorBackend.registerCommand("CSS.forcePseudoState", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}, {"name": "forcedPseudoClasses", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("CSS.getBackgroundColors", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}], ["backgroundColors", "computedFontSize", "computedFontWeight"]);
inspectorBackend.registerCommand("CSS.getComputedStyleForNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}], ["computedStyle"]);
inspectorBackend.registerCommand("CSS.getInlineStylesForNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}], ["inlineStyle", "attributesStyle"]);
inspectorBackend.registerCommand("CSS.getMatchedStylesForNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}], ["inlineStyle", "attributesStyle", "matchedCSSRules", "pseudoElements", "inherited", "inheritedPseudoElements", "cssKeyframesRules", "cssPositionFallbackRules", "parentLayoutNodeId"]);
inspectorBackend.registerCommand("CSS.getMediaQueries", [], ["medias"]);
inspectorBackend.registerCommand("CSS.getPlatformFontsForNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}], ["fonts"]);
inspectorBackend.registerCommand("CSS.getStyleSheetText", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}], ["text"]);
inspectorBackend.registerCommand("CSS.getLayersForNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}], ["rootLayer"]);
inspectorBackend.registerCommand("CSS.trackComputedStyleUpdates", [{"name": "propertiesToTrack", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("CSS.takeComputedStyleUpdates", [], ["nodeIds"]);
inspectorBackend.registerCommand("CSS.setEffectivePropertyValueForNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}, {"name": "propertyName", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("CSS.setKeyframeKey", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "range", "type": "object", "optional": false, "typeRef": "CSS.SourceRange"}, {"name": "keyText", "type": "string", "optional": false}], ["keyText"]);
inspectorBackend.registerCommand("CSS.setMediaText", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "range", "type": "object", "optional": false, "typeRef": "CSS.SourceRange"}, {"name": "text", "type": "string", "optional": false}], ["media"]);
inspectorBackend.registerCommand("CSS.setContainerQueryText", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "range", "type": "object", "optional": false, "typeRef": "CSS.SourceRange"}, {"name": "text", "type": "string", "optional": false}], ["containerQuery"]);
inspectorBackend.registerCommand("CSS.setSupportsText", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "range", "type": "object", "optional": false, "typeRef": "CSS.SourceRange"}, {"name": "text", "type": "string", "optional": false}], ["supports"]);
inspectorBackend.registerCommand("CSS.setScopeText", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "range", "type": "object", "optional": false, "typeRef": "CSS.SourceRange"}, {"name": "text", "type": "string", "optional": false}], ["scope"]);
inspectorBackend.registerCommand("CSS.setRuleSelector", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "range", "type": "object", "optional": false, "typeRef": "CSS.SourceRange"}, {"name": "selector", "type": "string", "optional": false}], ["selectorList"]);
inspectorBackend.registerCommand("CSS.setStyleSheetText", [{"name": "styleSheetId", "type": "string", "optional": false, "typeRef": "StyleSheetId"}, {"name": "text", "type": "string", "optional": false}], ["sourceMapURL"]);
inspectorBackend.registerCommand("CSS.setStyleTexts", [{"name": "edits", "type": "array", "optional": false}], ["styles"]);
inspectorBackend.registerCommand("CSS.startRuleUsageTracking", [], []);
inspectorBackend.registerCommand("CSS.stopRuleUsageTracking", [], ["ruleUsage"]);
inspectorBackend.registerCommand("CSS.takeCoverageDelta", [], ["coverage", "timestamp"]);
inspectorBackend.registerCommand("CSS.setLocalFontsEnabled", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerType("CSS.PseudoElementMatches", [{"name": "pseudoType", "type": "string", "optional": false}, {"name": "pseudoIdentifier", "type": "string", "optional": true}, {"name": "matches", "type": "array", "optional": false}]);
inspectorBackend.registerType("CSS.InheritedStyleEntry", [{"name": "inlineStyle", "type": "object", "optional": true}, {"name": "matchedCSSRules", "type": "array", "optional": false}]);
inspectorBackend.registerType("CSS.InheritedPseudoElementMatches", [{"name": "pseudoElements", "type": "array", "optional": false}]);
inspectorBackend.registerType("CSS.RuleMatch", [{"name": "rule", "type": "object", "optional": false}, {"name": "matchingSelectors", "type": "array", "optional": false}]);
inspectorBackend.registerType("CSS.Value", [{"name": "text", "type": "string", "optional": false}, {"name": "range", "type": "object", "optional": true}, {"name": "specificity", "type": "object", "optional": true}]);
inspectorBackend.registerType("CSS.Specificity", [{"name": "a", "type": "number", "optional": false}, {"name": "b", "type": "number", "optional": false}, {"name": "c", "type": "number", "optional": false}]);
inspectorBackend.registerType("CSS.SelectorList", [{"name": "selectors", "type": "array", "optional": false}, {"name": "text", "type": "string", "optional": false}]);
inspectorBackend.registerType("CSS.CSSStyleSheetHeader", [{"name": "styleSheetId", "type": "string", "optional": false}, {"name": "frameId", "type": "string", "optional": false}, {"name": "sourceURL", "type": "string", "optional": false}, {"name": "sourceMapURL", "type": "string", "optional": true}, {"name": "origin", "type": "string", "optional": false}, {"name": "title", "type": "string", "optional": false}, {"name": "ownerNode", "type": "number", "optional": true}, {"name": "disabled", "type": "boolean", "optional": false}, {"name": "hasSourceURL", "type": "boolean", "optional": true}, {"name": "isInline", "type": "boolean", "optional": false}, {"name": "isMutable", "type": "boolean", "optional": false}, {"name": "isConstructed", "type": "boolean", "optional": false}, {"name": "startLine", "type": "number", "optional": false}, {"name": "startColumn", "type": "number", "optional": false}, {"name": "length", "type": "number", "optional": false}, {"name": "endLine", "type": "number", "optional": false}, {"name": "endColumn", "type": "number", "optional": false}, {"name": "loadingFailed", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("CSS.CSSRule", [{"name": "styleSheetId", "type": "string", "optional": true}, {"name": "selectorList", "type": "object", "optional": false}, {"name": "nestingSelectors", "type": "array", "optional": true}, {"name": "origin", "type": "string", "optional": false}, {"name": "style", "type": "object", "optional": false}, {"name": "media", "type": "array", "optional": true}, {"name": "containerQueries", "type": "array", "optional": true}, {"name": "supports", "type": "array", "optional": true}, {"name": "layers", "type": "array", "optional": true}, {"name": "scopes", "type": "array", "optional": true}]);
inspectorBackend.registerType("CSS.RuleUsage", [{"name": "styleSheetId", "type": "string", "optional": false}, {"name": "startOffset", "type": "number", "optional": false}, {"name": "endOffset", "type": "number", "optional": false}, {"name": "used", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("CSS.SourceRange", [{"name": "startLine", "type": "number", "optional": false}, {"name": "startColumn", "type": "number", "optional": false}, {"name": "endLine", "type": "number", "optional": false}, {"name": "endColumn", "type": "number", "optional": false}]);
inspectorBackend.registerType("CSS.ShorthandEntry", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}, {"name": "important", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("CSS.CSSComputedStyleProperty", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("CSS.CSSStyle", [{"name": "styleSheetId", "type": "string", "optional": true}, {"name": "cssProperties", "type": "array", "optional": false}, {"name": "shorthandEntries", "type": "array", "optional": false}, {"name": "cssText", "type": "string", "optional": true}, {"name": "range", "type": "object", "optional": true}]);
inspectorBackend.registerType("CSS.CSSProperty", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}, {"name": "important", "type": "boolean", "optional": true}, {"name": "implicit", "type": "boolean", "optional": true}, {"name": "text", "type": "string", "optional": true}, {"name": "parsedOk", "type": "boolean", "optional": true}, {"name": "disabled", "type": "boolean", "optional": true}, {"name": "range", "type": "object", "optional": true}, {"name": "longhandProperties", "type": "array", "optional": true}]);
inspectorBackend.registerType("CSS.CSSMedia", [{"name": "text", "type": "string", "optional": false}, {"name": "source", "type": "string", "optional": false}, {"name": "sourceURL", "type": "string", "optional": true}, {"name": "range", "type": "object", "optional": true}, {"name": "styleSheetId", "type": "string", "optional": true}, {"name": "mediaList", "type": "array", "optional": true}]);
inspectorBackend.registerType("CSS.MediaQuery", [{"name": "expressions", "type": "array", "optional": false}, {"name": "active", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("CSS.MediaQueryExpression", [{"name": "value", "type": "number", "optional": false}, {"name": "unit", "type": "string", "optional": false}, {"name": "feature", "type": "string", "optional": false}, {"name": "valueRange", "type": "object", "optional": true}, {"name": "computedLength", "type": "number", "optional": true}]);
inspectorBackend.registerType("CSS.CSSContainerQuery", [{"name": "text", "type": "string", "optional": false}, {"name": "range", "type": "object", "optional": true}, {"name": "styleSheetId", "type": "string", "optional": true}, {"name": "name", "type": "string", "optional": true}, {"name": "physicalAxes", "type": "string", "optional": true}, {"name": "logicalAxes", "type": "string", "optional": true}]);
inspectorBackend.registerType("CSS.CSSSupports", [{"name": "text", "type": "string", "optional": false}, {"name": "active", "type": "boolean", "optional": false}, {"name": "range", "type": "object", "optional": true}, {"name": "styleSheetId", "type": "string", "optional": true}]);
inspectorBackend.registerType("CSS.CSSScope", [{"name": "text", "type": "string", "optional": false}, {"name": "range", "type": "object", "optional": true}, {"name": "styleSheetId", "type": "string", "optional": true}]);
inspectorBackend.registerType("CSS.CSSLayer", [{"name": "text", "type": "string", "optional": false}, {"name": "range", "type": "object", "optional": true}, {"name": "styleSheetId", "type": "string", "optional": true}]);
inspectorBackend.registerType("CSS.CSSLayerData", [{"name": "name", "type": "string", "optional": false}, {"name": "subLayers", "type": "array", "optional": true}, {"name": "order", "type": "number", "optional": false}]);
inspectorBackend.registerType("CSS.PlatformFontUsage", [{"name": "familyName", "type": "string", "optional": false}, {"name": "isCustomFont", "type": "boolean", "optional": false}, {"name": "glyphCount", "type": "number", "optional": false}]);
inspectorBackend.registerType("CSS.FontVariationAxis", [{"name": "tag", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "minValue", "type": "number", "optional": false}, {"name": "maxValue", "type": "number", "optional": false}, {"name": "defaultValue", "type": "number", "optional": false}]);
inspectorBackend.registerType("CSS.FontFace", [{"name": "fontFamily", "type": "string", "optional": false}, {"name": "fontStyle", "type": "string", "optional": false}, {"name": "fontVariant", "type": "string", "optional": false}, {"name": "fontWeight", "type": "string", "optional": false}, {"name": "fontStretch", "type": "string", "optional": false}, {"name": "fontDisplay", "type": "string", "optional": false}, {"name": "unicodeRange", "type": "string", "optional": false}, {"name": "src", "type": "string", "optional": false}, {"name": "platformFontFamily", "type": "string", "optional": false}, {"name": "fontVariationAxes", "type": "array", "optional": true}]);
inspectorBackend.registerType("CSS.CSSTryRule", [{"name": "styleSheetId", "type": "string", "optional": true}, {"name": "origin", "type": "string", "optional": false}, {"name": "style", "type": "object", "optional": false}]);
inspectorBackend.registerType("CSS.CSSPositionFallbackRule", [{"name": "name", "type": "object", "optional": false}, {"name": "tryRules", "type": "array", "optional": false}]);
inspectorBackend.registerType("CSS.CSSKeyframesRule", [{"name": "animationName", "type": "object", "optional": false}, {"name": "keyframes", "type": "array", "optional": false}]);
inspectorBackend.registerType("CSS.CSSKeyframeRule", [{"name": "styleSheetId", "type": "string", "optional": true}, {"name": "origin", "type": "string", "optional": false}, {"name": "keyText", "type": "object", "optional": false}, {"name": "style", "type": "object", "optional": false}]);
inspectorBackend.registerType("CSS.StyleDeclarationEdit", [{"name": "styleSheetId", "type": "string", "optional": false}, {"name": "range", "type": "object", "optional": false}, {"name": "text", "type": "string", "optional": false}]);

// CacheStorage.
inspectorBackend.registerEnum("CacheStorage.CachedResponseType", {Basic: "basic", Cors: "cors", Default: "default", Error: "error", OpaqueResponse: "opaqueResponse", OpaqueRedirect: "opaqueRedirect"});
inspectorBackend.registerCommand("CacheStorage.deleteCache", [{"name": "cacheId", "type": "string", "optional": false, "typeRef": "CacheId"}], []);
inspectorBackend.registerCommand("CacheStorage.deleteEntry", [{"name": "cacheId", "type": "string", "optional": false, "typeRef": "CacheId"}, {"name": "request", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("CacheStorage.requestCacheNames", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}], ["caches"]);
inspectorBackend.registerCommand("CacheStorage.requestCachedResponse", [{"name": "cacheId", "type": "string", "optional": false, "typeRef": "CacheId"}, {"name": "requestURL", "type": "string", "optional": false}, {"name": "requestHeaders", "type": "array", "optional": false}], ["response"]);
inspectorBackend.registerCommand("CacheStorage.requestEntries", [{"name": "cacheId", "type": "string", "optional": false, "typeRef": "CacheId"}, {"name": "skipCount", "type": "number", "optional": true}, {"name": "pageSize", "type": "number", "optional": true}, {"name": "pathFilter", "type": "string", "optional": true}], ["cacheDataEntries", "returnCount"]);
inspectorBackend.registerType("CacheStorage.DataEntry", [{"name": "requestURL", "type": "string", "optional": false}, {"name": "requestMethod", "type": "string", "optional": false}, {"name": "requestHeaders", "type": "array", "optional": false}, {"name": "responseTime", "type": "number", "optional": false}, {"name": "responseStatus", "type": "number", "optional": false}, {"name": "responseStatusText", "type": "string", "optional": false}, {"name": "responseType", "type": "string", "optional": false}, {"name": "responseHeaders", "type": "array", "optional": false}]);
inspectorBackend.registerType("CacheStorage.Cache", [{"name": "cacheId", "type": "string", "optional": false}, {"name": "securityOrigin", "type": "string", "optional": false}, {"name": "storageKey", "type": "string", "optional": false}, {"name": "storageBucket", "type": "object", "optional": true}, {"name": "cacheName", "type": "string", "optional": false}]);
inspectorBackend.registerType("CacheStorage.Header", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("CacheStorage.CachedResponse", [{"name": "body", "type": "string", "optional": false}]);

// Cast.
inspectorBackend.registerEvent("Cast.sinksUpdated", ["sinks"]);
inspectorBackend.registerEvent("Cast.issueUpdated", ["issueMessage"]);
inspectorBackend.registerCommand("Cast.enable", [{"name": "presentationUrl", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Cast.disable", [], []);
inspectorBackend.registerCommand("Cast.setSinkToUse", [{"name": "sinkName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Cast.startDesktopMirroring", [{"name": "sinkName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Cast.startTabMirroring", [{"name": "sinkName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Cast.stopCasting", [{"name": "sinkName", "type": "string", "optional": false}], []);
inspectorBackend.registerType("Cast.Sink", [{"name": "name", "type": "string", "optional": false}, {"name": "id", "type": "string", "optional": false}, {"name": "session", "type": "string", "optional": true}]);

// DOM.
inspectorBackend.registerEnum("DOM.PseudoType", {FirstLine: "first-line", FirstLetter: "first-letter", Before: "before", After: "after", Marker: "marker", Backdrop: "backdrop", Selection: "selection", TargetText: "target-text", SpellingError: "spelling-error", GrammarError: "grammar-error", Highlight: "highlight", FirstLineInherited: "first-line-inherited", Scrollbar: "scrollbar", ScrollbarThumb: "scrollbar-thumb", ScrollbarButton: "scrollbar-button", ScrollbarTrack: "scrollbar-track", ScrollbarTrackPiece: "scrollbar-track-piece", ScrollbarCorner: "scrollbar-corner", Resizer: "resizer", InputListButton: "input-list-button", ViewTransition: "view-transition", ViewTransitionGroup: "view-transition-group", ViewTransitionImagePair: "view-transition-image-pair", ViewTransitionOld: "view-transition-old", ViewTransitionNew: "view-transition-new"});
inspectorBackend.registerEnum("DOM.ShadowRootType", {UserAgent: "user-agent", Open: "open", Closed: "closed"});
inspectorBackend.registerEnum("DOM.CompatibilityMode", {QuirksMode: "QuirksMode", LimitedQuirksMode: "LimitedQuirksMode", NoQuirksMode: "NoQuirksMode"});
inspectorBackend.registerEnum("DOM.PhysicalAxes", {Horizontal: "Horizontal", Vertical: "Vertical", Both: "Both"});
inspectorBackend.registerEnum("DOM.LogicalAxes", {Inline: "Inline", Block: "Block", Both: "Both"});
inspectorBackend.registerEvent("DOM.attributeModified", ["nodeId", "name", "value"]);
inspectorBackend.registerEvent("DOM.attributeRemoved", ["nodeId", "name"]);
inspectorBackend.registerEvent("DOM.characterDataModified", ["nodeId", "characterData"]);
inspectorBackend.registerEvent("DOM.childNodeCountUpdated", ["nodeId", "childNodeCount"]);
inspectorBackend.registerEvent("DOM.childNodeInserted", ["parentNodeId", "previousNodeId", "node"]);
inspectorBackend.registerEvent("DOM.childNodeRemoved", ["parentNodeId", "nodeId"]);
inspectorBackend.registerEvent("DOM.distributedNodesUpdated", ["insertionPointId", "distributedNodes"]);
inspectorBackend.registerEvent("DOM.documentUpdated", []);
inspectorBackend.registerEvent("DOM.inlineStyleInvalidated", ["nodeIds"]);
inspectorBackend.registerEvent("DOM.pseudoElementAdded", ["parentId", "pseudoElement"]);
inspectorBackend.registerEvent("DOM.topLayerElementsUpdated", []);
inspectorBackend.registerEvent("DOM.pseudoElementRemoved", ["parentId", "pseudoElementId"]);
inspectorBackend.registerEvent("DOM.setChildNodes", ["parentId", "nodes"]);
inspectorBackend.registerEvent("DOM.shadowRootPopped", ["hostId", "rootId"]);
inspectorBackend.registerEvent("DOM.shadowRootPushed", ["hostId", "root"]);
inspectorBackend.registerCommand("DOM.collectClassNamesFromSubtree", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}], ["classNames"]);
inspectorBackend.registerCommand("DOM.copyTo", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "targetNodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "insertBeforeNodeId", "type": "number", "optional": true, "typeRef": "NodeId"}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.describeNode", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}, {"name": "depth", "type": "number", "optional": true}, {"name": "pierce", "type": "boolean", "optional": true}], ["node"]);
inspectorBackend.registerCommand("DOM.scrollIntoViewIfNeeded", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}, {"name": "rect", "type": "object", "optional": true, "typeRef": "DOM.Rect"}], []);
inspectorBackend.registerCommand("DOM.disable", [], []);
inspectorBackend.registerCommand("DOM.discardSearchResults", [{"name": "searchId", "type": "string", "optional": false}], []);
inspectorBackend.registerEnum("DOM.EnableRequestIncludeWhitespace", {None: "none", All: "all"});
inspectorBackend.registerCommand("DOM.enable", [{"name": "includeWhitespace", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("DOM.focus", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}], []);
inspectorBackend.registerCommand("DOM.getAttributes", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}], ["attributes"]);
inspectorBackend.registerCommand("DOM.getBoxModel", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}], ["model"]);
inspectorBackend.registerCommand("DOM.getContentQuads", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}], ["quads"]);
inspectorBackend.registerCommand("DOM.getDocument", [{"name": "depth", "type": "number", "optional": true}, {"name": "pierce", "type": "boolean", "optional": true}], ["root"]);
inspectorBackend.registerCommand("DOM.getFlattenedDocument", [{"name": "depth", "type": "number", "optional": true}, {"name": "pierce", "type": "boolean", "optional": true}], ["nodes"]);
inspectorBackend.registerCommand("DOM.getNodesForSubtreeByStyle", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "computedStyles", "type": "array", "optional": false}, {"name": "pierce", "type": "boolean", "optional": true}], ["nodeIds"]);
inspectorBackend.registerCommand("DOM.getNodeForLocation", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "includeUserAgentShadowDOM", "type": "boolean", "optional": true}, {"name": "ignorePointerEventsNone", "type": "boolean", "optional": true}], ["backendNodeId", "frameId", "nodeId"]);
inspectorBackend.registerCommand("DOM.getOuterHTML", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}], ["outerHTML"]);
inspectorBackend.registerCommand("DOM.getRelayoutBoundary", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.getSearchResults", [{"name": "searchId", "type": "string", "optional": false}, {"name": "fromIndex", "type": "number", "optional": false}, {"name": "toIndex", "type": "number", "optional": false}], ["nodeIds"]);
inspectorBackend.registerCommand("DOM.hideHighlight", [], []);
inspectorBackend.registerCommand("DOM.highlightNode", [], []);
inspectorBackend.registerCommand("DOM.highlightRect", [], []);
inspectorBackend.registerCommand("DOM.markUndoableState", [], []);
inspectorBackend.registerCommand("DOM.moveTo", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "targetNodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "insertBeforeNodeId", "type": "number", "optional": true, "typeRef": "NodeId"}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.performSearch", [{"name": "query", "type": "string", "optional": false}, {"name": "includeUserAgentShadowDOM", "type": "boolean", "optional": true}], ["searchId", "resultCount"]);
inspectorBackend.registerCommand("DOM.pushNodeByPathToFrontend", [{"name": "path", "type": "string", "optional": false}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.pushNodesByBackendIdsToFrontend", [{"name": "backendNodeIds", "type": "array", "optional": false}], ["nodeIds"]);
inspectorBackend.registerCommand("DOM.querySelector", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "selector", "type": "string", "optional": false}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.querySelectorAll", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "selector", "type": "string", "optional": false}], ["nodeIds"]);
inspectorBackend.registerCommand("DOM.getTopLayerElements", [], ["nodeIds"]);
inspectorBackend.registerCommand("DOM.redo", [], []);
inspectorBackend.registerCommand("DOM.removeAttribute", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "name", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOM.removeNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}], []);
inspectorBackend.registerCommand("DOM.requestChildNodes", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "depth", "type": "number", "optional": true}, {"name": "pierce", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("DOM.requestNode", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "Runtime.RemoteObjectId"}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.resolveNode", [{"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "DOM.BackendNodeId"}, {"name": "objectGroup", "type": "string", "optional": true}, {"name": "executionContextId", "type": "number", "optional": true, "typeRef": "Runtime.ExecutionContextId"}], ["object"]);
inspectorBackend.registerCommand("DOM.setAttributeValue", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOM.setAttributesAsText", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "text", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("DOM.setFileInputFiles", [{"name": "files", "type": "array", "optional": false}, {"name": "nodeId", "type": "number", "optional": true, "typeRef": "NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}], []);
inspectorBackend.registerCommand("DOM.setNodeStackTracesEnabled", [{"name": "enable", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("DOM.getNodeStackTraces", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}], ["creation"]);
inspectorBackend.registerCommand("DOM.getFileInfo", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "Runtime.RemoteObjectId"}], ["path"]);
inspectorBackend.registerCommand("DOM.setInspectedNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}], []);
inspectorBackend.registerCommand("DOM.setNodeName", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "name", "type": "string", "optional": false}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.setNodeValue", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "value", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOM.setOuterHTML", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "outerHTML", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOM.undo", [], []);
inspectorBackend.registerCommand("DOM.getFrameOwner", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "Page.FrameId"}], ["backendNodeId", "nodeId"]);
inspectorBackend.registerCommand("DOM.getContainerForNode", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}, {"name": "containerName", "type": "string", "optional": true}, {"name": "physicalAxes", "type": "string", "optional": true, "typeRef": "PhysicalAxes"}, {"name": "logicalAxes", "type": "string", "optional": true, "typeRef": "LogicalAxes"}], ["nodeId"]);
inspectorBackend.registerCommand("DOM.getQueryingDescendantsForContainer", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "NodeId"}], ["nodeIds"]);
inspectorBackend.registerType("DOM.BackendNode", [{"name": "nodeType", "type": "number", "optional": false}, {"name": "nodeName", "type": "string", "optional": false}, {"name": "backendNodeId", "type": "number", "optional": false}]);
inspectorBackend.registerType("DOM.Node", [{"name": "nodeId", "type": "number", "optional": false}, {"name": "parentId", "type": "number", "optional": true}, {"name": "backendNodeId", "type": "number", "optional": false}, {"name": "nodeType", "type": "number", "optional": false}, {"name": "nodeName", "type": "string", "optional": false}, {"name": "localName", "type": "string", "optional": false}, {"name": "nodeValue", "type": "string", "optional": false}, {"name": "childNodeCount", "type": "number", "optional": true}, {"name": "children", "type": "array", "optional": true}, {"name": "attributes", "type": "array", "optional": true}, {"name": "documentURL", "type": "string", "optional": true}, {"name": "baseURL", "type": "string", "optional": true}, {"name": "publicId", "type": "string", "optional": true}, {"name": "systemId", "type": "string", "optional": true}, {"name": "internalSubset", "type": "string", "optional": true}, {"name": "xmlVersion", "type": "string", "optional": true}, {"name": "name", "type": "string", "optional": true}, {"name": "value", "type": "string", "optional": true}, {"name": "pseudoType", "type": "string", "optional": true}, {"name": "pseudoIdentifier", "type": "string", "optional": true}, {"name": "shadowRootType", "type": "string", "optional": true}, {"name": "frameId", "type": "string", "optional": true}, {"name": "contentDocument", "type": "object", "optional": true}, {"name": "shadowRoots", "type": "array", "optional": true}, {"name": "templateContent", "type": "object", "optional": true}, {"name": "pseudoElements", "type": "array", "optional": true}, {"name": "importedDocument", "type": "object", "optional": true}, {"name": "distributedNodes", "type": "array", "optional": true}, {"name": "isSVG", "type": "boolean", "optional": true}, {"name": "compatibilityMode", "type": "string", "optional": true}, {"name": "assignedSlot", "type": "object", "optional": true}]);
inspectorBackend.registerType("DOM.RGBA", [{"name": "r", "type": "number", "optional": false}, {"name": "g", "type": "number", "optional": false}, {"name": "b", "type": "number", "optional": false}, {"name": "a", "type": "number", "optional": true}]);
inspectorBackend.registerType("DOM.BoxModel", [{"name": "content", "type": "array", "optional": false}, {"name": "padding", "type": "array", "optional": false}, {"name": "border", "type": "array", "optional": false}, {"name": "margin", "type": "array", "optional": false}, {"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}, {"name": "shapeOutside", "type": "object", "optional": true}]);
inspectorBackend.registerType("DOM.ShapeOutsideInfo", [{"name": "bounds", "type": "array", "optional": false}, {"name": "shape", "type": "array", "optional": false}, {"name": "marginShape", "type": "array", "optional": false}]);
inspectorBackend.registerType("DOM.Rect", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}]);
inspectorBackend.registerType("DOM.CSSComputedStyleProperty", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);

// DOMDebugger.
inspectorBackend.registerEnum("DOMDebugger.DOMBreakpointType", {SubtreeModified: "subtree-modified", AttributeModified: "attribute-modified", NodeRemoved: "node-removed"});
inspectorBackend.registerEnum("DOMDebugger.CSPViolationType", {TrustedtypeSinkViolation: "trustedtype-sink-violation", TrustedtypePolicyViolation: "trustedtype-policy-violation"});
inspectorBackend.registerCommand("DOMDebugger.getEventListeners", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "Runtime.RemoteObjectId"}, {"name": "depth", "type": "number", "optional": true}, {"name": "pierce", "type": "boolean", "optional": true}], ["listeners"]);
inspectorBackend.registerCommand("DOMDebugger.removeDOMBreakpoint", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}, {"name": "type", "type": "string", "optional": false, "typeRef": "DOMBreakpointType"}], []);
inspectorBackend.registerCommand("DOMDebugger.removeEventListenerBreakpoint", [{"name": "eventName", "type": "string", "optional": false}, {"name": "targetName", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("DOMDebugger.removeInstrumentationBreakpoint", [{"name": "eventName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOMDebugger.removeXHRBreakpoint", [{"name": "url", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOMDebugger.setBreakOnCSPViolation", [{"name": "violationTypes", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("DOMDebugger.setDOMBreakpoint", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}, {"name": "type", "type": "string", "optional": false, "typeRef": "DOMBreakpointType"}], []);
inspectorBackend.registerCommand("DOMDebugger.setEventListenerBreakpoint", [{"name": "eventName", "type": "string", "optional": false}, {"name": "targetName", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("DOMDebugger.setInstrumentationBreakpoint", [{"name": "eventName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOMDebugger.setXHRBreakpoint", [{"name": "url", "type": "string", "optional": false}], []);
inspectorBackend.registerType("DOMDebugger.EventListener", [{"name": "type", "type": "string", "optional": false}, {"name": "useCapture", "type": "boolean", "optional": false}, {"name": "passive", "type": "boolean", "optional": false}, {"name": "once", "type": "boolean", "optional": false}, {"name": "scriptId", "type": "string", "optional": false}, {"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": false}, {"name": "handler", "type": "object", "optional": true}, {"name": "originalHandler", "type": "object", "optional": true}, {"name": "backendNodeId", "type": "number", "optional": true}]);

// EventBreakpoints.
inspectorBackend.registerCommand("EventBreakpoints.setInstrumentationBreakpoint", [{"name": "eventName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("EventBreakpoints.removeInstrumentationBreakpoint", [{"name": "eventName", "type": "string", "optional": false}], []);

// DOMSnapshot.
inspectorBackend.registerCommand("DOMSnapshot.disable", [], []);
inspectorBackend.registerCommand("DOMSnapshot.enable", [], []);
inspectorBackend.registerCommand("DOMSnapshot.getSnapshot", [{"name": "computedStyleWhitelist", "type": "array", "optional": false}, {"name": "includeEventListeners", "type": "boolean", "optional": true}, {"name": "includePaintOrder", "type": "boolean", "optional": true}, {"name": "includeUserAgentShadowTree", "type": "boolean", "optional": true}], ["domNodes", "layoutTreeNodes", "computedStyles"]);
inspectorBackend.registerCommand("DOMSnapshot.captureSnapshot", [{"name": "computedStyles", "type": "array", "optional": false}, {"name": "includePaintOrder", "type": "boolean", "optional": true}, {"name": "includeDOMRects", "type": "boolean", "optional": true}, {"name": "includeBlendedBackgroundColors", "type": "boolean", "optional": true}, {"name": "includeTextColorOpacities", "type": "boolean", "optional": true}], ["documents", "strings"]);
inspectorBackend.registerType("DOMSnapshot.DOMNode", [{"name": "nodeType", "type": "number", "optional": false}, {"name": "nodeName", "type": "string", "optional": false}, {"name": "nodeValue", "type": "string", "optional": false}, {"name": "textValue", "type": "string", "optional": true}, {"name": "inputValue", "type": "string", "optional": true}, {"name": "inputChecked", "type": "boolean", "optional": true}, {"name": "optionSelected", "type": "boolean", "optional": true}, {"name": "backendNodeId", "type": "number", "optional": false}, {"name": "childNodeIndexes", "type": "array", "optional": true}, {"name": "attributes", "type": "array", "optional": true}, {"name": "pseudoElementIndexes", "type": "array", "optional": true}, {"name": "layoutNodeIndex", "type": "number", "optional": true}, {"name": "documentURL", "type": "string", "optional": true}, {"name": "baseURL", "type": "string", "optional": true}, {"name": "contentLanguage", "type": "string", "optional": true}, {"name": "documentEncoding", "type": "string", "optional": true}, {"name": "publicId", "type": "string", "optional": true}, {"name": "systemId", "type": "string", "optional": true}, {"name": "frameId", "type": "string", "optional": true}, {"name": "contentDocumentIndex", "type": "number", "optional": true}, {"name": "pseudoType", "type": "string", "optional": true}, {"name": "shadowRootType", "type": "string", "optional": true}, {"name": "isClickable", "type": "boolean", "optional": true}, {"name": "eventListeners", "type": "array", "optional": true}, {"name": "currentSourceURL", "type": "string", "optional": true}, {"name": "originURL", "type": "string", "optional": true}, {"name": "scrollOffsetX", "type": "number", "optional": true}, {"name": "scrollOffsetY", "type": "number", "optional": true}]);
inspectorBackend.registerType("DOMSnapshot.InlineTextBox", [{"name": "boundingBox", "type": "object", "optional": false}, {"name": "startCharacterIndex", "type": "number", "optional": false}, {"name": "numCharacters", "type": "number", "optional": false}]);
inspectorBackend.registerType("DOMSnapshot.LayoutTreeNode", [{"name": "domNodeIndex", "type": "number", "optional": false}, {"name": "boundingBox", "type": "object", "optional": false}, {"name": "layoutText", "type": "string", "optional": true}, {"name": "inlineTextNodes", "type": "array", "optional": true}, {"name": "styleIndex", "type": "number", "optional": true}, {"name": "paintOrder", "type": "number", "optional": true}, {"name": "isStackingContext", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("DOMSnapshot.ComputedStyle", [{"name": "properties", "type": "array", "optional": false}]);
inspectorBackend.registerType("DOMSnapshot.NameValue", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("DOMSnapshot.RareStringData", [{"name": "index", "type": "array", "optional": false}, {"name": "value", "type": "array", "optional": false}]);
inspectorBackend.registerType("DOMSnapshot.RareBooleanData", [{"name": "index", "type": "array", "optional": false}]);
inspectorBackend.registerType("DOMSnapshot.RareIntegerData", [{"name": "index", "type": "array", "optional": false}, {"name": "value", "type": "array", "optional": false}]);
inspectorBackend.registerType("DOMSnapshot.DocumentSnapshot", [{"name": "documentURL", "type": "number", "optional": false}, {"name": "title", "type": "number", "optional": false}, {"name": "baseURL", "type": "number", "optional": false}, {"name": "contentLanguage", "type": "number", "optional": false}, {"name": "encodingName", "type": "number", "optional": false}, {"name": "publicId", "type": "number", "optional": false}, {"name": "systemId", "type": "number", "optional": false}, {"name": "frameId", "type": "number", "optional": false}, {"name": "nodes", "type": "object", "optional": false}, {"name": "layout", "type": "object", "optional": false}, {"name": "textBoxes", "type": "object", "optional": false}, {"name": "scrollOffsetX", "type": "number", "optional": true}, {"name": "scrollOffsetY", "type": "number", "optional": true}, {"name": "contentWidth", "type": "number", "optional": true}, {"name": "contentHeight", "type": "number", "optional": true}]);
inspectorBackend.registerType("DOMSnapshot.NodeTreeSnapshot", [{"name": "parentIndex", "type": "array", "optional": true}, {"name": "nodeType", "type": "array", "optional": true}, {"name": "shadowRootType", "type": "object", "optional": true}, {"name": "nodeName", "type": "array", "optional": true}, {"name": "nodeValue", "type": "array", "optional": true}, {"name": "backendNodeId", "type": "array", "optional": true}, {"name": "attributes", "type": "array", "optional": true}, {"name": "textValue", "type": "object", "optional": true}, {"name": "inputValue", "type": "object", "optional": true}, {"name": "inputChecked", "type": "object", "optional": true}, {"name": "optionSelected", "type": "object", "optional": true}, {"name": "contentDocumentIndex", "type": "object", "optional": true}, {"name": "pseudoType", "type": "object", "optional": true}, {"name": "pseudoIdentifier", "type": "object", "optional": true}, {"name": "isClickable", "type": "object", "optional": true}, {"name": "currentSourceURL", "type": "object", "optional": true}, {"name": "originURL", "type": "object", "optional": true}]);
inspectorBackend.registerType("DOMSnapshot.LayoutTreeSnapshot", [{"name": "nodeIndex", "type": "array", "optional": false}, {"name": "styles", "type": "array", "optional": false}, {"name": "bounds", "type": "array", "optional": false}, {"name": "text", "type": "array", "optional": false}, {"name": "stackingContexts", "type": "object", "optional": false}, {"name": "paintOrders", "type": "array", "optional": true}, {"name": "offsetRects", "type": "array", "optional": true}, {"name": "scrollRects", "type": "array", "optional": true}, {"name": "clientRects", "type": "array", "optional": true}, {"name": "blendedBackgroundColors", "type": "array", "optional": true}, {"name": "textColorOpacities", "type": "array", "optional": true}]);
inspectorBackend.registerType("DOMSnapshot.TextBoxSnapshot", [{"name": "layoutIndex", "type": "array", "optional": false}, {"name": "bounds", "type": "array", "optional": false}, {"name": "start", "type": "array", "optional": false}, {"name": "length", "type": "array", "optional": false}]);

// DOMStorage.
inspectorBackend.registerEvent("DOMStorage.domStorageItemAdded", ["storageId", "key", "newValue"]);
inspectorBackend.registerEvent("DOMStorage.domStorageItemRemoved", ["storageId", "key"]);
inspectorBackend.registerEvent("DOMStorage.domStorageItemUpdated", ["storageId", "key", "oldValue", "newValue"]);
inspectorBackend.registerEvent("DOMStorage.domStorageItemsCleared", ["storageId"]);
inspectorBackend.registerCommand("DOMStorage.clear", [{"name": "storageId", "type": "object", "optional": false, "typeRef": "DOMStorage.StorageId"}], []);
inspectorBackend.registerCommand("DOMStorage.disable", [], []);
inspectorBackend.registerCommand("DOMStorage.enable", [], []);
inspectorBackend.registerCommand("DOMStorage.getDOMStorageItems", [{"name": "storageId", "type": "object", "optional": false, "typeRef": "DOMStorage.StorageId"}], ["entries"]);
inspectorBackend.registerCommand("DOMStorage.removeDOMStorageItem", [{"name": "storageId", "type": "object", "optional": false, "typeRef": "DOMStorage.StorageId"}, {"name": "key", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("DOMStorage.setDOMStorageItem", [{"name": "storageId", "type": "object", "optional": false, "typeRef": "DOMStorage.StorageId"}, {"name": "key", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}], []);
inspectorBackend.registerType("DOMStorage.StorageId", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "isLocalStorage", "type": "boolean", "optional": false}]);

// Database.
inspectorBackend.registerEvent("Database.addDatabase", ["database"]);
inspectorBackend.registerCommand("Database.disable", [], []);
inspectorBackend.registerCommand("Database.enable", [], []);
inspectorBackend.registerCommand("Database.executeSQL", [{"name": "databaseId", "type": "string", "optional": false, "typeRef": "DatabaseId"}, {"name": "query", "type": "string", "optional": false}], ["columnNames", "values", "sqlError"]);
inspectorBackend.registerCommand("Database.getDatabaseTableNames", [{"name": "databaseId", "type": "string", "optional": false, "typeRef": "DatabaseId"}], ["tableNames"]);
inspectorBackend.registerType("Database.Database", [{"name": "id", "type": "string", "optional": false}, {"name": "domain", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "version", "type": "string", "optional": false}]);
inspectorBackend.registerType("Database.Error", [{"name": "message", "type": "string", "optional": false}, {"name": "code", "type": "number", "optional": false}]);

// DeviceOrientation.
inspectorBackend.registerCommand("DeviceOrientation.clearDeviceOrientationOverride", [], []);
inspectorBackend.registerCommand("DeviceOrientation.setDeviceOrientationOverride", [{"name": "alpha", "type": "number", "optional": false}, {"name": "beta", "type": "number", "optional": false}, {"name": "gamma", "type": "number", "optional": false}], []);

// Emulation.
inspectorBackend.registerEnum("Emulation.ScreenOrientationType", {PortraitPrimary: "portraitPrimary", PortraitSecondary: "portraitSecondary", LandscapePrimary: "landscapePrimary", LandscapeSecondary: "landscapeSecondary"});
inspectorBackend.registerEnum("Emulation.DisplayFeatureOrientation", {Vertical: "vertical", Horizontal: "horizontal"});
inspectorBackend.registerEnum("Emulation.VirtualTimePolicy", {Advance: "advance", Pause: "pause", PauseIfNetworkFetchesPending: "pauseIfNetworkFetchesPending"});
inspectorBackend.registerEnum("Emulation.DisabledImageType", {Avif: "avif", Webp: "webp"});
inspectorBackend.registerEvent("Emulation.virtualTimeBudgetExpired", []);
inspectorBackend.registerCommand("Emulation.canEmulate", [], ["result"]);
inspectorBackend.registerCommand("Emulation.clearDeviceMetricsOverride", [], []);
inspectorBackend.registerCommand("Emulation.clearGeolocationOverride", [], []);
inspectorBackend.registerCommand("Emulation.resetPageScaleFactor", [], []);
inspectorBackend.registerCommand("Emulation.setFocusEmulationEnabled", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setAutoDarkModeOverride", [{"name": "enabled", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Emulation.setCPUThrottlingRate", [{"name": "rate", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setDefaultBackgroundColorOverride", [{"name": "color", "type": "object", "optional": true, "typeRef": "DOM.RGBA"}], []);
inspectorBackend.registerCommand("Emulation.setDeviceMetricsOverride", [{"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}, {"name": "deviceScaleFactor", "type": "number", "optional": false}, {"name": "mobile", "type": "boolean", "optional": false}, {"name": "scale", "type": "number", "optional": true}, {"name": "screenWidth", "type": "number", "optional": true}, {"name": "screenHeight", "type": "number", "optional": true}, {"name": "positionX", "type": "number", "optional": true}, {"name": "positionY", "type": "number", "optional": true}, {"name": "dontSetVisibleSize", "type": "boolean", "optional": true}, {"name": "screenOrientation", "type": "object", "optional": true, "typeRef": "Emulation.ScreenOrientation"}, {"name": "viewport", "type": "object", "optional": true, "typeRef": "Page.Viewport"}, {"name": "displayFeature", "type": "object", "optional": true, "typeRef": "Emulation.DisplayFeature"}], []);
inspectorBackend.registerCommand("Emulation.setScrollbarsHidden", [{"name": "hidden", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setDocumentCookieDisabled", [{"name": "disabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerEnum("Emulation.SetEmitTouchEventsForMouseRequestConfiguration", {Mobile: "mobile", Desktop: "desktop"});
inspectorBackend.registerCommand("Emulation.setEmitTouchEventsForMouse", [{"name": "enabled", "type": "boolean", "optional": false}, {"name": "configuration", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Emulation.setEmulatedMedia", [{"name": "media", "type": "string", "optional": true}, {"name": "features", "type": "array", "optional": true}], []);
inspectorBackend.registerEnum("Emulation.SetEmulatedVisionDeficiencyRequestType", {None: "none", BlurredVision: "blurredVision", ReducedContrast: "reducedContrast", Achromatopsia: "achromatopsia", Deuteranopia: "deuteranopia", Protanopia: "protanopia", Tritanopia: "tritanopia"});
inspectorBackend.registerCommand("Emulation.setEmulatedVisionDeficiency", [{"name": "type", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setGeolocationOverride", [{"name": "latitude", "type": "number", "optional": true}, {"name": "longitude", "type": "number", "optional": true}, {"name": "accuracy", "type": "number", "optional": true}], []);
inspectorBackend.registerCommand("Emulation.setIdleOverride", [{"name": "isUserActive", "type": "boolean", "optional": false}, {"name": "isScreenUnlocked", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.clearIdleOverride", [], []);
inspectorBackend.registerCommand("Emulation.setNavigatorOverrides", [{"name": "platform", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setPageScaleFactor", [{"name": "pageScaleFactor", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setScriptExecutionDisabled", [{"name": "value", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setTouchEmulationEnabled", [{"name": "enabled", "type": "boolean", "optional": false}, {"name": "maxTouchPoints", "type": "number", "optional": true}], []);
inspectorBackend.registerCommand("Emulation.setVirtualTimePolicy", [{"name": "policy", "type": "string", "optional": false, "typeRef": "VirtualTimePolicy"}, {"name": "budget", "type": "number", "optional": true}, {"name": "maxVirtualTimeTaskStarvationCount", "type": "number", "optional": true}, {"name": "initialVirtualTime", "type": "number", "optional": true, "typeRef": "Network.TimeSinceEpoch"}], ["virtualTimeTicksBase"]);
inspectorBackend.registerCommand("Emulation.setLocaleOverride", [{"name": "locale", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Emulation.setTimezoneOverride", [{"name": "timezoneId", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setVisibleSize", [{"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setDisabledImageTypes", [{"name": "imageTypes", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setHardwareConcurrencyOverride", [{"name": "hardwareConcurrency", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Emulation.setUserAgentOverride", [{"name": "userAgent", "type": "string", "optional": false}, {"name": "acceptLanguage", "type": "string", "optional": true}, {"name": "platform", "type": "string", "optional": true}, {"name": "userAgentMetadata", "type": "object", "optional": true, "typeRef": "Emulation.UserAgentMetadata"}], []);
inspectorBackend.registerCommand("Emulation.setAutomationOverride", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerType("Emulation.ScreenOrientation", [{"name": "type", "type": "string", "optional": false}, {"name": "angle", "type": "number", "optional": false}]);
inspectorBackend.registerType("Emulation.DisplayFeature", [{"name": "orientation", "type": "string", "optional": false}, {"name": "offset", "type": "number", "optional": false}, {"name": "maskLength", "type": "number", "optional": false}]);
inspectorBackend.registerType("Emulation.MediaFeature", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("Emulation.UserAgentBrandVersion", [{"name": "brand", "type": "string", "optional": false}, {"name": "version", "type": "string", "optional": false}]);
inspectorBackend.registerType("Emulation.UserAgentMetadata", [{"name": "brands", "type": "array", "optional": true}, {"name": "fullVersionList", "type": "array", "optional": true}, {"name": "fullVersion", "type": "string", "optional": true}, {"name": "platform", "type": "string", "optional": false}, {"name": "platformVersion", "type": "string", "optional": false}, {"name": "architecture", "type": "string", "optional": false}, {"name": "model", "type": "string", "optional": false}, {"name": "mobile", "type": "boolean", "optional": false}, {"name": "bitness", "type": "string", "optional": true}, {"name": "wow64", "type": "boolean", "optional": true}]);

// HeadlessExperimental.
inspectorBackend.registerEnum("HeadlessExperimental.ScreenshotParamsFormat", {Jpeg: "jpeg", Png: "png", Webp: "webp"});
inspectorBackend.registerCommand("HeadlessExperimental.beginFrame", [{"name": "frameTimeTicks", "type": "number", "optional": true}, {"name": "interval", "type": "number", "optional": true}, {"name": "noDisplayUpdates", "type": "boolean", "optional": true}, {"name": "screenshot", "type": "object", "optional": true, "typeRef": "HeadlessExperimental.ScreenshotParams"}], ["hasDamage", "screenshotData"]);
inspectorBackend.registerCommand("HeadlessExperimental.disable", [], []);
inspectorBackend.registerCommand("HeadlessExperimental.enable", [], []);
inspectorBackend.registerType("HeadlessExperimental.ScreenshotParams", [{"name": "format", "type": "string", "optional": true}, {"name": "quality", "type": "number", "optional": true}, {"name": "optimizeForSpeed", "type": "boolean", "optional": true}]);

// IO.
inspectorBackend.registerCommand("IO.close", [{"name": "handle", "type": "string", "optional": false, "typeRef": "StreamHandle"}], []);
inspectorBackend.registerCommand("IO.read", [{"name": "handle", "type": "string", "optional": false, "typeRef": "StreamHandle"}, {"name": "offset", "type": "number", "optional": true}, {"name": "size", "type": "number", "optional": true}], ["base64Encoded", "data", "eof"]);
inspectorBackend.registerCommand("IO.resolveBlob", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "Runtime.RemoteObjectId"}], ["uuid"]);

// IndexedDB.
inspectorBackend.registerEnum("IndexedDB.KeyType", {Number: "number", String: "string", Date: "date", Array: "array"});
inspectorBackend.registerEnum("IndexedDB.KeyPathType", {Null: "null", String: "string", Array: "array"});
inspectorBackend.registerCommand("IndexedDB.clearObjectStore", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}, {"name": "databaseName", "type": "string", "optional": false}, {"name": "objectStoreName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("IndexedDB.deleteDatabase", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}, {"name": "databaseName", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("IndexedDB.deleteObjectStoreEntries", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}, {"name": "databaseName", "type": "string", "optional": false}, {"name": "objectStoreName", "type": "string", "optional": false}, {"name": "keyRange", "type": "object", "optional": false, "typeRef": "IndexedDB.KeyRange"}], []);
inspectorBackend.registerCommand("IndexedDB.disable", [], []);
inspectorBackend.registerCommand("IndexedDB.enable", [], []);
inspectorBackend.registerCommand("IndexedDB.requestData", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}, {"name": "databaseName", "type": "string", "optional": false}, {"name": "objectStoreName", "type": "string", "optional": false}, {"name": "indexName", "type": "string", "optional": false}, {"name": "skipCount", "type": "number", "optional": false}, {"name": "pageSize", "type": "number", "optional": false}, {"name": "keyRange", "type": "object", "optional": true, "typeRef": "IndexedDB.KeyRange"}], ["objectStoreDataEntries", "hasMore"]);
inspectorBackend.registerCommand("IndexedDB.getMetadata", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}, {"name": "databaseName", "type": "string", "optional": false}, {"name": "objectStoreName", "type": "string", "optional": false}], ["entriesCount", "keyGeneratorValue"]);
inspectorBackend.registerCommand("IndexedDB.requestDatabase", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}, {"name": "databaseName", "type": "string", "optional": false}], ["databaseWithObjectStores"]);
inspectorBackend.registerCommand("IndexedDB.requestDatabaseNames", [{"name": "securityOrigin", "type": "string", "optional": true}, {"name": "storageKey", "type": "string", "optional": true}, {"name": "storageBucket", "type": "object", "optional": true, "typeRef": "Storage.StorageBucket"}], ["databaseNames"]);
inspectorBackend.registerType("IndexedDB.DatabaseWithObjectStores", [{"name": "name", "type": "string", "optional": false}, {"name": "version", "type": "number", "optional": false}, {"name": "objectStores", "type": "array", "optional": false}]);
inspectorBackend.registerType("IndexedDB.ObjectStore", [{"name": "name", "type": "string", "optional": false}, {"name": "keyPath", "type": "object", "optional": false}, {"name": "autoIncrement", "type": "boolean", "optional": false}, {"name": "indexes", "type": "array", "optional": false}]);
inspectorBackend.registerType("IndexedDB.ObjectStoreIndex", [{"name": "name", "type": "string", "optional": false}, {"name": "keyPath", "type": "object", "optional": false}, {"name": "unique", "type": "boolean", "optional": false}, {"name": "multiEntry", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("IndexedDB.Key", [{"name": "type", "type": "string", "optional": false}, {"name": "number", "type": "number", "optional": true}, {"name": "string", "type": "string", "optional": true}, {"name": "date", "type": "number", "optional": true}, {"name": "array", "type": "array", "optional": true}]);
inspectorBackend.registerType("IndexedDB.KeyRange", [{"name": "lower", "type": "object", "optional": true}, {"name": "upper", "type": "object", "optional": true}, {"name": "lowerOpen", "type": "boolean", "optional": false}, {"name": "upperOpen", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("IndexedDB.DataEntry", [{"name": "key", "type": "object", "optional": false}, {"name": "primaryKey", "type": "object", "optional": false}, {"name": "value", "type": "object", "optional": false}]);
inspectorBackend.registerType("IndexedDB.KeyPath", [{"name": "type", "type": "string", "optional": false}, {"name": "string", "type": "string", "optional": true}, {"name": "array", "type": "array", "optional": true}]);

// Input.
inspectorBackend.registerEnum("Input.GestureSourceType", {Default: "default", Touch: "touch", Mouse: "mouse"});
inspectorBackend.registerEnum("Input.MouseButton", {None: "none", Left: "left", Middle: "middle", Right: "right", Back: "back", Forward: "forward"});
inspectorBackend.registerEvent("Input.dragIntercepted", ["data"]);
inspectorBackend.registerEnum("Input.DispatchDragEventRequestType", {DragEnter: "dragEnter", DragOver: "dragOver", Drop: "drop", DragCancel: "dragCancel"});
inspectorBackend.registerCommand("Input.dispatchDragEvent", [{"name": "type", "type": "string", "optional": false}, {"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "data", "type": "object", "optional": false, "typeRef": "Input.DragData"}, {"name": "modifiers", "type": "number", "optional": true}], []);
inspectorBackend.registerEnum("Input.DispatchKeyEventRequestType", {KeyDown: "keyDown", KeyUp: "keyUp", RawKeyDown: "rawKeyDown", Char: "char"});
inspectorBackend.registerCommand("Input.dispatchKeyEvent", [{"name": "type", "type": "string", "optional": false}, {"name": "modifiers", "type": "number", "optional": true}, {"name": "timestamp", "type": "number", "optional": true, "typeRef": "TimeSinceEpoch"}, {"name": "text", "type": "string", "optional": true}, {"name": "unmodifiedText", "type": "string", "optional": true}, {"name": "keyIdentifier", "type": "string", "optional": true}, {"name": "code", "type": "string", "optional": true}, {"name": "key", "type": "string", "optional": true}, {"name": "windowsVirtualKeyCode", "type": "number", "optional": true}, {"name": "nativeVirtualKeyCode", "type": "number", "optional": true}, {"name": "autoRepeat", "type": "boolean", "optional": true}, {"name": "isKeypad", "type": "boolean", "optional": true}, {"name": "isSystemKey", "type": "boolean", "optional": true}, {"name": "location", "type": "number", "optional": true}, {"name": "commands", "type": "array", "optional": true}], []);
inspectorBackend.registerCommand("Input.insertText", [{"name": "text", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Input.imeSetComposition", [{"name": "text", "type": "string", "optional": false}, {"name": "selectionStart", "type": "number", "optional": false}, {"name": "selectionEnd", "type": "number", "optional": false}, {"name": "replacementStart", "type": "number", "optional": true}, {"name": "replacementEnd", "type": "number", "optional": true}], []);
inspectorBackend.registerEnum("Input.DispatchMouseEventRequestType", {MousePressed: "mousePressed", MouseReleased: "mouseReleased", MouseMoved: "mouseMoved", MouseWheel: "mouseWheel"});
inspectorBackend.registerEnum("Input.DispatchMouseEventRequestPointerType", {Mouse: "mouse", Pen: "pen"});
inspectorBackend.registerCommand("Input.dispatchMouseEvent", [{"name": "type", "type": "string", "optional": false}, {"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "modifiers", "type": "number", "optional": true}, {"name": "timestamp", "type": "number", "optional": true, "typeRef": "TimeSinceEpoch"}, {"name": "button", "type": "string", "optional": true, "typeRef": "MouseButton"}, {"name": "buttons", "type": "number", "optional": true}, {"name": "clickCount", "type": "number", "optional": true}, {"name": "force", "type": "number", "optional": true}, {"name": "tangentialPressure", "type": "number", "optional": true}, {"name": "tiltX", "type": "number", "optional": true}, {"name": "tiltY", "type": "number", "optional": true}, {"name": "twist", "type": "number", "optional": true}, {"name": "deltaX", "type": "number", "optional": true}, {"name": "deltaY", "type": "number", "optional": true}, {"name": "pointerType", "type": "string", "optional": true}], []);
inspectorBackend.registerEnum("Input.DispatchTouchEventRequestType", {TouchStart: "touchStart", TouchEnd: "touchEnd", TouchMove: "touchMove", TouchCancel: "touchCancel"});
inspectorBackend.registerCommand("Input.dispatchTouchEvent", [{"name": "type", "type": "string", "optional": false}, {"name": "touchPoints", "type": "array", "optional": false}, {"name": "modifiers", "type": "number", "optional": true}, {"name": "timestamp", "type": "number", "optional": true, "typeRef": "TimeSinceEpoch"}], []);
inspectorBackend.registerEnum("Input.EmulateTouchFromMouseEventRequestType", {MousePressed: "mousePressed", MouseReleased: "mouseReleased", MouseMoved: "mouseMoved", MouseWheel: "mouseWheel"});
inspectorBackend.registerCommand("Input.emulateTouchFromMouseEvent", [{"name": "type", "type": "string", "optional": false}, {"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "button", "type": "string", "optional": false, "typeRef": "MouseButton"}, {"name": "timestamp", "type": "number", "optional": true, "typeRef": "TimeSinceEpoch"}, {"name": "deltaX", "type": "number", "optional": true}, {"name": "deltaY", "type": "number", "optional": true}, {"name": "modifiers", "type": "number", "optional": true}, {"name": "clickCount", "type": "number", "optional": true}], []);
inspectorBackend.registerCommand("Input.setIgnoreInputEvents", [{"name": "ignore", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Input.setInterceptDrags", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Input.synthesizePinchGesture", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "scaleFactor", "type": "number", "optional": false}, {"name": "relativeSpeed", "type": "number", "optional": true}, {"name": "gestureSourceType", "type": "string", "optional": true, "typeRef": "GestureSourceType"}], []);
inspectorBackend.registerCommand("Input.synthesizeScrollGesture", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "xDistance", "type": "number", "optional": true}, {"name": "yDistance", "type": "number", "optional": true}, {"name": "xOverscroll", "type": "number", "optional": true}, {"name": "yOverscroll", "type": "number", "optional": true}, {"name": "preventFling", "type": "boolean", "optional": true}, {"name": "speed", "type": "number", "optional": true}, {"name": "gestureSourceType", "type": "string", "optional": true, "typeRef": "GestureSourceType"}, {"name": "repeatCount", "type": "number", "optional": true}, {"name": "repeatDelayMs", "type": "number", "optional": true}, {"name": "interactionMarkerName", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Input.synthesizeTapGesture", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "duration", "type": "number", "optional": true}, {"name": "tapCount", "type": "number", "optional": true}, {"name": "gestureSourceType", "type": "string", "optional": true, "typeRef": "GestureSourceType"}], []);
inspectorBackend.registerType("Input.TouchPoint", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "radiusX", "type": "number", "optional": true}, {"name": "radiusY", "type": "number", "optional": true}, {"name": "rotationAngle", "type": "number", "optional": true}, {"name": "force", "type": "number", "optional": true}, {"name": "tangentialPressure", "type": "number", "optional": true}, {"name": "tiltX", "type": "number", "optional": true}, {"name": "tiltY", "type": "number", "optional": true}, {"name": "twist", "type": "number", "optional": true}, {"name": "id", "type": "number", "optional": true}]);
inspectorBackend.registerType("Input.DragDataItem", [{"name": "mimeType", "type": "string", "optional": false}, {"name": "data", "type": "string", "optional": false}, {"name": "title", "type": "string", "optional": true}, {"name": "baseURL", "type": "string", "optional": true}]);
inspectorBackend.registerType("Input.DragData", [{"name": "items", "type": "array", "optional": false}, {"name": "files", "type": "array", "optional": true}, {"name": "dragOperationsMask", "type": "number", "optional": false}]);

// Inspector.
inspectorBackend.registerEvent("Inspector.detached", ["reason"]);
inspectorBackend.registerEvent("Inspector.targetCrashed", []);
inspectorBackend.registerEvent("Inspector.targetReloadedAfterCrash", []);
inspectorBackend.registerCommand("Inspector.disable", [], []);
inspectorBackend.registerCommand("Inspector.enable", [], []);

// LayerTree.
inspectorBackend.registerEnum("LayerTree.ScrollRectType", {RepaintsOnScroll: "RepaintsOnScroll", TouchEventHandler: "TouchEventHandler", WheelEventHandler: "WheelEventHandler"});
inspectorBackend.registerEvent("LayerTree.layerPainted", ["layerId", "clip"]);
inspectorBackend.registerEvent("LayerTree.layerTreeDidChange", ["layers"]);
inspectorBackend.registerCommand("LayerTree.compositingReasons", [{"name": "layerId", "type": "string", "optional": false, "typeRef": "LayerId"}], ["compositingReasons", "compositingReasonIds"]);
inspectorBackend.registerCommand("LayerTree.disable", [], []);
inspectorBackend.registerCommand("LayerTree.enable", [], []);
inspectorBackend.registerCommand("LayerTree.loadSnapshot", [{"name": "tiles", "type": "array", "optional": false}], ["snapshotId"]);
inspectorBackend.registerCommand("LayerTree.makeSnapshot", [{"name": "layerId", "type": "string", "optional": false, "typeRef": "LayerId"}], ["snapshotId"]);
inspectorBackend.registerCommand("LayerTree.profileSnapshot", [{"name": "snapshotId", "type": "string", "optional": false, "typeRef": "SnapshotId"}, {"name": "minRepeatCount", "type": "number", "optional": true}, {"name": "minDuration", "type": "number", "optional": true}, {"name": "clipRect", "type": "object", "optional": true, "typeRef": "DOM.Rect"}], ["timings"]);
inspectorBackend.registerCommand("LayerTree.releaseSnapshot", [{"name": "snapshotId", "type": "string", "optional": false, "typeRef": "SnapshotId"}], []);
inspectorBackend.registerCommand("LayerTree.replaySnapshot", [{"name": "snapshotId", "type": "string", "optional": false, "typeRef": "SnapshotId"}, {"name": "fromStep", "type": "number", "optional": true}, {"name": "toStep", "type": "number", "optional": true}, {"name": "scale", "type": "number", "optional": true}], ["dataURL"]);
inspectorBackend.registerCommand("LayerTree.snapshotCommandLog", [{"name": "snapshotId", "type": "string", "optional": false, "typeRef": "SnapshotId"}], ["commandLog"]);
inspectorBackend.registerType("LayerTree.ScrollRect", [{"name": "rect", "type": "object", "optional": false}, {"name": "type", "type": "string", "optional": false}]);
inspectorBackend.registerType("LayerTree.StickyPositionConstraint", [{"name": "stickyBoxRect", "type": "object", "optional": false}, {"name": "containingBlockRect", "type": "object", "optional": false}, {"name": "nearestLayerShiftingStickyBox", "type": "string", "optional": true}, {"name": "nearestLayerShiftingContainingBlock", "type": "string", "optional": true}]);
inspectorBackend.registerType("LayerTree.PictureTile", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "picture", "type": "string", "optional": false}]);
inspectorBackend.registerType("LayerTree.Layer", [{"name": "layerId", "type": "string", "optional": false}, {"name": "parentLayerId", "type": "string", "optional": true}, {"name": "backendNodeId", "type": "number", "optional": true}, {"name": "offsetX", "type": "number", "optional": false}, {"name": "offsetY", "type": "number", "optional": false}, {"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}, {"name": "transform", "type": "array", "optional": true}, {"name": "anchorX", "type": "number", "optional": true}, {"name": "anchorY", "type": "number", "optional": true}, {"name": "anchorZ", "type": "number", "optional": true}, {"name": "paintCount", "type": "number", "optional": false}, {"name": "drawsContent", "type": "boolean", "optional": false}, {"name": "invisible", "type": "boolean", "optional": true}, {"name": "scrollRects", "type": "array", "optional": true}, {"name": "stickyPositionConstraint", "type": "object", "optional": true}]);

// Log.
inspectorBackend.registerEnum("Log.LogEntrySource", {XML: "xml", Javascript: "javascript", Network: "network", Storage: "storage", Appcache: "appcache", Rendering: "rendering", Security: "security", Deprecation: "deprecation", Worker: "worker", Violation: "violation", Intervention: "intervention", Recommendation: "recommendation", Other: "other"});
inspectorBackend.registerEnum("Log.LogEntryLevel", {Verbose: "verbose", Info: "info", Warning: "warning", Error: "error"});
inspectorBackend.registerEnum("Log.LogEntryCategory", {Cors: "cors"});
inspectorBackend.registerEnum("Log.ViolationSettingName", {LongTask: "longTask", LongLayout: "longLayout", BlockedEvent: "blockedEvent", BlockedParser: "blockedParser", DiscouragedAPIUse: "discouragedAPIUse", Handler: "handler", RecurringHandler: "recurringHandler"});
inspectorBackend.registerEvent("Log.entryAdded", ["entry"]);
inspectorBackend.registerCommand("Log.clear", [], []);
inspectorBackend.registerCommand("Log.disable", [], []);
inspectorBackend.registerCommand("Log.enable", [], []);
inspectorBackend.registerCommand("Log.startViolationsReport", [{"name": "config", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Log.stopViolationsReport", [], []);
inspectorBackend.registerType("Log.LogEntry", [{"name": "source", "type": "string", "optional": false}, {"name": "level", "type": "string", "optional": false}, {"name": "text", "type": "string", "optional": false}, {"name": "category", "type": "string", "optional": true}, {"name": "timestamp", "type": "number", "optional": false}, {"name": "url", "type": "string", "optional": true}, {"name": "lineNumber", "type": "number", "optional": true}, {"name": "stackTrace", "type": "object", "optional": true}, {"name": "networkRequestId", "type": "string", "optional": true}, {"name": "workerId", "type": "string", "optional": true}, {"name": "args", "type": "array", "optional": true}]);
inspectorBackend.registerType("Log.ViolationSetting", [{"name": "name", "type": "string", "optional": false}, {"name": "threshold", "type": "number", "optional": false}]);

// Memory.
inspectorBackend.registerEnum("Memory.PressureLevel", {Moderate: "moderate", Critical: "critical"});
inspectorBackend.registerCommand("Memory.getDOMCounters", [], ["documents", "nodes", "jsEventListeners"]);
inspectorBackend.registerCommand("Memory.prepareForLeakDetection", [], []);
inspectorBackend.registerCommand("Memory.forciblyPurgeJavaScriptMemory", [], []);
inspectorBackend.registerCommand("Memory.setPressureNotificationsSuppressed", [{"name": "suppressed", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Memory.simulatePressureNotification", [{"name": "level", "type": "string", "optional": false, "typeRef": "PressureLevel"}], []);
inspectorBackend.registerCommand("Memory.startSampling", [{"name": "samplingInterval", "type": "number", "optional": true}, {"name": "suppressRandomness", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Memory.stopSampling", [], []);
inspectorBackend.registerCommand("Memory.getAllTimeSamplingProfile", [], ["profile"]);
inspectorBackend.registerCommand("Memory.getBrowserSamplingProfile", [], ["profile"]);
inspectorBackend.registerCommand("Memory.getSamplingProfile", [], ["profile"]);
inspectorBackend.registerType("Memory.SamplingProfileNode", [{"name": "size", "type": "number", "optional": false}, {"name": "total", "type": "number", "optional": false}, {"name": "stack", "type": "array", "optional": false}]);
inspectorBackend.registerType("Memory.SamplingProfile", [{"name": "samples", "type": "array", "optional": false}, {"name": "modules", "type": "array", "optional": false}]);
inspectorBackend.registerType("Memory.Module", [{"name": "name", "type": "string", "optional": false}, {"name": "uuid", "type": "string", "optional": false}, {"name": "baseAddress", "type": "string", "optional": false}, {"name": "size", "type": "number", "optional": false}]);

// Network.
inspectorBackend.registerEnum("Network.ResourceType", {Document: "Document", Stylesheet: "Stylesheet", Image: "Image", Media: "Media", Font: "Font", Script: "Script", TextTrack: "TextTrack", XHR: "XHR", Fetch: "Fetch", Prefetch: "Prefetch", EventSource: "EventSource", WebSocket: "WebSocket", Manifest: "Manifest", SignedExchange: "SignedExchange", Ping: "Ping", CSPViolationReport: "CSPViolationReport", Preflight: "Preflight", Other: "Other"});
inspectorBackend.registerEnum("Network.ErrorReason", {Failed: "Failed", Aborted: "Aborted", TimedOut: "TimedOut", AccessDenied: "AccessDenied", ConnectionClosed: "ConnectionClosed", ConnectionReset: "ConnectionReset", ConnectionRefused: "ConnectionRefused", ConnectionAborted: "ConnectionAborted", ConnectionFailed: "ConnectionFailed", NameNotResolved: "NameNotResolved", InternetDisconnected: "InternetDisconnected", AddressUnreachable: "AddressUnreachable", BlockedByClient: "BlockedByClient", BlockedByResponse: "BlockedByResponse"});
inspectorBackend.registerEnum("Network.ConnectionType", {None: "none", Cellular2g: "cellular2g", Cellular3g: "cellular3g", Cellular4g: "cellular4g", Bluetooth: "bluetooth", Ethernet: "ethernet", Wifi: "wifi", Wimax: "wimax", Other: "other"});
inspectorBackend.registerEnum("Network.CookieSameSite", {Strict: "Strict", Lax: "Lax", None: "None"});
inspectorBackend.registerEnum("Network.CookiePriority", {Low: "Low", Medium: "Medium", High: "High"});
inspectorBackend.registerEnum("Network.CookieSourceScheme", {Unset: "Unset", NonSecure: "NonSecure", Secure: "Secure"});
inspectorBackend.registerEnum("Network.ResourcePriority", {VeryLow: "VeryLow", Low: "Low", Medium: "Medium", High: "High", VeryHigh: "VeryHigh"});
inspectorBackend.registerEnum("Network.RequestReferrerPolicy", {UnsafeUrl: "unsafe-url", NoReferrerWhenDowngrade: "no-referrer-when-downgrade", NoReferrer: "no-referrer", Origin: "origin", OriginWhenCrossOrigin: "origin-when-cross-origin", SameOrigin: "same-origin", StrictOrigin: "strict-origin", StrictOriginWhenCrossOrigin: "strict-origin-when-cross-origin"});
inspectorBackend.registerEnum("Network.CertificateTransparencyCompliance", {Unknown: "unknown", NotCompliant: "not-compliant", Compliant: "compliant"});
inspectorBackend.registerEnum("Network.BlockedReason", {Other: "other", Csp: "csp", MixedContent: "mixed-content", Origin: "origin", Inspector: "inspector", SubresourceFilter: "subresource-filter", ContentType: "content-type", CoepFrameResourceNeedsCoepHeader: "coep-frame-resource-needs-coep-header", CoopSandboxedIframeCannotNavigateToCoopPage: "coop-sandboxed-iframe-cannot-navigate-to-coop-page", CorpNotSameOrigin: "corp-not-same-origin", CorpNotSameOriginAfterDefaultedToSameOriginByCoep: "corp-not-same-origin-after-defaulted-to-same-origin-by-coep", CorpNotSameSite: "corp-not-same-site"});
inspectorBackend.registerEnum("Network.CorsError", {DisallowedByMode: "DisallowedByMode", InvalidResponse: "InvalidResponse", WildcardOriginNotAllowed: "WildcardOriginNotAllowed", MissingAllowOriginHeader: "MissingAllowOriginHeader", MultipleAllowOriginValues: "MultipleAllowOriginValues", InvalidAllowOriginValue: "InvalidAllowOriginValue", AllowOriginMismatch: "AllowOriginMismatch", InvalidAllowCredentials: "InvalidAllowCredentials", CorsDisabledScheme: "CorsDisabledScheme", PreflightInvalidStatus: "PreflightInvalidStatus", PreflightDisallowedRedirect: "PreflightDisallowedRedirect", PreflightWildcardOriginNotAllowed: "PreflightWildcardOriginNotAllowed", PreflightMissingAllowOriginHeader: "PreflightMissingAllowOriginHeader", PreflightMultipleAllowOriginValues: "PreflightMultipleAllowOriginValues", PreflightInvalidAllowOriginValue: "PreflightInvalidAllowOriginValue", PreflightAllowOriginMismatch: "PreflightAllowOriginMismatch", PreflightInvalidAllowCredentials: "PreflightInvalidAllowCredentials", PreflightMissingAllowExternal: "PreflightMissingAllowExternal", PreflightInvalidAllowExternal: "PreflightInvalidAllowExternal", PreflightMissingAllowPrivateNetwork: "PreflightMissingAllowPrivateNetwork", PreflightInvalidAllowPrivateNetwork: "PreflightInvalidAllowPrivateNetwork", InvalidAllowMethodsPreflightResponse: "InvalidAllowMethodsPreflightResponse", InvalidAllowHeadersPreflightResponse: "InvalidAllowHeadersPreflightResponse", MethodDisallowedByPreflightResponse: "MethodDisallowedByPreflightResponse", HeaderDisallowedByPreflightResponse: "HeaderDisallowedByPreflightResponse", RedirectContainsCredentials: "RedirectContainsCredentials", InsecurePrivateNetwork: "InsecurePrivateNetwork", InvalidPrivateNetworkAccess: "InvalidPrivateNetworkAccess", UnexpectedPrivateNetworkAccess: "UnexpectedPrivateNetworkAccess", NoCorsRedirectModeNotFollow: "NoCorsRedirectModeNotFollow"});
inspectorBackend.registerEnum("Network.ServiceWorkerResponseSource", {CacheStorage: "cache-storage", HttpCache: "http-cache", FallbackCode: "fallback-code", Network: "network"});
inspectorBackend.registerEnum("Network.TrustTokenParamsRefreshPolicy", {UseCached: "UseCached", Refresh: "Refresh"});
inspectorBackend.registerEnum("Network.TrustTokenOperationType", {Issuance: "Issuance", Redemption: "Redemption", Signing: "Signing"});
inspectorBackend.registerEnum("Network.AlternateProtocolUsage", {AlternativeJobWonWithoutRace: "alternativeJobWonWithoutRace", AlternativeJobWonRace: "alternativeJobWonRace", MainJobWonRace: "mainJobWonRace", MappingMissing: "mappingMissing", Broken: "broken", DnsAlpnH3JobWonWithoutRace: "dnsAlpnH3JobWonWithoutRace", DnsAlpnH3JobWonRace: "dnsAlpnH3JobWonRace", UnspecifiedReason: "unspecifiedReason"});
inspectorBackend.registerEnum("Network.InitiatorType", {Parser: "parser", Script: "script", Preload: "preload", SignedExchange: "SignedExchange", Preflight: "preflight", Other: "other"});
inspectorBackend.registerEnum("Network.SetCookieBlockedReason", {SecureOnly: "SecureOnly", SameSiteStrict: "SameSiteStrict", SameSiteLax: "SameSiteLax", SameSiteUnspecifiedTreatedAsLax: "SameSiteUnspecifiedTreatedAsLax", SameSiteNoneInsecure: "SameSiteNoneInsecure", UserPreferences: "UserPreferences", ThirdPartyBlockedInFirstPartySet: "ThirdPartyBlockedInFirstPartySet", SyntaxError: "SyntaxError", SchemeNotSupported: "SchemeNotSupported", OverwriteSecure: "OverwriteSecure", InvalidDomain: "InvalidDomain", InvalidPrefix: "InvalidPrefix", UnknownError: "UnknownError", SchemefulSameSiteStrict: "SchemefulSameSiteStrict", SchemefulSameSiteLax: "SchemefulSameSiteLax", SchemefulSameSiteUnspecifiedTreatedAsLax: "SchemefulSameSiteUnspecifiedTreatedAsLax", SamePartyFromCrossPartyContext: "SamePartyFromCrossPartyContext", SamePartyConflictsWithOtherAttributes: "SamePartyConflictsWithOtherAttributes", NameValuePairExceedsMaxSize: "NameValuePairExceedsMaxSize"});
inspectorBackend.registerEnum("Network.CookieBlockedReason", {SecureOnly: "SecureOnly", NotOnPath: "NotOnPath", DomainMismatch: "DomainMismatch", SameSiteStrict: "SameSiteStrict", SameSiteLax: "SameSiteLax", SameSiteUnspecifiedTreatedAsLax: "SameSiteUnspecifiedTreatedAsLax", SameSiteNoneInsecure: "SameSiteNoneInsecure", UserPreferences: "UserPreferences", ThirdPartyBlockedInFirstPartySet: "ThirdPartyBlockedInFirstPartySet", UnknownError: "UnknownError", SchemefulSameSiteStrict: "SchemefulSameSiteStrict", SchemefulSameSiteLax: "SchemefulSameSiteLax", SchemefulSameSiteUnspecifiedTreatedAsLax: "SchemefulSameSiteUnspecifiedTreatedAsLax", SamePartyFromCrossPartyContext: "SamePartyFromCrossPartyContext", NameValuePairExceedsMaxSize: "NameValuePairExceedsMaxSize"});
inspectorBackend.registerEnum("Network.AuthChallengeSource", {Server: "Server", Proxy: "Proxy"});
inspectorBackend.registerEnum("Network.AuthChallengeResponseResponse", {Default: "Default", CancelAuth: "CancelAuth", ProvideCredentials: "ProvideCredentials"});
inspectorBackend.registerEnum("Network.InterceptionStage", {Request: "Request", HeadersReceived: "HeadersReceived"});
inspectorBackend.registerEnum("Network.SignedExchangeErrorField", {SignatureSig: "signatureSig", SignatureIntegrity: "signatureIntegrity", SignatureCertUrl: "signatureCertUrl", SignatureCertSha256: "signatureCertSha256", SignatureValidityUrl: "signatureValidityUrl", SignatureTimestamps: "signatureTimestamps"});
inspectorBackend.registerEnum("Network.ContentEncoding", {Deflate: "deflate", Gzip: "gzip", Br: "br"});
inspectorBackend.registerEnum("Network.PrivateNetworkRequestPolicy", {Allow: "Allow", BlockFromInsecureToMorePrivate: "BlockFromInsecureToMorePrivate", WarnFromInsecureToMorePrivate: "WarnFromInsecureToMorePrivate", PreflightBlock: "PreflightBlock", PreflightWarn: "PreflightWarn"});
inspectorBackend.registerEnum("Network.IPAddressSpace", {Local: "Local", Private: "Private", Public: "Public", Unknown: "Unknown"});
inspectorBackend.registerEnum("Network.CrossOriginOpenerPolicyValue", {SameOrigin: "SameOrigin", SameOriginAllowPopups: "SameOriginAllowPopups", RestrictProperties: "RestrictProperties", UnsafeNone: "UnsafeNone", SameOriginPlusCoep: "SameOriginPlusCoep", RestrictPropertiesPlusCoep: "RestrictPropertiesPlusCoep"});
inspectorBackend.registerEnum("Network.CrossOriginEmbedderPolicyValue", {None: "None", Credentialless: "Credentialless", RequireCorp: "RequireCorp"});
inspectorBackend.registerEnum("Network.ContentSecurityPolicySource", {HTTP: "HTTP", Meta: "Meta"});
inspectorBackend.registerEnum("Network.ReportStatus", {Queued: "Queued", Pending: "Pending", MarkedForRemoval: "MarkedForRemoval", Success: "Success"});
inspectorBackend.registerEvent("Network.dataReceived", ["requestId", "timestamp", "dataLength", "encodedDataLength"]);
inspectorBackend.registerEvent("Network.eventSourceMessageReceived", ["requestId", "timestamp", "eventName", "eventId", "data"]);
inspectorBackend.registerEvent("Network.loadingFailed", ["requestId", "timestamp", "type", "errorText", "canceled", "blockedReason", "corsErrorStatus"]);
inspectorBackend.registerEvent("Network.loadingFinished", ["requestId", "timestamp", "encodedDataLength", "shouldReportCorbBlocking"]);
inspectorBackend.registerEvent("Network.requestIntercepted", ["interceptionId", "request", "frameId", "resourceType", "isNavigationRequest", "isDownload", "redirectUrl", "authChallenge", "responseErrorReason", "responseStatusCode", "responseHeaders", "requestId"]);
inspectorBackend.registerEvent("Network.requestServedFromCache", ["requestId"]);
inspectorBackend.registerEvent("Network.requestWillBeSent", ["requestId", "loaderId", "documentURL", "request", "timestamp", "wallTime", "initiator", "redirectHasExtraInfo", "redirectResponse", "type", "frameId", "hasUserGesture"]);
inspectorBackend.registerEvent("Network.resourceChangedPriority", ["requestId", "newPriority", "timestamp"]);
inspectorBackend.registerEvent("Network.signedExchangeReceived", ["requestId", "info"]);
inspectorBackend.registerEvent("Network.responseReceived", ["requestId", "loaderId", "timestamp", "type", "response", "hasExtraInfo", "frameId"]);
inspectorBackend.registerEvent("Network.webSocketClosed", ["requestId", "timestamp"]);
inspectorBackend.registerEvent("Network.webSocketCreated", ["requestId", "url", "initiator"]);
inspectorBackend.registerEvent("Network.webSocketFrameError", ["requestId", "timestamp", "errorMessage"]);
inspectorBackend.registerEvent("Network.webSocketFrameReceived", ["requestId", "timestamp", "response"]);
inspectorBackend.registerEvent("Network.webSocketFrameSent", ["requestId", "timestamp", "response"]);
inspectorBackend.registerEvent("Network.webSocketHandshakeResponseReceived", ["requestId", "timestamp", "response"]);
inspectorBackend.registerEvent("Network.webSocketWillSendHandshakeRequest", ["requestId", "timestamp", "wallTime", "request"]);
inspectorBackend.registerEvent("Network.webTransportCreated", ["transportId", "url", "timestamp", "initiator"]);
inspectorBackend.registerEvent("Network.webTransportConnectionEstablished", ["transportId", "timestamp"]);
inspectorBackend.registerEvent("Network.webTransportClosed", ["transportId", "timestamp"]);
inspectorBackend.registerEvent("Network.requestWillBeSentExtraInfo", ["requestId", "associatedCookies", "headers", "connectTiming", "clientSecurityState", "siteHasCookieInOtherPartition"]);
inspectorBackend.registerEvent("Network.responseReceivedExtraInfo", ["requestId", "blockedCookies", "headers", "resourceIPAddressSpace", "statusCode", "headersText", "cookiePartitionKey", "cookiePartitionKeyOpaque"]);
inspectorBackend.registerEnum("Network.TrustTokenOperationDoneEventStatus", {Ok: "Ok", InvalidArgument: "InvalidArgument", MissingIssuerKeys: "MissingIssuerKeys", FailedPrecondition: "FailedPrecondition", ResourceExhausted: "ResourceExhausted", AlreadyExists: "AlreadyExists", Unavailable: "Unavailable", Unauthorized: "Unauthorized", BadResponse: "BadResponse", InternalError: "InternalError", UnknownError: "UnknownError", FulfilledLocally: "FulfilledLocally"});
inspectorBackend.registerEvent("Network.trustTokenOperationDone", ["status", "type", "requestId", "topLevelOrigin", "issuerOrigin", "issuedTokenCount"]);
inspectorBackend.registerEvent("Network.subresourceWebBundleMetadataReceived", ["requestId", "urls"]);
inspectorBackend.registerEvent("Network.subresourceWebBundleMetadataError", ["requestId", "errorMessage"]);
inspectorBackend.registerEvent("Network.subresourceWebBundleInnerResponseParsed", ["innerRequestId", "innerRequestURL", "bundleRequestId"]);
inspectorBackend.registerEvent("Network.subresourceWebBundleInnerResponseError", ["innerRequestId", "innerRequestURL", "errorMessage", "bundleRequestId"]);
inspectorBackend.registerEvent("Network.reportingApiReportAdded", ["report"]);
inspectorBackend.registerEvent("Network.reportingApiReportUpdated", ["report"]);
inspectorBackend.registerEvent("Network.reportingApiEndpointsChangedForOrigin", ["origin", "endpoints"]);
inspectorBackend.registerCommand("Network.setAcceptedEncodings", [{"name": "encodings", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Network.clearAcceptedEncodingsOverride", [], []);
inspectorBackend.registerCommand("Network.canClearBrowserCache", [], ["result"]);
inspectorBackend.registerCommand("Network.canClearBrowserCookies", [], ["result"]);
inspectorBackend.registerCommand("Network.canEmulateNetworkConditions", [], ["result"]);
inspectorBackend.registerCommand("Network.clearBrowserCache", [], []);
inspectorBackend.registerCommand("Network.clearBrowserCookies", [], []);
inspectorBackend.registerCommand("Network.continueInterceptedRequest", [{"name": "interceptionId", "type": "string", "optional": false, "typeRef": "InterceptionId"}, {"name": "errorReason", "type": "string", "optional": true, "typeRef": "ErrorReason"}, {"name": "rawResponse", "type": "string", "optional": true}, {"name": "url", "type": "string", "optional": true}, {"name": "method", "type": "string", "optional": true}, {"name": "postData", "type": "string", "optional": true}, {"name": "headers", "type": "object", "optional": true, "typeRef": "Network.Headers"}, {"name": "authChallengeResponse", "type": "object", "optional": true, "typeRef": "Network.AuthChallengeResponse"}], []);
inspectorBackend.registerCommand("Network.deleteCookies", [{"name": "name", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": true}, {"name": "domain", "type": "string", "optional": true}, {"name": "path", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Network.disable", [], []);
inspectorBackend.registerCommand("Network.emulateNetworkConditions", [{"name": "offline", "type": "boolean", "optional": false}, {"name": "latency", "type": "number", "optional": false}, {"name": "downloadThroughput", "type": "number", "optional": false}, {"name": "uploadThroughput", "type": "number", "optional": false}, {"name": "connectionType", "type": "string", "optional": true, "typeRef": "ConnectionType"}], []);
inspectorBackend.registerCommand("Network.enable", [{"name": "maxTotalBufferSize", "type": "number", "optional": true}, {"name": "maxResourceBufferSize", "type": "number", "optional": true}, {"name": "maxPostDataSize", "type": "number", "optional": true}], []);
inspectorBackend.registerCommand("Network.getAllCookies", [], ["cookies"]);
inspectorBackend.registerCommand("Network.getCertificate", [{"name": "origin", "type": "string", "optional": false}], ["tableNames"]);
inspectorBackend.registerCommand("Network.getCookies", [{"name": "urls", "type": "array", "optional": true}], ["cookies"]);
inspectorBackend.registerCommand("Network.getResponseBody", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}], ["body", "base64Encoded"]);
inspectorBackend.registerCommand("Network.getRequestPostData", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}], ["postData"]);
inspectorBackend.registerCommand("Network.getResponseBodyForInterception", [{"name": "interceptionId", "type": "string", "optional": false, "typeRef": "InterceptionId"}], ["body", "base64Encoded"]);
inspectorBackend.registerCommand("Network.takeResponseBodyForInterceptionAsStream", [{"name": "interceptionId", "type": "string", "optional": false, "typeRef": "InterceptionId"}], ["stream"]);
inspectorBackend.registerCommand("Network.replayXHR", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}], []);
inspectorBackend.registerCommand("Network.searchInResponseBody", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}, {"name": "query", "type": "string", "optional": false}, {"name": "caseSensitive", "type": "boolean", "optional": true}, {"name": "isRegex", "type": "boolean", "optional": true}], ["result"]);
inspectorBackend.registerCommand("Network.setBlockedURLs", [{"name": "urls", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Network.setBypassServiceWorker", [{"name": "bypass", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Network.setCacheDisabled", [{"name": "cacheDisabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Network.setCookie", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": true}, {"name": "domain", "type": "string", "optional": true}, {"name": "path", "type": "string", "optional": true}, {"name": "secure", "type": "boolean", "optional": true}, {"name": "httpOnly", "type": "boolean", "optional": true}, {"name": "sameSite", "type": "string", "optional": true, "typeRef": "CookieSameSite"}, {"name": "expires", "type": "number", "optional": true, "typeRef": "TimeSinceEpoch"}, {"name": "priority", "type": "string", "optional": true, "typeRef": "CookiePriority"}, {"name": "sameParty", "type": "boolean", "optional": true}, {"name": "sourceScheme", "type": "string", "optional": true, "typeRef": "CookieSourceScheme"}, {"name": "sourcePort", "type": "number", "optional": true}, {"name": "partitionKey", "type": "string", "optional": true}], ["success"]);
inspectorBackend.registerCommand("Network.setCookies", [{"name": "cookies", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Network.setExtraHTTPHeaders", [{"name": "headers", "type": "object", "optional": false, "typeRef": "Network.Headers"}], []);
inspectorBackend.registerCommand("Network.setAttachDebugStack", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Network.setRequestInterception", [{"name": "patterns", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Network.setUserAgentOverride", [{"name": "userAgent", "type": "string", "optional": false}, {"name": "acceptLanguage", "type": "string", "optional": true}, {"name": "platform", "type": "string", "optional": true}, {"name": "userAgentMetadata", "type": "object", "optional": true, "typeRef": "Emulation.UserAgentMetadata"}], []);
inspectorBackend.registerCommand("Network.getSecurityIsolationStatus", [{"name": "frameId", "type": "string", "optional": true, "typeRef": "Page.FrameId"}], ["status"]);
inspectorBackend.registerCommand("Network.enableReportingApi", [{"name": "enable", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Network.loadNetworkResource", [{"name": "frameId", "type": "string", "optional": true, "typeRef": "Page.FrameId"}, {"name": "url", "type": "string", "optional": false}, {"name": "options", "type": "object", "optional": false, "typeRef": "Network.LoadNetworkResourceOptions"}], ["resource"]);
inspectorBackend.registerType("Network.ResourceTiming", [{"name": "requestTime", "type": "number", "optional": false}, {"name": "proxyStart", "type": "number", "optional": false}, {"name": "proxyEnd", "type": "number", "optional": false}, {"name": "dnsStart", "type": "number", "optional": false}, {"name": "dnsEnd", "type": "number", "optional": false}, {"name": "connectStart", "type": "number", "optional": false}, {"name": "connectEnd", "type": "number", "optional": false}, {"name": "sslStart", "type": "number", "optional": false}, {"name": "sslEnd", "type": "number", "optional": false}, {"name": "workerStart", "type": "number", "optional": false}, {"name": "workerReady", "type": "number", "optional": false}, {"name": "workerFetchStart", "type": "number", "optional": false}, {"name": "workerRespondWithSettled", "type": "number", "optional": false}, {"name": "sendStart", "type": "number", "optional": false}, {"name": "sendEnd", "type": "number", "optional": false}, {"name": "pushStart", "type": "number", "optional": false}, {"name": "pushEnd", "type": "number", "optional": false}, {"name": "receiveHeadersStart", "type": "number", "optional": false}, {"name": "receiveHeadersEnd", "type": "number", "optional": false}]);
inspectorBackend.registerType("Network.PostDataEntry", [{"name": "bytes", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.Request", [{"name": "url", "type": "string", "optional": false}, {"name": "urlFragment", "type": "string", "optional": true}, {"name": "method", "type": "string", "optional": false}, {"name": "headers", "type": "object", "optional": false}, {"name": "postData", "type": "string", "optional": true}, {"name": "hasPostData", "type": "boolean", "optional": true}, {"name": "postDataEntries", "type": "array", "optional": true}, {"name": "mixedContentType", "type": "string", "optional": true}, {"name": "initialPriority", "type": "string", "optional": false}, {"name": "referrerPolicy", "type": "string", "optional": false}, {"name": "isLinkPreload", "type": "boolean", "optional": true}, {"name": "trustTokenParams", "type": "object", "optional": true}, {"name": "isSameSite", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("Network.SignedCertificateTimestamp", [{"name": "status", "type": "string", "optional": false}, {"name": "origin", "type": "string", "optional": false}, {"name": "logDescription", "type": "string", "optional": false}, {"name": "logId", "type": "string", "optional": false}, {"name": "timestamp", "type": "number", "optional": false}, {"name": "hashAlgorithm", "type": "string", "optional": false}, {"name": "signatureAlgorithm", "type": "string", "optional": false}, {"name": "signatureData", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.SecurityDetails", [{"name": "protocol", "type": "string", "optional": false}, {"name": "keyExchange", "type": "string", "optional": false}, {"name": "keyExchangeGroup", "type": "string", "optional": true}, {"name": "cipher", "type": "string", "optional": false}, {"name": "mac", "type": "string", "optional": true}, {"name": "certificateId", "type": "number", "optional": false}, {"name": "subjectName", "type": "string", "optional": false}, {"name": "sanList", "type": "array", "optional": false}, {"name": "issuer", "type": "string", "optional": false}, {"name": "validFrom", "type": "number", "optional": false}, {"name": "validTo", "type": "number", "optional": false}, {"name": "signedCertificateTimestampList", "type": "array", "optional": false}, {"name": "certificateTransparencyCompliance", "type": "string", "optional": false}, {"name": "serverSignatureAlgorithm", "type": "number", "optional": true}, {"name": "encryptedClientHello", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("Network.CorsErrorStatus", [{"name": "corsError", "type": "string", "optional": false}, {"name": "failedParameter", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.TrustTokenParams", [{"name": "operation", "type": "string", "optional": false}, {"name": "refreshPolicy", "type": "string", "optional": false}, {"name": "issuers", "type": "array", "optional": true}]);
inspectorBackend.registerType("Network.Response", [{"name": "url", "type": "string", "optional": false}, {"name": "status", "type": "number", "optional": false}, {"name": "statusText", "type": "string", "optional": false}, {"name": "headers", "type": "object", "optional": false}, {"name": "headersText", "type": "string", "optional": true}, {"name": "mimeType", "type": "string", "optional": false}, {"name": "requestHeaders", "type": "object", "optional": true}, {"name": "requestHeadersText", "type": "string", "optional": true}, {"name": "connectionReused", "type": "boolean", "optional": false}, {"name": "connectionId", "type": "number", "optional": false}, {"name": "remoteIPAddress", "type": "string", "optional": true}, {"name": "remotePort", "type": "number", "optional": true}, {"name": "fromDiskCache", "type": "boolean", "optional": true}, {"name": "fromServiceWorker", "type": "boolean", "optional": true}, {"name": "fromPrefetchCache", "type": "boolean", "optional": true}, {"name": "encodedDataLength", "type": "number", "optional": false}, {"name": "timing", "type": "object", "optional": true}, {"name": "serviceWorkerResponseSource", "type": "string", "optional": true}, {"name": "responseTime", "type": "number", "optional": true}, {"name": "cacheStorageCacheName", "type": "string", "optional": true}, {"name": "protocol", "type": "string", "optional": true}, {"name": "alternateProtocolUsage", "type": "string", "optional": true}, {"name": "securityState", "type": "string", "optional": false}, {"name": "securityDetails", "type": "object", "optional": true}]);
inspectorBackend.registerType("Network.WebSocketRequest", [{"name": "headers", "type": "object", "optional": false}]);
inspectorBackend.registerType("Network.WebSocketResponse", [{"name": "status", "type": "number", "optional": false}, {"name": "statusText", "type": "string", "optional": false}, {"name": "headers", "type": "object", "optional": false}, {"name": "headersText", "type": "string", "optional": true}, {"name": "requestHeaders", "type": "object", "optional": true}, {"name": "requestHeadersText", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.WebSocketFrame", [{"name": "opcode", "type": "number", "optional": false}, {"name": "mask", "type": "boolean", "optional": false}, {"name": "payloadData", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.CachedResource", [{"name": "url", "type": "string", "optional": false}, {"name": "type", "type": "string", "optional": false}, {"name": "response", "type": "object", "optional": true}, {"name": "bodySize", "type": "number", "optional": false}]);
inspectorBackend.registerType("Network.Initiator", [{"name": "type", "type": "string", "optional": false}, {"name": "stack", "type": "object", "optional": true}, {"name": "url", "type": "string", "optional": true}, {"name": "lineNumber", "type": "number", "optional": true}, {"name": "columnNumber", "type": "number", "optional": true}, {"name": "requestId", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.Cookie", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}, {"name": "domain", "type": "string", "optional": false}, {"name": "path", "type": "string", "optional": false}, {"name": "expires", "type": "number", "optional": false}, {"name": "size", "type": "number", "optional": false}, {"name": "httpOnly", "type": "boolean", "optional": false}, {"name": "secure", "type": "boolean", "optional": false}, {"name": "session", "type": "boolean", "optional": false}, {"name": "sameSite", "type": "string", "optional": true}, {"name": "priority", "type": "string", "optional": false}, {"name": "sameParty", "type": "boolean", "optional": false}, {"name": "sourceScheme", "type": "string", "optional": false}, {"name": "sourcePort", "type": "number", "optional": false}, {"name": "partitionKey", "type": "string", "optional": true}, {"name": "partitionKeyOpaque", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("Network.BlockedSetCookieWithReason", [{"name": "blockedReasons", "type": "array", "optional": false}, {"name": "cookieLine", "type": "string", "optional": false}, {"name": "cookie", "type": "object", "optional": true}]);
inspectorBackend.registerType("Network.BlockedCookieWithReason", [{"name": "blockedReasons", "type": "array", "optional": false}, {"name": "cookie", "type": "object", "optional": false}]);
inspectorBackend.registerType("Network.CookieParam", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": true}, {"name": "domain", "type": "string", "optional": true}, {"name": "path", "type": "string", "optional": true}, {"name": "secure", "type": "boolean", "optional": true}, {"name": "httpOnly", "type": "boolean", "optional": true}, {"name": "sameSite", "type": "string", "optional": true}, {"name": "expires", "type": "number", "optional": true}, {"name": "priority", "type": "string", "optional": true}, {"name": "sameParty", "type": "boolean", "optional": true}, {"name": "sourceScheme", "type": "string", "optional": true}, {"name": "sourcePort", "type": "number", "optional": true}, {"name": "partitionKey", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.AuthChallenge", [{"name": "source", "type": "string", "optional": true}, {"name": "origin", "type": "string", "optional": false}, {"name": "scheme", "type": "string", "optional": false}, {"name": "realm", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.AuthChallengeResponse", [{"name": "response", "type": "string", "optional": false}, {"name": "username", "type": "string", "optional": true}, {"name": "password", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.RequestPattern", [{"name": "urlPattern", "type": "string", "optional": true}, {"name": "resourceType", "type": "string", "optional": true}, {"name": "interceptionStage", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.SignedExchangeSignature", [{"name": "label", "type": "string", "optional": false}, {"name": "signature", "type": "string", "optional": false}, {"name": "integrity", "type": "string", "optional": false}, {"name": "certUrl", "type": "string", "optional": true}, {"name": "certSha256", "type": "string", "optional": true}, {"name": "validityUrl", "type": "string", "optional": false}, {"name": "date", "type": "number", "optional": false}, {"name": "expires", "type": "number", "optional": false}, {"name": "certificates", "type": "array", "optional": true}]);
inspectorBackend.registerType("Network.SignedExchangeHeader", [{"name": "requestUrl", "type": "string", "optional": false}, {"name": "responseCode", "type": "number", "optional": false}, {"name": "responseHeaders", "type": "object", "optional": false}, {"name": "signatures", "type": "array", "optional": false}, {"name": "headerIntegrity", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.SignedExchangeError", [{"name": "message", "type": "string", "optional": false}, {"name": "signatureIndex", "type": "number", "optional": true}, {"name": "errorField", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.SignedExchangeInfo", [{"name": "outerResponse", "type": "object", "optional": false}, {"name": "header", "type": "object", "optional": true}, {"name": "securityDetails", "type": "object", "optional": true}, {"name": "errors", "type": "array", "optional": true}]);
inspectorBackend.registerType("Network.ConnectTiming", [{"name": "requestTime", "type": "number", "optional": false}]);
inspectorBackend.registerType("Network.ClientSecurityState", [{"name": "initiatorIsSecureContext", "type": "boolean", "optional": false}, {"name": "initiatorIPAddressSpace", "type": "string", "optional": false}, {"name": "privateNetworkRequestPolicy", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.CrossOriginOpenerPolicyStatus", [{"name": "value", "type": "string", "optional": false}, {"name": "reportOnlyValue", "type": "string", "optional": false}, {"name": "reportingEndpoint", "type": "string", "optional": true}, {"name": "reportOnlyReportingEndpoint", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.CrossOriginEmbedderPolicyStatus", [{"name": "value", "type": "string", "optional": false}, {"name": "reportOnlyValue", "type": "string", "optional": false}, {"name": "reportingEndpoint", "type": "string", "optional": true}, {"name": "reportOnlyReportingEndpoint", "type": "string", "optional": true}]);
inspectorBackend.registerType("Network.ContentSecurityPolicyStatus", [{"name": "effectiveDirectives", "type": "string", "optional": false}, {"name": "isEnforced", "type": "boolean", "optional": false}, {"name": "source", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.SecurityIsolationStatus", [{"name": "coop", "type": "object", "optional": true}, {"name": "coep", "type": "object", "optional": true}, {"name": "csp", "type": "array", "optional": true}]);
inspectorBackend.registerType("Network.ReportingApiReport", [{"name": "id", "type": "string", "optional": false}, {"name": "initiatorUrl", "type": "string", "optional": false}, {"name": "destination", "type": "string", "optional": false}, {"name": "type", "type": "string", "optional": false}, {"name": "timestamp", "type": "number", "optional": false}, {"name": "depth", "type": "number", "optional": false}, {"name": "completedAttempts", "type": "number", "optional": false}, {"name": "body", "type": "object", "optional": false}, {"name": "status", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.ReportingApiEndpoint", [{"name": "url", "type": "string", "optional": false}, {"name": "groupName", "type": "string", "optional": false}]);
inspectorBackend.registerType("Network.LoadNetworkResourcePageResult", [{"name": "success", "type": "boolean", "optional": false}, {"name": "netError", "type": "number", "optional": true}, {"name": "netErrorName", "type": "string", "optional": true}, {"name": "httpStatusCode", "type": "number", "optional": true}, {"name": "stream", "type": "string", "optional": true}, {"name": "headers", "type": "object", "optional": true}]);
inspectorBackend.registerType("Network.LoadNetworkResourceOptions", [{"name": "disableCache", "type": "boolean", "optional": false}, {"name": "includeCredentials", "type": "boolean", "optional": false}]);

// Overlay.
inspectorBackend.registerEnum("Overlay.LineStylePattern", {Dashed: "dashed", Dotted: "dotted"});
inspectorBackend.registerEnum("Overlay.ContrastAlgorithm", {Aa: "aa", Aaa: "aaa", Apca: "apca"});
inspectorBackend.registerEnum("Overlay.ColorFormat", {Rgb: "rgb", Hsl: "hsl", Hwb: "hwb", Hex: "hex"});
inspectorBackend.registerEnum("Overlay.InspectMode", {SearchForNode: "searchForNode", SearchForUAShadowDOM: "searchForUAShadowDOM", CaptureAreaScreenshot: "captureAreaScreenshot", ShowDistances: "showDistances", None: "none"});
inspectorBackend.registerEvent("Overlay.inspectNodeRequested", ["backendNodeId"]);
inspectorBackend.registerEvent("Overlay.nodeHighlightRequested", ["nodeId"]);
inspectorBackend.registerEvent("Overlay.screenshotRequested", ["viewport"]);
inspectorBackend.registerEvent("Overlay.inspectModeCanceled", []);
inspectorBackend.registerCommand("Overlay.disable", [], []);
inspectorBackend.registerCommand("Overlay.enable", [], []);
inspectorBackend.registerCommand("Overlay.getHighlightObjectForTest", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}, {"name": "includeDistance", "type": "boolean", "optional": true}, {"name": "includeStyle", "type": "boolean", "optional": true}, {"name": "colorFormat", "type": "string", "optional": true, "typeRef": "ColorFormat"}, {"name": "showAccessibilityInfo", "type": "boolean", "optional": true}], ["highlight"]);
inspectorBackend.registerCommand("Overlay.getGridHighlightObjectsForTest", [{"name": "nodeIds", "type": "array", "optional": false}], ["highlights"]);
inspectorBackend.registerCommand("Overlay.getSourceOrderHighlightObjectForTest", [{"name": "nodeId", "type": "number", "optional": false, "typeRef": "DOM.NodeId"}], ["highlight"]);
inspectorBackend.registerCommand("Overlay.hideHighlight", [], []);
inspectorBackend.registerCommand("Overlay.highlightFrame", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "Page.FrameId"}, {"name": "contentColor", "type": "object", "optional": true, "typeRef": "DOM.RGBA"}, {"name": "contentOutlineColor", "type": "object", "optional": true, "typeRef": "DOM.RGBA"}], []);
inspectorBackend.registerCommand("Overlay.highlightNode", [{"name": "highlightConfig", "type": "object", "optional": false, "typeRef": "Overlay.HighlightConfig"}, {"name": "nodeId", "type": "number", "optional": true, "typeRef": "DOM.NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "DOM.BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}, {"name": "selector", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Overlay.highlightQuad", [{"name": "quad", "type": "array", "optional": false, "typeRef": "DOM.Quad"}, {"name": "color", "type": "object", "optional": true, "typeRef": "DOM.RGBA"}, {"name": "outlineColor", "type": "object", "optional": true, "typeRef": "DOM.RGBA"}], []);
inspectorBackend.registerCommand("Overlay.highlightRect", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}, {"name": "color", "type": "object", "optional": true, "typeRef": "DOM.RGBA"}, {"name": "outlineColor", "type": "object", "optional": true, "typeRef": "DOM.RGBA"}], []);
inspectorBackend.registerCommand("Overlay.highlightSourceOrder", [{"name": "sourceOrderConfig", "type": "object", "optional": false, "typeRef": "Overlay.SourceOrderConfig"}, {"name": "nodeId", "type": "number", "optional": true, "typeRef": "DOM.NodeId"}, {"name": "backendNodeId", "type": "number", "optional": true, "typeRef": "DOM.BackendNodeId"}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "Runtime.RemoteObjectId"}], []);
inspectorBackend.registerCommand("Overlay.setInspectMode", [{"name": "mode", "type": "string", "optional": false, "typeRef": "InspectMode"}, {"name": "highlightConfig", "type": "object", "optional": true, "typeRef": "Overlay.HighlightConfig"}], []);
inspectorBackend.registerCommand("Overlay.setShowAdHighlights", [{"name": "show", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setPausedInDebuggerMessage", [{"name": "message", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Overlay.setShowDebugBorders", [{"name": "show", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowFPSCounter", [{"name": "show", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowGridOverlays", [{"name": "gridNodeHighlightConfigs", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowFlexOverlays", [{"name": "flexNodeHighlightConfigs", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowScrollSnapOverlays", [{"name": "scrollSnapHighlightConfigs", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowContainerQueryOverlays", [{"name": "containerQueryHighlightConfigs", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowPaintRects", [{"name": "result", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowLayoutShiftRegions", [{"name": "result", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowScrollBottleneckRects", [{"name": "show", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowHitTestBorders", [{"name": "show", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowWebVitals", [{"name": "show", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowViewportSizeOnResize", [{"name": "show", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Overlay.setShowHinge", [{"name": "hingeConfig", "type": "object", "optional": true, "typeRef": "Overlay.HingeConfig"}], []);
inspectorBackend.registerCommand("Overlay.setShowIsolatedElements", [{"name": "isolatedElementHighlightConfigs", "type": "array", "optional": false}], []);
inspectorBackend.registerType("Overlay.SourceOrderConfig", [{"name": "parentOutlineColor", "type": "object", "optional": false}, {"name": "childOutlineColor", "type": "object", "optional": false}]);
inspectorBackend.registerType("Overlay.GridHighlightConfig", [{"name": "showGridExtensionLines", "type": "boolean", "optional": true}, {"name": "showPositiveLineNumbers", "type": "boolean", "optional": true}, {"name": "showNegativeLineNumbers", "type": "boolean", "optional": true}, {"name": "showAreaNames", "type": "boolean", "optional": true}, {"name": "showLineNames", "type": "boolean", "optional": true}, {"name": "showTrackSizes", "type": "boolean", "optional": true}, {"name": "gridBorderColor", "type": "object", "optional": true}, {"name": "cellBorderColor", "type": "object", "optional": true}, {"name": "rowLineColor", "type": "object", "optional": true}, {"name": "columnLineColor", "type": "object", "optional": true}, {"name": "gridBorderDash", "type": "boolean", "optional": true}, {"name": "cellBorderDash", "type": "boolean", "optional": true}, {"name": "rowLineDash", "type": "boolean", "optional": true}, {"name": "columnLineDash", "type": "boolean", "optional": true}, {"name": "rowGapColor", "type": "object", "optional": true}, {"name": "rowHatchColor", "type": "object", "optional": true}, {"name": "columnGapColor", "type": "object", "optional": true}, {"name": "columnHatchColor", "type": "object", "optional": true}, {"name": "areaBorderColor", "type": "object", "optional": true}, {"name": "gridBackgroundColor", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.FlexContainerHighlightConfig", [{"name": "containerBorder", "type": "object", "optional": true}, {"name": "lineSeparator", "type": "object", "optional": true}, {"name": "itemSeparator", "type": "object", "optional": true}, {"name": "mainDistributedSpace", "type": "object", "optional": true}, {"name": "crossDistributedSpace", "type": "object", "optional": true}, {"name": "rowGapSpace", "type": "object", "optional": true}, {"name": "columnGapSpace", "type": "object", "optional": true}, {"name": "crossAlignment", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.FlexItemHighlightConfig", [{"name": "baseSizeBox", "type": "object", "optional": true}, {"name": "baseSizeBorder", "type": "object", "optional": true}, {"name": "flexibilityArrow", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.LineStyle", [{"name": "color", "type": "object", "optional": true}, {"name": "pattern", "type": "string", "optional": true}]);
inspectorBackend.registerType("Overlay.BoxStyle", [{"name": "fillColor", "type": "object", "optional": true}, {"name": "hatchColor", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.HighlightConfig", [{"name": "showInfo", "type": "boolean", "optional": true}, {"name": "showStyles", "type": "boolean", "optional": true}, {"name": "showRulers", "type": "boolean", "optional": true}, {"name": "showAccessibilityInfo", "type": "boolean", "optional": true}, {"name": "showExtensionLines", "type": "boolean", "optional": true}, {"name": "contentColor", "type": "object", "optional": true}, {"name": "paddingColor", "type": "object", "optional": true}, {"name": "borderColor", "type": "object", "optional": true}, {"name": "marginColor", "type": "object", "optional": true}, {"name": "eventTargetColor", "type": "object", "optional": true}, {"name": "shapeColor", "type": "object", "optional": true}, {"name": "shapeMarginColor", "type": "object", "optional": true}, {"name": "cssGridColor", "type": "object", "optional": true}, {"name": "colorFormat", "type": "string", "optional": true}, {"name": "gridHighlightConfig", "type": "object", "optional": true}, {"name": "flexContainerHighlightConfig", "type": "object", "optional": true}, {"name": "flexItemHighlightConfig", "type": "object", "optional": true}, {"name": "contrastAlgorithm", "type": "string", "optional": true}, {"name": "containerQueryContainerHighlightConfig", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.GridNodeHighlightConfig", [{"name": "gridHighlightConfig", "type": "object", "optional": false}, {"name": "nodeId", "type": "number", "optional": false}]);
inspectorBackend.registerType("Overlay.FlexNodeHighlightConfig", [{"name": "flexContainerHighlightConfig", "type": "object", "optional": false}, {"name": "nodeId", "type": "number", "optional": false}]);
inspectorBackend.registerType("Overlay.ScrollSnapContainerHighlightConfig", [{"name": "snapportBorder", "type": "object", "optional": true}, {"name": "snapAreaBorder", "type": "object", "optional": true}, {"name": "scrollMarginColor", "type": "object", "optional": true}, {"name": "scrollPaddingColor", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.ScrollSnapHighlightConfig", [{"name": "scrollSnapContainerHighlightConfig", "type": "object", "optional": false}, {"name": "nodeId", "type": "number", "optional": false}]);
inspectorBackend.registerType("Overlay.HingeConfig", [{"name": "rect", "type": "object", "optional": false}, {"name": "contentColor", "type": "object", "optional": true}, {"name": "outlineColor", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.ContainerQueryHighlightConfig", [{"name": "containerQueryContainerHighlightConfig", "type": "object", "optional": false}, {"name": "nodeId", "type": "number", "optional": false}]);
inspectorBackend.registerType("Overlay.ContainerQueryContainerHighlightConfig", [{"name": "containerBorder", "type": "object", "optional": true}, {"name": "descendantBorder", "type": "object", "optional": true}]);
inspectorBackend.registerType("Overlay.IsolatedElementHighlightConfig", [{"name": "isolationModeHighlightConfig", "type": "object", "optional": false}, {"name": "nodeId", "type": "number", "optional": false}]);
inspectorBackend.registerType("Overlay.IsolationModeHighlightConfig", [{"name": "resizerColor", "type": "object", "optional": true}, {"name": "resizerHandleColor", "type": "object", "optional": true}, {"name": "maskColor", "type": "object", "optional": true}]);

// Page.
inspectorBackend.registerEnum("Page.AdFrameType", {None: "none", Child: "child", Root: "root"});
inspectorBackend.registerEnum("Page.AdFrameExplanation", {ParentIsAd: "ParentIsAd", CreatedByAdScript: "CreatedByAdScript", MatchedBlockingRule: "MatchedBlockingRule"});
inspectorBackend.registerEnum("Page.SecureContextType", {Secure: "Secure", SecureLocalhost: "SecureLocalhost", InsecureScheme: "InsecureScheme", InsecureAncestor: "InsecureAncestor"});
inspectorBackend.registerEnum("Page.CrossOriginIsolatedContextType", {Isolated: "Isolated", NotIsolated: "NotIsolated", NotIsolatedFeatureDisabled: "NotIsolatedFeatureDisabled"});
inspectorBackend.registerEnum("Page.GatedAPIFeatures", {SharedArrayBuffers: "SharedArrayBuffers", SharedArrayBuffersTransferAllowed: "SharedArrayBuffersTransferAllowed", PerformanceMeasureMemory: "PerformanceMeasureMemory", PerformanceProfile: "PerformanceProfile"});
inspectorBackend.registerEnum("Page.PermissionsPolicyFeature", {Accelerometer: "accelerometer", AmbientLightSensor: "ambient-light-sensor", AttributionReporting: "attribution-reporting", Autoplay: "autoplay", Bluetooth: "bluetooth", BrowsingTopics: "browsing-topics", Camera: "camera", ChDpr: "ch-dpr", ChDeviceMemory: "ch-device-memory", ChDownlink: "ch-downlink", ChEct: "ch-ect", ChPrefersColorScheme: "ch-prefers-color-scheme", ChPrefersReducedMotion: "ch-prefers-reduced-motion", ChRtt: "ch-rtt", ChSaveData: "ch-save-data", ChUa: "ch-ua", ChUaArch: "ch-ua-arch", ChUaBitness: "ch-ua-bitness", ChUaPlatform: "ch-ua-platform", ChUaModel: "ch-ua-model", ChUaMobile: "ch-ua-mobile", ChUaFullVersion: "ch-ua-full-version", ChUaFullVersionList: "ch-ua-full-version-list", ChUaPlatformVersion: "ch-ua-platform-version", ChUaWow64: "ch-ua-wow64", ChViewportHeight: "ch-viewport-height", ChViewportWidth: "ch-viewport-width", ChWidth: "ch-width", ClipboardRead: "clipboard-read", ClipboardWrite: "clipboard-write", ComputePressure: "compute-pressure", CrossOriginIsolated: "cross-origin-isolated", DirectSockets: "direct-sockets", DisplayCapture: "display-capture", DocumentDomain: "document-domain", EncryptedMedia: "encrypted-media", ExecutionWhileOutOfViewport: "execution-while-out-of-viewport", ExecutionWhileNotRendered: "execution-while-not-rendered", FocusWithoutUserActivation: "focus-without-user-activation", Fullscreen: "fullscreen", Frobulate: "frobulate", Gamepad: "gamepad", Geolocation: "geolocation", Gyroscope: "gyroscope", Hid: "hid", IdentityCredentialsGet: "identity-credentials-get", IdleDetection: "idle-detection", InterestCohort: "interest-cohort", JoinAdInterestGroup: "join-ad-interest-group", KeyboardMap: "keyboard-map", LocalFonts: "local-fonts", Magnetometer: "magnetometer", Microphone: "microphone", Midi: "midi", OtpCredentials: "otp-credentials", Payment: "payment", PictureInPicture: "picture-in-picture", PrivateAggregation: "private-aggregation", PrivateStateTokenIssuance: "private-state-token-issuance", PrivateStateTokenRedemption: "private-state-token-redemption", PublickeyCredentialsGet: "publickey-credentials-get", RunAdAuction: "run-ad-auction", ScreenWakeLock: "screen-wake-lock", Serial: "serial", SharedAutofill: "shared-autofill", SharedStorage: "shared-storage", SharedStorageSelectUrl: "shared-storage-select-url", SmartCard: "smart-card", StorageAccess: "storage-access", SyncXhr: "sync-xhr", Unload: "unload", Usb: "usb", VerticalScroll: "vertical-scroll", WebShare: "web-share", WindowManagement: "window-management", WindowPlacement: "window-placement", XrSpatialTracking: "xr-spatial-tracking"});
inspectorBackend.registerEnum("Page.PermissionsPolicyBlockReason", {Header: "Header", IframeAttribute: "IframeAttribute", InFencedFrameTree: "InFencedFrameTree", InIsolatedApp: "InIsolatedApp"});
inspectorBackend.registerEnum("Page.OriginTrialTokenStatus", {Success: "Success", NotSupported: "NotSupported", Insecure: "Insecure", Expired: "Expired", WrongOrigin: "WrongOrigin", InvalidSignature: "InvalidSignature", Malformed: "Malformed", WrongVersion: "WrongVersion", FeatureDisabled: "FeatureDisabled", TokenDisabled: "TokenDisabled", FeatureDisabledForUser: "FeatureDisabledForUser", UnknownTrial: "UnknownTrial"});
inspectorBackend.registerEnum("Page.OriginTrialStatus", {Enabled: "Enabled", ValidTokenNotProvided: "ValidTokenNotProvided", OSNotSupported: "OSNotSupported", TrialNotAllowed: "TrialNotAllowed"});
inspectorBackend.registerEnum("Page.OriginTrialUsageRestriction", {None: "None", Subset: "Subset"});
inspectorBackend.registerEnum("Page.TransitionType", {Link: "link", Typed: "typed", Address_bar: "address_bar", Auto_bookmark: "auto_bookmark", Auto_subframe: "auto_subframe", Manual_subframe: "manual_subframe", Generated: "generated", Auto_toplevel: "auto_toplevel", Form_submit: "form_submit", Reload: "reload", Keyword: "keyword", Keyword_generated: "keyword_generated", Other: "other"});
inspectorBackend.registerEnum("Page.DialogType", {Alert: "alert", Confirm: "confirm", Prompt: "prompt", Beforeunload: "beforeunload"});
inspectorBackend.registerEnum("Page.ClientNavigationReason", {FormSubmissionGet: "formSubmissionGet", FormSubmissionPost: "formSubmissionPost", HttpHeaderRefresh: "httpHeaderRefresh", ScriptInitiated: "scriptInitiated", MetaTagRefresh: "metaTagRefresh", PageBlockInterstitial: "pageBlockInterstitial", Reload: "reload", AnchorClick: "anchorClick"});
inspectorBackend.registerEnum("Page.ClientNavigationDisposition", {CurrentTab: "currentTab", NewTab: "newTab", NewWindow: "newWindow", Download: "download"});
inspectorBackend.registerEnum("Page.ReferrerPolicy", {NoReferrer: "noReferrer", NoReferrerWhenDowngrade: "noReferrerWhenDowngrade", Origin: "origin", OriginWhenCrossOrigin: "originWhenCrossOrigin", SameOrigin: "sameOrigin", StrictOrigin: "strictOrigin", StrictOriginWhenCrossOrigin: "strictOriginWhenCrossOrigin", UnsafeUrl: "unsafeUrl"});
inspectorBackend.registerEnum("Page.AutoResponseMode", {None: "none", AutoAccept: "autoAccept", AutoReject: "autoReject", AutoOptOut: "autoOptOut"});
inspectorBackend.registerEnum("Page.NavigationType", {Navigation: "Navigation", BackForwardCacheRestore: "BackForwardCacheRestore"});
inspectorBackend.registerEnum("Page.BackForwardCacheNotRestoredReason", {NotPrimaryMainFrame: "NotPrimaryMainFrame", BackForwardCacheDisabled: "BackForwardCacheDisabled", RelatedActiveContentsExist: "RelatedActiveContentsExist", HTTPStatusNotOK: "HTTPStatusNotOK", SchemeNotHTTPOrHTTPS: "SchemeNotHTTPOrHTTPS", Loading: "Loading", WasGrantedMediaAccess: "WasGrantedMediaAccess", DisableForRenderFrameHostCalled: "DisableForRenderFrameHostCalled", DomainNotAllowed: "DomainNotAllowed", HTTPMethodNotGET: "HTTPMethodNotGET", SubframeIsNavigating: "SubframeIsNavigating", Timeout: "Timeout", CacheLimit: "CacheLimit", JavaScriptExecution: "JavaScriptExecution", RendererProcessKilled: "RendererProcessKilled", RendererProcessCrashed: "RendererProcessCrashed", SchedulerTrackedFeatureUsed: "SchedulerTrackedFeatureUsed", ConflictingBrowsingInstance: "ConflictingBrowsingInstance", CacheFlushed: "CacheFlushed", ServiceWorkerVersionActivation: "ServiceWorkerVersionActivation", SessionRestored: "SessionRestored", ServiceWorkerPostMessage: "ServiceWorkerPostMessage", EnteredBackForwardCacheBeforeServiceWorkerHostAdded: "EnteredBackForwardCacheBeforeServiceWorkerHostAdded", RenderFrameHostReused_SameSite: "RenderFrameHostReused_SameSite", RenderFrameHostReused_CrossSite: "RenderFrameHostReused_CrossSite", ServiceWorkerClaim: "ServiceWorkerClaim", IgnoreEventAndEvict: "IgnoreEventAndEvict", HaveInnerContents: "HaveInnerContents", TimeoutPuttingInCache: "TimeoutPuttingInCache", BackForwardCacheDisabledByLowMemory: "BackForwardCacheDisabledByLowMemory", BackForwardCacheDisabledByCommandLine: "BackForwardCacheDisabledByCommandLine", NetworkRequestDatAPIpeDrainedAsBytesConsumer: "NetworkRequestDatapipeDrainedAsBytesConsumer", NetworkRequestRedirected: "NetworkRequestRedirected", NetworkRequestTimeout: "NetworkRequestTimeout", NetworkExceedsBufferLimit: "NetworkExceedsBufferLimit", NavigationCancelledWhileRestoring: "NavigationCancelledWhileRestoring", NotMostRecentNavigationEntry: "NotMostRecentNavigationEntry", BackForwardCacheDisabledForPrerender: "BackForwardCacheDisabledForPrerender", UserAgentOverrideDiffers: "UserAgentOverrideDiffers", ForegroundCacheLimit: "ForegroundCacheLimit", BrowsingInstanceNotSwapped: "BrowsingInstanceNotSwapped", BackForwardCacheDisabledForDelegate: "BackForwardCacheDisabledForDelegate", UnloadHandlerExistsInMainFrame: "UnloadHandlerExistsInMainFrame", UnloadHandlerExistsInSubFrame: "UnloadHandlerExistsInSubFrame", ServiceWorkerUnregistration: "ServiceWorkerUnregistration", CacheControlNoStore: "CacheControlNoStore", CacheControlNoStoreCookieModified: "CacheControlNoStoreCookieModified", CacheControlNoStoreHTTPOnlyCookieModified: "CacheControlNoStoreHTTPOnlyCookieModified", NoResponseHead: "NoResponseHead", Unknown: "Unknown", ActivationNavigationsDisallowedForBug1234857: "ActivationNavigationsDisallowedForBug1234857", ErrorDocument: "ErrorDocument", FencedFramesEmbedder: "FencedFramesEmbedder", CookieDisabled: "CookieDisabled", WebSocket: "WebSocket", WebTransport: "WebTransport", WebRTC: "WebRTC", MainResourceHasCacheControlNoStore: "MainResourceHasCacheControlNoStore", MainResourceHasCacheControlNoCache: "MainResourceHasCacheControlNoCache", SubresourceHasCacheControlNoStore: "SubresourceHasCacheControlNoStore", SubresourceHasCacheControlNoCache: "SubresourceHasCacheControlNoCache", ContainsPlugins: "ContainsPlugins", DocumentLoaded: "DocumentLoaded", DedicatedWorkerOrWorklet: "DedicatedWorkerOrWorklet", OutstandingNetworkRequestOthers: "OutstandingNetworkRequestOthers", OutstandingIndexedDBTransaction: "OutstandingIndexedDBTransaction", RequestedMIDIPermission: "RequestedMIDIPermission", RequestedAudioCapturePermission: "RequestedAudioCapturePermission", RequestedVideoCapturePermission: "RequestedVideoCapturePermission", RequestedBackForwardCacheBlockedSensors: "RequestedBackForwardCacheBlockedSensors", RequestedBackgroundWorkPermission: "RequestedBackgroundWorkPermission", BroadcastChannel: "BroadcastChannel", IndexedDBConnection: "IndexedDBConnection", WebXR: "WebXR", SharedWorker: "SharedWorker", WebLocks: "WebLocks", WebHID: "WebHID", WebShare: "WebShare", RequestedStorageAccessGrant: "RequestedStorageAccessGrant", WebNfc: "WebNfc", OutstandingNetworkRequestFetch: "OutstandingNetworkRequestFetch", OutstandingNetworkRequestXHR: "OutstandingNetworkRequestXHR", AppBanner: "AppBanner", Printing: "Printing", WebDatabase: "WebDatabase", PictureInPicture: "PictureInPicture", Portal: "Portal", SpeechRecognizer: "SpeechRecognizer", IdleManager: "IdleManager", PaymentManager: "PaymentManager", SpeechSynthesis: "SpeechSynthesis", KeyboardLock: "KeyboardLock", WebOTPService: "WebOTPService", OutstandingNetworkRequestDirectSocket: "OutstandingNetworkRequestDirectSocket", InjectedJavascript: "InjectedJavascript", InjectedStyleSheet: "InjectedStyleSheet", KeepaliveRequest: "KeepaliveRequest", IndexedDBEvent: "IndexedDBEvent", Dummy: "Dummy", JsNetworkRequestReceivedCacheControlNoStoreResource: "JsNetworkRequestReceivedCacheControlNoStoreResource", WebRTCSticky: "WebRTCSticky", WebTransportSticky: "WebTransportSticky", WebSocketSticky: "WebSocketSticky", ContentSecurityHandler: "ContentSecurityHandler", ContentWebAuthenticationAPI: "ContentWebAuthenticationAPI", ContentFileChooser: "ContentFileChooser", ContentSerial: "ContentSerial", ContentFileSystemAccess: "ContentFileSystemAccess", ContentMediaDevicesDispatcherHost: "ContentMediaDevicesDispatcherHost", ContentWebBluetooth: "ContentWebBluetooth", ContentWebUSB: "ContentWebUSB", ContentMediaSessionService: "ContentMediaSessionService", ContentScreenReader: "ContentScreenReader", EmbedderPopupBlockerTabHelper: "EmbedderPopupBlockerTabHelper", EmbedderSafeBrowsingTriggeredPopupBlocker: "EmbedderSafeBrowsingTriggeredPopupBlocker", EmbedderSafeBrowsingThreatDetails: "EmbedderSafeBrowsingThreatDetails", EmbedderAppBannerManager: "EmbedderAppBannerManager", EmbedderDomDistillerViewerSource: "EmbedderDomDistillerViewerSource", EmbedderDomDistillerSelfDeletingRequestDelegate: "EmbedderDomDistillerSelfDeletingRequestDelegate", EmbedderOomInterventionTabHelper: "EmbedderOomInterventionTabHelper", EmbedderOfflinePage: "EmbedderOfflinePage", EmbedderChromePasswordManagerClientBindCredentialManager: "EmbedderChromePasswordManagerClientBindCredentialManager", EmbedderPermissionRequestManager: "EmbedderPermissionRequestManager", EmbedderModalDialog: "EmbedderModalDialog", EmbedderExtensions: "EmbedderExtensions", EmbedderExtensionMessaging: "EmbedderExtensionMessaging", EmbedderExtensionMessagingForOpenPort: "EmbedderExtensionMessagingForOpenPort", EmbedderExtensionSentMessageToCachedFrame: "EmbedderExtensionSentMessageToCachedFrame"});
inspectorBackend.registerEnum("Page.BackForwardCacheNotRestoredReasonType", {SupportPending: "SupportPending", PageSupportNeeded: "PageSupportNeeded", Circumstantial: "Circumstantial"});
inspectorBackend.registerEvent("Page.domContentEventFired", ["timestamp"]);
inspectorBackend.registerEnum("Page.FileChooserOpenedEventMode", {SelectSingle: "selectSingle", SelectMultiple: "selectMultiple"});
inspectorBackend.registerEvent("Page.fileChooserOpened", ["frameId", "mode", "backendNodeId"]);
inspectorBackend.registerEvent("Page.frameAttached", ["frameId", "parentFrameId", "stack"]);
inspectorBackend.registerEvent("Page.frameClearedScheduledNavigation", ["frameId"]);
inspectorBackend.registerEnum("Page.FrameDetachedEventReason", {Remove: "remove", Swap: "swap"});
inspectorBackend.registerEvent("Page.frameDetached", ["frameId", "reason"]);
inspectorBackend.registerEvent("Page.frameNavigated", ["frame", "type"]);
inspectorBackend.registerEvent("Page.documentOpened", ["frame"]);
inspectorBackend.registerEvent("Page.frameResized", []);
inspectorBackend.registerEvent("Page.frameRequestedNavigation", ["frameId", "reason", "url", "disposition"]);
inspectorBackend.registerEvent("Page.frameScheduledNavigation", ["frameId", "delay", "reason", "url"]);
inspectorBackend.registerEvent("Page.frameStartedLoading", ["frameId"]);
inspectorBackend.registerEvent("Page.frameStoppedLoading", ["frameId"]);
inspectorBackend.registerEvent("Page.downloadWillBegin", ["frameId", "guid", "url", "suggestedFilename"]);
inspectorBackend.registerEnum("Page.DownloadProgressEventState", {InProgress: "inProgress", Completed: "completed", Canceled: "canceled"});
inspectorBackend.registerEvent("Page.downloadProgress", ["guid", "totalBytes", "receivedBytes", "state"]);
inspectorBackend.registerEvent("Page.interstitialHidden", []);
inspectorBackend.registerEvent("Page.interstitialShown", []);
inspectorBackend.registerEvent("Page.javascriptDialogClosed", ["result", "userInput"]);
inspectorBackend.registerEvent("Page.javascriptDialogOpening", ["url", "message", "type", "hasBrowserHandler", "defaultPrompt"]);
inspectorBackend.registerEvent("Page.lifecycleEvent", ["frameId", "loaderId", "name", "timestamp"]);
inspectorBackend.registerEvent("Page.backForwardCacheNotUsed", ["loaderId", "frameId", "notRestoredExplanations", "notRestoredExplanationsTree"]);
inspectorBackend.registerEvent("Page.loadEventFired", ["timestamp"]);
inspectorBackend.registerEvent("Page.navigatedWithinDocument", ["frameId", "url"]);
inspectorBackend.registerEvent("Page.screencastFrame", ["data", "metadata", "sessionId"]);
inspectorBackend.registerEvent("Page.screencastVisibilityChanged", ["visible"]);
inspectorBackend.registerEvent("Page.windowOpen", ["url", "windowName", "windowFeatures", "userGesture"]);
inspectorBackend.registerEvent("Page.compilationCacheProduced", ["url", "data"]);
inspectorBackend.registerCommand("Page.addScriptToEvaluateOnLoad", [{"name": "scriptSource", "type": "string", "optional": false}], ["identifier"]);
inspectorBackend.registerCommand("Page.addScriptToEvaluateOnNewDocument", [{"name": "source", "type": "string", "optional": false}, {"name": "worldName", "type": "string", "optional": true}, {"name": "includeCommandLineAPI", "type": "boolean", "optional": true}], ["identifier"]);
inspectorBackend.registerCommand("Page.bringToFront", [], []);
inspectorBackend.registerEnum("Page.CaptureScreenshotRequestFormat", {Jpeg: "jpeg", Png: "png", Webp: "webp"});
inspectorBackend.registerCommand("Page.captureScreenshot", [{"name": "format", "type": "string", "optional": true}, {"name": "quality", "type": "number", "optional": true}, {"name": "clip", "type": "object", "optional": true, "typeRef": "Page.Viewport"}, {"name": "fromSurface", "type": "boolean", "optional": true}, {"name": "captureBeyondViewport", "type": "boolean", "optional": true}, {"name": "optimizeForSpeed", "type": "boolean", "optional": true}], ["data"]);
inspectorBackend.registerEnum("Page.CaptureSnapshotRequestFormat", {MHTML: "mhtml"});
inspectorBackend.registerCommand("Page.captureSnapshot", [{"name": "format", "type": "string", "optional": true}], ["data"]);
inspectorBackend.registerCommand("Page.clearDeviceMetricsOverride", [], []);
inspectorBackend.registerCommand("Page.clearDeviceOrientationOverride", [], []);
inspectorBackend.registerCommand("Page.clearGeolocationOverride", [], []);
inspectorBackend.registerCommand("Page.createIsolatedWorld", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "FrameId"}, {"name": "worldName", "type": "string", "optional": true}, {"name": "grantUniveralAccess", "type": "boolean", "optional": true}], ["executionContextId"]);
inspectorBackend.registerCommand("Page.deleteCookie", [{"name": "cookieName", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Page.disable", [], []);
inspectorBackend.registerCommand("Page.enable", [], []);
inspectorBackend.registerCommand("Page.getAppManifest", [], ["url", "errors", "data", "parsed"]);
inspectorBackend.registerCommand("Page.getInstallabilityErrors", [], ["installabilityErrors"]);
inspectorBackend.registerCommand("Page.getManifestIcons", [], ["primaryIcon"]);
inspectorBackend.registerCommand("Page.getAppId", [], ["appId", "recommendedId"]);
inspectorBackend.registerCommand("Page.getAdScriptId", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "FrameId"}], ["adScriptId"]);
inspectorBackend.registerCommand("Page.getCookies", [], ["cookies"]);
inspectorBackend.registerCommand("Page.getFrameTree", [], ["frameTree"]);
inspectorBackend.registerCommand("Page.getLayoutMetrics", [], ["layoutViewport", "visualViewport", "contentSize", "cssLayoutViewport", "cssVisualViewport", "cssContentSize"]);
inspectorBackend.registerCommand("Page.getNavigationHistory", [], ["currentIndex", "entries"]);
inspectorBackend.registerCommand("Page.resetNavigationHistory", [], []);
inspectorBackend.registerCommand("Page.getResourceContent", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "FrameId"}, {"name": "url", "type": "string", "optional": false}], ["content", "base64Encoded"]);
inspectorBackend.registerCommand("Page.getResourceTree", [], ["frameTree"]);
inspectorBackend.registerCommand("Page.handleJavaScriptDialog", [{"name": "accept", "type": "boolean", "optional": false}, {"name": "promptText", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Page.navigate", [{"name": "url", "type": "string", "optional": false}, {"name": "referrer", "type": "string", "optional": true}, {"name": "transitionType", "type": "string", "optional": true, "typeRef": "TransitionType"}, {"name": "frameId", "type": "string", "optional": true, "typeRef": "FrameId"}, {"name": "referrerPolicy", "type": "string", "optional": true, "typeRef": "ReferrerPolicy"}], ["frameId", "loaderId", "errorText"]);
inspectorBackend.registerCommand("Page.navigateToHistoryEntry", [{"name": "entryId", "type": "number", "optional": false}], []);
inspectorBackend.registerEnum("Page.PrintToPDFRequestTransferMode", {ReturnAsBase64: "ReturnAsBase64", ReturnAsStream: "ReturnAsStream"});
inspectorBackend.registerCommand("Page.printToPDF", [{"name": "landscape", "type": "boolean", "optional": true}, {"name": "displayHeaderFooter", "type": "boolean", "optional": true}, {"name": "printBackground", "type": "boolean", "optional": true}, {"name": "scale", "type": "number", "optional": true}, {"name": "paperWidth", "type": "number", "optional": true}, {"name": "paperHeight", "type": "number", "optional": true}, {"name": "marginTop", "type": "number", "optional": true}, {"name": "marginBottom", "type": "number", "optional": true}, {"name": "marginLeft", "type": "number", "optional": true}, {"name": "marginRight", "type": "number", "optional": true}, {"name": "pageRanges", "type": "string", "optional": true}, {"name": "headerTemplate", "type": "string", "optional": true}, {"name": "footerTemplate", "type": "string", "optional": true}, {"name": "preferCSSPageSize", "type": "boolean", "optional": true}, {"name": "transferMode", "type": "string", "optional": true}], ["data", "stream"]);
inspectorBackend.registerCommand("Page.reload", [{"name": "ignoreCache", "type": "boolean", "optional": true}, {"name": "scriptToEvaluateOnLoad", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Page.removeScriptToEvaluateOnLoad", [{"name": "identifier", "type": "string", "optional": false, "typeRef": "ScriptIdentifier"}], []);
inspectorBackend.registerCommand("Page.removeScriptToEvaluateOnNewDocument", [{"name": "identifier", "type": "string", "optional": false, "typeRef": "ScriptIdentifier"}], []);
inspectorBackend.registerCommand("Page.screencastFrameAck", [{"name": "sessionId", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Page.searchInResource", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "FrameId"}, {"name": "url", "type": "string", "optional": false}, {"name": "query", "type": "string", "optional": false}, {"name": "caseSensitive", "type": "boolean", "optional": true}, {"name": "isRegex", "type": "boolean", "optional": true}], ["result"]);
inspectorBackend.registerCommand("Page.setAdBlockingEnabled", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Page.setBypassCSP", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Page.getPermissionsPolicyState", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "FrameId"}], ["states"]);
inspectorBackend.registerCommand("Page.getOriginTrials", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "FrameId"}], ["originTrials"]);
inspectorBackend.registerCommand("Page.setDeviceMetricsOverride", [{"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}, {"name": "deviceScaleFactor", "type": "number", "optional": false}, {"name": "mobile", "type": "boolean", "optional": false}, {"name": "scale", "type": "number", "optional": true}, {"name": "screenWidth", "type": "number", "optional": true}, {"name": "screenHeight", "type": "number", "optional": true}, {"name": "positionX", "type": "number", "optional": true}, {"name": "positionY", "type": "number", "optional": true}, {"name": "dontSetVisibleSize", "type": "boolean", "optional": true}, {"name": "screenOrientation", "type": "object", "optional": true, "typeRef": "Emulation.ScreenOrientation"}, {"name": "viewport", "type": "object", "optional": true, "typeRef": "Page.Viewport"}], []);
inspectorBackend.registerCommand("Page.setDeviceOrientationOverride", [{"name": "alpha", "type": "number", "optional": false}, {"name": "beta", "type": "number", "optional": false}, {"name": "gamma", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Page.setFontFamilies", [{"name": "fontFamilies", "type": "object", "optional": false, "typeRef": "Page.FontFamilies"}, {"name": "forScripts", "type": "array", "optional": true}], []);
inspectorBackend.registerCommand("Page.setFontSizes", [{"name": "fontSizes", "type": "object", "optional": false, "typeRef": "Page.FontSizes"}], []);
inspectorBackend.registerCommand("Page.setDocumentContent", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "FrameId"}, {"name": "html", "type": "string", "optional": false}], []);
inspectorBackend.registerEnum("Page.SetDownloadBehaviorRequestBehavior", {Deny: "deny", Allow: "allow", Default: "default"});
inspectorBackend.registerCommand("Page.setDownloadBehavior", [{"name": "behavior", "type": "string", "optional": false}, {"name": "downloadPath", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Page.setGeolocationOverride", [{"name": "latitude", "type": "number", "optional": true}, {"name": "longitude", "type": "number", "optional": true}, {"name": "accuracy", "type": "number", "optional": true}], []);
inspectorBackend.registerCommand("Page.setLifecycleEventsEnabled", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerEnum("Page.SetTouchEmulationEnabledRequestConfiguration", {Mobile: "mobile", Desktop: "desktop"});
inspectorBackend.registerCommand("Page.setTouchEmulationEnabled", [{"name": "enabled", "type": "boolean", "optional": false}, {"name": "configuration", "type": "string", "optional": true}], []);
inspectorBackend.registerEnum("Page.StartScreencastRequestFormat", {Jpeg: "jpeg", Png: "png"});
inspectorBackend.registerCommand("Page.startScreencast", [{"name": "format", "type": "string", "optional": true}, {"name": "quality", "type": "number", "optional": true}, {"name": "maxWidth", "type": "number", "optional": true}, {"name": "maxHeight", "type": "number", "optional": true}, {"name": "everyNthFrame", "type": "number", "optional": true}], []);
inspectorBackend.registerCommand("Page.stopLoading", [], []);
inspectorBackend.registerCommand("Page.crash", [], []);
inspectorBackend.registerCommand("Page.close", [], []);
inspectorBackend.registerEnum("Page.SetWebLifecycleStateRequestState", {Frozen: "frozen", Active: "active"});
inspectorBackend.registerCommand("Page.setWebLifecycleState", [{"name": "state", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Page.stopScreencast", [], []);
inspectorBackend.registerCommand("Page.produceCompilationCache", [{"name": "scripts", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Page.addCompilationCache", [{"name": "url", "type": "string", "optional": false}, {"name": "data", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Page.clearCompilationCache", [], []);
inspectorBackend.registerCommand("Page.setSPCTransactionMode", [{"name": "mode", "type": "string", "optional": false, "typeRef": "AutoResponseMode"}], []);
inspectorBackend.registerCommand("Page.setRPHRegistrationMode", [{"name": "mode", "type": "string", "optional": false, "typeRef": "AutoResponseMode"}], []);
inspectorBackend.registerCommand("Page.generateTestReport", [{"name": "message", "type": "string", "optional": false}, {"name": "group", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Page.waitForDebugger", [], []);
inspectorBackend.registerCommand("Page.setInterceptFileChooserDialog", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Page.setPrerenderingAllowed", [{"name": "isAllowed", "type": "boolean", "optional": false}], []);
inspectorBackend.registerType("Page.AdFrameStatus", [{"name": "adFrameType", "type": "string", "optional": false}, {"name": "explanations", "type": "array", "optional": true}]);
inspectorBackend.registerType("Page.AdScriptId", [{"name": "scriptId", "type": "string", "optional": false}, {"name": "debuggerId", "type": "string", "optional": false}]);
inspectorBackend.registerType("Page.PermissionsPolicyBlockLocator", [{"name": "frameId", "type": "string", "optional": false}, {"name": "blockReason", "type": "string", "optional": false}]);
inspectorBackend.registerType("Page.PermissionsPolicyFeatureState", [{"name": "feature", "type": "string", "optional": false}, {"name": "allowed", "type": "boolean", "optional": false}, {"name": "locator", "type": "object", "optional": true}]);
inspectorBackend.registerType("Page.OriginTrialToken", [{"name": "origin", "type": "string", "optional": false}, {"name": "matchSubDomains", "type": "boolean", "optional": false}, {"name": "trialName", "type": "string", "optional": false}, {"name": "expiryTime", "type": "number", "optional": false}, {"name": "isThirdParty", "type": "boolean", "optional": false}, {"name": "usageRestriction", "type": "string", "optional": false}]);
inspectorBackend.registerType("Page.OriginTrialTokenWithStatus", [{"name": "rawTokenText", "type": "string", "optional": false}, {"name": "parsedToken", "type": "object", "optional": true}, {"name": "status", "type": "string", "optional": false}]);
inspectorBackend.registerType("Page.OriginTrial", [{"name": "trialName", "type": "string", "optional": false}, {"name": "status", "type": "string", "optional": false}, {"name": "tokensWithStatus", "type": "array", "optional": false}]);
inspectorBackend.registerType("Page.Frame", [{"name": "id", "type": "string", "optional": false}, {"name": "parentId", "type": "string", "optional": true}, {"name": "loaderId", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": true}, {"name": "url", "type": "string", "optional": false}, {"name": "urlFragment", "type": "string", "optional": true}, {"name": "domainAndRegistry", "type": "string", "optional": false}, {"name": "securityOrigin", "type": "string", "optional": false}, {"name": "mimeType", "type": "string", "optional": false}, {"name": "unreachableUrl", "type": "string", "optional": true}, {"name": "adFrameStatus", "type": "object", "optional": true}, {"name": "secureContextType", "type": "string", "optional": false}, {"name": "crossOriginIsolatedContextType", "type": "string", "optional": false}, {"name": "gatedAPIFeatures", "type": "array", "optional": false}]);
inspectorBackend.registerType("Page.FrameResource", [{"name": "url", "type": "string", "optional": false}, {"name": "type", "type": "string", "optional": false}, {"name": "mimeType", "type": "string", "optional": false}, {"name": "lastModified", "type": "number", "optional": true}, {"name": "contentSize", "type": "number", "optional": true}, {"name": "failed", "type": "boolean", "optional": true}, {"name": "canceled", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("Page.FrameResourceTree", [{"name": "frame", "type": "object", "optional": false}, {"name": "childFrames", "type": "array", "optional": true}, {"name": "resources", "type": "array", "optional": false}]);
inspectorBackend.registerType("Page.FrameTree", [{"name": "frame", "type": "object", "optional": false}, {"name": "childFrames", "type": "array", "optional": true}]);
inspectorBackend.registerType("Page.NavigationEntry", [{"name": "id", "type": "number", "optional": false}, {"name": "url", "type": "string", "optional": false}, {"name": "userTypedURL", "type": "string", "optional": false}, {"name": "title", "type": "string", "optional": false}, {"name": "transitionType", "type": "string", "optional": false}]);
inspectorBackend.registerType("Page.ScreencastFrameMetadata", [{"name": "offsetTop", "type": "number", "optional": false}, {"name": "pageScaleFactor", "type": "number", "optional": false}, {"name": "deviceWidth", "type": "number", "optional": false}, {"name": "deviceHeight", "type": "number", "optional": false}, {"name": "scrollOffsetX", "type": "number", "optional": false}, {"name": "scrollOffsetY", "type": "number", "optional": false}, {"name": "timestamp", "type": "number", "optional": true}]);
inspectorBackend.registerType("Page.AppManifestError", [{"name": "message", "type": "string", "optional": false}, {"name": "critical", "type": "number", "optional": false}, {"name": "line", "type": "number", "optional": false}, {"name": "column", "type": "number", "optional": false}]);
inspectorBackend.registerType("Page.AppManifestParsedProperties", [{"name": "scope", "type": "string", "optional": false}]);
inspectorBackend.registerType("Page.LayoutViewport", [{"name": "pageX", "type": "number", "optional": false}, {"name": "pageY", "type": "number", "optional": false}, {"name": "clientWidth", "type": "number", "optional": false}, {"name": "clientHeight", "type": "number", "optional": false}]);
inspectorBackend.registerType("Page.VisualViewport", [{"name": "offsetX", "type": "number", "optional": false}, {"name": "offsetY", "type": "number", "optional": false}, {"name": "pageX", "type": "number", "optional": false}, {"name": "pageY", "type": "number", "optional": false}, {"name": "clientWidth", "type": "number", "optional": false}, {"name": "clientHeight", "type": "number", "optional": false}, {"name": "scale", "type": "number", "optional": false}, {"name": "zoom", "type": "number", "optional": true}]);
inspectorBackend.registerType("Page.Viewport", [{"name": "x", "type": "number", "optional": false}, {"name": "y", "type": "number", "optional": false}, {"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}, {"name": "scale", "type": "number", "optional": false}]);
inspectorBackend.registerType("Page.FontFamilies", [{"name": "standard", "type": "string", "optional": true}, {"name": "fixed", "type": "string", "optional": true}, {"name": "serif", "type": "string", "optional": true}, {"name": "sansSerif", "type": "string", "optional": true}, {"name": "cursive", "type": "string", "optional": true}, {"name": "fantasy", "type": "string", "optional": true}, {"name": "math", "type": "string", "optional": true}]);
inspectorBackend.registerType("Page.ScriptFontFamilies", [{"name": "script", "type": "string", "optional": false}, {"name": "fontFamilies", "type": "object", "optional": false}]);
inspectorBackend.registerType("Page.FontSizes", [{"name": "standard", "type": "number", "optional": true}, {"name": "fixed", "type": "number", "optional": true}]);
inspectorBackend.registerType("Page.InstallabilityErrorArgument", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("Page.InstallabilityError", [{"name": "errorId", "type": "string", "optional": false}, {"name": "errorArguments", "type": "array", "optional": false}]);
inspectorBackend.registerType("Page.CompilationCacheParams", [{"name": "url", "type": "string", "optional": false}, {"name": "eager", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("Page.BackForwardCacheNotRestoredExplanation", [{"name": "type", "type": "string", "optional": false}, {"name": "reason", "type": "string", "optional": false}, {"name": "context", "type": "string", "optional": true}]);
inspectorBackend.registerType("Page.BackForwardCacheNotRestoredExplanationTree", [{"name": "url", "type": "string", "optional": false}, {"name": "explanations", "type": "array", "optional": false}, {"name": "children", "type": "array", "optional": false}]);

// Performance.
inspectorBackend.registerEvent("Performance.metrics", ["metrics", "title"]);
inspectorBackend.registerCommand("Performance.disable", [], []);
inspectorBackend.registerEnum("Performance.EnableRequestTimeDomain", {TimeTicks: "timeTicks", ThreadTicks: "threadTicks"});
inspectorBackend.registerCommand("Performance.enable", [{"name": "timeDomain", "type": "string", "optional": true}], []);
inspectorBackend.registerEnum("Performance.SetTimeDomainRequestTimeDomain", {TimeTicks: "timeTicks", ThreadTicks: "threadTicks"});
inspectorBackend.registerCommand("Performance.setTimeDomain", [{"name": "timeDomain", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Performance.getMetrics", [], ["metrics"]);
inspectorBackend.registerType("Performance.Metric", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "number", "optional": false}]);

// PerformanceTimeline.
inspectorBackend.registerEvent("PerformanceTimeline.timelineEventAdded", ["event"]);
inspectorBackend.registerCommand("PerformanceTimeline.enable", [{"name": "eventTypes", "type": "array", "optional": false}], []);
inspectorBackend.registerType("PerformanceTimeline.LargestContentfulPaint", [{"name": "renderTime", "type": "number", "optional": false}, {"name": "loadTime", "type": "number", "optional": false}, {"name": "size", "type": "number", "optional": false}, {"name": "elementId", "type": "string", "optional": true}, {"name": "url", "type": "string", "optional": true}, {"name": "nodeId", "type": "number", "optional": true}]);
inspectorBackend.registerType("PerformanceTimeline.LayoutShiftAttribution", [{"name": "previousRect", "type": "object", "optional": false}, {"name": "currentRect", "type": "object", "optional": false}, {"name": "nodeId", "type": "number", "optional": true}]);
inspectorBackend.registerType("PerformanceTimeline.LayoutShift", [{"name": "value", "type": "number", "optional": false}, {"name": "hadRecentInput", "type": "boolean", "optional": false}, {"name": "lastInputTime", "type": "number", "optional": false}, {"name": "sources", "type": "array", "optional": false}]);
inspectorBackend.registerType("PerformanceTimeline.TimelineEvent", [{"name": "frameId", "type": "string", "optional": false}, {"name": "type", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "time", "type": "number", "optional": false}, {"name": "duration", "type": "number", "optional": true}, {"name": "lcpDetails", "type": "object", "optional": true}, {"name": "layoutShiftDetails", "type": "object", "optional": true}]);

// Security.
inspectorBackend.registerEnum("Security.MixedContentType", {Blockable: "blockable", OptionallyBlockable: "optionally-blockable", None: "none"});
inspectorBackend.registerEnum("Security.SecurityState", {Unknown: "unknown", Neutral: "neutral", Insecure: "insecure", Secure: "secure", Info: "info", InsecureBroken: "insecure-broken"});
inspectorBackend.registerEnum("Security.SafetyTipStatus", {BadReputation: "badReputation", Lookalike: "lookalike"});
inspectorBackend.registerEnum("Security.CertificateErrorAction", {Continue: "continue", Cancel: "cancel"});
inspectorBackend.registerEvent("Security.certificateError", ["eventId", "errorType", "requestURL"]);
inspectorBackend.registerEvent("Security.visibleSecurityStateChanged", ["visibleSecurityState"]);
inspectorBackend.registerEvent("Security.securityStateChanged", ["securityState", "schemeIsCryptographic", "explanations", "insecureContentStatus", "summary"]);
inspectorBackend.registerCommand("Security.disable", [], []);
inspectorBackend.registerCommand("Security.enable", [], []);
inspectorBackend.registerCommand("Security.setIgnoreCertificateErrors", [{"name": "ignore", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Security.handleCertificateError", [{"name": "eventId", "type": "number", "optional": false}, {"name": "action", "type": "string", "optional": false, "typeRef": "CertificateErrorAction"}], []);
inspectorBackend.registerCommand("Security.setOverrideCertificateErrors", [{"name": "override", "type": "boolean", "optional": false}], []);
inspectorBackend.registerType("Security.CertificateSecurityState", [{"name": "protocol", "type": "string", "optional": false}, {"name": "keyExchange", "type": "string", "optional": false}, {"name": "keyExchangeGroup", "type": "string", "optional": true}, {"name": "cipher", "type": "string", "optional": false}, {"name": "mac", "type": "string", "optional": true}, {"name": "certificate", "type": "array", "optional": false}, {"name": "subjectName", "type": "string", "optional": false}, {"name": "issuer", "type": "string", "optional": false}, {"name": "validFrom", "type": "number", "optional": false}, {"name": "validTo", "type": "number", "optional": false}, {"name": "certificateNetworkError", "type": "string", "optional": true}, {"name": "certificateHasWeakSignature", "type": "boolean", "optional": false}, {"name": "certificateHasSha1Signature", "type": "boolean", "optional": false}, {"name": "modernSSL", "type": "boolean", "optional": false}, {"name": "obsoleteSslProtocol", "type": "boolean", "optional": false}, {"name": "obsoleteSslKeyExchange", "type": "boolean", "optional": false}, {"name": "obsoleteSslCipher", "type": "boolean", "optional": false}, {"name": "obsoleteSslSignature", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("Security.SafetyTipInfo", [{"name": "safetyTipStatus", "type": "string", "optional": false}, {"name": "safeUrl", "type": "string", "optional": true}]);
inspectorBackend.registerType("Security.VisibleSecurityState", [{"name": "securityState", "type": "string", "optional": false}, {"name": "certificateSecurityState", "type": "object", "optional": true}, {"name": "safetyTipInfo", "type": "object", "optional": true}, {"name": "securityStateIssueIds", "type": "array", "optional": false}]);
inspectorBackend.registerType("Security.SecurityStateExplanation", [{"name": "securityState", "type": "string", "optional": false}, {"name": "title", "type": "string", "optional": false}, {"name": "summary", "type": "string", "optional": false}, {"name": "description", "type": "string", "optional": false}, {"name": "mixedContentType", "type": "string", "optional": false}, {"name": "certificate", "type": "array", "optional": false}, {"name": "recommendations", "type": "array", "optional": true}]);
inspectorBackend.registerType("Security.InsecureContentStatus", [{"name": "ranMixedContent", "type": "boolean", "optional": false}, {"name": "displayedMixedContent", "type": "boolean", "optional": false}, {"name": "containedMixedForm", "type": "boolean", "optional": false}, {"name": "ranContentWithCertErrors", "type": "boolean", "optional": false}, {"name": "displayedContentWithCertErrors", "type": "boolean", "optional": false}, {"name": "ranInsecureContentStyle", "type": "string", "optional": false}, {"name": "displayedInsecureContentStyle", "type": "string", "optional": false}]);

// ServiceWorker.
inspectorBackend.registerEnum("ServiceWorker.ServiceWorkerVersionRunningStatus", {Stopped: "stopped", Starting: "starting", Running: "running", Stopping: "stopping"});
inspectorBackend.registerEnum("ServiceWorker.ServiceWorkerVersionStatus", {New: "new", Installing: "installing", Installed: "installed", Activating: "activating", Activated: "activated", Redundant: "redundant"});
inspectorBackend.registerEvent("ServiceWorker.workerErrorReported", ["errorMessage"]);
inspectorBackend.registerEvent("ServiceWorker.workerRegistrationUpdated", ["registrations"]);
inspectorBackend.registerEvent("ServiceWorker.workerVersionUpdated", ["versions"]);
inspectorBackend.registerCommand("ServiceWorker.deliverPushMessage", [{"name": "origin", "type": "string", "optional": false}, {"name": "registrationId", "type": "string", "optional": false, "typeRef": "RegistrationID"}, {"name": "data", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.disable", [], []);
inspectorBackend.registerCommand("ServiceWorker.dispatchSyncEvent", [{"name": "origin", "type": "string", "optional": false}, {"name": "registrationId", "type": "string", "optional": false, "typeRef": "RegistrationID"}, {"name": "tag", "type": "string", "optional": false}, {"name": "lastChance", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.dispatchPeriodicSyncEvent", [{"name": "origin", "type": "string", "optional": false}, {"name": "registrationId", "type": "string", "optional": false, "typeRef": "RegistrationID"}, {"name": "tag", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.enable", [], []);
inspectorBackend.registerCommand("ServiceWorker.inspectWorker", [{"name": "versionId", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.setForceUpdateOnPageLoad", [{"name": "forceUpdateOnPageLoad", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.skipWaiting", [{"name": "scopeURL", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.startWorker", [{"name": "scopeURL", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.stopAllWorkers", [], []);
inspectorBackend.registerCommand("ServiceWorker.stopWorker", [{"name": "versionId", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.unregister", [{"name": "scopeURL", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("ServiceWorker.updateRegistration", [{"name": "scopeURL", "type": "string", "optional": false}], []);
inspectorBackend.registerType("ServiceWorker.ServiceWorkerRegistration", [{"name": "registrationId", "type": "string", "optional": false}, {"name": "scopeURL", "type": "string", "optional": false}, {"name": "isDeleted", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("ServiceWorker.ServiceWorkerVersion", [{"name": "versionId", "type": "string", "optional": false}, {"name": "registrationId", "type": "string", "optional": false}, {"name": "scriptURL", "type": "string", "optional": false}, {"name": "runningStatus", "type": "string", "optional": false}, {"name": "status", "type": "string", "optional": false}, {"name": "scriptLastModified", "type": "number", "optional": true}, {"name": "scriptResponseTime", "type": "number", "optional": true}, {"name": "controlledClients", "type": "array", "optional": true}, {"name": "targetId", "type": "string", "optional": true}]);
inspectorBackend.registerType("ServiceWorker.ServiceWorkerErrorMessage", [{"name": "errorMessage", "type": "string", "optional": false}, {"name": "registrationId", "type": "string", "optional": false}, {"name": "versionId", "type": "string", "optional": false}, {"name": "sourceURL", "type": "string", "optional": false}, {"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": false}]);

// Storage.
inspectorBackend.registerEnum("Storage.StorageType", {Appcache: "appcache", Cookies: "cookies", File_systems: "file_systems", Indexeddb: "indexeddb", Local_storage: "local_storage", Shader_cache: "shader_cache", Websql: "websql", Service_workers: "service_workers", Cache_storage: "cache_storage", Interest_groups: "interest_groups", Shared_storage: "shared_storage", Storage_buckets: "storage_buckets", All: "all", Other: "other"});
inspectorBackend.registerEnum("Storage.InterestGroupAccessType", {Join: "join", Leave: "leave", Update: "update", Loaded: "loaded", Bid: "bid", Win: "win"});
inspectorBackend.registerEnum("Storage.SharedStorageAccessType", {DocumentAddModule: "documentAddModule", DocumentSelectURL: "documentSelectURL", DocumentRun: "documentRun", DocumentSet: "documentSet", DocumentAppend: "documentAppend", DocumentDelete: "documentDelete", DocumentClear: "documentClear", WorkletSet: "workletSet", WorkletAppend: "workletAppend", WorkletDelete: "workletDelete", WorkletClear: "workletClear", WorkletGet: "workletGet", WorkletKeys: "workletKeys", WorkletEntries: "workletEntries", WorkletLength: "workletLength", WorkletRemainingBudget: "workletRemainingBudget"});
inspectorBackend.registerEnum("Storage.StorageBucketsDurability", {Relaxed: "relaxed", Strict: "strict"});
inspectorBackend.registerEvent("Storage.cacheStorageContentUpdated", ["origin", "storageKey", "bucketId", "cacheName"]);
inspectorBackend.registerEvent("Storage.cacheStorageListUpdated", ["origin", "storageKey", "bucketId"]);
inspectorBackend.registerEvent("Storage.indexedDBContentUpdated", ["origin", "storageKey", "bucketId", "databaseName", "objectStoreName"]);
inspectorBackend.registerEvent("Storage.indexedDBListUpdated", ["origin", "storageKey", "bucketId"]);
inspectorBackend.registerEvent("Storage.interestGroupAccessed", ["accessTime", "type", "ownerOrigin", "name"]);
inspectorBackend.registerEvent("Storage.sharedStorageAccessed", ["accessTime", "type", "mainFrameId", "ownerOrigin", "params"]);
inspectorBackend.registerEvent("Storage.storageBucketCreatedOrUpdated", ["bucketInfo"]);
inspectorBackend.registerEvent("Storage.storageBucketDeleted", ["bucketId"]);
inspectorBackend.registerCommand("Storage.getStorageKeyForFrame", [{"name": "frameId", "type": "string", "optional": false, "typeRef": "Page.FrameId"}], ["storageKey"]);
inspectorBackend.registerCommand("Storage.clearDataForOrigin", [{"name": "origin", "type": "string", "optional": false}, {"name": "storageTypes", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.clearDataForStorageKey", [{"name": "storageKey", "type": "string", "optional": false}, {"name": "storageTypes", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.getCookies", [{"name": "browserContextId", "type": "string", "optional": true, "typeRef": "Browser.BrowserContextID"}], ["cookies"]);
inspectorBackend.registerCommand("Storage.setCookies", [{"name": "cookies", "type": "array", "optional": false}, {"name": "browserContextId", "type": "string", "optional": true, "typeRef": "Browser.BrowserContextID"}], []);
inspectorBackend.registerCommand("Storage.clearCookies", [{"name": "browserContextId", "type": "string", "optional": true, "typeRef": "Browser.BrowserContextID"}], []);
inspectorBackend.registerCommand("Storage.getUsageAndQuota", [{"name": "origin", "type": "string", "optional": false}], ["usage", "quota", "overrideActive", "usageBreakdown"]);
inspectorBackend.registerCommand("Storage.overrideQuotaForOrigin", [{"name": "origin", "type": "string", "optional": false}, {"name": "quotaSize", "type": "number", "optional": true}], []);
inspectorBackend.registerCommand("Storage.trackCacheStorageForOrigin", [{"name": "origin", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.trackCacheStorageForStorageKey", [{"name": "storageKey", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.trackIndexedDBForOrigin", [{"name": "origin", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.trackIndexedDBForStorageKey", [{"name": "storageKey", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.untrackCacheStorageForOrigin", [{"name": "origin", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.untrackCacheStorageForStorageKey", [{"name": "storageKey", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.untrackIndexedDBForOrigin", [{"name": "origin", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.untrackIndexedDBForStorageKey", [{"name": "storageKey", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.getTrustTokens", [], ["tokens"]);
inspectorBackend.registerCommand("Storage.clearTrustTokens", [{"name": "issuerOrigin", "type": "string", "optional": false}], ["didDeleteTokens"]);
inspectorBackend.registerCommand("Storage.getInterestGroupDetails", [{"name": "ownerOrigin", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}], ["details"]);
inspectorBackend.registerCommand("Storage.setInterestGroupTracking", [{"name": "enable", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Storage.getSharedStorageMetadata", [{"name": "ownerOrigin", "type": "string", "optional": false}], ["metadata"]);
inspectorBackend.registerCommand("Storage.getSharedStorageEntries", [{"name": "ownerOrigin", "type": "string", "optional": false}], ["entries"]);
inspectorBackend.registerCommand("Storage.setSharedStorageEntry", [{"name": "ownerOrigin", "type": "string", "optional": false}, {"name": "key", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}, {"name": "ignoreIfPresent", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Storage.deleteSharedStorageEntry", [{"name": "ownerOrigin", "type": "string", "optional": false}, {"name": "key", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.clearSharedStorageEntries", [{"name": "ownerOrigin", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.resetSharedStorageBudget", [{"name": "ownerOrigin", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Storage.setSharedStorageTracking", [{"name": "enable", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Storage.setStorageBucketTracking", [{"name": "storageKey", "type": "string", "optional": false}, {"name": "enable", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Storage.deleteStorageBucket", [{"name": "bucket", "type": "object", "optional": false, "typeRef": "Storage.StorageBucket"}], []);
inspectorBackend.registerCommand("Storage.runBounceTrackingMitigations", [], ["deletedSites"]);
inspectorBackend.registerType("Storage.UsageForType", [{"name": "storageType", "type": "string", "optional": false}, {"name": "usage", "type": "number", "optional": false}]);
inspectorBackend.registerType("Storage.TrustTokens", [{"name": "issuerOrigin", "type": "string", "optional": false}, {"name": "count", "type": "number", "optional": false}]);
inspectorBackend.registerType("Storage.InterestGroupAd", [{"name": "renderUrl", "type": "string", "optional": false}, {"name": "metadata", "type": "string", "optional": true}]);
inspectorBackend.registerType("Storage.InterestGroupDetails", [{"name": "ownerOrigin", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "expirationTime", "type": "number", "optional": false}, {"name": "joiningOrigin", "type": "string", "optional": false}, {"name": "biddingUrl", "type": "string", "optional": true}, {"name": "biddingWasmHelperUrl", "type": "string", "optional": true}, {"name": "updateUrl", "type": "string", "optional": true}, {"name": "trustedBiddingSignalsUrl", "type": "string", "optional": true}, {"name": "trustedBiddingSignalsKeys", "type": "array", "optional": false}, {"name": "userBiddingSignals", "type": "string", "optional": true}, {"name": "ads", "type": "array", "optional": false}, {"name": "adComponents", "type": "array", "optional": false}]);
inspectorBackend.registerType("Storage.SharedStorageEntry", [{"name": "key", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("Storage.SharedStorageMetadata", [{"name": "creationTime", "type": "number", "optional": false}, {"name": "length", "type": "number", "optional": false}, {"name": "remainingBudget", "type": "number", "optional": false}]);
inspectorBackend.registerType("Storage.SharedStorageReportingMetadata", [{"name": "eventType", "type": "string", "optional": false}, {"name": "reportingUrl", "type": "string", "optional": false}]);
inspectorBackend.registerType("Storage.SharedStorageUrlWithMetadata", [{"name": "url", "type": "string", "optional": false}, {"name": "reportingMetadata", "type": "array", "optional": false}]);
inspectorBackend.registerType("Storage.SharedStorageAccessParams", [{"name": "scriptSourceUrl", "type": "string", "optional": true}, {"name": "operationName", "type": "string", "optional": true}, {"name": "serializedData", "type": "string", "optional": true}, {"name": "urlsWithMetadata", "type": "array", "optional": true}, {"name": "key", "type": "string", "optional": true}, {"name": "value", "type": "string", "optional": true}, {"name": "ignoreIfPresent", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("Storage.StorageBucket", [{"name": "storageKey", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": true}]);
inspectorBackend.registerType("Storage.StorageBucketInfo", [{"name": "bucket", "type": "object", "optional": false}, {"name": "id", "type": "string", "optional": false}, {"name": "expiration", "type": "number", "optional": false}, {"name": "quota", "type": "number", "optional": false}, {"name": "persistent", "type": "boolean", "optional": false}, {"name": "durability", "type": "string", "optional": false}]);

// SystemInfo.
inspectorBackend.registerEnum("SystemInfo.SubsamplingFormat", {Yuv420: "yuv420", Yuv422: "yuv422", Yuv444: "yuv444"});
inspectorBackend.registerEnum("SystemInfo.ImageType", {Jpeg: "jpeg", Webp: "webp", Unknown: "unknown"});
inspectorBackend.registerCommand("SystemInfo.getInfo", [], ["gpu", "modelName", "modelVersion", "commandLine"]);
inspectorBackend.registerCommand("SystemInfo.getFeatureState", [{"name": "featureState", "type": "string", "optional": false}], ["featureEnabled"]);
inspectorBackend.registerCommand("SystemInfo.getProcessInfo", [], ["processInfo"]);
inspectorBackend.registerType("SystemInfo.GPUDevice", [{"name": "vendorId", "type": "number", "optional": false}, {"name": "deviceId", "type": "number", "optional": false}, {"name": "subSysId", "type": "number", "optional": true}, {"name": "revision", "type": "number", "optional": true}, {"name": "vendorString", "type": "string", "optional": false}, {"name": "deviceString", "type": "string", "optional": false}, {"name": "driverVendor", "type": "string", "optional": false}, {"name": "driverVersion", "type": "string", "optional": false}]);
inspectorBackend.registerType("SystemInfo.Size", [{"name": "width", "type": "number", "optional": false}, {"name": "height", "type": "number", "optional": false}]);
inspectorBackend.registerType("SystemInfo.VideoDecodeAcceleratorCapability", [{"name": "profile", "type": "string", "optional": false}, {"name": "maxResolution", "type": "object", "optional": false}, {"name": "minResolution", "type": "object", "optional": false}]);
inspectorBackend.registerType("SystemInfo.VideoEncodeAcceleratorCapability", [{"name": "profile", "type": "string", "optional": false}, {"name": "maxResolution", "type": "object", "optional": false}, {"name": "maxFramerateNumerator", "type": "number", "optional": false}, {"name": "maxFramerateDenominator", "type": "number", "optional": false}]);
inspectorBackend.registerType("SystemInfo.ImageDecodeAcceleratorCapability", [{"name": "imageType", "type": "string", "optional": false}, {"name": "maxDimensions", "type": "object", "optional": false}, {"name": "minDimensions", "type": "object", "optional": false}, {"name": "subsamplings", "type": "array", "optional": false}]);
inspectorBackend.registerType("SystemInfo.GPUInfo", [{"name": "devices", "type": "array", "optional": false}, {"name": "auxAttributes", "type": "object", "optional": true}, {"name": "featureStatus", "type": "object", "optional": true}, {"name": "driverBugWorkarounds", "type": "array", "optional": false}, {"name": "videoDecoding", "type": "array", "optional": false}, {"name": "videoEncoding", "type": "array", "optional": false}, {"name": "imageDecoding", "type": "array", "optional": false}]);
inspectorBackend.registerType("SystemInfo.ProcessInfo", [{"name": "type", "type": "string", "optional": false}, {"name": "id", "type": "number", "optional": false}, {"name": "cpuTime", "type": "number", "optional": false}]);

// Target.
inspectorBackend.registerEvent("Target.attachedToTarget", ["sessionId", "targetInfo", "waitingForDebugger"]);
inspectorBackend.registerEvent("Target.detachedFromTarget", ["sessionId", "targetId"]);
inspectorBackend.registerEvent("Target.receivedMessageFromTarget", ["sessionId", "message", "targetId"]);
inspectorBackend.registerEvent("Target.targetCreated", ["targetInfo"]);
inspectorBackend.registerEvent("Target.targetDestroyed", ["targetId"]);
inspectorBackend.registerEvent("Target.targetCrashed", ["targetId", "status", "errorCode"]);
inspectorBackend.registerEvent("Target.targetInfoChanged", ["targetInfo"]);
inspectorBackend.registerCommand("Target.activateTarget", [{"name": "targetId", "type": "string", "optional": false, "typeRef": "TargetID"}], []);
inspectorBackend.registerCommand("Target.attachToTarget", [{"name": "targetId", "type": "string", "optional": false, "typeRef": "TargetID"}, {"name": "flatten", "type": "boolean", "optional": true}], ["sessionId"]);
inspectorBackend.registerCommand("Target.attachToBrowserTarget", [], ["sessionId"]);
inspectorBackend.registerCommand("Target.closeTarget", [{"name": "targetId", "type": "string", "optional": false, "typeRef": "TargetID"}], ["success"]);
inspectorBackend.registerCommand("Target.exposeDevToolsProtocol", [{"name": "targetId", "type": "string", "optional": false, "typeRef": "TargetID"}, {"name": "bindingName", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Target.createBrowserContext", [{"name": "disposeOnDetach", "type": "boolean", "optional": true}, {"name": "proxyServer", "type": "string", "optional": true}, {"name": "proxyBypassList", "type": "string", "optional": true}, {"name": "originsWithUniversalNetworkAccess", "type": "array", "optional": true}], ["browserContextId"]);
inspectorBackend.registerCommand("Target.getBrowserContexts", [], ["browserContextIds"]);
inspectorBackend.registerCommand("Target.createTarget", [{"name": "url", "type": "string", "optional": false}, {"name": "width", "type": "number", "optional": true}, {"name": "height", "type": "number", "optional": true}, {"name": "browserContextId", "type": "string", "optional": true, "typeRef": "Browser.BrowserContextID"}, {"name": "enableBeginFrameControl", "type": "boolean", "optional": true}, {"name": "newWindow", "type": "boolean", "optional": true}, {"name": "background", "type": "boolean", "optional": true}, {"name": "forTab", "type": "boolean", "optional": true}], ["targetId"]);
inspectorBackend.registerCommand("Target.detachFromTarget", [{"name": "sessionId", "type": "string", "optional": true, "typeRef": "SessionID"}, {"name": "targetId", "type": "string", "optional": true, "typeRef": "TargetID"}], []);
inspectorBackend.registerCommand("Target.disposeBrowserContext", [{"name": "browserContextId", "type": "string", "optional": false, "typeRef": "Browser.BrowserContextID"}], []);
inspectorBackend.registerCommand("Target.getTargetInfo", [{"name": "targetId", "type": "string", "optional": true, "typeRef": "TargetID"}], ["targetInfo"]);
inspectorBackend.registerCommand("Target.getTargets", [{"name": "filter", "type": "array", "optional": true, "typeRef": "TargetFilter"}], ["targetInfos"]);
inspectorBackend.registerCommand("Target.sendMessageToTarget", [{"name": "message", "type": "string", "optional": false}, {"name": "sessionId", "type": "string", "optional": true, "typeRef": "SessionID"}, {"name": "targetId", "type": "string", "optional": true, "typeRef": "TargetID"}], []);
inspectorBackend.registerCommand("Target.setAutoAttach", [{"name": "autoAttach", "type": "boolean", "optional": false}, {"name": "waitForDebuggerOnStart", "type": "boolean", "optional": false}, {"name": "flatten", "type": "boolean", "optional": true}, {"name": "filter", "type": "array", "optional": true, "typeRef": "TargetFilter"}], []);
inspectorBackend.registerCommand("Target.autoAttachRelated", [{"name": "targetId", "type": "string", "optional": false, "typeRef": "TargetID"}, {"name": "waitForDebuggerOnStart", "type": "boolean", "optional": false}, {"name": "filter", "type": "array", "optional": true, "typeRef": "TargetFilter"}], []);
inspectorBackend.registerCommand("Target.setDiscoverTargets", [{"name": "discover", "type": "boolean", "optional": false}, {"name": "filter", "type": "array", "optional": true, "typeRef": "TargetFilter"}], []);
inspectorBackend.registerCommand("Target.setRemoteLocations", [{"name": "locations", "type": "array", "optional": false}], []);
inspectorBackend.registerType("Target.TargetInfo", [{"name": "targetId", "type": "string", "optional": false}, {"name": "type", "type": "string", "optional": false}, {"name": "title", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": false}, {"name": "attached", "type": "boolean", "optional": false}, {"name": "openerId", "type": "string", "optional": true}, {"name": "canAccessOpener", "type": "boolean", "optional": false}, {"name": "openerFrameId", "type": "string", "optional": true}, {"name": "browserContextId", "type": "string", "optional": true}, {"name": "subtype", "type": "string", "optional": true}]);
inspectorBackend.registerType("Target.FilterEntry", [{"name": "exclude", "type": "boolean", "optional": true}, {"name": "type", "type": "string", "optional": true}]);
inspectorBackend.registerType("Target.RemoteLocation", [{"name": "host", "type": "string", "optional": false}, {"name": "port", "type": "number", "optional": false}]);

// Tethering.
inspectorBackend.registerEvent("Tethering.accepted", ["port", "connectionId"]);
inspectorBackend.registerCommand("Tethering.bind", [{"name": "port", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Tethering.unbind", [{"name": "port", "type": "number", "optional": false}], []);

// Tracing.
inspectorBackend.registerEnum("Tracing.TraceConfigRecordMode", {RecordUntilFull: "recordUntilFull", RecordContinuously: "recordContinuously", RecordAsMuchAsPossible: "recordAsMuchAsPossible", EchoToConsole: "echoToConsole"});
inspectorBackend.registerEnum("Tracing.StreamFormat", {Json: "json", Proto: "proto"});
inspectorBackend.registerEnum("Tracing.StreamCompression", {None: "none", Gzip: "gzip"});
inspectorBackend.registerEnum("Tracing.MemoryDumpLevelOfDetail", {Background: "background", Light: "light", Detailed: "detailed"});
inspectorBackend.registerEnum("Tracing.TracingBackend", {Auto: "auto", Chrome: "chrome", System: "system"});
inspectorBackend.registerEvent("Tracing.bufferUsage", ["percentFull", "eventCount", "value"]);
inspectorBackend.registerEvent("Tracing.dataCollected", ["value"]);
inspectorBackend.registerEvent("Tracing.tracingComplete", ["dataLossOccurred", "stream", "traceFormat", "streamCompression"]);
inspectorBackend.registerCommand("Tracing.end", [], []);
inspectorBackend.registerCommand("Tracing.getCategories", [], ["categories"]);
inspectorBackend.registerCommand("Tracing.recordClockSyncMarker", [{"name": "syncId", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Tracing.requestMemoryDump", [{"name": "deterministic", "type": "boolean", "optional": true}, {"name": "levelOfDetail", "type": "string", "optional": true, "typeRef": "MemoryDumpLevelOfDetail"}], ["dumpGuid", "success"]);
inspectorBackend.registerEnum("Tracing.StartRequestTransferMode", {ReportEvents: "ReportEvents", ReturnAsStream: "ReturnAsStream"});
inspectorBackend.registerCommand("Tracing.start", [{"name": "categories", "type": "string", "optional": true}, {"name": "options", "type": "string", "optional": true}, {"name": "bufferUsageReportingInterval", "type": "number", "optional": true}, {"name": "transferMode", "type": "string", "optional": true}, {"name": "streamFormat", "type": "string", "optional": true, "typeRef": "StreamFormat"}, {"name": "streamCompression", "type": "string", "optional": true, "typeRef": "StreamCompression"}, {"name": "traceConfig", "type": "object", "optional": true, "typeRef": "Tracing.TraceConfig"}, {"name": "perfettoConfig", "type": "string", "optional": true}, {"name": "tracingBackend", "type": "string", "optional": true, "typeRef": "TracingBackend"}], []);
inspectorBackend.registerType("Tracing.TraceConfig", [{"name": "recordMode", "type": "string", "optional": true}, {"name": "traceBufferSizeInKb", "type": "number", "optional": true}, {"name": "enableSampling", "type": "boolean", "optional": true}, {"name": "enableSystrace", "type": "boolean", "optional": true}, {"name": "enableArgumentFilter", "type": "boolean", "optional": true}, {"name": "includedCategories", "type": "array", "optional": true}, {"name": "excludedCategories", "type": "array", "optional": true}, {"name": "syntheticDelays", "type": "array", "optional": true}, {"name": "memoryDumpConfig", "type": "object", "optional": true}]);

// Fetch.
inspectorBackend.registerEnum("Fetch.RequestStage", {Request: "Request", Response: "Response"});
inspectorBackend.registerEnum("Fetch.AuthChallengeSource", {Server: "Server", Proxy: "Proxy"});
inspectorBackend.registerEnum("Fetch.AuthChallengeResponseResponse", {Default: "Default", CancelAuth: "CancelAuth", ProvideCredentials: "ProvideCredentials"});
inspectorBackend.registerEvent("Fetch.requestPaused", ["requestId", "request", "frameId", "resourceType", "responseErrorReason", "responseStatusCode", "responseStatusText", "responseHeaders", "networkId", "redirectedRequestId"]);
inspectorBackend.registerEvent("Fetch.authRequired", ["requestId", "request", "frameId", "resourceType", "authChallenge"]);
inspectorBackend.registerCommand("Fetch.disable", [], []);
inspectorBackend.registerCommand("Fetch.enable", [{"name": "patterns", "type": "array", "optional": true}, {"name": "handleAuthRequests", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Fetch.failRequest", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}, {"name": "errorReason", "type": "string", "optional": false, "typeRef": "Network.ErrorReason"}], []);
inspectorBackend.registerCommand("Fetch.fulfillRequest", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}, {"name": "responseCode", "type": "number", "optional": false}, {"name": "responseHeaders", "type": "array", "optional": true}, {"name": "binaryResponseHeaders", "type": "string", "optional": true}, {"name": "body", "type": "string", "optional": true}, {"name": "responsePhrase", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Fetch.continueRequest", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}, {"name": "url", "type": "string", "optional": true}, {"name": "method", "type": "string", "optional": true}, {"name": "postData", "type": "string", "optional": true}, {"name": "headers", "type": "array", "optional": true}, {"name": "interceptResponse", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Fetch.continueWithAuth", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}, {"name": "authChallengeResponse", "type": "object", "optional": false, "typeRef": "Fetch.AuthChallengeResponse"}], []);
inspectorBackend.registerCommand("Fetch.continueResponse", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}, {"name": "responseCode", "type": "number", "optional": true}, {"name": "responsePhrase", "type": "string", "optional": true}, {"name": "responseHeaders", "type": "array", "optional": true}, {"name": "binaryResponseHeaders", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Fetch.getResponseBody", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}], ["body", "base64Encoded"]);
inspectorBackend.registerCommand("Fetch.takeResponseBodyAsStream", [{"name": "requestId", "type": "string", "optional": false, "typeRef": "RequestId"}], ["stream"]);
inspectorBackend.registerType("Fetch.RequestPattern", [{"name": "urlPattern", "type": "string", "optional": true}, {"name": "resourceType", "type": "string", "optional": true}, {"name": "requestStage", "type": "string", "optional": true}]);
inspectorBackend.registerType("Fetch.HeaderEntry", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("Fetch.AuthChallenge", [{"name": "source", "type": "string", "optional": true}, {"name": "origin", "type": "string", "optional": false}, {"name": "scheme", "type": "string", "optional": false}, {"name": "realm", "type": "string", "optional": false}]);
inspectorBackend.registerType("Fetch.AuthChallengeResponse", [{"name": "response", "type": "string", "optional": false}, {"name": "username", "type": "string", "optional": true}, {"name": "password", "type": "string", "optional": true}]);

// WebAudio.
inspectorBackend.registerEnum("WebAudio.ContextType", {Realtime: "realtime", Offline: "offline"});
inspectorBackend.registerEnum("WebAudio.ContextState", {Suspended: "suspended", Running: "running", Closed: "closed"});
inspectorBackend.registerEnum("WebAudio.ChannelCountMode", {ClampedMax: "clamped-max", Explicit: "explicit", Max: "max"});
inspectorBackend.registerEnum("WebAudio.ChannelInterpretation", {Discrete: "discrete", Speakers: "speakers"});
inspectorBackend.registerEnum("WebAudio.AutomationRate", {ARate: "a-rate", KRate: "k-rate"});
inspectorBackend.registerEvent("WebAudio.contextCreated", ["context"]);
inspectorBackend.registerEvent("WebAudio.contextWillBeDestroyed", ["contextId"]);
inspectorBackend.registerEvent("WebAudio.contextChanged", ["context"]);
inspectorBackend.registerEvent("WebAudio.audioListenerCreated", ["listener"]);
inspectorBackend.registerEvent("WebAudio.audioListenerWillBeDestroyed", ["contextId", "listenerId"]);
inspectorBackend.registerEvent("WebAudio.audioNodeCreated", ["node"]);
inspectorBackend.registerEvent("WebAudio.audioNodeWillBeDestroyed", ["contextId", "nodeId"]);
inspectorBackend.registerEvent("WebAudio.audioParamCreated", ["param"]);
inspectorBackend.registerEvent("WebAudio.audioParamWillBeDestroyed", ["contextId", "nodeId", "paramId"]);
inspectorBackend.registerEvent("WebAudio.nodesConnected", ["contextId", "sourceId", "destinationId", "sourceOutputIndex", "destinationInputIndex"]);
inspectorBackend.registerEvent("WebAudio.nodesDisconnected", ["contextId", "sourceId", "destinationId", "sourceOutputIndex", "destinationInputIndex"]);
inspectorBackend.registerEvent("WebAudio.nodeParamConnected", ["contextId", "sourceId", "destinationId", "sourceOutputIndex"]);
inspectorBackend.registerEvent("WebAudio.nodeParamDisconnected", ["contextId", "sourceId", "destinationId", "sourceOutputIndex"]);
inspectorBackend.registerCommand("WebAudio.enable", [], []);
inspectorBackend.registerCommand("WebAudio.disable", [], []);
inspectorBackend.registerCommand("WebAudio.getRealtimeData", [{"name": "contextId", "type": "string", "optional": false, "typeRef": "GraphObjectId"}], ["realtimeData"]);
inspectorBackend.registerType("WebAudio.ContextRealtimeData", [{"name": "currentTime", "type": "number", "optional": false}, {"name": "renderCapacity", "type": "number", "optional": false}, {"name": "callbackIntervalMean", "type": "number", "optional": false}, {"name": "callbackIntervalVariance", "type": "number", "optional": false}]);
inspectorBackend.registerType("WebAudio.BaseAudioContext", [{"name": "contextId", "type": "string", "optional": false}, {"name": "contextType", "type": "string", "optional": false}, {"name": "contextState", "type": "string", "optional": false}, {"name": "realtimeData", "type": "object", "optional": true}, {"name": "callbackBufferSize", "type": "number", "optional": false}, {"name": "maxOutputChannelCount", "type": "number", "optional": false}, {"name": "sampleRate", "type": "number", "optional": false}]);
inspectorBackend.registerType("WebAudio.AudioListener", [{"name": "listenerId", "type": "string", "optional": false}, {"name": "contextId", "type": "string", "optional": false}]);
inspectorBackend.registerType("WebAudio.AudioNode", [{"name": "nodeId", "type": "string", "optional": false}, {"name": "contextId", "type": "string", "optional": false}, {"name": "nodeType", "type": "string", "optional": false}, {"name": "numberOfInputs", "type": "number", "optional": false}, {"name": "numberOfOutputs", "type": "number", "optional": false}, {"name": "channelCount", "type": "number", "optional": false}, {"name": "channelCountMode", "type": "string", "optional": false}, {"name": "channelInterpretation", "type": "string", "optional": false}]);
inspectorBackend.registerType("WebAudio.AudioParam", [{"name": "paramId", "type": "string", "optional": false}, {"name": "nodeId", "type": "string", "optional": false}, {"name": "contextId", "type": "string", "optional": false}, {"name": "paramType", "type": "string", "optional": false}, {"name": "rate", "type": "string", "optional": false}, {"name": "defaultValue", "type": "number", "optional": false}, {"name": "minValue", "type": "number", "optional": false}, {"name": "maxValue", "type": "number", "optional": false}]);

// WebAuthn.
inspectorBackend.registerEnum("WebAuthn.AuthenticatorProtocol", {U2f: "u2f", Ctap2: "ctap2"});
inspectorBackend.registerEnum("WebAuthn.Ctap2Version", {Ctap2_0: "ctap2_0", Ctap2_1: "ctap2_1"});
inspectorBackend.registerEnum("WebAuthn.AuthenticatorTransport", {Usb: "usb", Nfc: "nfc", Ble: "ble", Cable: "cable", Internal: "internal"});
inspectorBackend.registerEvent("WebAuthn.credentialAdded", ["authenticatorId", "credential"]);
inspectorBackend.registerEvent("WebAuthn.credentialAsserted", ["authenticatorId", "credential"]);
inspectorBackend.registerCommand("WebAuthn.enable", [{"name": "enableUI", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("WebAuthn.disable", [], []);
inspectorBackend.registerCommand("WebAuthn.addVirtualAuthenticator", [{"name": "options", "type": "object", "optional": false, "typeRef": "WebAuthn.VirtualAuthenticatorOptions"}], ["authenticatorId"]);
inspectorBackend.registerCommand("WebAuthn.setResponseOverrideBits", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}, {"name": "isBogusSignature", "type": "boolean", "optional": true}, {"name": "isBadUV", "type": "boolean", "optional": true}, {"name": "isBadUP", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("WebAuthn.removeVirtualAuthenticator", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}], []);
inspectorBackend.registerCommand("WebAuthn.addCredential", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}, {"name": "credential", "type": "object", "optional": false, "typeRef": "WebAuthn.Credential"}], []);
inspectorBackend.registerCommand("WebAuthn.getCredential", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}, {"name": "credentialId", "type": "string", "optional": false}], ["credential"]);
inspectorBackend.registerCommand("WebAuthn.getCredentials", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}], ["credentials"]);
inspectorBackend.registerCommand("WebAuthn.removeCredential", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}, {"name": "credentialId", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("WebAuthn.clearCredentials", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}], []);
inspectorBackend.registerCommand("WebAuthn.setUserVerified", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}, {"name": "isUserVerified", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("WebAuthn.setAutomaticPresenceSimulation", [{"name": "authenticatorId", "type": "string", "optional": false, "typeRef": "AuthenticatorId"}, {"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerType("WebAuthn.VirtualAuthenticatorOptions", [{"name": "protocol", "type": "string", "optional": false}, {"name": "ctap2Version", "type": "string", "optional": true}, {"name": "transport", "type": "string", "optional": false}, {"name": "hasResidentKey", "type": "boolean", "optional": true}, {"name": "hasUserVerification", "type": "boolean", "optional": true}, {"name": "hasLargeBlob", "type": "boolean", "optional": true}, {"name": "hasCredBlob", "type": "boolean", "optional": true}, {"name": "hasMinPinLength", "type": "boolean", "optional": true}, {"name": "hasPrf", "type": "boolean", "optional": true}, {"name": "automaticPresenceSimulation", "type": "boolean", "optional": true}, {"name": "isUserVerified", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("WebAuthn.Credential", [{"name": "credentialId", "type": "string", "optional": false}, {"name": "isResidentCredential", "type": "boolean", "optional": false}, {"name": "rpId", "type": "string", "optional": true}, {"name": "privateKey", "type": "string", "optional": false}, {"name": "userHandle", "type": "string", "optional": true}, {"name": "signCount", "type": "number", "optional": false}, {"name": "largeBlob", "type": "string", "optional": true}]);

// Media.
inspectorBackend.registerEnum("Media.PlayerMessageLevel", {Error: "error", Warning: "warning", Info: "info", Debug: "debug"});
inspectorBackend.registerEvent("Media.playerPropertiesChanged", ["playerId", "properties"]);
inspectorBackend.registerEvent("Media.playerEventsAdded", ["playerId", "events"]);
inspectorBackend.registerEvent("Media.playerMessagesLogged", ["playerId", "messages"]);
inspectorBackend.registerEvent("Media.playerErrorsRaised", ["playerId", "errors"]);
inspectorBackend.registerEvent("Media.playersCreated", ["players"]);
inspectorBackend.registerCommand("Media.enable", [], []);
inspectorBackend.registerCommand("Media.disable", [], []);
inspectorBackend.registerType("Media.PlayerMessage", [{"name": "level", "type": "string", "optional": false}, {"name": "message", "type": "string", "optional": false}]);
inspectorBackend.registerType("Media.PlayerProperty", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("Media.PlayerEvent", [{"name": "timestamp", "type": "number", "optional": false}, {"name": "value", "type": "string", "optional": false}]);
inspectorBackend.registerType("Media.PlayerErrorSourceLocation", [{"name": "file", "type": "string", "optional": false}, {"name": "line", "type": "number", "optional": false}]);
inspectorBackend.registerType("Media.PlayerError", [{"name": "errorType", "type": "string", "optional": false}, {"name": "code", "type": "number", "optional": false}, {"name": "stack", "type": "array", "optional": false}, {"name": "cause", "type": "array", "optional": false}, {"name": "data", "type": "object", "optional": false}]);

// DeviceAccess.
inspectorBackend.registerEvent("DeviceAccess.deviceRequestPrompted", ["id", "devices"]);
inspectorBackend.registerCommand("DeviceAccess.enable", [], []);
inspectorBackend.registerCommand("DeviceAccess.disable", [], []);
inspectorBackend.registerCommand("DeviceAccess.selectPrompt", [{"name": "id", "type": "string", "optional": false, "typeRef": "RequestId"}, {"name": "deviceId", "type": "string", "optional": false, "typeRef": "DeviceId"}], []);
inspectorBackend.registerCommand("DeviceAccess.cancelPrompt", [{"name": "id", "type": "string", "optional": false, "typeRef": "RequestId"}], []);
inspectorBackend.registerType("DeviceAccess.PromptDevice", [{"name": "id", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}]);

// Preload.
inspectorBackend.registerEnum("Preload.RuleSetErrorType", {SourceIsNotJsonObject: "SourceIsNotJsonObject", InvalidRulesSkipped: "InvalidRulesSkipped"});
inspectorBackend.registerEnum("Preload.SpeculationAction", {Prefetch: "Prefetch", Prerender: "Prerender"});
inspectorBackend.registerEnum("Preload.SpeculationTargetHint", {Blank: "Blank", Self: "Self"});
inspectorBackend.registerEnum("Preload.PrerenderFinalStatus", {Activated: "Activated", Destroyed: "Destroyed", LowEndDevice: "LowEndDevice", InvalidSchemeRedirect: "InvalidSchemeRedirect", InvalidSchemeNavigation: "InvalidSchemeNavigation", InProgressNavigation: "InProgressNavigation", NavigationRequestBlockedByCsp: "NavigationRequestBlockedByCsp", MainFrameNavigation: "MainFrameNavigation", MojoBinderPolicy: "MojoBinderPolicy", RendererProcessCrashed: "RendererProcessCrashed", RendererProcessKilled: "RendererProcessKilled", Download: "Download", TriggerDestroyed: "TriggerDestroyed", NavigationNotCommitted: "NavigationNotCommitted", NavigationBadHttpStatus: "NavigationBadHttpStatus", ClientCertRequested: "ClientCertRequested", NavigationRequestNetworkError: "NavigationRequestNetworkError", MaxNumOfRunningPrerendersExceeded: "MaxNumOfRunningPrerendersExceeded", CancelAllHostsForTesting: "CancelAllHostsForTesting", DidFailLoad: "DidFailLoad", Stop: "Stop", SslCertificateError: "SslCertificateError", LoginAuthRequested: "LoginAuthRequested", UaChangeRequiresReload: "UaChangeRequiresReload", BlockedByClient: "BlockedByClient", AudioOutputDeviceRequested: "AudioOutputDeviceRequested", MixedContent: "MixedContent", TriggerBackgrounded: "TriggerBackgrounded", EmbedderTriggeredAndCrossOriginRedirected: "EmbedderTriggeredAndCrossOriginRedirected", MemoryLimitExceeded: "MemoryLimitExceeded", FailToGetMemoryUsage: "FailToGetMemoryUsage", DataSaverEnabled: "DataSaverEnabled", HasEffectiveUrl: "HasEffectiveUrl", ActivatedBeforeStarted: "ActivatedBeforeStarted", InactivePageRestriction: "InactivePageRestriction", StartFailed: "StartFailed", TimeoutBackgrounded: "TimeoutBackgrounded", CrossSiteRedirectInInitialNavigation: "CrossSiteRedirectInInitialNavigation", CrossSiteNavigationInInitialNavigation: "CrossSiteNavigationInInitialNavigation", SameSiteCrossOriginRedirectNotOptInInInitialNavigation: "SameSiteCrossOriginRedirectNotOptInInInitialNavigation", SameSiteCrossOriginNavigationNotOptInInInitialNavigation: "SameSiteCrossOriginNavigationNotOptInInInitialNavigation", ActivationNavigationParameterMismatch: "ActivationNavigationParameterMismatch", ActivatedInBackground: "ActivatedInBackground", EmbedderHostDisallowed: "EmbedderHostDisallowed", ActivationNavigationDestroyedBeforeSuccess: "ActivationNavigationDestroyedBeforeSuccess", TabClosedByUserGesture: "TabClosedByUserGesture", TabClosedWithoutUserGesture: "TabClosedWithoutUserGesture", PrimaryMainFrameRendererProcessCrashed: "PrimaryMainFrameRendererProcessCrashed", PrimaryMainFrameRendererProcessKilled: "PrimaryMainFrameRendererProcessKilled", ActivationFramePolicyNotCompatible: "ActivationFramePolicyNotCompatible", PreloadingDisabled: "PreloadingDisabled", BatterySaverEnabled: "BatterySaverEnabled", ActivatedDuringMainFrameNavigation: "ActivatedDuringMainFrameNavigation", PreloadingUnsupportedByWebContents: "PreloadingUnsupportedByWebContents", CrossSiteRedirectInMainFrameNavigation: "CrossSiteRedirectInMainFrameNavigation", CrossSiteNavigationInMainFrameNavigation: "CrossSiteNavigationInMainFrameNavigation", SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation: "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation", SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation: "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation", MemoryPressureOnTrigger: "MemoryPressureOnTrigger", MemoryPressureAfterTriggered: "MemoryPressureAfterTriggered", PrerenderingDisabledByDevTools: "PrerenderingDisabledByDevTools", ResourceLoadBlockedByClient: "ResourceLoadBlockedByClient"});
inspectorBackend.registerEnum("Preload.PreloadingStatus", {Pending: "Pending", Running: "Running", Ready: "Ready", Success: "Success", Failure: "Failure", NotSupported: "NotSupported"});
inspectorBackend.registerEnum("Preload.PrefetchStatus", {PrefetchAllowed: "PrefetchAllowed", PrefetchFailedIneligibleRedirect: "PrefetchFailedIneligibleRedirect", PrefetchFailedInvalidRedirect: "PrefetchFailedInvalidRedirect", PrefetchFailedMIMENotSupported: "PrefetchFailedMIMENotSupported", PrefetchFailedNetError: "PrefetchFailedNetError", PrefetchFailedNon2XX: "PrefetchFailedNon2XX", PrefetchFailedPerPageLimitExceeded: "PrefetchFailedPerPageLimitExceeded", PrefetchEvicted: "PrefetchEvicted", PrefetchHeldback: "PrefetchHeldback", PrefetchIneligibleRetryAfter: "PrefetchIneligibleRetryAfter", PrefetchIsPrivacyDecoy: "PrefetchIsPrivacyDecoy", PrefetchIsStale: "PrefetchIsStale", PrefetchNotEligibleBrowserContextOffTheRecord: "PrefetchNotEligibleBrowserContextOffTheRecord", PrefetchNotEligibleDataSaverEnabled: "PrefetchNotEligibleDataSaverEnabled", PrefetchNotEligibleExistingProxy: "PrefetchNotEligibleExistingProxy", PrefetchNotEligibleHostIsNonUnique: "PrefetchNotEligibleHostIsNonUnique", PrefetchNotEligibleNonDefaultStoragePartition: "PrefetchNotEligibleNonDefaultStoragePartition", PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy: "PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy", PrefetchNotEligibleSchemeIsNotHttps: "PrefetchNotEligibleSchemeIsNotHttps", PrefetchNotEligibleUserHasCookies: "PrefetchNotEligibleUserHasCookies", PrefetchNotEligibleUserHasServiceWorker: "PrefetchNotEligibleUserHasServiceWorker", PrefetchNotEligibleBatterySaverEnabled: "PrefetchNotEligibleBatterySaverEnabled", PrefetchNotEligiblePreloadingDisabled: "PrefetchNotEligiblePreloadingDisabled", PrefetchNotFinishedInTime: "PrefetchNotFinishedInTime", PrefetchNotStarted: "PrefetchNotStarted", PrefetchNotUsedCookiesChanged: "PrefetchNotUsedCookiesChanged", PrefetchProxyNotAvailable: "PrefetchProxyNotAvailable", PrefetchResponseUsed: "PrefetchResponseUsed", PrefetchSuccessfulButNotUsed: "PrefetchSuccessfulButNotUsed", PrefetchNotUsedProbeFailed: "PrefetchNotUsedProbeFailed"});
inspectorBackend.registerEvent("Preload.ruleSetUpdated", ["ruleSet"]);
inspectorBackend.registerEvent("Preload.ruleSetRemoved", ["id"]);
inspectorBackend.registerEvent("Preload.prerenderAttemptCompleted", ["key", "initiatingFrameId", "prerenderingUrl", "finalStatus", "disallowedApiMethod"]);
inspectorBackend.registerEvent("Preload.preloadEnabledStateUpdated", ["disabledByPreference", "disabledByDataSaver", "disabledByBatterySaver"]);
inspectorBackend.registerEvent("Preload.prefetchStatusUpdated", ["key", "initiatingFrameId", "prefetchUrl", "status", "prefetchStatus"]);
inspectorBackend.registerEvent("Preload.prerenderStatusUpdated", ["key", "status", "prerenderStatus"]);
inspectorBackend.registerEvent("Preload.preloadingAttemptSourcesUpdated", ["loaderId", "preloadingAttemptSources"]);
inspectorBackend.registerCommand("Preload.enable", [], []);
inspectorBackend.registerCommand("Preload.disable", [], []);
inspectorBackend.registerType("Preload.RuleSet", [{"name": "id", "type": "string", "optional": false}, {"name": "loaderId", "type": "string", "optional": false}, {"name": "sourceText", "type": "string", "optional": false}, {"name": "backendNodeId", "type": "number", "optional": true}, {"name": "url", "type": "string", "optional": true}, {"name": "requestId", "type": "string", "optional": true}, {"name": "errorType", "type": "string", "optional": true}, {"name": "errorMessage", "type": "string", "optional": true}]);
inspectorBackend.registerType("Preload.PreloadingAttemptKey", [{"name": "loaderId", "type": "string", "optional": false}, {"name": "action", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": false}, {"name": "targetHint", "type": "string", "optional": true}]);
inspectorBackend.registerType("Preload.PreloadingAttemptSource", [{"name": "key", "type": "object", "optional": false}, {"name": "ruleSetIds", "type": "array", "optional": false}, {"name": "nodeIds", "type": "array", "optional": false}]);

// FedCm.
inspectorBackend.registerEnum("FedCm.LoginState", {SignIn: "SignIn", SignUp: "SignUp"});
inspectorBackend.registerEnum("FedCm.DialogType", {AccountChooser: "AccountChooser", AutoReauthn: "AutoReauthn"});
inspectorBackend.registerEvent("FedCm.dialogShown", ["dialogId", "dialogType", "accounts", "title", "subtitle"]);
inspectorBackend.registerCommand("FedCm.enable", [{"name": "disableRejectionDelay", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("FedCm.disable", [], []);
inspectorBackend.registerCommand("FedCm.selectAccount", [{"name": "dialogId", "type": "string", "optional": false}, {"name": "accountIndex", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("FedCm.dismissDialog", [{"name": "dialogId", "type": "string", "optional": false}, {"name": "triggerCooldown", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("FedCm.resetCooldown", [], []);
inspectorBackend.registerType("FedCm.Account", [{"name": "accountId", "type": "string", "optional": false}, {"name": "email", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "givenName", "type": "string", "optional": false}, {"name": "pictureUrl", "type": "string", "optional": false}, {"name": "idpConfigUrl", "type": "string", "optional": false}, {"name": "idpSigninUrl", "type": "string", "optional": false}, {"name": "loginState", "type": "string", "optional": false}, {"name": "termsOfServiceUrl", "type": "string", "optional": true}, {"name": "privacyPolicyUrl", "type": "string", "optional": true}]);

// Debugger.
inspectorBackend.registerEnum("Debugger.ScopeType", {Global: "global", Local: "local", With: "with", Closure: "closure", Catch: "catch", Block: "block", Script: "script", Eval: "eval", Module: "module", WasmExpressionStack: "wasm-expression-stack"});
inspectorBackend.registerEnum("Debugger.BreakLocationType", {DebuggerStatement: "debuggerStatement", Call: "call", Return: "return"});
inspectorBackend.registerEnum("Debugger.ScriptLanguage", {JavaScript: "JavaScript", WebAssembly: "WebAssembly"});
inspectorBackend.registerEnum("Debugger.DebugSymbolsType", {None: "None", SourceMap: "SourceMap", EmbeddedDWARF: "EmbeddedDWARF", ExternalDWARF: "ExternalDWARF"});
inspectorBackend.registerEvent("Debugger.breakpointResolved", ["breakpointId", "location"]);
inspectorBackend.registerEnum("Debugger.PausedEventReason", {Ambiguous: "ambiguous", Assert: "assert", CSPViolation: "CSPViolation", DebugCommand: "debugCommand", DOM: "DOM", EventListener: "EventListener", Exception: "exception", Instrumentation: "instrumentation", OOM: "OOM", Other: "other", PromiseRejection: "promiseRejection", XHR: "XHR", Step: "step"});
inspectorBackend.registerEvent("Debugger.paused", ["callFrames", "reason", "data", "hitBreakpoints", "asyncStackTrace", "asyncStackTraceId", "asyncCallStackTraceId"]);
inspectorBackend.registerEvent("Debugger.resumed", []);
inspectorBackend.registerEvent("Debugger.scriptFailedToParse", ["scriptId", "url", "startLine", "startColumn", "endLine", "endColumn", "executionContextId", "hash", "executionContextAuxData", "sourceMapURL", "hasSourceURL", "isModule", "length", "stackTrace", "codeOffset", "scriptLanguage", "embedderName"]);
inspectorBackend.registerEvent("Debugger.scriptParsed", ["scriptId", "url", "startLine", "startColumn", "endLine", "endColumn", "executionContextId", "hash", "executionContextAuxData", "isLiveEdit", "sourceMapURL", "hasSourceURL", "isModule", "length", "stackTrace", "codeOffset", "scriptLanguage", "debugSymbols", "embedderName"]);
inspectorBackend.registerEnum("Debugger.ContinueToLocationRequestTargetCallFrames", {Any: "any", Current: "current"});
inspectorBackend.registerCommand("Debugger.continueToLocation", [{"name": "location", "type": "object", "optional": false, "typeRef": "Debugger.Location"}, {"name": "targetCallFrames", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Debugger.disable", [], []);
inspectorBackend.registerCommand("Debugger.enable", [{"name": "maxScriptsCacheSize", "type": "number", "optional": true}], ["debuggerId"]);
inspectorBackend.registerCommand("Debugger.evaluateOnCallFrame", [{"name": "callFrameId", "type": "string", "optional": false, "typeRef": "CallFrameId"}, {"name": "expression", "type": "string", "optional": false}, {"name": "objectGroup", "type": "string", "optional": true}, {"name": "includeCommandLineAPI", "type": "boolean", "optional": true}, {"name": "silent", "type": "boolean", "optional": true}, {"name": "returnByValue", "type": "boolean", "optional": true}, {"name": "generatePreview", "type": "boolean", "optional": true}, {"name": "throwOnSideEffect", "type": "boolean", "optional": true}, {"name": "timeout", "type": "number", "optional": true, "typeRef": "Runtime.TimeDelta"}], ["result", "exceptionDetails"]);
inspectorBackend.registerCommand("Debugger.getPossibleBreakpoints", [{"name": "start", "type": "object", "optional": false, "typeRef": "Debugger.Location"}, {"name": "end", "type": "object", "optional": true, "typeRef": "Debugger.Location"}, {"name": "restrictToFunction", "type": "boolean", "optional": true}], ["locations"]);
inspectorBackend.registerCommand("Debugger.getScriptSource", [{"name": "scriptId", "type": "string", "optional": false, "typeRef": "Runtime.ScriptId"}], ["scriptSource", "bytecode"]);
inspectorBackend.registerCommand("Debugger.disassembleWasmModule", [{"name": "scriptId", "type": "string", "optional": false, "typeRef": "Runtime.ScriptId"}], ["streamId", "totalNumberOfLines", "functionBodyOffsets", "chunk"]);
inspectorBackend.registerCommand("Debugger.nextWasmDisassemblyChunk", [{"name": "streamId", "type": "string", "optional": false}], ["chunk"]);
inspectorBackend.registerCommand("Debugger.getWasmBytecode", [{"name": "scriptId", "type": "string", "optional": false, "typeRef": "Runtime.ScriptId"}], ["bytecode"]);
inspectorBackend.registerCommand("Debugger.getStackTrace", [{"name": "stackTraceId", "type": "object", "optional": false, "typeRef": "Runtime.StackTraceId"}], ["stackTrace"]);
inspectorBackend.registerCommand("Debugger.pause", [], []);
inspectorBackend.registerCommand("Debugger.pauseOnAsyncCall", [{"name": "parentStackTraceId", "type": "object", "optional": false, "typeRef": "Runtime.StackTraceId"}], []);
inspectorBackend.registerCommand("Debugger.removeBreakpoint", [{"name": "breakpointId", "type": "string", "optional": false, "typeRef": "BreakpointId"}], []);
inspectorBackend.registerEnum("Debugger.RestartFrameRequestMode", {StepInto: "StepInto"});
inspectorBackend.registerCommand("Debugger.restartFrame", [{"name": "callFrameId", "type": "string", "optional": false, "typeRef": "CallFrameId"}, {"name": "mode", "type": "string", "optional": true}], ["callFrames", "asyncStackTrace", "asyncStackTraceId"]);
inspectorBackend.registerCommand("Debugger.resume", [{"name": "terminateOnResume", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("Debugger.searchInContent", [{"name": "scriptId", "type": "string", "optional": false, "typeRef": "Runtime.ScriptId"}, {"name": "query", "type": "string", "optional": false}, {"name": "caseSensitive", "type": "boolean", "optional": true}, {"name": "isRegex", "type": "boolean", "optional": true}], ["result"]);
inspectorBackend.registerCommand("Debugger.setAsyncCallStackDepth", [{"name": "maxDepth", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Debugger.setBlackboxPatterns", [{"name": "patterns", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Debugger.setBlackboxedRanges", [{"name": "scriptId", "type": "string", "optional": false, "typeRef": "Runtime.ScriptId"}, {"name": "positions", "type": "array", "optional": false}], []);
inspectorBackend.registerCommand("Debugger.setBreakpoint", [{"name": "location", "type": "object", "optional": false, "typeRef": "Debugger.Location"}, {"name": "condition", "type": "string", "optional": true}], ["breakpointId", "actualLocation"]);
inspectorBackend.registerEnum("Debugger.SetInstrumentationBreakpointRequestInstrumentation", {BeforeScriptExecution: "beforeScriptExecution", BeforeScriptWithSourceMapExecution: "beforeScriptWithSourceMapExecution"});
inspectorBackend.registerCommand("Debugger.setInstrumentationBreakpoint", [{"name": "instrumentation", "type": "string", "optional": false}], ["breakpointId"]);
inspectorBackend.registerCommand("Debugger.setBreakpointByUrl", [{"name": "lineNumber", "type": "number", "optional": false}, {"name": "url", "type": "string", "optional": true}, {"name": "urlRegex", "type": "string", "optional": true}, {"name": "scriptHash", "type": "string", "optional": true}, {"name": "columnNumber", "type": "number", "optional": true}, {"name": "condition", "type": "string", "optional": true}], ["breakpointId", "locations"]);
inspectorBackend.registerCommand("Debugger.setBreakpointOnFunctionCall", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "Runtime.RemoteObjectId"}, {"name": "condition", "type": "string", "optional": true}], ["breakpointId"]);
inspectorBackend.registerCommand("Debugger.setBreakpointsActive", [{"name": "active", "type": "boolean", "optional": false}], []);
inspectorBackend.registerEnum("Debugger.SetPauseOnExceptionsRequestState", {None: "none", Caught: "caught", Uncaught: "uncaught", All: "all"});
inspectorBackend.registerCommand("Debugger.setPauseOnExceptions", [{"name": "state", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Debugger.setReturnValue", [{"name": "newValue", "type": "object", "optional": false, "typeRef": "Runtime.CallArgument"}], []);
inspectorBackend.registerCommand("Debugger.setScriptSource", [{"name": "scriptId", "type": "string", "optional": false, "typeRef": "Runtime.ScriptId"}, {"name": "scriptSource", "type": "string", "optional": false}, {"name": "dryRun", "type": "boolean", "optional": true}, {"name": "allowTopFrameEditing", "type": "boolean", "optional": true}], ["callFrames", "stackChanged", "asyncStackTrace", "asyncStackTraceId", "status", "exceptionDetails"]);
inspectorBackend.registerCommand("Debugger.setSkipAllPauses", [{"name": "skip", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Debugger.setVariableValue", [{"name": "scopeNumber", "type": "number", "optional": false}, {"name": "variableName", "type": "string", "optional": false}, {"name": "newValue", "type": "object", "optional": false, "typeRef": "Runtime.CallArgument"}, {"name": "callFrameId", "type": "string", "optional": false, "typeRef": "CallFrameId"}], []);
inspectorBackend.registerCommand("Debugger.stepInto", [{"name": "breakOnAsyncCall", "type": "boolean", "optional": true}, {"name": "skipList", "type": "array", "optional": true}], []);
inspectorBackend.registerCommand("Debugger.stepOut", [], []);
inspectorBackend.registerCommand("Debugger.stepOver", [{"name": "skipList", "type": "array", "optional": true}], []);
inspectorBackend.registerType("Debugger.Location", [{"name": "scriptId", "type": "string", "optional": false}, {"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": true}]);
inspectorBackend.registerType("Debugger.ScriptPosition", [{"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": false}]);
inspectorBackend.registerType("Debugger.LocationRange", [{"name": "scriptId", "type": "string", "optional": false}, {"name": "start", "type": "object", "optional": false}, {"name": "end", "type": "object", "optional": false}]);
inspectorBackend.registerType("Debugger.CallFrame", [{"name": "callFrameId", "type": "string", "optional": false}, {"name": "functionName", "type": "string", "optional": false}, {"name": "functionLocation", "type": "object", "optional": true}, {"name": "location", "type": "object", "optional": false}, {"name": "url", "type": "string", "optional": false}, {"name": "scopeChain", "type": "array", "optional": false}, {"name": "this", "type": "object", "optional": false}, {"name": "returnValue", "type": "object", "optional": true}, {"name": "canBeRestarted", "type": "boolean", "optional": true}]);
inspectorBackend.registerType("Debugger.Scope", [{"name": "type", "type": "string", "optional": false}, {"name": "object", "type": "object", "optional": false}, {"name": "name", "type": "string", "optional": true}, {"name": "startLocation", "type": "object", "optional": true}, {"name": "endLocation", "type": "object", "optional": true}]);
inspectorBackend.registerType("Debugger.SearchMatch", [{"name": "lineNumber", "type": "number", "optional": false}, {"name": "lineContent", "type": "string", "optional": false}]);
inspectorBackend.registerType("Debugger.BreakLocation", [{"name": "scriptId", "type": "string", "optional": false}, {"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": true}, {"name": "type", "type": "string", "optional": true}]);
inspectorBackend.registerType("Debugger.WasmDisassemblyChunk", [{"name": "lines", "type": "array", "optional": false}, {"name": "bytecodeOffsets", "type": "array", "optional": false}]);
inspectorBackend.registerType("Debugger.DebugSymbols", [{"name": "type", "type": "string", "optional": false}, {"name": "externalURL", "type": "string", "optional": true}]);

// HeapProfiler.
inspectorBackend.registerEvent("HeapProfiler.addHeapSnapshotChunk", ["chunk"]);
inspectorBackend.registerEvent("HeapProfiler.heapStatsUpdate", ["statsUpdate"]);
inspectorBackend.registerEvent("HeapProfiler.lastSeenObjectId", ["lastSeenObjectId", "timestamp"]);
inspectorBackend.registerEvent("HeapProfiler.reportHeapSnapshotProgress", ["done", "total", "finished"]);
inspectorBackend.registerEvent("HeapProfiler.resetProfiles", []);
inspectorBackend.registerCommand("HeapProfiler.addInspectedHeapObject", [{"name": "heapObjectId", "type": "string", "optional": false, "typeRef": "HeapSnapshotObjectId"}], []);
inspectorBackend.registerCommand("HeapProfiler.collectGarbage", [], []);
inspectorBackend.registerCommand("HeapProfiler.disable", [], []);
inspectorBackend.registerCommand("HeapProfiler.enable", [], []);
inspectorBackend.registerCommand("HeapProfiler.getHeapObjectId", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "Runtime.RemoteObjectId"}], ["heapSnapshotObjectId"]);
inspectorBackend.registerCommand("HeapProfiler.getObjectByHeapObjectId", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "HeapSnapshotObjectId"}, {"name": "objectGroup", "type": "string", "optional": true}], ["result"]);
inspectorBackend.registerCommand("HeapProfiler.getSamplingProfile", [], ["profile"]);
inspectorBackend.registerCommand("HeapProfiler.startSampling", [{"name": "samplingInterval", "type": "number", "optional": true}, {"name": "includeObjectsCollectedByMajorGC", "type": "boolean", "optional": true}, {"name": "includeObjectsCollectedByMinorGC", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("HeapProfiler.startTrackingHeapObjects", [{"name": "trackAllocations", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("HeapProfiler.stopSampling", [], ["profile"]);
inspectorBackend.registerCommand("HeapProfiler.stopTrackingHeapObjects", [{"name": "reportProgress", "type": "boolean", "optional": true}, {"name": "treatGlobalObjectsAsRoots", "type": "boolean", "optional": true}, {"name": "captureNumericValue", "type": "boolean", "optional": true}, {"name": "exposeInternals", "type": "boolean", "optional": true}], []);
inspectorBackend.registerCommand("HeapProfiler.takeHeapSnapshot", [{"name": "reportProgress", "type": "boolean", "optional": true}, {"name": "treatGlobalObjectsAsRoots", "type": "boolean", "optional": true}, {"name": "captureNumericValue", "type": "boolean", "optional": true}, {"name": "exposeInternals", "type": "boolean", "optional": true}], []);
inspectorBackend.registerType("HeapProfiler.SamplingHeapProfileNode", [{"name": "callFrame", "type": "object", "optional": false}, {"name": "selfSize", "type": "number", "optional": false}, {"name": "id", "type": "number", "optional": false}, {"name": "children", "type": "array", "optional": false}]);
inspectorBackend.registerType("HeapProfiler.SamplingHeapProfileSample", [{"name": "size", "type": "number", "optional": false}, {"name": "nodeId", "type": "number", "optional": false}, {"name": "ordinal", "type": "number", "optional": false}]);
inspectorBackend.registerType("HeapProfiler.SamplingHeapProfile", [{"name": "head", "type": "object", "optional": false}, {"name": "samples", "type": "array", "optional": false}]);

// Profiler.
inspectorBackend.registerEvent("Profiler.consoleProfileFinished", ["id", "location", "profile", "title"]);
inspectorBackend.registerEvent("Profiler.consoleProfileStarted", ["id", "location", "title"]);
inspectorBackend.registerEvent("Profiler.preciseCoverageDeltaUpdate", ["timestamp", "occasion", "result"]);
inspectorBackend.registerCommand("Profiler.disable", [], []);
inspectorBackend.registerCommand("Profiler.enable", [], []);
inspectorBackend.registerCommand("Profiler.getBestEffortCoverage", [], ["result"]);
inspectorBackend.registerCommand("Profiler.setSamplingInterval", [{"name": "interval", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Profiler.start", [], []);
inspectorBackend.registerCommand("Profiler.startPreciseCoverage", [{"name": "callCount", "type": "boolean", "optional": true}, {"name": "detailed", "type": "boolean", "optional": true}, {"name": "allowTriggeredUpdates", "type": "boolean", "optional": true}], ["timestamp"]);
inspectorBackend.registerCommand("Profiler.stop", [], ["profile"]);
inspectorBackend.registerCommand("Profiler.stopPreciseCoverage", [], []);
inspectorBackend.registerCommand("Profiler.takePreciseCoverage", [], ["result", "timestamp"]);
inspectorBackend.registerType("Profiler.ProfileNode", [{"name": "id", "type": "number", "optional": false}, {"name": "callFrame", "type": "object", "optional": false}, {"name": "hitCount", "type": "number", "optional": true}, {"name": "children", "type": "array", "optional": true}, {"name": "deoptReason", "type": "string", "optional": true}, {"name": "positionTicks", "type": "array", "optional": true}]);
inspectorBackend.registerType("Profiler.Profile", [{"name": "nodes", "type": "array", "optional": false}, {"name": "startTime", "type": "number", "optional": false}, {"name": "endTime", "type": "number", "optional": false}, {"name": "samples", "type": "array", "optional": true}, {"name": "timeDeltas", "type": "array", "optional": true}]);
inspectorBackend.registerType("Profiler.PositionTickInfo", [{"name": "line", "type": "number", "optional": false}, {"name": "ticks", "type": "number", "optional": false}]);
inspectorBackend.registerType("Profiler.CoverageRange", [{"name": "startOffset", "type": "number", "optional": false}, {"name": "endOffset", "type": "number", "optional": false}, {"name": "count", "type": "number", "optional": false}]);
inspectorBackend.registerType("Profiler.FunctionCoverage", [{"name": "functionName", "type": "string", "optional": false}, {"name": "ranges", "type": "array", "optional": false}, {"name": "isBlockCoverage", "type": "boolean", "optional": false}]);
inspectorBackend.registerType("Profiler.ScriptCoverage", [{"name": "scriptId", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": false}, {"name": "functions", "type": "array", "optional": false}]);

// Runtime.
inspectorBackend.registerEnum("Runtime.SerializationOptionsSerialization", {Deep: "deep", Json: "json", IdOnly: "idOnly"});
inspectorBackend.registerEnum("Runtime.DeepSerializedValueType", {Undefined: "undefined", Null: "null", String: "string", Number: "number", Boolean: "boolean", Bigint: "bigint", Regexp: "regexp", Date: "date", Symbol: "symbol", Array: "array", Object: "object", Function: "function", Map: "map", Set: "set", Weakmap: "weakmap", Weakset: "weakset", Error: "error", Proxy: "proxy", Promise: "promise", Typedarray: "typedarray", Arraybuffer: "arraybuffer", Node: "node", Window: "window"});
inspectorBackend.registerEnum("Runtime.RemoteObjectType", {Object: "object", Function: "function", Undefined: "undefined", String: "string", Number: "number", Boolean: "boolean", Symbol: "symbol", Bigint: "bigint"});
inspectorBackend.registerEnum("Runtime.RemoteObjectSubtype", {Array: "array", Null: "null", Node: "node", Regexp: "regexp", Date: "date", Map: "map", Set: "set", Weakmap: "weakmap", Weakset: "weakset", Iterator: "iterator", Generator: "generator", Error: "error", Proxy: "proxy", Promise: "promise", Typedarray: "typedarray", Arraybuffer: "arraybuffer", Dataview: "dataview", Webassemblymemory: "webassemblymemory", Wasmvalue: "wasmvalue"});
inspectorBackend.registerEnum("Runtime.ObjectPreviewType", {Object: "object", Function: "function", Undefined: "undefined", String: "string", Number: "number", Boolean: "boolean", Symbol: "symbol", Bigint: "bigint"});
inspectorBackend.registerEnum("Runtime.ObjectPreviewSubtype", {Array: "array", Null: "null", Node: "node", Regexp: "regexp", Date: "date", Map: "map", Set: "set", Weakmap: "weakmap", Weakset: "weakset", Iterator: "iterator", Generator: "generator", Error: "error", Proxy: "proxy", Promise: "promise", Typedarray: "typedarray", Arraybuffer: "arraybuffer", Dataview: "dataview", Webassemblymemory: "webassemblymemory", Wasmvalue: "wasmvalue"});
inspectorBackend.registerEnum("Runtime.PropertyPreviewType", {Object: "object", Function: "function", Undefined: "undefined", String: "string", Number: "number", Boolean: "boolean", Symbol: "symbol", Accessor: "accessor", Bigint: "bigint"});
inspectorBackend.registerEnum("Runtime.PropertyPreviewSubtype", {Array: "array", Null: "null", Node: "node", Regexp: "regexp", Date: "date", Map: "map", Set: "set", Weakmap: "weakmap", Weakset: "weakset", Iterator: "iterator", Generator: "generator", Error: "error", Proxy: "proxy", Promise: "promise", Typedarray: "typedarray", Arraybuffer: "arraybuffer", Dataview: "dataview", Webassemblymemory: "webassemblymemory", Wasmvalue: "wasmvalue"});
inspectorBackend.registerEvent("Runtime.bindingCalled", ["name", "payload", "executionContextId"]);
inspectorBackend.registerEnum("Runtime.ConsoleAPICalledEventType", {Log: "log", Debug: "debug", Info: "info", Error: "error", Warning: "warning", Dir: "dir", DirXML: "dirxml", Table: "table", Trace: "trace", Clear: "clear", StartGroup: "startGroup", StartGroupCollapsed: "startGroupCollapsed", EndGroup: "endGroup", Assert: "assert", Profile: "profile", ProfileEnd: "profileEnd", Count: "count", TimeEnd: "timeEnd"});
inspectorBackend.registerEvent("Runtime.consoleAPICalled", ["type", "args", "executionContextId", "timestamp", "stackTrace", "context"]);
inspectorBackend.registerEvent("Runtime.exceptionRevoked", ["reason", "exceptionId"]);
inspectorBackend.registerEvent("Runtime.exceptionThrown", ["timestamp", "exceptionDetails"]);
inspectorBackend.registerEvent("Runtime.executionContextCreated", ["context"]);
inspectorBackend.registerEvent("Runtime.executionContextDestroyed", ["executionContextId", "executionContextUniqueId"]);
inspectorBackend.registerEvent("Runtime.executionContextsCleared", []);
inspectorBackend.registerEvent("Runtime.inspectRequested", ["object", "hints", "executionContextId"]);
inspectorBackend.registerCommand("Runtime.awaitPromise", [{"name": "promiseObjectId", "type": "string", "optional": false, "typeRef": "RemoteObjectId"}, {"name": "returnByValue", "type": "boolean", "optional": true}, {"name": "generatePreview", "type": "boolean", "optional": true}], ["result", "exceptionDetails"]);
inspectorBackend.registerCommand("Runtime.callFunctionOn", [{"name": "functionDeclaration", "type": "string", "optional": false}, {"name": "objectId", "type": "string", "optional": true, "typeRef": "RemoteObjectId"}, {"name": "arguments", "type": "array", "optional": true}, {"name": "silent", "type": "boolean", "optional": true}, {"name": "returnByValue", "type": "boolean", "optional": true}, {"name": "generatePreview", "type": "boolean", "optional": true}, {"name": "userGesture", "type": "boolean", "optional": true}, {"name": "awaitPromise", "type": "boolean", "optional": true}, {"name": "executionContextId", "type": "number", "optional": true, "typeRef": "ExecutionContextId"}, {"name": "objectGroup", "type": "string", "optional": true}, {"name": "throwOnSideEffect", "type": "boolean", "optional": true}, {"name": "uniqueContextId", "type": "string", "optional": true}, {"name": "generateWebDriverValue", "type": "boolean", "optional": true}, {"name": "serializationOptions", "type": "object", "optional": true, "typeRef": "Runtime.SerializationOptions"}], ["result", "exceptionDetails"]);
inspectorBackend.registerCommand("Runtime.compileScript", [{"name": "expression", "type": "string", "optional": false}, {"name": "sourceURL", "type": "string", "optional": false}, {"name": "persistScript", "type": "boolean", "optional": false}, {"name": "executionContextId", "type": "number", "optional": true, "typeRef": "ExecutionContextId"}], ["scriptId", "exceptionDetails"]);
inspectorBackend.registerCommand("Runtime.disable", [], []);
inspectorBackend.registerCommand("Runtime.discardConsoleEntries", [], []);
inspectorBackend.registerCommand("Runtime.enable", [], []);
inspectorBackend.registerCommand("Runtime.evaluate", [{"name": "expression", "type": "string", "optional": false}, {"name": "objectGroup", "type": "string", "optional": true}, {"name": "includeCommandLineAPI", "type": "boolean", "optional": true}, {"name": "silent", "type": "boolean", "optional": true}, {"name": "contextId", "type": "number", "optional": true, "typeRef": "ExecutionContextId"}, {"name": "returnByValue", "type": "boolean", "optional": true}, {"name": "generatePreview", "type": "boolean", "optional": true}, {"name": "userGesture", "type": "boolean", "optional": true}, {"name": "awaitPromise", "type": "boolean", "optional": true}, {"name": "throwOnSideEffect", "type": "boolean", "optional": true}, {"name": "timeout", "type": "number", "optional": true, "typeRef": "TimeDelta"}, {"name": "disableBreaks", "type": "boolean", "optional": true}, {"name": "replMode", "type": "boolean", "optional": true}, {"name": "allowUnsafeEvalBlockedByCSP", "type": "boolean", "optional": true}, {"name": "uniqueContextId", "type": "string", "optional": true}, {"name": "generateWebDriverValue", "type": "boolean", "optional": true}, {"name": "serializationOptions", "type": "object", "optional": true, "typeRef": "Runtime.SerializationOptions"}], ["result", "exceptionDetails"]);
inspectorBackend.registerCommand("Runtime.getIsolateId", [], ["id"]);
inspectorBackend.registerCommand("Runtime.getHeapUsage", [], ["usedSize", "totalSize"]);
inspectorBackend.registerCommand("Runtime.getProperties", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "RemoteObjectId"}, {"name": "ownProperties", "type": "boolean", "optional": true}, {"name": "accessorPropertiesOnly", "type": "boolean", "optional": true}, {"name": "generatePreview", "type": "boolean", "optional": true}, {"name": "nonIndexedPropertiesOnly", "type": "boolean", "optional": true}], ["result", "internalProperties", "privateProperties", "exceptionDetails"]);
inspectorBackend.registerCommand("Runtime.globalLexicalScopeNames", [{"name": "executionContextId", "type": "number", "optional": true, "typeRef": "ExecutionContextId"}], ["names"]);
inspectorBackend.registerCommand("Runtime.queryObjects", [{"name": "prototypeObjectId", "type": "string", "optional": false, "typeRef": "RemoteObjectId"}, {"name": "objectGroup", "type": "string", "optional": true}], ["objects"]);
inspectorBackend.registerCommand("Runtime.releaseObject", [{"name": "objectId", "type": "string", "optional": false, "typeRef": "RemoteObjectId"}], []);
inspectorBackend.registerCommand("Runtime.releaseObjectGroup", [{"name": "objectGroup", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Runtime.runIfWaitingForDebugger", [], []);
inspectorBackend.registerCommand("Runtime.runScript", [{"name": "scriptId", "type": "string", "optional": false, "typeRef": "ScriptId"}, {"name": "executionContextId", "type": "number", "optional": true, "typeRef": "ExecutionContextId"}, {"name": "objectGroup", "type": "string", "optional": true}, {"name": "silent", "type": "boolean", "optional": true}, {"name": "includeCommandLineAPI", "type": "boolean", "optional": true}, {"name": "returnByValue", "type": "boolean", "optional": true}, {"name": "generatePreview", "type": "boolean", "optional": true}, {"name": "awaitPromise", "type": "boolean", "optional": true}], ["result", "exceptionDetails"]);
inspectorBackend.registerCommand("Runtime.setAsyncCallStackDepth", [{"name": "maxDepth", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Runtime.setCustomObjectFormatterEnabled", [{"name": "enabled", "type": "boolean", "optional": false}], []);
inspectorBackend.registerCommand("Runtime.setMaxCallStackSizeToCapture", [{"name": "size", "type": "number", "optional": false}], []);
inspectorBackend.registerCommand("Runtime.terminateExecution", [], []);
inspectorBackend.registerCommand("Runtime.addBinding", [{"name": "name", "type": "string", "optional": false}, {"name": "executionContextId", "type": "number", "optional": true, "typeRef": "ExecutionContextId"}, {"name": "executionContextName", "type": "string", "optional": true}], []);
inspectorBackend.registerCommand("Runtime.removeBinding", [{"name": "name", "type": "string", "optional": false}], []);
inspectorBackend.registerCommand("Runtime.getExceptionDetails", [{"name": "errorObjectId", "type": "string", "optional": false, "typeRef": "RemoteObjectId"}], ["exceptionDetails"]);
inspectorBackend.registerType("Runtime.SerializationOptions", [{"name": "serialization", "type": "string", "optional": false}, {"name": "maxDepth", "type": "number", "optional": true}]);
inspectorBackend.registerType("Runtime.DeepSerializedValue", [{"name": "type", "type": "string", "optional": false}, {"name": "value", "type": "any", "optional": true}, {"name": "objectId", "type": "string", "optional": true}, {"name": "weakLocalObjectReference", "type": "number", "optional": true}]);
inspectorBackend.registerType("Runtime.RemoteObject", [{"name": "type", "type": "string", "optional": false}, {"name": "subtype", "type": "string", "optional": true}, {"name": "className", "type": "string", "optional": true}, {"name": "value", "type": "any", "optional": true}, {"name": "unserializableValue", "type": "string", "optional": true}, {"name": "description", "type": "string", "optional": true}, {"name": "webDriverValue", "type": "object", "optional": true}, {"name": "deepSerializedValue", "type": "object", "optional": true}, {"name": "objectId", "type": "string", "optional": true}, {"name": "preview", "type": "object", "optional": true}, {"name": "customPreview", "type": "object", "optional": true}]);
inspectorBackend.registerType("Runtime.CustomPreview", [{"name": "header", "type": "string", "optional": false}, {"name": "bodyGetterId", "type": "string", "optional": true}]);
inspectorBackend.registerType("Runtime.ObjectPreview", [{"name": "type", "type": "string", "optional": false}, {"name": "subtype", "type": "string", "optional": true}, {"name": "description", "type": "string", "optional": true}, {"name": "overflow", "type": "boolean", "optional": false}, {"name": "properties", "type": "array", "optional": false}, {"name": "entries", "type": "array", "optional": true}]);
inspectorBackend.registerType("Runtime.PropertyPreview", [{"name": "name", "type": "string", "optional": false}, {"name": "type", "type": "string", "optional": false}, {"name": "value", "type": "string", "optional": true}, {"name": "valuePreview", "type": "object", "optional": true}, {"name": "subtype", "type": "string", "optional": true}]);
inspectorBackend.registerType("Runtime.EntryPreview", [{"name": "key", "type": "object", "optional": true}, {"name": "value", "type": "object", "optional": false}]);
inspectorBackend.registerType("Runtime.PropertyDescriptor", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "object", "optional": true}, {"name": "writable", "type": "boolean", "optional": true}, {"name": "get", "type": "object", "optional": true}, {"name": "set", "type": "object", "optional": true}, {"name": "configurable", "type": "boolean", "optional": false}, {"name": "enumerable", "type": "boolean", "optional": false}, {"name": "wasThrown", "type": "boolean", "optional": true}, {"name": "isOwn", "type": "boolean", "optional": true}, {"name": "symbol", "type": "object", "optional": true}]);
inspectorBackend.registerType("Runtime.InternalPropertyDescriptor", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "object", "optional": true}]);
inspectorBackend.registerType("Runtime.PrivatePropertyDescriptor", [{"name": "name", "type": "string", "optional": false}, {"name": "value", "type": "object", "optional": true}, {"name": "get", "type": "object", "optional": true}, {"name": "set", "type": "object", "optional": true}]);
inspectorBackend.registerType("Runtime.CallArgument", [{"name": "value", "type": "any", "optional": true}, {"name": "unserializableValue", "type": "string", "optional": true}, {"name": "objectId", "type": "string", "optional": true}]);
inspectorBackend.registerType("Runtime.ExecutionContextDescription", [{"name": "id", "type": "number", "optional": false}, {"name": "origin", "type": "string", "optional": false}, {"name": "name", "type": "string", "optional": false}, {"name": "uniqueId", "type": "string", "optional": false}, {"name": "auxData", "type": "object", "optional": true}]);
inspectorBackend.registerType("Runtime.ExceptionDetails", [{"name": "exceptionId", "type": "number", "optional": false}, {"name": "text", "type": "string", "optional": false}, {"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": false}, {"name": "scriptId", "type": "string", "optional": true}, {"name": "url", "type": "string", "optional": true}, {"name": "stackTrace", "type": "object", "optional": true}, {"name": "exception", "type": "object", "optional": true}, {"name": "executionContextId", "type": "number", "optional": true}, {"name": "exceptionMetaData", "type": "object", "optional": true}]);
inspectorBackend.registerType("Runtime.CallFrame", [{"name": "functionName", "type": "string", "optional": false}, {"name": "scriptId", "type": "string", "optional": false}, {"name": "url", "type": "string", "optional": false}, {"name": "lineNumber", "type": "number", "optional": false}, {"name": "columnNumber", "type": "number", "optional": false}]);
inspectorBackend.registerType("Runtime.StackTrace", [{"name": "description", "type": "string", "optional": true}, {"name": "callFrames", "type": "array", "optional": false}, {"name": "parent", "type": "object", "optional": true}, {"name": "parentId", "type": "object", "optional": true}]);
inspectorBackend.registerType("Runtime.StackTraceId", [{"name": "id", "type": "string", "optional": false}, {"name": "debuggerId", "type": "string", "optional": true}]);

// Schema.
inspectorBackend.registerCommand("Schema.getDomains", [], ["domains"]);
inspectorBackend.registerType("Schema.Domain", [{"name": "name", "type": "string", "optional": false}, {"name": "version", "type": "string", "optional": false}]);


}

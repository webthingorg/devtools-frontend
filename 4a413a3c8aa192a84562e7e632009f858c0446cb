{
  "comments": [
    {
      "key": {
        "uuid": "8aaa6c5b_2d9feddf",
        "filename": "front_end/main/MainImpl.js",
        "patchSetId": 14
      },
      "lineNbr": 689,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-14T01:48:54Z",
      "side": 1,
      "message": "A \"dummy\" view is with the title \"Settings\" is introduced here in order for it to appear in sorted alphabetical order within the submenu.",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a5b3dce_59298d5b",
        "filename": "front_end/main/MainImpl.js",
        "patchSetId": 14
      },
      "lineNbr": 689,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T16:04:32Z",
      "side": 1,
      "message": "Can we do something different to provide for a sort order than create dummy views? It seems to me that the \"alpabetical order\" is an English-centric view of the world in a case in which we\u0027re ordering based on dummy views with stealth coded IDs.",
      "parentUuid": "8aaa6c5b_2d9feddf",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11228e28_e653a31a",
        "filename": "front_end/main/MainImpl.js",
        "patchSetId": 14
      },
      "lineNbr": 689,
      "author": {
        "id": 1341877
      },
      "writtenOn": "2020-02-17T18:51:38Z",
      "side": 1,
      "message": "Is this for alphabetical order or because the module.json doesn\u0027t specify a location for this view?",
      "parentUuid": "3a5b3dce_59298d5b",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0faae8a_d02df518",
        "filename": "front_end/main/MainImpl.js",
        "patchSetId": 14
      },
      "lineNbr": 689,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Good question - these views are are returned in sorted order based their localized \u0027title\u0027 property (which is what is displayed), so it\u0027s not restricted to English sort order.\n\nIdeally we could re-use the existing \"preferences\" settings view, however, its \u0027title\u0027 property for is \"Preferences\" and not \"Settings\", which is confusing. We could override the way the label appears in the menu itself, but then it wouldn\u0027t show up in the right spot as the sorting is based on module-defined title. We could add the view to the `extensions` list and then sort it again, but, but that would require borrowing code or opening new APIs up in Runtime.js or even ContextMenu.js (insert-sorted?).\n\nAs Settings view doesn\u0027t fall in the normal realm of closeable-drawer-views, we have to make a special case somewhere. This implementation felt the least intrusive and well balanced to get the desired result.",
      "parentUuid": "11228e28_e653a31a",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11d4e3f4_3b3423b8",
        "filename": "front_end/quick_open/CommandMenu.js",
        "patchSetId": 14
      },
      "lineNbr": 65,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T16:04:32Z",
      "side": 1,
      "message": "In the toolbar, the user action code is treated as if it has a default. Here, it appears to be required, but you have a test for undefined again.\n\nPlease see my comment on the Toolbar about:\n\n - Make your action codes clearly optional with the `?` annotation\n - Instead of adding parameters like this to the function, add them to an options object parameter instead",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cede5ec_e6adebf9",
        "filename": "front_end/quick_open/CommandMenu.js",
        "patchSetId": 14
      },
      "lineNbr": 65,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "11d4e3f4_3b3423b8",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff4fb7fe_84a31033",
        "filename": "front_end/settings/SettingsScreen.js",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1341877
      },
      "writtenOn": "2020-02-17T18:51:38Z",
      "side": 1,
      "message": "could you explain this logic?",
      "range": {
        "startLine": 97,
        "startChar": 4,
        "endLine": 99,
        "endChar": 5
      },
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e318c17_9ca52cfe",
        "filename": "front_end/settings/SettingsScreen.js",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "SettingsScreen lives in a tabbed pane; we fire a Panel opened event using the native TabSelected event for tabbed panes. This follows the same approach as the top level tab and drawer telemetry in DevTools.\n\nWhen Settings opens for the first time, the TabSelected event fires and a telemetry event is recorded as expected for the target tab. (The first open tab need not be Preferences - it\u0027s possible to open directly to Blackboxing, for example, via the command menu).\n\nHowever, when Settings is dismissed, then re-opened to that *same tab* it was closed on, TabSelected does not fire. This is because the tabbed pane is a singleton that lives on after construction and TabSelected only fires when *changing tabs*.\n\nThis doesn\u0027t make sense from a telemetry sense, as the user is deliberately bringing the panel into view once more - the panel is being shown, so we should record an event. This bit of logic ensures we reliably fire a panel shown event every time Settings is opened, even if to the same panel it was closed on. The _hasShown field prevents firing a double event on the first open.\n\nThe top level tab bar and drawer don\u0027t have this problem because when users switch views, they switch tabs. But closing Settings does not switch tabs, it just hides the component from view.",
      "parentUuid": "ff4fb7fe_84a31033",
      "range": {
        "startLine": 97,
        "startChar": 4,
        "endLine": 99,
        "endChar": 5
      },
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64ca414c_8db84f3e",
        "filename": "front_end/settings/SettingsScreen.js",
        "patchSetId": 14
      },
      "lineNbr": 129,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T16:04:32Z",
      "side": 1,
      "message": "name nit: record -\u003e report",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b3d005f_269d11f6",
        "filename": "front_end/settings/SettingsScreen.js",
        "patchSetId": 14
      },
      "lineNbr": 129,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "64ca414c_8db84f3e",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97bec6f2_d7bcd614",
        "filename": "front_end/settings/SettingsScreen.js",
        "patchSetId": 14
      },
      "lineNbr": 130,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T16:04:32Z",
      "side": 1,
      "message": "Why do we need to map this here, and with an `if`? I\u0027d prefer to see some statically-defined Map if we need to do this, i.e.\n\n    tabId \u003d CUSTOM_TAB_IDS_TO_TAB_ID.get(tabId) || tabId;\n\nBut I don\u0027t understand why a tabId would be what looks like not an ID, and why only \"shortcuts\" would be relevant.",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "376288e7_fb304230",
        "filename": "front_end/settings/SettingsScreen.js",
        "patchSetId": 14
      },
      "lineNbr": 130,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Alas, Shortcuts is a special case panel here in Settings - on line 62 of this file, we see Shortcuts is defined inline, and with a localized string as an ID. Thus we have to do a special check for this particular panel - then translate it to a hardcoded \u0027shortcuts\u0027 ID so all the telemetry for that panel falls in the same bucket regardless of language.\n\nThis is unlike the other panels, which are defined as module extensions (hardcoded ID strings). Since this is a one-off case, I feel a simple if statement is OK here.",
      "parentUuid": "97bec6f2_d7bcd614",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5261bef4_d3865fa8",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 181,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T16:04:32Z",
      "side": 1,
      "message": "You shouldn\u0027t specify that `userActionCode` is truthy with a default value. `undefined` is not a concrete default value. Rather, annotate it as `?Host.UserMetrics.Action`.\n\nPut another way: there isn\u0027t a corresponding TypeScript annotation that would match your logic:\n\n    createActionButton(action: Action, showLabel \u003d false, userActionCode: UserMetrics.Action) {\n      // ...\n      if (userActionCode !\u003d\u003d undefined) {\n        // per the compiler, the condition always be true, and the if could be optimized away\n\nWith TypeScript coming down the line, we want to avoid this kind of pattern.",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fbee8ba_9d2eb86c",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 181,
      "author": {
        "id": 1341877
      },
      "writtenOn": "2020-02-17T18:51:38Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "5261bef4_d3865fa8",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d9a0907_143f5dbe",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 181,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4fbee8ba_9d2eb86c",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9c06e74_d73599c8",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 184,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T16:04:32Z",
      "side": 1,
      "message": "In general: Instead of adding additional parameters, instead of adding a bunch of parameters, I\u0027d like to add an `options` parameters where optional options can go.",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfb2daab_715e690c",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 184,
      "author": {
        "id": 1385776
      },
      "writtenOn": "2020-02-14T17:26:43Z",
      "side": 1,
      "message": "Is the options parameter required in that case? Or is it an optional parameter with optional members? I worry it reduces clarity for the sake of signature stability. I\u0027m more comfortable with it if the same set of options will be used in many places.",
      "parentUuid": "b9c06e74_d73599c8",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b0c09d0_99240302",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 184,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T17:44:27Z",
      "side": 1,
      "message": "It\u0027s an optional parameter. It\u0027d look like the following TypeScript interface (sorry, I have to look up the how to write equivalent JSDoc typedef):\n\n    interface ToolbarActionButtonOptions {\n      showLabel?: boolean;\n      userActionCode?: Host.UserMetrics.Action;\n    }\n    // ...\n    static createActionButton(action: Action, options: ToolbarActionButtonOptions \u003d { }) {\n\nNow, whether we refactor the function to move `showLabel` into the options bag is a question. But the takeaway is, to preserve API stability, as new options are added to the function, the ToolbarActionButtonOptions interface can grow, and so long as the options added to it are themselves optional, this interface satisfies it. (Alternatively, you can define a DEFAULT_ACTION_BUTTON_OPTIONS constant next to the interface, and set the parameter default equal to the constant rather than an empty object).",
      "parentUuid": "cfb2daab_715e690c",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4563e80a_1d70776e",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 184,
      "author": {
        "id": 1385776
      },
      "writtenOn": "2020-02-14T18:52:08Z",
      "side": 1,
      "message": "How about destructuring? (I think the below is mostly correct syntax)\n\n/**\n  * @param {!Action} action\n  * @param {Object\u003d} options\n  * @param {boolean\u003d} options.showLabel\n  * @param {?Host.UserMetrics.Action\u003d} options.userActionCode\n  * @return {!ToolbarButton}\n  */\n  static createActionButton(action, {showLabel \u003d false, userActionCode} \u003d {}) {",
      "parentUuid": "9b0c09d0_99240302",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbc8d67c_15c4d639",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 184,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T19:15:14Z",
      "side": 1,
      "message": "I\u0027m not opposed to that, but it can become unwieldy. Porting it to TypeScript will necessitate creating the interface later or else you get this beast:\n\n    static createActionButton(action: Action, { showLabel \u003d false, userActionCode }: { showLabel: boolean, userActionCode?: Host.UserMetrics.Action })\n\nI only point this out because we know we\u0027re going towards TypeScript, and it\u0027s my opinion that a JSDoc Typedef maps naturally to an interface declaration, whereas the list of destructured parameters maps to what I\u0027ve written above.  The typedef+interface becomes a bit cleaner:\n\n    static createActionButton(action: Action, { showLabel \u003d false, userActionCode }: ToolbarActionButtonOptions) {\n\nBut then you can just do the destructuring on line one...\n\n    static createActionButton(action: Action, options: ToolbarActionButtonOptions \u003d { }) {\n      const { showLabel, userActionCode } \u003d options;\n\nGiven our line length preferences, I would suppose the last one would be most preferred.",
      "parentUuid": "4563e80a_1d70776e",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb8cc3b7_753778e3",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 184,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Great feedback, thanks - the TypeScript analogy is especially helpful. The inconsistency in the argument type definitions was a mistake on my part 😊 I\u0027ll see how the options object parameter would look for this case and for action commands - I think the separate interface definition will be the cleanest solution here.",
      "parentUuid": "bbc8d67c_15c4d639",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4562c4ff_aae7902d",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 196,
      "author": {
        "id": 1341877
      },
      "writtenOn": "2020-02-17T18:51:38Z",
      "side": 1,
      "message": "Given that your two buttons are the only ones using this extra userActionCode to log telemetry for settings, why don\u0027t we just create two new actionIds and use the Settings ActionDelegate class to log the telemetry from there? \n\nThis way you would only modify the module.json and SettingsScreen.js and leave the toolbar items logic as it is.",
      "range": {
        "startLine": 193,
        "startChar": 5,
        "endLine": 196,
        "endChar": 8
      },
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76127d08_216a784b",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 196,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Good question. Toolbar icons reveal the keyboard shortcuts defined in their module extension, on hover. If we separated the keyboard shortcut action definition from the icon action definition, there wouldn\u0027t be a way to easily discover the Settings shortcut (F1, Shift+?) by hovering over the icon.\n\nWe could try getting around this by doubling up on keyboard shortcut definitions (have the keyboard shortcut defined on the icon, plus a separate entry) but this could lead to weird race conditions (which one fires first?), and in light of future keyboard shortcut development (telemetry, customization, etc), further problems down the road.\n\nWe could modify the Toolbar icon class definition to display keyboard shortcuts without having them defined on the module extension itself, but it would be hard to link the icon to the shortcut in a natural unintrusive way",
      "parentUuid": "4562c4ff_aae7902d",
      "range": {
        "startLine": 193,
        "startChar": 5,
        "endLine": 196,
        "endChar": 8
      },
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "380fe884_2a2bfb9f",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 244,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2020-02-14T16:04:32Z",
      "side": 1,
      "message": "Same here.",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28035e83_36dff838",
        "filename": "front_end/ui/Toolbar.js",
        "patchSetId": 14
      },
      "lineNbr": 244,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-02-24T19:49:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "380fe884_2a2bfb9f",
      "revId": "4a413a3c8aa192a84562e7e632009f858c0446cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
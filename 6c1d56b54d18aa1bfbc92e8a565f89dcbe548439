{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5f6c5300_551f56b5",
        "filename": "front_end/third_party/intl-messageformat/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-07-23T10:22:27Z",
      "side": 1,
      "message": "Shouldn\u0027t we also copy `intl-messageformat.esm.js` over? I am confused as to how Rollup is able to find the file, given that it is missing from the gen-folder.",
      "range": {
        "startLine": 14,
        "startChar": 4,
        "endLine": 14,
        "endChar": 42
      },
      "revId": "6c1d56b54d18aa1bfbc92e8a565f89dcbe548439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae6274f8_39d23c72",
        "filename": "front_end/third_party/intl-messageformat/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-07-23T10:26:33Z",
      "side": 1,
      "message": "Marked did it similarly, where its only specified in the tsconfig. Happy to add it though.",
      "parentUuid": "5f6c5300_551f56b5",
      "range": {
        "startLine": 14,
        "startChar": 4,
        "endLine": 14,
        "endChar": 42
      },
      "revId": "6c1d56b54d18aa1bfbc92e8a565f89dcbe548439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f95deb5_b4a957a4",
        "filename": "front_end/third_party/intl-messageformat/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-07-23T10:33:40Z",
      "side": 1,
      "message": "Interesting. Well, if it works, it works.",
      "parentUuid": "ae6274f8_39d23c72",
      "range": {
        "startLine": 14,
        "startChar": 4,
        "endLine": 14,
        "endChar": 42
      },
      "revId": "6c1d56b54d18aa1bfbc92e8a565f89dcbe548439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c84fa6ec_11864ac1",
        "filename": "front_end/third_party/intl-messageformat/README.chromium",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-07-23T10:22:27Z",
      "side": 1,
      "message": "Can we upstream this change as well? Seems like it is missing from the upstream bundle.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 83
      },
      "revId": "6c1d56b54d18aa1bfbc92e8a565f89dcbe548439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f890bbb3_86947954",
        "filename": "front_end/third_party/intl-messageformat/README.chromium",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-07-23T10:26:33Z",
      "side": 1,
      "message": "I checked, but esbuild doesn\u0027t output d.ts files. Copying the index.d.ts file upstream feels wrong, but I\u0027m not sure how d.ts files of bundles should work.",
      "parentUuid": "c84fa6ec_11864ac1",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 83
      },
      "revId": "6c1d56b54d18aa1bfbc92e8a565f89dcbe548439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34b58e54_be6ac5ac",
        "filename": "front_end/third_party/intl-messageformat/README.chromium",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-07-23T10:33:40Z",
      "side": 1,
      "message": "I am fine with this as-is. I just checked and the reason this magically works is that TypeScript honors the `package.json` field `types`. You can see in https://unpkg.com/browse/intl-messageformat@9.7.1/package.json that they set it to `index.d.ts`. In other words, no matter which bundle you consume from this package, TypeScript will always look into `index.d.ts`.\n\nIn short, that is equivalent to us copying the file. To prevent code duplication, you could consider using the export-solution that Acorn used: https://github.com/acornjs/acorn/pull/954",
      "parentUuid": "f890bbb3_86947954",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 83
      },
      "revId": "6c1d56b54d18aa1bfbc92e8a565f89dcbe548439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfcadb68_5b535c46",
        "filename": "front_end/third_party/intl-messageformat/README.chromium",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-07-26T09:37:18Z",
      "side": 1,
      "message": "Tried the import/export thing but didn\u0027t seem to work. I hope we can address it in a follow-up. Unfortunately, due to the unbundled types, the type information is incomplete at the moment as well. E.g. inspecting the AST (as done by one intl function) is untyped due to the missing types of `intl-messageformat-parser`.\n\nI\u0027ll land the CL as-is for now, but will look into getting bundled type information as part of the package upstream.",
      "parentUuid": "34b58e54_be6ac5ac",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 83
      },
      "revId": "6c1d56b54d18aa1bfbc92e8a565f89dcbe548439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
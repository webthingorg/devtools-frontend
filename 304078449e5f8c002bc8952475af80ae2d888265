{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d74dace_1e613947",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-05-23T13:08:04Z",
      "side": 1,
      "message": "I wonder if there can be other properties that would use the angle swatch.\n\nFrankly, because of this reason; I\u0027d prefer the previous approach: calculating the computed value of the whole expression after a re-render through CSSAngleSwatch and calling `updateProperty` there.",
      "revId": "304078449e5f8c002bc8952475af80ae2d888265",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8dd6955_d36a43c5",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-23T13:28:24Z",
      "side": 1,
      "message": "The previous approach wasn\u0027t correct, though. That\u0027s what the referenced bug is about. E.g., consider\n`border: 1px hsl(45deg 50% 50%)`\nThe whole expression means nothing to the angle Swatch for 45deg.\n\nWhat I like about this solution is that it makes the background rendering explicitly contextual. Have a different kind of expression containing an angle that would be cool to show as a background in the wheel? Hook its Renderer up with the angleswatch.",
      "parentUuid": "5d74dace_1e613947",
      "revId": "304078449e5f8c002bc8952475af80ae2d888265",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cb696b5_8577f488",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-05-23T13:51:31Z",
      "side": 1,
      "message": "Whoa now I see, that makes a lot of sense and thanks for the explanation! :)",
      "parentUuid": "c8dd6955_d36a43c5",
      "revId": "304078449e5f8c002bc8952475af80ae2d888265",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f838d0d3_5ec29af6",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 3
      },
      "lineNbr": 274,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-05-23T13:08:04Z",
      "side": 1,
      "message": "I think this `substitions` logic would give the caller another responsibility to keep track of the substitions. This would cause the `getComputedText` to be not resolving correctly in some situations:\n\n* I have an angle match.\n* Its computed value is updated via `ValueChanged` event and we called `getComputedText` with the substitions which returned the correct computed text.\n\nHowever, since we didn\u0027t update the `matchedResult` with this computed text, now if anyone calls `context.matchedResult.getComputedText` without substitutions, they will get the wrong value.\n\nI\u0027m not sure if there is a use case for this but from the API/contract perspective, it feels erroneous ðŸ˜…\n\nSo I think we need a way to persist the substitutions. WDYT?",
      "revId": "304078449e5f8c002bc8952475af80ae2d888265",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c37fad22_39a84c4d",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 3
      },
      "lineNbr": 274,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-23T13:28:24Z",
      "side": 1,
      "message": "not persisting the substitutions was somewhat the point. `matchedResult` represents the parsed result from a CSS expression, it\u0027s stateful in that sense. When spinning the angle wheel the original CSS expression is never changed. Persisting substitutions would cause the computed text to converge from the original expression, so we\u0027d have to keep track of state.\n\nThat being said, I not extremely happy about the `substitutions` API myself, but it lets us manipulate the computed text without messing with any state.",
      "parentUuid": "f838d0d3_5ec29af6",
      "revId": "304078449e5f8c002bc8952475af80ae2d888265",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e80a3ba5_f26076e1",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 3
      },
      "lineNbr": 274,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-05-23T13:51:31Z",
      "side": 1,
      "message": "That also makes sense to me, now I see :)",
      "parentUuid": "c37fad22_39a84c4d",
      "revId": "304078449e5f8c002bc8952475af80ae2d888265",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "304078449e5f8c002bc8952475af80ae2d888265",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "304078449e5f8c002bc8952475af80ae2d888265",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "304078449e5f8c002bc8952475af80ae2d888265",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a26265d2_8e0ac534",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-06-10T10:12:09Z",
      "side": 1,
      "message": "PTAL!",
      "revId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bf274b3_f665581c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-12T18:45:43Z",
      "side": 1,
      "message": "This is so great, thank you for this! :D \n\nWhile the color is an improvement, it\u0027s still tough to detect changes when asserting a larger object. My example from before, but with this CL: https://screenshot.googleplex.com/4vUdP7VqnZcv5mo\n\nI\u0027ve left a suggestion below that would resolve that. I\u0027m happy to put up a CL to discuss that though, if you prefer.",
      "revId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dfee3b6_3732e744",
        "filename": "test/conductor/karma-resultsdb-reporter.ts",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-12T18:45:43Z",
      "side": 1,
      "message": "```suggestion\n  if (assertionErrors?.length \u003d\u003d\u003d 0) {\n    return [];\n  }\n  const err \u003d assertionErrors[0];\n  // If actual/expected look like JSON, parse into JSON for easier multiline diffs. https://github.com/litixsoft/karma-mocha-reporter/pull/62\n  if (String(err.actual).match(/^\".*\"$/) \u0026\u0026 String(err.expected).match(/^\".*\"$/)) {\n    try {\n      err.actual \u003d JSON.parse(err.actual);\n      err.expected \u003d JSON.parse(err.expected);\n    } catch (e) {\n    }\n  }\n\n  return diff.diffLines(`${err.expected}`, `${err.actual}`);\n```",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 39,
        "endChar": 9
      },
      "revId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e29e8358_06d1602f",
        "filename": "test/conductor/karma-resultsdb-reporter.ts",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-06-13T07:23:37Z",
      "side": 1,
      "message": "This feels a little backwards to me. Such a failure would stem from a place where I\u0027m comparing strings. Upon reporting error the strings I\u0027m comparing are modified (stripped of quotes, structure, etc). That\u0027s going to produce very weird error messages.\n\nLooking at the errors in your screenshot, is string comparison actually the right tool here? Why not compare the objects rather than the JSON representation?",
      "parentUuid": "6dfee3b6_3732e744",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 39,
        "endChar": 9
      },
      "revId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "887f836c_1a24483f",
        "filename": "test/conductor/karma-resultsdb-reporter.ts",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-13T22:55:49Z",
      "side": 1,
      "message": "Well, deepStrictEqual is already doing the object comparison. I do get your point that building a diff out of the parsed result isn\u0027t guaranteed to be meaningful though.\n\nBut... no big deal. This test is SaveFileFormatter.test.ts... and and one of the few places where we are asserting on actual JSON strings.   Given how infrequent that is, I\u0027m fine leaving this alone. :)",
      "parentUuid": "e29e8358_06d1602f",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 39,
        "endChar": 9
      },
      "revId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "51b6e9e255e3565f47749cfb83dfb39a1413def1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1cbaed6_db414d8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-18T19:30:28Z",
      "side": 1,
      "message": "This is a fix for accessibility bug and is ready for review.",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96001afe_d796de8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-18T19:32:04Z",
      "side": 1,
      "message": "\u003e Patch Set 1:\n\u003e \n\u003e (1 comment)\n\u003e \n\u003e This change is ready for review.\n\nThank you for your time!",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a650e68b_32ba20e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-22T16:55:23Z",
      "side": 1,
      "message": "Hi, this is the fix for an accessibility bug. Please take a look, thank you!",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb818707_2cc29394",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2022-08-23T09:14:01Z",
      "side": 1,
      "message": "Hi Erg√ºn, could you PTAL? Thanks!",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7ad3ca5_6e99602c",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1023,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-23T17:28:10Z",
      "side": 1,
      "message": "Can we move this to the constructor so that we attach the event handler once, wdyt?",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9bf191_b89b485d",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1023,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-23T23:53:43Z",
      "side": 1,
      "message": "This event can only happen after we have selected the listItemElement, I feel like it makes more sense to put it in the onInvoke(), wdyt?",
      "parentUuid": "a7ad3ca5_6e99602c",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d788a93c_5d47530b",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1023,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-24T08:20:31Z",
      "side": 1,
      "message": "`onInvoke` can be invoked multiple times. So if we attach the listener here, it will be attached more than once whenever `onInvoke` is called and this results in some kind of memory leak.\n\nSince we already have `listItemElement` defined in the constructor for `ManifestChildTreeElement`, we can define its behavior in there as well. WDYT? :)",
      "parentUuid": "3e9bf191_b89b485d",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac2d7f85_e413dc6c",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1027,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-23T17:28:10Z",
      "side": 1,
      "message": "I think we can use `querySelector(\u0027.mask-checkbox\u0027)` instead of `getElementsByClassName(\u0027mask-checkbox\u0027)[0]`, wdyt?",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ca89ee8_6977590d",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1027,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-23T23:53:43Z",
      "side": 1,
      "message": "updated, thx!",
      "parentUuid": "ac2d7f85_e413dc6c",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54522f2e_98e07a08",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1028,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-23T17:28:10Z",
      "side": 1,
      "message": "I think:\n* We can use `querySelector(\u0027[tabinde\u003d\"0\"]\u0027)` instead of `querySelectorAll(...)[0]` it applies to the other usages as well.\n* It would be safer if we remove the `as HTMLElement` assertion for being more defensive (in case `[tabindex\u003d\"0\"]` query returns nothing) and handle that case.",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60720934_bdc7978b",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1028,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-23T23:53:43Z",
      "side": 1,
      "message": "updated, thx!",
      "parentUuid": "54522f2e_98e07a08",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c549251_51961af8",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1035,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-23T17:28:10Z",
      "side": 1,
      "message": "Can you expand this comment here on to why we need to specially handle the case for protocol handler?",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40c0d829_5c433f16",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1035,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-23T23:53:43Z",
      "side": 1,
      "message": "updated, thx!",
      "parentUuid": "6c549251_51961af8",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f964cad_a9958d02",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1040,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-23T17:28:10Z",
      "side": 1,
      "message": "I think we can use optional chaining operator here to simplify a bit, so it becomes something like:\n`      focusableElement \u003d this.#sectionFieldElement.querySelector(\u0027devtools-protocol-handlers-view\u0027)?.shadowRoot?.querySelector(\u0027[tabindex\u003d\"0\"]\u0027) || null;\n` if we annotate `focusableElement` as `HTMLElement | null`. wdyt?",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49f34277_66a7864f",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1040,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-23T23:53:43Z",
      "side": 1,
      "message": "Looks great! updated it, thx!",
      "parentUuid": "0f964cad_a9958d02",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b719ffa0_e9043668",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1045,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-23T17:28:10Z",
      "side": 1,
      "message": "I think we can return if the event.key is not `Tab` at the start of the handler so that we don\u0027t execute the code that will not be used. Wdyt?",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a273d67_41396347",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1045,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-23T23:53:43Z",
      "side": 1,
      "message": "That makes sense, I\u0027ll update it. Thx!",
      "parentUuid": "b719ffa0_e9043668",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4a804bc_02027f35",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2022-08-23T17:28:10Z",
      "side": 1,
      "message": "IMO we can keep the focus in the page when the user navigated the focus to the page itself, wdyt? (So, we can remove this handler for shift + tab handling in the focusable element)",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2830ba1_1d5e26b8",
        "filename": "front_end/panels/application/ApplicationPanelSidebar.ts",
        "patchSetId": 1
      },
      "lineNbr": 1047,
      "author": {
        "id": 1542448
      },
      "writtenOn": "2022-08-23T23:53:43Z",
      "side": 1,
      "message": "I guess I\u0027m just not quite sure the logic for the focus order (when using shift+Tab). The reason I added a handler here is that I thought the shift+Tab would traverse reverse the focus order. I was thinking if users navigated the focus to the page from the sub-listItem, then they may want to go back to the sub-listItem from the same entry point on the page.\nBut I\u0027d agree with you that we can keep the focus in the page when the user navigated the focus to the page itself. I\u0027ll remove this handler. Thanks for your suggestions!",
      "parentUuid": "f4a804bc_02027f35",
      "revId": "5cd055140ea1f93be473e2114eed434c4a984e3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
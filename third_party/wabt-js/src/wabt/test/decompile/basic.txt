;;; TOOL: run-wasm-decompile

(module
  (memory 1)
  (func $f (param i32 i32) (result i32) (local i64 f32 f64)
    i64.const 8
    set_local 2
    f32.const 6.0
    set_local 3
    f64.const 7.0
    tee_local 4
    f64.const 10.0
    f64.lt
    if
      i32.const 1
      i32.const 2
      i32.load offset=3
      i32.const 5
      i32.add
      i32.store offset=4
    end
    get_local 0
    get_local 1
    i32.add
    i32.const 9
    call $f
    drop
    loop
      block
        i32.const 0
        if (result i32)
          i32.const 1
        else
          i32.const 2
        end
        br_if 0
        br 1
      end
      i32.const 1
      br_if 0
    end
    i32.const 1
  )
  ;; LLD outputs a name section with de-mangled C++ function signatures as names,
  ;; so have to make sure special chars get removed.
  (func (export "signature-&<>()") (param) (result))
  (func (export "signature-&[]()") (param) (result))
  (export "f" (func $f))
)

(;; STDOUT ;;;
function f(a:int, b:int):int {
  var c:long = 8L;
  var d:float = 6f;
  var e:double = 7d;
  if (e < 10d) { 1[4]:int = (2[3]:int + 5) }
  f(a + b, 9);
  loop L_b {
    block B_c {
      if (if (0) { 1 } else { 2 }) break B_c;
      continue L_b;
    }
    if (1) continue L_b;
  }
  return 1;
}

function signature______() {
}

function signature_______1() {
}

;;; STDOUT ;;)

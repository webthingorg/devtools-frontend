;;; TOOL: run-interp
;;; ARGS*: -v --enable-threads --enable-saturating-float-to-int --enable-sign-extension --enable-simd --enable-tail-call --enable-bulk-memory
;;; ARGS1: --host-print

(module
  (import "host" "print" (func $print (param i32)))

  (type $empty (func))
  (func $empty)
  (memory 1 1 shared)
  (table anyfunc (elem $empty $empty))
  (global $g (mut i32) (i32.const 0))
  (data "")
  (elem funcref)

  (; 0x00 ;) (func (export "unreachable") unreachable)
  (; 0x01 ;) ;; nop       -- not generated in interpreter
  (; 0x02 ;) ;; block     -- not generated in interpreter
  (; 0x03 ;) ;; loop      -- not generated in interpreter
  (; 0x04 ;) ;; if        -- not generated in interpreter
  (; 0x05 ;) ;; else      -- not generated in interpreter
  (; 0x06 ;) ;; try       -- not implemented
  (; 0x07 ;) ;; catch     -- not implemented
  (; 0x08 ;) ;; throw     -- not implemented
  (; 0x09 ;) ;; rethrow   -- not implemented
  (; 0x0a ;) ;; catch_all -- not implemented
  (; 0x0b ;) ;; end       -- not generated in interpreter
  (; 0x0c ;) (func (export "br") br 0)
  (; 0x0d ;) ;; 0x0d br_if  ;; not generated in interpreter
  (; 0x0e ;) (func (export "br_table") i32.const 1 br_table 0)
  (; 0x0f ;) (func (export "return") return)
  (; 0x10 ;) (func (export "call") call $empty)
  (; 0x11 ;) (func (export "call_indirect") i32.const 1 call_indirect (type $empty))

  ;; --enable-tail-call
  (; 0x12 ;) (func (export "return_call") return_call $empty)
  (; 0x13 ;) (func (export "return_call_indirect") i32.const 1 return_call_indirect (type $empty))

  (; 0x1a ;) (func (export "drop") i32.const 1 drop)
  (; 0x1b ;) (func (export "select") i32.const 1 i32.const 2 i32.const 3 select drop)
  (; 0x20 ;) (func (export "get_local") (local i32) get_local 0 drop)
  (; 0x21 ;) (func (export "set_local") (local i32) i32.const 1 set_local 0)
  (; 0x22 ;) (func (export "tee_local") (local i32) i32.const 1 tee_local 0 drop)
  (; 0x23 ;) (func (export "get_global") get_global 0 drop)
  (; 0x24 ;) (func (export "set_global") i32.const 1 set_global 0)
  (; 0x28 ;) (func (export "i32.load") i32.const 1 i32.load offset=2 drop)
  (; 0x29 ;) (func (export "i64.load") i32.const 1 i64.load offset=2 drop)
  (; 0x2a ;) (func (export "f32.load") i32.const 1 f32.load offset=2 drop)
  (; 0x2b ;) (func (export "f64.load") i32.const 1 f64.load offset=2 drop)
  (; 0x2c ;) (func (export "i32.load8_s") i32.const 1 i32.load8_s offset=2 drop)
  (; 0x2d ;) (func (export "i32.load8_u") i32.const 1 i32.load8_u offset=2 drop)
  (; 0x2e ;) (func (export "i32.load16_s") i32.const 1 i32.load16_s offset=2 drop)
  (; 0x2f ;) (func (export "i32.load16_u") i32.const 1 i32.load16_u offset=2 drop)
  (; 0x30 ;) (func (export "i64.load8_s") i32.const 1 i64.load8_s offset=2 drop)
  (; 0x31 ;) (func (export "i64.load8_u") i32.const 1 i64.load8_u offset=2 drop)
  (; 0x32 ;) (func (export "i64.load16_s") i32.const 1 i64.load16_s offset=2 drop)
  (; 0x33 ;) (func (export "i64.load16_u") i32.const 1 i64.load16_u offset=2 drop)
  (; 0x34 ;) (func (export "i64.load32_s") i32.const 1 i64.load32_s offset=2 drop)
  (; 0x35 ;) (func (export "i64.load32_u") i32.const 1 i64.load32_u offset=2 drop)
  (; 0x36 ;) (func (export "i32.store") i32.const 1 i32.const 2 i32.store offset=2)
  (; 0x37 ;) (func (export "i64.store") i32.const 1 i64.const 2 i64.store offset=2)
  (; 0x38 ;) (func (export "f32.store") i32.const 1 f32.const 2 f32.store offset=2)
  (; 0x39 ;) (func (export "f64.store") i32.const 1 f64.const 2 f64.store offset=2)
  (; 0x3a ;) (func (export "i32.store8") i32.const 1 i32.const 2 i32.store8 offset=2)
  (; 0x3b ;) (func (export "i32.store16") i32.const 1 i32.const 2 i32.store16 offset=2)
  (; 0x3c ;) (func (export "i64.store8") i32.const 1 i64.const 2 i64.store8 offset=2)
  (; 0x3d ;) (func (export "i64.store16") i32.const 1 i64.const 2 i64.store16 offset=2)
  (; 0x3e ;) (func (export "i64.store32") i32.const 1 i64.const 2 i64.store32 offset=2)
  (; 0x3f ;) (func (export "current_memory") current_memory drop)
  (; 0x40 ;) (func (export "grow_memory") i32.const 1 grow_memory drop)
  (; 0x41 ;) (func (export "i32.const") i32.const 1 drop)
  (; 0x42 ;) (func (export "i64.const") i64.const 1 drop)
  (; 0x43 ;) (func (export "f32.const") f32.const 1 drop)
  (; 0x44 ;) (func (export "f64.const") f64.const 1 drop)
  (; 0x45 ;) (func (export "i32.eqz") i32.const 1 i32.eqz drop)
  (; 0x46 ;) (func (export "i32.eq") i32.const 1 i32.const 2 i32.eq drop)
  (; 0x47 ;) (func (export "i32.ne") i32.const 1 i32.const 2 i32.ne drop)
  (; 0x48 ;) (func (export "i32.lt_s") i32.const 1 i32.const 2 i32.lt_s drop)
  (; 0x49 ;) (func (export "i32.lt_u") i32.const 1 i32.const 2 i32.lt_u drop)
  (; 0x4a ;) (func (export "i32.gt_s") i32.const 1 i32.const 2 i32.gt_s drop)
  (; 0x4b ;) (func (export "i32.gt_u") i32.const 1 i32.const 2 i32.gt_u drop)
  (; 0x4c ;) (func (export "i32.le_s") i32.const 1 i32.const 2 i32.le_s drop)
  (; 0x4d ;) (func (export "i32.le_u") i32.const 1 i32.const 2 i32.le_u drop)
  (; 0x4e ;) (func (export "i32.ge_s") i32.const 1 i32.const 2 i32.ge_s drop)
  (; 0x4f ;) (func (export "i32.ge_u") i32.const 1 i32.const 2 i32.ge_u drop)
  (; 0x50 ;) (func (export "i64.eqz") i64.const 1 i64.eqz drop)
  (; 0x51 ;) (func (export "i64.eq") i64.const 1 i64.const 2 i64.eq drop)
  (; 0x52 ;) (func (export "i64.ne") i64.const 1 i64.const 2 i64.ne drop)
  (; 0x53 ;) (func (export "i64.lt_s") i64.const 1 i64.const 2 i64.lt_s drop)
  (; 0x54 ;) (func (export "i64.lt_u") i64.const 1 i64.const 2 i64.lt_u drop)
  (; 0x55 ;) (func (export "i64.gt_s") i64.const 1 i64.const 2 i64.gt_s drop)
  (; 0x56 ;) (func (export "i64.gt_u") i64.const 1 i64.const 2 i64.gt_u drop)
  (; 0x57 ;) (func (export "i64.le_s") i64.const 1 i64.const 2 i64.le_s drop)
  (; 0x58 ;) (func (export "i64.le_u") i64.const 1 i64.const 2 i64.le_u drop)
  (; 0x59 ;) (func (export "i64.ge_s") i64.const 1 i64.const 2 i64.ge_s drop)
  (; 0x5a ;) (func (export "i64.ge_u") i64.const 1 i64.const 2 i64.ge_u drop)
  (; 0x5b ;) (func (export "f32.eq") f32.const 1 f32.const 2 f32.eq drop)
  (; 0x5c ;) (func (export "f32.ne") f32.const 1 f32.const 2 f32.ne drop)
  (; 0x5d ;) (func (export "f32.lt") f32.const 1 f32.const 2 f32.lt drop)
  (; 0x5e ;) (func (export "f32.gt") f32.const 1 f32.const 2 f32.gt drop)
  (; 0x5f ;) (func (export "f32.le") f32.const 1 f32.const 2 f32.le drop)
  (; 0x60 ;) (func (export "f32.ge") f32.const 1 f32.const 2 f32.ge drop)
  (; 0x61 ;) (func (export "f64.eq") f64.const 1 f64.const 2 f64.eq drop)
  (; 0x62 ;) (func (export "f64.ne") f64.const 1 f64.const 2 f64.ne drop)
  (; 0x63 ;) (func (export "f64.lt") f64.const 1 f64.const 2 f64.lt drop)
  (; 0x64 ;) (func (export "f64.gt") f64.const 1 f64.const 2 f64.gt drop)
  (; 0x65 ;) (func (export "f64.le") f64.const 1 f64.const 2 f64.le drop)
  (; 0x66 ;) (func (export "f64.ge") f64.const 1 f64.const 2 f64.ge drop)
  (; 0x67 ;) (func (export "i32.clz") i32.const 1 i32.clz drop)
  (; 0x68 ;) (func (export "i32.ctz") i32.const 1 i32.ctz drop)
  (; 0x69 ;) (func (export "i32.popcnt") i32.const 1 i32.popcnt drop)
  (; 0x6a ;) (func (export "i32.add") i32.const 1 i32.const 2 i32.add drop)
  (; 0x6b ;) (func (export "i32.sub") i32.const 1 i32.const 2 i32.sub drop)
  (; 0x6c ;) (func (export "i32.mul") i32.const 1 i32.const 2 i32.mul drop)
  (; 0x6d ;) (func (export "i32.div_s") i32.const 1 i32.const 2 i32.div_s drop)
  (; 0x6e ;) (func (export "i32.div_u") i32.const 1 i32.const 2 i32.div_u drop)
  (; 0x6f ;) (func (export "i32.rem_s") i32.const 1 i32.const 2 i32.rem_s drop)
  (; 0x70 ;) (func (export "i32.rem_u") i32.const 1 i32.const 2 i32.rem_u drop)
  (; 0x71 ;) (func (export "i32.and") i32.const 1 i32.const 2 i32.and drop)
  (; 0x72 ;) (func (export "i32.or") i32.const 1 i32.const 2 i32.or drop)
  (; 0x73 ;) (func (export "i32.xor") i32.const 1 i32.const 2 i32.xor drop)
  (; 0x74 ;) (func (export "i32.shl") i32.const 1 i32.const 2 i32.shl drop)
  (; 0x75 ;) (func (export "i32.shr_s") i32.const 1 i32.const 2 i32.shr_s drop)
  (; 0x76 ;) (func (export "i32.shr_u") i32.const 1 i32.const 2 i32.shr_u drop)
  (; 0x77 ;) (func (export "i32.rotl") i32.const 1 i32.const 2 i32.rotl drop)
  (; 0x78 ;) (func (export "i32.rotr") i32.const 1 i32.const 2 i32.rotr drop)
  (; 0x79 ;) (func (export "i64.clz") i64.const 1 i64.clz drop)
  (; 0x7a ;) (func (export "i64.ctz") i64.const 1 i64.ctz drop)
  (; 0x7b ;) (func (export "i64.popcnt") i64.const 1 i64.popcnt drop)
  (; 0x7c ;) (func (export "i64.add") i64.const 1 i64.const 2 i64.add drop)
  (; 0x7d ;) (func (export "i64.sub") i64.const 1 i64.const 2 i64.sub drop)
  (; 0x7e ;) (func (export "i64.mul") i64.const 1 i64.const 2 i64.mul drop)
  (; 0x7f ;) (func (export "i64.div_s") i64.const 1 i64.const 2 i64.div_s drop)
  (; 0x80 ;) (func (export "i64.div_u") i64.const 1 i64.const 2 i64.div_u drop)
  (; 0x81 ;) (func (export "i64.rem_s") i64.const 1 i64.const 2 i64.rem_s drop)
  (; 0x82 ;) (func (export "i64.rem_u") i64.const 1 i64.const 2 i64.rem_u drop)
  (; 0x83 ;) (func (export "i64.and") i64.const 1 i64.const 2 i64.and drop)
  (; 0x84 ;) (func (export "i64.or") i64.const 1 i64.const 2 i64.or drop)
  (; 0x85 ;) (func (export "i64.xor") i64.const 1 i64.const 2 i64.xor drop)
  (; 0x86 ;) (func (export "i64.shl") i64.const 1 i64.const 2 i64.shl drop)
  (; 0x87 ;) (func (export "i64.shr_s") i64.const 1 i64.const 2 i64.shr_s drop)
  (; 0x88 ;) (func (export "i64.shr_u") i64.const 1 i64.const 2 i64.shr_u drop)
  (; 0x89 ;) (func (export "i64.rotl") i64.const 1 i64.const 2 i64.rotl drop)
  (; 0x8a ;) (func (export "i64.rotr") i64.const 1 i64.const 2 i64.rotr drop)
  (; 0x8b ;) (func (export "f32.abs") f32.const 1 f32.abs drop)
  (; 0x8c ;) (func (export "f32.neg") f32.const 1 f32.neg drop)
  (; 0x8d ;) (func (export "f32.ceil") f32.const 1 f32.ceil drop)
  (; 0x8e ;) (func (export "f32.floor") f32.const 1 f32.floor drop)
  (; 0x8f ;) (func (export "f32.trunc") f32.const 1 f32.trunc drop)
  (; 0x90 ;) (func (export "f32.nearest") f32.const 1 f32.nearest drop)
  (; 0x91 ;) (func (export "f32.sqrt") f32.const 1 f32.sqrt drop)
  (; 0x92 ;) (func (export "f32.add") f32.const 1 f32.const 2 f32.add drop)
  (; 0x93 ;) (func (export "f32.sub") f32.const 1 f32.const 2 f32.sub drop)
  (; 0x94 ;) (func (export "f32.mul") f32.const 1 f32.const 2 f32.mul drop)
  (; 0x95 ;) (func (export "f32.div") f32.const 1 f32.const 2 f32.div drop)
  (; 0x96 ;) (func (export "f32.min") f32.const 1 f32.const 2 f32.min drop)
  (; 0x97 ;) (func (export "f32.max") f32.const 1 f32.const 2 f32.max drop)
  (; 0x98 ;) (func (export "f32.copysign") f32.const 1 f32.const 2 f32.copysign drop)
  (; 0x99 ;) (func (export "f64.abs") f64.const 1 f64.abs drop)
  (; 0x9a ;) (func (export "f64.neg") f64.const 1 f64.neg drop)
  (; 0x9b ;) (func (export "f64.ceil") f64.const 1 f64.ceil drop)
  (; 0x9c ;) (func (export "f64.floor") f64.const 1 f64.floor drop)
  (; 0x9d ;) (func (export "f64.trunc") f64.const 1 f64.trunc drop)
  (; 0x9e ;) (func (export "f64.nearest") f64.const 1 f64.nearest drop)
  (; 0x9f ;) (func (export "f64.sqrt") f64.const 1 f64.sqrt drop)
  (; 0xa0 ;) (func (export "f64.add") f64.const 1 f64.const 2 f64.add drop)
  (; 0xa1 ;) (func (export "f64.sub") f64.const 1 f64.const 2 f64.sub drop)
  (; 0xa2 ;) (func (export "f64.mul") f64.const 1 f64.const 2 f64.mul drop)
  (; 0xa3 ;) (func (export "f64.div") f64.const 1 f64.const 2 f64.div drop)
  (; 0xa4 ;) (func (export "f64.min") f64.const 1 f64.const 2 f64.min drop)
  (; 0xa5 ;) (func (export "f64.max") f64.const 1 f64.const 2 f64.max drop)
  (; 0xa6 ;) (func (export "f64.copysign") f64.const 1 f64.const 2 f64.copysign drop)
  (; 0xa7 ;) (func (export "i32.wrap/i64") i64.const 1 i32.wrap/i64 drop)
  (; 0xa8 ;) (func (export "i32.trunc_s/f32") f32.const 1 i32.trunc_s/f32 drop)
  (; 0xa9 ;) (func (export "i32.trunc_u/f32") f32.const 1 i32.trunc_u/f32 drop)
  (; 0xaa ;) (func (export "i32.trunc_s/f64") f64.const 1 i32.trunc_s/f64 drop)
  (; 0xab ;) (func (export "i32.trunc_u/f64") f64.const 1 i32.trunc_u/f64 drop)
  (; 0xac ;) (func (export "i64.extend_s/i32") i32.const 1 i64.extend_s/i32 drop)
  (; 0xad ;) (func (export "i64.extend_u/i32") i32.const 1 i64.extend_u/i32 drop)
  (; 0xae ;) (func (export "i64.trunc_s/f32") f32.const 1 i64.trunc_s/f32 drop)
  (; 0xaf ;) (func (export "i64.trunc_u/f32") f32.const 1 i64.trunc_u/f32 drop)
  (; 0xb0 ;) (func (export "i64.trunc_s/f64") f64.const 1 i64.trunc_s/f64 drop)
  (; 0xb1 ;) (func (export "i64.trunc_u/f64") f64.const 1 i64.trunc_u/f64 drop)
  (; 0xb2 ;) (func (export "f32.convert_s/i32") i32.const 1 f32.convert_s/i32 drop)
  (; 0xb3 ;) (func (export "f32.convert_u/i32") i32.const 1 f32.convert_u/i32 drop)
  (; 0xb4 ;) (func (export "f32.convert_s/i64") i64.const 1 f32.convert_s/i64 drop)
  (; 0xb5 ;) (func (export "f32.convert_u/i64") i64.const 1 f32.convert_u/i64 drop)
  (; 0xb6 ;) (func (export "f32.demote/f64") f64.const 1 f32.demote/f64 drop)
  (; 0xb7 ;) (func (export "f64.convert_s/i32") i32.const 1 f64.convert_s/i32 drop)
  (; 0xb8 ;) (func (export "f64.convert_u/i32") i32.const 1 f64.convert_u/i32 drop)
  (; 0xb9 ;) (func (export "f64.convert_s/i64") i64.const 1 f64.convert_s/i64 drop)
  (; 0xba ;) (func (export "f64.convert_u/i64") i64.const 1 f64.convert_u/i64 drop)
  (; 0xbb ;) (func (export "f64.promote/f32") f32.const 1 f64.promote/f32 drop)
  (; 0xbc ;) (func (export "i32.reinterpret/f32") i32.const 1 f32.reinterpret/i32 drop)
  (; 0xbd ;) (func (export "f32.reinterpret/i32") f32.const 1 i32.reinterpret/f32 drop)
  (; 0xbe ;) (func (export "i64.reinterpret/f64") i64.const 1 f64.reinterpret/i64 drop)
  (; 0xbf ;) (func (export "f64.reinterpret/i64") f64.const 1 i64.reinterpret/f64 drop)

  ;; --enable-sign-extension
  (; 0xc0 ;) (func (export "i32.extend8_s") i32.const 1 i32.extend8_s drop)
  (; 0xc1 ;) (func (export "i32.extend16_s") i32.const 1 i32.extend16_s drop)
  (; 0xc2 ;) (func (export "i64.extend8_s") i64.const 1 i64.extend8_s drop)
  (; 0xc3 ;) (func (export "i64.extend16_s") i64.const 1 i64.extend16_s drop)
  (; 0xc4 ;) (func (export "i64.extend32_s") i64.const 1 i64.extend32_s drop)

  ;; Interpreter opcodes
  (; 0xe0 ;) (func (export "alloca") (local i32))
  (; 0xe1 ;) (func (export "br_unless") i32.const 1 br_if 0)
  (; 0xe2 ;) (func (export "call_host") i32.const 1 call $print)
  (; 0xe3 ;) (func (export "data") i32.const 1 br_table 0)
  (; 0xe4 ;) (func (export "drop_keep") block (result i32) i32.const 1 i32.const 2 br 0 end drop)

  ;; --enable-saturating-float-to-int
  (; 0xfc 0x00 ;) (func (export "i32.trunc_s:sat/f32") f32.const 1 i32.trunc_s:sat/f32 drop)
  (; 0xfc 0x01 ;) (func (export "i32.trunc_u:sat/f32") f32.const 1 i32.trunc_u:sat/f32 drop)
  (; 0xfc 0x02 ;) (func (export "i32.trunc_s:sat/f64") f64.const 1 i32.trunc_s:sat/f64 drop)
  (; 0xfc 0x03 ;) (func (export "i32.trunc_u:sat/f64") f64.const 1 i32.trunc_u:sat/f64 drop)
  (; 0xfc 0x04 ;) (func (export "i64.trunc_s:sat/f32") f32.const 1 i64.trunc_s:sat/f32 drop)
  (; 0xfc 0x05 ;) (func (export "i64.trunc_u:sat/f32") f32.const 1 i64.trunc_u:sat/f32 drop)
  (; 0xfc 0x06 ;) (func (export "i64.trunc_s:sat/f64") f64.const 1 i64.trunc_s:sat/f64 drop)
  (; 0xfc 0x07 ;) (func (export "i64.trunc_u:sat/f64") f64.const 1 i64.trunc_u:sat/f64 drop)

  (; 0xfc 0x08 ;) (func (export "memory.init") i32.const 1 i32.const 2 i32.const 3 memory.init 0)
  (; 0xfc 0x09 ;) (func (export "data.drop") data.drop 0)
  (; 0xfc 0x0a ;) (func (export "memory.copy") i32.const 1 i32.const 2 i32.const 3 memory.copy)
  (; 0xfc 0x0b ;) (func (export "memory.fill") i32.const 1 i32.const 2 i32.const 3 memory.fill)
  (; 0xfc 0x0c ;) (func (export "table.init") i32.const 1 i32.const 2 i32.const 3 table.init 0)
  (; 0xfc 0x0d ;) (func (export "elem.drop") elem.drop 0)
  (; 0xfc 0x0e ;) (func (export "table.copy") i32.const 1 i32.const 2 i32.const 3 table.copy)

  ;; --enable-simd
  (; 0xfd 0x00 ;) (func (export "v128.load") i32.const 1 v128.load offset=3 drop)
  (; 0xfd 0x01 ;) (func (export "v128.store") i32.const 1 v128.const i32x4 1 1 1 1 v128.store offset=3)
  (; 0xfd 0x02 ;) (func (export "v128.const") v128.const i32x4 1 1 1 1 drop)
  (; 0xfd 0x04 ;) (func (export "i8x16.splat") i32.const 1 i8x16.splat drop)
  (; 0xfd 0x05 ;) (func (export "i8x16.extract_lane_s") v128.const i32x4 1 1 1 1 i8x16.extract_lane_s 15 drop)
  (; 0xfd 0x06 ;) (func (export "i8x16.extract_lane_u") v128.const i32x4 1 1 1 1 i8x16.extract_lane_u 15 drop)
  (; 0xfd 0x07 ;) (func (export "i8x16.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.replace_lane 15 drop)
  (; 0xfd 0x08 ;) (func (export "i16x8.splat") i32.const 1 i16x8.splat drop)
  (; 0xfd 0x09 ;) (func (export "i16x8.extract_lane_s") v128.const i32x4 1 1 1 1 i16x8.extract_lane_s 7 drop)
  (; 0xfd 0x0a ;) (func (export "i16x8.extract_lane_u") v128.const i32x4 1 1 1 1 i16x8.extract_lane_u 7 drop)
  (; 0xfd 0x0b ;) (func (export "i16x8.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.replace_lane 7 drop)
  (; 0xfd 0x0c ;) (func (export "i32x4.splat") i32.const 1 i32x4.splat drop)
  (; 0xfd 0x0d ;) (func (export "i32x4.extract_lane") v128.const i32x4 1 1 1 1 i32x4.extract_lane 3 drop)
  (; 0xfd 0x0e ;) (func (export "i32x4.replace_lane") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.replace_lane 3 drop)
  (; 0xfd 0x0f ;) (func (export "i64x2.splat") i64.const 1 i64x2.splat drop)
  (; 0xfd 0x10 ;) (func (export "i64x2.extract_lane") v128.const i32x4 1 1 1 1 i64x2.extract_lane 1 drop)
  (; 0xfd 0x11 ;) (func (export "i64x2.replace_lane") v128.const i32x4 1 1 1 1 i64.const 0 i64x2.replace_lane 1 drop)
  (; 0xfd 0x12 ;) (func (export "f32x4.splat") f32.const 1 f32x4.splat drop)
  (; 0xfd 0x13 ;) (func (export "f32x4.extract_lane") v128.const i32x4 1 1 1 1 f32x4.extract_lane 3 drop)
  (; 0xfd 0x14 ;) (func (export "f32x4.replace_lane") v128.const i32x4 1 1 1 1 f32.const 0 f32x4.replace_lane 3 drop)
  (; 0xfd 0x15 ;) (func (export "f64x2.splat") f64.const 1 f64x2.splat drop)
  (; 0xfd 0x16 ;) (func (export "f64x2.extract_lane") v128.const i32x4 1 1 1 1 f64x2.extract_lane 1 drop)
  (; 0xfd 0x17 ;) (func (export "f64x2.replace_lane") v128.const i32x4 1 1 1 1 f64.const 0 f64x2.replace_lane 1 drop)
  (; 0xfd 0x18 ;) (func (export "i8x16.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.eq drop)
  (; 0xfd 0x19 ;) (func (export "i8x16.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ne drop)
  (; 0xfd 0x1a ;) (func (export "i8x16.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.lt_s drop)
  (; 0xfd 0x1b ;) (func (export "i8x16.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.lt_u drop)
  (; 0xfd 0x1c ;) (func (export "i8x16.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.gt_s drop)
  (; 0xfd 0x1d ;) (func (export "i8x16.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.gt_u drop)
  (; 0xfd 0x1e ;) (func (export "i8x16.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.le_s drop)
  (; 0xfd 0x1f ;) (func (export "i8x16.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.le_u drop)
  (; 0xfd 0x20 ;) (func (export "i8x16.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ge_s drop)
  (; 0xfd 0x21 ;) (func (export "i8x16.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.ge_u drop)
  (; 0xfd 0x22 ;) (func (export "i16x8.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.eq drop)
  (; 0xfd 0x23 ;) (func (export "i16x8.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ne drop)
  (; 0xfd 0x24 ;) (func (export "i16x8.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.lt_s drop)
  (; 0xfd 0x25 ;) (func (export "i16x8.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.lt_u drop)
  (; 0xfd 0x26 ;) (func (export "i16x8.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.gt_s drop)
  (; 0xfd 0x27 ;) (func (export "i16x8.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.gt_u drop)
  (; 0xfd 0x28 ;) (func (export "i16x8.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.le_s drop)
  (; 0xfd 0x29 ;) (func (export "i16x8.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.le_u drop)
  (; 0xfd 0x2a ;) (func (export "i16x8.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ge_s drop)
  (; 0xfd 0x2b ;) (func (export "i16x8.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.ge_u drop)
  (; 0xfd 0x2c ;) (func (export "i32x4.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.eq drop)
  (; 0xfd 0x2d ;) (func (export "i32x4.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ne drop)
  (; 0xfd 0x2e ;) (func (export "i32x4.lt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.lt_s drop)
  (; 0xfd 0x2f ;) (func (export "i32x4.lt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.lt_u drop)
  (; 0xfd 0x30 ;) (func (export "i32x4.gt_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.gt_s drop)
  (; 0xfd 0x31 ;) (func (export "i32x4.gt_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.gt_u drop)
  (; 0xfd 0x32 ;) (func (export "i32x4.le_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.le_s drop)
  (; 0xfd 0x33 ;) (func (export "i32x4.le_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.le_u drop)
  (; 0xfd 0x34 ;) (func (export "i32x4.ge_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ge_s drop)
  (; 0xfd 0x35 ;) (func (export "i32x4.ge_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.ge_u drop)
  (; 0xfd 0x40 ;) (func (export "f32x4.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.eq drop)
  (; 0xfd 0x41 ;) (func (export "f32x4.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.ne drop)
  (; 0xfd 0x42 ;) (func (export "f32x4.lt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.lt drop)
  (; 0xfd 0x43 ;) (func (export "f32x4.gt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.gt drop)
  (; 0xfd 0x44 ;) (func (export "f32x4.le") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.le drop)
  (; 0xfd 0x45 ;) (func (export "f32x4.ge") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.ge drop)
  (; 0xfd 0x46 ;) (func (export "f64x2.eq") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.eq drop)
  (; 0xfd 0x47 ;) (func (export "f64x2.ne") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.ne drop)
  (; 0xfd 0x48 ;) (func (export "f64x2.lt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.lt drop)
  (; 0xfd 0x49 ;) (func (export "f64x2.gt") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.gt drop)
  (; 0xfd 0x4a ;) (func (export "f64x2.le") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.le drop)
  (; 0xfd 0x4b ;) (func (export "f64x2.ge") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.ge drop)
  (; 0xfd 0x4c ;) (func (export "v128.not") v128.const i32x4 1 1 1 1 v128.not drop)
  (; 0xfd 0x4d ;) (func (export "v128.and") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.and drop)
  (; 0xfd 0x4e ;) (func (export "v128.or") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.or drop)
  (; 0xfd 0x4f ;) (func (export "v128.xor") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.xor drop)
  (; 0xfd 0x50 ;) (func (export "v128.bitselect") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v128.const i32x4 3 3 3 3 v128.bitselect drop)
  (; 0xfd 0x51 ;) (func (export "i8x16.neg") v128.const i32x4 1 1 1 1 i8x16.neg drop)
  (; 0xfd 0x52 ;) (func (export "i8x16.any_true") v128.const i32x4 1 1 1 1 i8x16.any_true drop)
  (; 0xfd 0x53 ;) (func (export "i8x16.all_true") v128.const i32x4 1 1 1 1 i8x16.all_true drop)
  (; 0xfd 0x54 ;) (func (export "i8x16.shl") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shl drop)
  (; 0xfd 0x55 ;) (func (export "i8x16.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shr_s drop)
  (; 0xfd 0x56 ;) (func (export "i8x16.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i8x16.shr_u drop)
  (; 0xfd 0x57 ;) (func (export "i8x16.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add drop)
  (; 0xfd 0x58 ;) (func (export "i8x16.add_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add_saturate_s drop)
  (; 0xfd 0x59 ;) (func (export "i8x16.add_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.add_saturate_u drop)
  (; 0xfd 0x5a ;) (func (export "i8x16.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub drop)
  (; 0xfd 0x5b ;) (func (export "i8x16.sub_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub_saturate_s drop)
  (; 0xfd 0x5c ;) (func (export "i8x16.sub_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.sub_saturate_u drop)
  (; 0xfd 0x5d ;) (func (export "i8x16.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i8x16.mul drop)
  (; 0xfd 0x62 ;) (func (export "i16x8.neg") v128.const i32x4 1 1 1 1 i16x8.neg drop)
  (; 0xfd 0x63 ;) (func (export "i16x8.any_true") v128.const i32x4 1 1 1 1 i16x8.any_true drop)
  (; 0xfd 0x64 ;) (func (export "i16x8.all_true") v128.const i32x4 1 1 1 1 i16x8.all_true drop)
  (; 0xfd 0x65 ;) (func (export "i16x8.shl") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shl drop)
  (; 0xfd 0x66 ;) (func (export "i16x8.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shr_s drop)
  (; 0xfd 0x67 ;) (func (export "i16x8.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i16x8.shr_u drop)
  (; 0xfd 0x68 ;) (func (export "i16x8.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add drop)
  (; 0xfd 0x69 ;) (func (export "i16x8.add_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add_saturate_s drop)
  (; 0xfd 0x6a ;) (func (export "i16x8.add_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.add_saturate_u drop)
  (; 0xfd 0x6b ;) (func (export "i16x8.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub drop)
  (; 0xfd 0x6c ;) (func (export "i16x8.sub_saturate_s") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub_saturate_s drop)
  (; 0xfd 0x6d ;) (func (export "i16x8.sub_saturate_u") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.sub_saturate_u drop)
  (; 0xfd 0x6e ;) (func (export "i16x8.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i16x8.mul drop)
  (; 0xfd 0x73 ;) (func (export "i32x4.neg") v128.const i32x4 1 1 1 1 i32x4.neg drop)
  (; 0xfd 0x74 ;) (func (export "i32x4.any_true") v128.const i32x4 1 1 1 1 i32x4.any_true drop)
  (; 0xfd 0x75 ;) (func (export "i32x4.all_true") v128.const i32x4 1 1 1 1 i32x4.all_true drop)
  (; 0xfd 0x76 ;) (func (export "i32x4.shl") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shl drop)
  (; 0xfd 0x77 ;) (func (export "i32x4.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shr_s drop)
  (; 0xfd 0x78 ;) (func (export "i32x4.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i32x4.shr_u drop)
  (; 0xfd 0x79 ;) (func (export "i32x4.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.add drop)
  (; 0xfd 0x7c ;) (func (export "i32x4.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.sub drop)
  (; 0xfd 0x7f ;) (func (export "i32x4.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i32x4.mul drop)
  (; 0xfd 0x84 ;) (func (export "i64x2.neg") v128.const i32x4 1 1 1 1 i64x2.neg drop)
  (; 0xfd 0x85 ;) (func (export "i64x2.any_true") v128.const i32x4 1 1 1 1 i64x2.any_true drop)
  (; 0xfd 0x86 ;) (func (export "i64x2.all_true") v128.const i32x4 1 1 1 1 i64x2.all_true drop)
  (; 0xfd 0x87 ;) (func (export "i64x2.shl") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shl drop)
  (; 0xfd 0x88 ;) (func (export "i64x2.shr_s") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shr_s drop)
  (; 0xfd 0x89 ;) (func (export "i64x2.shr_u") v128.const i32x4 1 1 1 1 i32.const 0 i64x2.shr_u drop)
  (; 0xfd 0x8a ;) (func (export "i64x2.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i64x2.add drop)
  (; 0xfd 0x8d ;) (func (export "i64x2.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 i64x2.sub drop)
  (; 0xfd 0x95 ;) (func (export "f32x4.abs") v128.const i32x4 1 1 1 1 f32x4.abs drop)
  (; 0xfd 0x96 ;) (func (export "f32x4.neg") v128.const i32x4 1 1 1 1 f32x4.neg drop)
  (; 0xfd 0x97 ;) (func (export "f32x4.sqrt") v128.const i32x4 1 1 1 1 f32x4.sqrt drop)
  (; 0xfd 0x9a ;) (func (export "f32x4.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.add drop)
  (; 0xfd 0x9b ;) (func (export "f32x4.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.sub drop)
  (; 0xfd 0x9c ;) (func (export "f32x4.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.mul drop)
  (; 0xfd 0x9d ;) (func (export "f32x4.div") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.div drop)
  (; 0xfd 0x9e ;) (func (export "f32x4.min") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.min drop)
  (; 0xfd 0x9f ;) (func (export "f32x4.max") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f32x4.max drop)
  (; 0xfd 0xa0 ;) (func (export "f64x2.abs") v128.const i32x4 1 1 1 1 f64x2.abs drop)
  (; 0xfd 0xa1 ;) (func (export "f64x2.neg") v128.const i32x4 1 1 1 1 f64x2.neg drop)
  (; 0xfd 0xa2 ;) (func (export "f64x2.sqrt") v128.const i32x4 1 1 1 1 f64x2.sqrt drop)
  (; 0xfd 0xa5 ;) (func (export "f64x2.add") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.add drop)
  (; 0xfd 0xa6 ;) (func (export "f64x2.sub") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.sub drop)
  (; 0xfd 0xa7 ;) (func (export "f64x2.mul") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.mul drop)
  (; 0xfd 0xa8 ;) (func (export "f64x2.div") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.div drop)
  (; 0xfd 0xa9 ;) (func (export "f64x2.min") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.min drop)
  (; 0xfd 0xaa ;) (func (export "f64x2.max") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 f64x2.max drop)
  (; 0xfd 0xab ;) (func (export "i32x4.trunc_sat_f32x4_s") v128.const i32x4 1 1 1 1 i32x4.trunc_sat_f32x4_s drop)
  (; 0xfd 0xac ;) (func (export "i32x4.trunc_sat_f32x4_u") v128.const i32x4 1 1 1 1 i32x4.trunc_sat_f32x4_u drop)
  (; 0xfd 0xad ;) (func (export "i64x2.trunc_sat_f64x2_s") v128.const i32x4 1 1 1 1 i64x2.trunc_sat_f64x2_s drop)
  (; 0xfd 0xae ;) (func (export "i64x2.trunc_sat_f64x2_u") v128.const i32x4 1 1 1 1 i64x2.trunc_sat_f64x2_u drop)
  (; 0xfd 0xaf ;) (func (export "f32x4.convert_i32x4_s") v128.const i32x4 1 1 1 1 f32x4.convert_i32x4_s drop)
  (; 0xfd 0xb0 ;) (func (export "f32x4.convert_i32x4_u") v128.const i32x4 1 1 1 1 f32x4.convert_i32x4_u drop)
  (; 0xfd 0xb1 ;) (func (export "f64x2.convert_i64x2_s") v128.const i32x4 1 1 1 1 f64x2.convert_i64x2_s drop)
  (; 0xfd 0xb2 ;) (func (export "f64x2.convert_i64x2_u") v128.const i32x4 1 1 1 1 f64x2.convert_i64x2_u drop)
  (; 0xfd 0xc0 ;) (func (export "v8x16.swizzle") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v8x16.swizzle drop)
  (; 0xfd 0xc1 ;) (func (export "v8x16.shuffle") v128.const i32x4 1 1 1 1 v128.const i32x4 2 2 2 2 v8x16.shuffle 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 drop)
  (; 0xfd 0xc2 ;) (func (export "i8x16.load_splat") i32.const 1 i8x16.load_splat drop)
  (; 0xfd 0xc3 ;) (func (export "i16x8.load_splat") i32.const 1 i16x8.load_splat drop)
  (; 0xfd 0xc4 ;) (func (export "i32x4.load_splat") i32.const 1 i32x4.load_splat drop)
  (; 0xfd 0xc5 ;) (func (export "i64x2.load_splat") i32.const 1 i64x2.load_splat drop)

  ;; --enable-threads
  (; 0xfe 0x00 ;) (func (export "atomic.notify") i32.const 1 i32.const 2 atomic.notify offset=3 drop)
  (; 0xfe 0x01 ;) (func (export "i32.atomic.wait") i32.const 1 i32.const 2 i64.const 3 i32.atomic.wait offset=3 drop)
  (; 0xfe 0x02 ;) (func (export "i64.atomic.wait") i32.const 1 i64.const 2 i64.const 3 i64.atomic.wait offset=3 drop)
  (; 0xfe 0x10 ;) (func (export "i32.atomic.load") i32.const 1 i32.atomic.load offset=3 drop)
  (; 0xfe 0x11 ;) (func (export "i64.atomic.load") i32.const 1 i64.atomic.load offset=7 drop)
  (; 0xfe 0x12 ;) (func (export "i32.atomic.load8_u") i32.const 1 i32.atomic.load8_u offset=3 drop)
  (; 0xfe 0x13 ;) (func (export "i32.atomic.load16_u") i32.const 1 i32.atomic.load16_u offset=3 drop)
  (; 0xfe 0x14 ;) (func (export "i64.atomic.load8_u") i32.const 1 i64.atomic.load8_u offset=3 drop)
  (; 0xfe 0x15 ;) (func (export "i64.atomic.load16_u") i32.const 1 i64.atomic.load16_u offset=3 drop)
  (; 0xfe 0x16 ;) (func (export "i64.atomic.load32_u") i32.const 1 i64.atomic.load32_u offset=3 drop)
  (; 0xfe 0x17 ;) (func (export "i32.atomic.store") i32.const 1 i32.const 2 i32.atomic.store offset=3)
  (; 0xfe 0x18 ;) (func (export "i64.atomic.store") i32.const 1 i64.const 2 i64.atomic.store offset=7)
  (; 0xfe 0x19 ;) (func (export "i32.atomic.store8") i32.const 1 i32.const 2 i32.atomic.store8 offset=3)
  (; 0xfe 0x1a ;) (func (export "i32.atomic.store16") i32.const 1 i32.const 2 i32.atomic.store16 offset=3)
  (; 0xfe 0x1b ;) (func (export "i64.atomic.store8") i32.const 1 i64.const 2 i64.atomic.store8 offset=3)
  (; 0xfe 0x1c ;) (func (export "i64.atomic.store16") i32.const 1 i64.const 2 i64.atomic.store16 offset=3)
  (; 0xfe 0x1d ;) (func (export "i64.atomic.store32") i32.const 1 i64.const 2 i64.atomic.store32 offset=3)
  (; 0xfe 0x1e ;) (func (export "i32.atomic.rmw.add") i32.const 1 i32.const 2 i32.atomic.rmw.add offset=3 drop)
  (; 0xfe 0x1f ;) (func (export "i64.atomic.rmw.add") i32.const 1 i64.const 2 i64.atomic.rmw.add offset=7 drop)
  (; 0xfe 0x20 ;) (func (export "i32.atomic.rmw8.add_u") i32.const 1 i32.const 2 i32.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x21 ;) (func (export "i32.atomic.rmw16.add_u") i32.const 1 i32.const 2 i32.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x22 ;) (func (export "i64.atomic.rmw8.add_u") i32.const 1 i64.const 2 i64.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x23 ;) (func (export "i64.atomic.rmw16.add_u") i32.const 1 i64.const 2 i64.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x24 ;) (func (export "i64.atomic.rmw32.add_u") i32.const 1 i64.const 2 i64.atomic.rmw32.add_u offset=3 drop)
  (; 0xfe 0x25 ;) (func (export "i32.atomic.rmw.sub") i32.const 1 i32.const 2 i32.atomic.rmw.sub offset=3 drop)
  (; 0xfe 0x26 ;) (func (export "i64.atomic.rmw.sub") i32.const 1 i64.const 2 i64.atomic.rmw.sub offset=7 drop)
  (; 0xfe 0x27 ;) (func (export "i32.atomic.rmw8.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x28 ;) (func (export "i32.atomic.rmw16.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x29 ;) (func (export "i64.atomic.rmw8.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x2a ;) (func (export "i64.atomic.rmw16.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x2b ;) (func (export "i64.atomic.rmw32.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw32.sub_u offset=3 drop)
  (; 0xfe 0x2c ;) (func (export "i32.atomic.rmw.and") i32.const 1 i32.const 2 i32.atomic.rmw.and offset=3 drop)
  (; 0xfe 0x2d ;) (func (export "i64.atomic.rmw.and") i32.const 1 i64.const 2 i64.atomic.rmw.and offset=7 drop)
  (; 0xfe 0x2e ;) (func (export "i32.atomic.rmw8.and_u") i32.const 1 i32.const 2 i32.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x2f ;) (func (export "i32.atomic.rmw16.and_u") i32.const 1 i32.const 2 i32.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x30 ;) (func (export "i64.atomic.rmw8.and_u") i32.const 1 i64.const 2 i64.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x31 ;) (func (export "i64.atomic.rmw16.and_u") i32.const 1 i64.const 2 i64.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x32 ;) (func (export "i64.atomic.rmw32.and_u") i32.const 1 i64.const 2 i64.atomic.rmw32.and_u offset=3 drop)
  (; 0xfe 0x33 ;) (func (export "i32.atomic.rmw.or") i32.const 1 i32.const 2 i32.atomic.rmw.or offset=3 drop)
  (; 0xfe 0x34 ;) (func (export "i64.atomic.rmw.or") i32.const 1 i64.const 2 i64.atomic.rmw.or offset=7 drop)
  (; 0xfe 0x35 ;) (func (export "i32.atomic.rmw8.or_u") i32.const 1 i32.const 2 i32.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x36 ;) (func (export "i32.atomic.rmw16.or_u") i32.const 1 i32.const 2 i32.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x37 ;) (func (export "i64.atomic.rmw8.or_u") i32.const 1 i64.const 2 i64.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x38 ;) (func (export "i64.atomic.rmw16.or_u") i32.const 1 i64.const 2 i64.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x39 ;) (func (export "i64.atomic.rmw32.or_u") i32.const 1 i64.const 2 i64.atomic.rmw32.or_u offset=3 drop)
  (; 0xfe 0x3a ;) (func (export "i32.atomic.rmw.xor") i32.const 1 i32.const 2 i32.atomic.rmw.xor offset=3 drop)
  (; 0xfe 0x3b ;) (func (export "i64.atomic.rmw.xor") i32.const 1 i64.const 2 i64.atomic.rmw.xor offset=7 drop)
  (; 0xfe 0x3c ;) (func (export "i32.atomic.rmw8.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3d ;) (func (export "i32.atomic.rmw16.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x3e ;) (func (export "i64.atomic.rmw8.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3f ;) (func (export "i64.atomic.rmw16.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x40 ;) (func (export "i64.atomic.rmw32.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xor_u offset=3 drop)
  (; 0xfe 0x41 ;) (func (export "i32.atomic.rmw.xchg") i32.const 1 i32.const 2 i32.atomic.rmw.xchg offset=3 drop)
  (; 0xfe 0x42 ;) (func (export "i64.atomic.rmw.xchg") i32.const 1 i64.const 2 i64.atomic.rmw.xchg offset=7 drop)
  (; 0xfe 0x43 ;) (func (export "i32.atomic.rmw8.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x44 ;) (func (export "i32.atomic.rmw16.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x45 ;) (func (export "i64.atomic.rmw8.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x46 ;) (func (export "i64.atomic.rmw16.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x47 ;) (func (export "i64.atomic.rmw32.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xchg_u offset=3 drop)

  (; 0xfe 0x48 ;) (func (export "i32.atomic.rmw.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw.cmpxchg offset=3 drop)
  (; 0xfe 0x49 ;) (func (export "i64.atomic.rmw.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw.cmpxchg offset=7 drop)
  (; 0xfe 0x4a ;) (func (export "i32.atomic.rmw8.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4b ;) (func (export "i32.atomic.rmw16.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4c ;) (func (export "i64.atomic.rmw8.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4d ;) (func (export "i64.atomic.rmw16.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4e ;) (func (export "i64.atomic.rmw32.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw32.cmpxchg_u offset=3 drop)
)

(;; STDOUT ;;;
0000000: 0061 736d                                 ; WASM_BINARY_MAGIC
0000004: 0100 0000                                 ; WASM_BINARY_VERSION
; section "Type" (1)
0000008: 01                                        ; section code
0000009: 00                                        ; section size (guess)
000000a: 02                                        ; num types
; type 0
000000b: 60                                        ; func
000000c: 00                                        ; num params
000000d: 00                                        ; num results
; type 1
000000e: 60                                        ; func
000000f: 01                                        ; num params
0000010: 7f                                        ; i32
0000011: 00                                        ; num results
0000009: 08                                        ; FIXUP section size
; section "Import" (2)
0000012: 02                                        ; section code
0000013: 00                                        ; section size (guess)
0000014: 01                                        ; num imports
; import header 0
0000015: 04                                        ; string length
0000016: 686f 7374                                host  ; import module name
000001a: 05                                        ; string length
000001b: 7072 696e 74                             print  ; import field name
0000020: 00                                        ; import kind
0000021: 01                                        ; import signature index
0000013: 0e                                        ; FIXUP section size
; section "Function" (3)
0000022: 03                                        ; section code
0000023: 00                                        ; section size (guess)
0000024: 9403                                      ; num functions
0000026: 00                                        ; function 0 signature index
0000027: 00                                        ; function 1 signature index
0000028: 00                                        ; function 2 signature index
0000029: 00                                        ; function 3 signature index
000002a: 00                                        ; function 4 signature index
000002b: 00                                        ; function 5 signature index
000002c: 00                                        ; function 6 signature index
000002d: 00                                        ; function 7 signature index
000002e: 00                                        ; function 8 signature index
000002f: 00                                        ; function 9 signature index
0000030: 00                                        ; function 10 signature index
0000031: 00                                        ; function 11 signature index
0000032: 00                                        ; function 12 signature index
0000033: 00                                        ; function 13 signature index
0000034: 00                                        ; function 14 signature index
0000035: 00                                        ; function 15 signature index
0000036: 00                                        ; function 16 signature index
0000037: 00                                        ; function 17 signature index
0000038: 00                                        ; function 18 signature index
0000039: 00                                        ; function 19 signature index
000003a: 00                                        ; function 20 signature index
000003b: 00                                        ; function 21 signature index
000003c: 00                                        ; function 22 signature index
000003d: 00                                        ; function 23 signature index
000003e: 00                                        ; function 24 signature index
000003f: 00                                        ; function 25 signature index
0000040: 00                                        ; function 26 signature index
0000041: 00                                        ; function 27 signature index
0000042: 00                                        ; function 28 signature index
0000043: 00                                        ; function 29 signature index
0000044: 00                                        ; function 30 signature index
0000045: 00                                        ; function 31 signature index
0000046: 00                                        ; function 32 signature index
0000047: 00                                        ; function 33 signature index
0000048: 00                                        ; function 34 signature index
0000049: 00                                        ; function 35 signature index
000004a: 00                                        ; function 36 signature index
000004b: 00                                        ; function 37 signature index
000004c: 00                                        ; function 38 signature index
000004d: 00                                        ; function 39 signature index
000004e: 00                                        ; function 40 signature index
000004f: 00                                        ; function 41 signature index
0000050: 00                                        ; function 42 signature index
0000051: 00                                        ; function 43 signature index
0000052: 00                                        ; function 44 signature index
0000053: 00                                        ; function 45 signature index
0000054: 00                                        ; function 46 signature index
0000055: 00                                        ; function 47 signature index
0000056: 00                                        ; function 48 signature index
0000057: 00                                        ; function 49 signature index
0000058: 00                                        ; function 50 signature index
0000059: 00                                        ; function 51 signature index
000005a: 00                                        ; function 52 signature index
000005b: 00                                        ; function 53 signature index
000005c: 00                                        ; function 54 signature index
000005d: 00                                        ; function 55 signature index
000005e: 00                                        ; function 56 signature index
000005f: 00                                        ; function 57 signature index
0000060: 00                                        ; function 58 signature index
0000061: 00                                        ; function 59 signature index
0000062: 00                                        ; function 60 signature index
0000063: 00                                        ; function 61 signature index
0000064: 00                                        ; function 62 signature index
0000065: 00                                        ; function 63 signature index
0000066: 00                                        ; function 64 signature index
0000067: 00                                        ; function 65 signature index
0000068: 00                                        ; function 66 signature index
0000069: 00                                        ; function 67 signature index
000006a: 00                                        ; function 68 signature index
000006b: 00                                        ; function 69 signature index
000006c: 00                                        ; function 70 signature index
000006d: 00                                        ; function 71 signature index
000006e: 00                                        ; function 72 signature index
000006f: 00                                        ; function 73 signature index
0000070: 00                                        ; function 74 signature index
0000071: 00                                        ; function 75 signature index
0000072: 00                                        ; function 76 signature index
0000073: 00                                        ; function 77 signature index
0000074: 00                                        ; function 78 signature index
0000075: 00                                        ; function 79 signature index
0000076: 00                                        ; function 80 signature index
0000077: 00                                        ; function 81 signature index
0000078: 00                                        ; function 82 signature index
0000079: 00                                        ; function 83 signature index
000007a: 00                                        ; function 84 signature index
000007b: 00                                        ; function 85 signature index
000007c: 00                                        ; function 86 signature index
000007d: 00                                        ; function 87 signature index
000007e: 00                                        ; function 88 signature index
000007f: 00                                        ; function 89 signature index
0000080: 00                                        ; function 90 signature index
0000081: 00                                        ; function 91 signature index
0000082: 00                                        ; function 92 signature index
0000083: 00                                        ; function 93 signature index
0000084: 00                                        ; function 94 signature index
0000085: 00                                        ; function 95 signature index
0000086: 00                                        ; function 96 signature index
0000087: 00                                        ; function 97 signature index
0000088: 00                                        ; function 98 signature index
0000089: 00                                        ; function 99 signature index
000008a: 00                                        ; function 100 signature index
000008b: 00                                        ; function 101 signature index
000008c: 00                                        ; function 102 signature index
000008d: 00                                        ; function 103 signature index
000008e: 00                                        ; function 104 signature index
000008f: 00                                        ; function 105 signature index
0000090: 00                                        ; function 106 signature index
0000091: 00                                        ; function 107 signature index
0000092: 00                                        ; function 108 signature index
0000093: 00                                        ; function 109 signature index
0000094: 00                                        ; function 110 signature index
0000095: 00                                        ; function 111 signature index
0000096: 00                                        ; function 112 signature index
0000097: 00                                        ; function 113 signature index
0000098: 00                                        ; function 114 signature index
0000099: 00                                        ; function 115 signature index
000009a: 00                                        ; function 116 signature index
000009b: 00                                        ; function 117 signature index
000009c: 00                                        ; function 118 signature index
000009d: 00                                        ; function 119 signature index
000009e: 00                                        ; function 120 signature index
000009f: 00                                        ; function 121 signature index
00000a0: 00                                        ; function 122 signature index
00000a1: 00                                        ; function 123 signature index
00000a2: 00                                        ; function 124 signature index
00000a3: 00                                        ; function 125 signature index
00000a4: 00                                        ; function 126 signature index
00000a5: 00                                        ; function 127 signature index
00000a6: 00                                        ; function 128 signature index
00000a7: 00                                        ; function 129 signature index
00000a8: 00                                        ; function 130 signature index
00000a9: 00                                        ; function 131 signature index
00000aa: 00                                        ; function 132 signature index
00000ab: 00                                        ; function 133 signature index
00000ac: 00                                        ; function 134 signature index
00000ad: 00                                        ; function 135 signature index
00000ae: 00                                        ; function 136 signature index
00000af: 00                                        ; function 137 signature index
00000b0: 00                                        ; function 138 signature index
00000b1: 00                                        ; function 139 signature index
00000b2: 00                                        ; function 140 signature index
00000b3: 00                                        ; function 141 signature index
00000b4: 00                                        ; function 142 signature index
00000b5: 00                                        ; function 143 signature index
00000b6: 00                                        ; function 144 signature index
00000b7: 00                                        ; function 145 signature index
00000b8: 00                                        ; function 146 signature index
00000b9: 00                                        ; function 147 signature index
00000ba: 00                                        ; function 148 signature index
00000bb: 00                                        ; function 149 signature index
00000bc: 00                                        ; function 150 signature index
00000bd: 00                                        ; function 151 signature index
00000be: 00                                        ; function 152 signature index
00000bf: 00                                        ; function 153 signature index
00000c0: 00                                        ; function 154 signature index
00000c1: 00                                        ; function 155 signature index
00000c2: 00                                        ; function 156 signature index
00000c3: 00                                        ; function 157 signature index
00000c4: 00                                        ; function 158 signature index
00000c5: 00                                        ; function 159 signature index
00000c6: 00                                        ; function 160 signature index
00000c7: 00                                        ; function 161 signature index
00000c8: 00                                        ; function 162 signature index
00000c9: 00                                        ; function 163 signature index
00000ca: 00                                        ; function 164 signature index
00000cb: 00                                        ; function 165 signature index
00000cc: 00                                        ; function 166 signature index
00000cd: 00                                        ; function 167 signature index
00000ce: 00                                        ; function 168 signature index
00000cf: 00                                        ; function 169 signature index
00000d0: 00                                        ; function 170 signature index
00000d1: 00                                        ; function 171 signature index
00000d2: 00                                        ; function 172 signature index
00000d3: 00                                        ; function 173 signature index
00000d4: 00                                        ; function 174 signature index
00000d5: 00                                        ; function 175 signature index
00000d6: 00                                        ; function 176 signature index
00000d7: 00                                        ; function 177 signature index
00000d8: 00                                        ; function 178 signature index
00000d9: 00                                        ; function 179 signature index
00000da: 00                                        ; function 180 signature index
00000db: 00                                        ; function 181 signature index
00000dc: 00                                        ; function 182 signature index
00000dd: 00                                        ; function 183 signature index
00000de: 00                                        ; function 184 signature index
00000df: 00                                        ; function 185 signature index
00000e0: 00                                        ; function 186 signature index
00000e1: 00                                        ; function 187 signature index
00000e2: 00                                        ; function 188 signature index
00000e3: 00                                        ; function 189 signature index
00000e4: 00                                        ; function 190 signature index
00000e5: 00                                        ; function 191 signature index
00000e6: 00                                        ; function 192 signature index
00000e7: 00                                        ; function 193 signature index
00000e8: 00                                        ; function 194 signature index
00000e9: 00                                        ; function 195 signature index
00000ea: 00                                        ; function 196 signature index
00000eb: 00                                        ; function 197 signature index
00000ec: 00                                        ; function 198 signature index
00000ed: 00                                        ; function 199 signature index
00000ee: 00                                        ; function 200 signature index
00000ef: 00                                        ; function 201 signature index
00000f0: 00                                        ; function 202 signature index
00000f1: 00                                        ; function 203 signature index
00000f2: 00                                        ; function 204 signature index
00000f3: 00                                        ; function 205 signature index
00000f4: 00                                        ; function 206 signature index
00000f5: 00                                        ; function 207 signature index
00000f6: 00                                        ; function 208 signature index
00000f7: 00                                        ; function 209 signature index
00000f8: 00                                        ; function 210 signature index
00000f9: 00                                        ; function 211 signature index
00000fa: 00                                        ; function 212 signature index
00000fb: 00                                        ; function 213 signature index
00000fc: 00                                        ; function 214 signature index
00000fd: 00                                        ; function 215 signature index
00000fe: 00                                        ; function 216 signature index
00000ff: 00                                        ; function 217 signature index
0000100: 00                                        ; function 218 signature index
0000101: 00                                        ; function 219 signature index
0000102: 00                                        ; function 220 signature index
0000103: 00                                        ; function 221 signature index
0000104: 00                                        ; function 222 signature index
0000105: 00                                        ; function 223 signature index
0000106: 00                                        ; function 224 signature index
0000107: 00                                        ; function 225 signature index
0000108: 00                                        ; function 226 signature index
0000109: 00                                        ; function 227 signature index
000010a: 00                                        ; function 228 signature index
000010b: 00                                        ; function 229 signature index
000010c: 00                                        ; function 230 signature index
000010d: 00                                        ; function 231 signature index
000010e: 00                                        ; function 232 signature index
000010f: 00                                        ; function 233 signature index
0000110: 00                                        ; function 234 signature index
0000111: 00                                        ; function 235 signature index
0000112: 00                                        ; function 236 signature index
0000113: 00                                        ; function 237 signature index
0000114: 00                                        ; function 238 signature index
0000115: 00                                        ; function 239 signature index
0000116: 00                                        ; function 240 signature index
0000117: 00                                        ; function 241 signature index
0000118: 00                                        ; function 242 signature index
0000119: 00                                        ; function 243 signature index
000011a: 00                                        ; function 244 signature index
000011b: 00                                        ; function 245 signature index
000011c: 00                                        ; function 246 signature index
000011d: 00                                        ; function 247 signature index
000011e: 00                                        ; function 248 signature index
000011f: 00                                        ; function 249 signature index
0000120: 00                                        ; function 250 signature index
0000121: 00                                        ; function 251 signature index
0000122: 00                                        ; function 252 signature index
0000123: 00                                        ; function 253 signature index
0000124: 00                                        ; function 254 signature index
0000125: 00                                        ; function 255 signature index
0000126: 00                                        ; function 256 signature index
0000127: 00                                        ; function 257 signature index
0000128: 00                                        ; function 258 signature index
0000129: 00                                        ; function 259 signature index
000012a: 00                                        ; function 260 signature index
000012b: 00                                        ; function 261 signature index
000012c: 00                                        ; function 262 signature index
000012d: 00                                        ; function 263 signature index
000012e: 00                                        ; function 264 signature index
000012f: 00                                        ; function 265 signature index
0000130: 00                                        ; function 266 signature index
0000131: 00                                        ; function 267 signature index
0000132: 00                                        ; function 268 signature index
0000133: 00                                        ; function 269 signature index
0000134: 00                                        ; function 270 signature index
0000135: 00                                        ; function 271 signature index
0000136: 00                                        ; function 272 signature index
0000137: 00                                        ; function 273 signature index
0000138: 00                                        ; function 274 signature index
0000139: 00                                        ; function 275 signature index
000013a: 00                                        ; function 276 signature index
000013b: 00                                        ; function 277 signature index
000013c: 00                                        ; function 278 signature index
000013d: 00                                        ; function 279 signature index
000013e: 00                                        ; function 280 signature index
000013f: 00                                        ; function 281 signature index
0000140: 00                                        ; function 282 signature index
0000141: 00                                        ; function 283 signature index
0000142: 00                                        ; function 284 signature index
0000143: 00                                        ; function 285 signature index
0000144: 00                                        ; function 286 signature index
0000145: 00                                        ; function 287 signature index
0000146: 00                                        ; function 288 signature index
0000147: 00                                        ; function 289 signature index
0000148: 00                                        ; function 290 signature index
0000149: 00                                        ; function 291 signature index
000014a: 00                                        ; function 292 signature index
000014b: 00                                        ; function 293 signature index
000014c: 00                                        ; function 294 signature index
000014d: 00                                        ; function 295 signature index
000014e: 00                                        ; function 296 signature index
000014f: 00                                        ; function 297 signature index
0000150: 00                                        ; function 298 signature index
0000151: 00                                        ; function 299 signature index
0000152: 00                                        ; function 300 signature index
0000153: 00                                        ; function 301 signature index
0000154: 00                                        ; function 302 signature index
0000155: 00                                        ; function 303 signature index
0000156: 00                                        ; function 304 signature index
0000157: 00                                        ; function 305 signature index
0000158: 00                                        ; function 306 signature index
0000159: 00                                        ; function 307 signature index
000015a: 00                                        ; function 308 signature index
000015b: 00                                        ; function 309 signature index
000015c: 00                                        ; function 310 signature index
000015d: 00                                        ; function 311 signature index
000015e: 00                                        ; function 312 signature index
000015f: 00                                        ; function 313 signature index
0000160: 00                                        ; function 314 signature index
0000161: 00                                        ; function 315 signature index
0000162: 00                                        ; function 316 signature index
0000163: 00                                        ; function 317 signature index
0000164: 00                                        ; function 318 signature index
0000165: 00                                        ; function 319 signature index
0000166: 00                                        ; function 320 signature index
0000167: 00                                        ; function 321 signature index
0000168: 00                                        ; function 322 signature index
0000169: 00                                        ; function 323 signature index
000016a: 00                                        ; function 324 signature index
000016b: 00                                        ; function 325 signature index
000016c: 00                                        ; function 326 signature index
000016d: 00                                        ; function 327 signature index
000016e: 00                                        ; function 328 signature index
000016f: 00                                        ; function 329 signature index
0000170: 00                                        ; function 330 signature index
0000171: 00                                        ; function 331 signature index
0000172: 00                                        ; function 332 signature index
0000173: 00                                        ; function 333 signature index
0000174: 00                                        ; function 334 signature index
0000175: 00                                        ; function 335 signature index
0000176: 00                                        ; function 336 signature index
0000177: 00                                        ; function 337 signature index
0000178: 00                                        ; function 338 signature index
0000179: 00                                        ; function 339 signature index
000017a: 00                                        ; function 340 signature index
000017b: 00                                        ; function 341 signature index
000017c: 00                                        ; function 342 signature index
000017d: 00                                        ; function 343 signature index
000017e: 00                                        ; function 344 signature index
000017f: 00                                        ; function 345 signature index
0000180: 00                                        ; function 346 signature index
0000181: 00                                        ; function 347 signature index
0000182: 00                                        ; function 348 signature index
0000183: 00                                        ; function 349 signature index
0000184: 00                                        ; function 350 signature index
0000185: 00                                        ; function 351 signature index
0000186: 00                                        ; function 352 signature index
0000187: 00                                        ; function 353 signature index
0000188: 00                                        ; function 354 signature index
0000189: 00                                        ; function 355 signature index
000018a: 00                                        ; function 356 signature index
000018b: 00                                        ; function 357 signature index
000018c: 00                                        ; function 358 signature index
000018d: 00                                        ; function 359 signature index
000018e: 00                                        ; function 360 signature index
000018f: 00                                        ; function 361 signature index
0000190: 00                                        ; function 362 signature index
0000191: 00                                        ; function 363 signature index
0000192: 00                                        ; function 364 signature index
0000193: 00                                        ; function 365 signature index
0000194: 00                                        ; function 366 signature index
0000195: 00                                        ; function 367 signature index
0000196: 00                                        ; function 368 signature index
0000197: 00                                        ; function 369 signature index
0000198: 00                                        ; function 370 signature index
0000199: 00                                        ; function 371 signature index
000019a: 00                                        ; function 372 signature index
000019b: 00                                        ; function 373 signature index
000019c: 00                                        ; function 374 signature index
000019d: 00                                        ; function 375 signature index
000019e: 00                                        ; function 376 signature index
000019f: 00                                        ; function 377 signature index
00001a0: 00                                        ; function 378 signature index
00001a1: 00                                        ; function 379 signature index
00001a2: 00                                        ; function 380 signature index
00001a3: 00                                        ; function 381 signature index
00001a4: 00                                        ; function 382 signature index
00001a5: 00                                        ; function 383 signature index
00001a6: 00                                        ; function 384 signature index
00001a7: 00                                        ; function 385 signature index
00001a8: 00                                        ; function 386 signature index
00001a9: 00                                        ; function 387 signature index
00001aa: 00                                        ; function 388 signature index
00001ab: 00                                        ; function 389 signature index
00001ac: 00                                        ; function 390 signature index
00001ad: 00                                        ; function 391 signature index
00001ae: 00                                        ; function 392 signature index
00001af: 00                                        ; function 393 signature index
00001b0: 00                                        ; function 394 signature index
00001b1: 00                                        ; function 395 signature index
00001b2: 00                                        ; function 396 signature index
00001b3: 00                                        ; function 397 signature index
00001b4: 00                                        ; function 398 signature index
00001b5: 00                                        ; function 399 signature index
00001b6: 00                                        ; function 400 signature index
00001b7: 00                                        ; function 401 signature index
00001b8: 00                                        ; function 402 signature index
00001b9: 00                                        ; function 403 signature index
; move data: [24, 1ba) -> [25, 1bb)
0000023: 9603                                      ; FIXUP section size
; section "Table" (4)
00001bb: 04                                        ; section code
00001bc: 00                                        ; section size (guess)
00001bd: 01                                        ; num tables
; table 0
00001be: 70                                        ; funcref
00001bf: 01                                        ; limits: flags
00001c0: 02                                        ; limits: initial
00001c1: 02                                        ; limits: max
00001bc: 05                                        ; FIXUP section size
; section "Memory" (5)
00001c2: 05                                        ; section code
00001c3: 00                                        ; section size (guess)
00001c4: 01                                        ; num memories
; memory 0
00001c5: 03                                        ; limits: flags
00001c6: 01                                        ; limits: initial
00001c7: 01                                        ; limits: max
00001c3: 04                                        ; FIXUP section size
; section "Global" (6)
00001c8: 06                                        ; section code
00001c9: 00                                        ; section size (guess)
00001ca: 01                                        ; num globals
00001cb: 7f                                        ; i32
00001cc: 01                                        ; global mutability
00001cd: 41                                        ; i32.const
00001ce: 00                                        ; i32 literal
00001cf: 0b                                        ; end
00001c9: 06                                        ; FIXUP section size
; section "Export" (7)
00001d0: 07                                        ; section code
00001d1: 00                                        ; section size (guess)
00001d2: 9303                                      ; num exports
00001d4: 0b                                        ; string length
00001d5: 756e 7265 6163 6861 626c 65              unreachable  ; export name
00001e0: 00                                        ; export kind
00001e1: 02                                        ; export func index
00001e2: 02                                        ; string length
00001e3: 6272                                     br  ; export name
00001e5: 00                                        ; export kind
00001e6: 03                                        ; export func index
00001e7: 08                                        ; string length
00001e8: 6272 5f74 6162 6c65                      br_table  ; export name
00001f0: 00                                        ; export kind
00001f1: 04                                        ; export func index
00001f2: 06                                        ; string length
00001f3: 7265 7475 726e                           return  ; export name
00001f9: 00                                        ; export kind
00001fa: 05                                        ; export func index
00001fb: 04                                        ; string length
00001fc: 6361 6c6c                                call  ; export name
0000200: 00                                        ; export kind
0000201: 06                                        ; export func index
0000202: 0d                                        ; string length
0000203: 6361 6c6c 5f69 6e64 6972 6563 74         call_indirect  ; export name
0000210: 00                                        ; export kind
0000211: 07                                        ; export func index
0000212: 0b                                        ; string length
0000213: 7265 7475 726e 5f63 616c 6c              return_call  ; export name
000021e: 00                                        ; export kind
000021f: 08                                        ; export func index
0000220: 14                                        ; string length
0000221: 7265 7475 726e 5f63 616c 6c5f 696e 6469  return_call_indi
0000231: 7265 6374                                rect  ; export name
0000235: 00                                        ; export kind
0000236: 09                                        ; export func index
0000237: 04                                        ; string length
0000238: 6472 6f70                                drop  ; export name
000023c: 00                                        ; export kind
000023d: 0a                                        ; export func index
000023e: 06                                        ; string length
000023f: 7365 6c65 6374                           select  ; export name
0000245: 00                                        ; export kind
0000246: 0b                                        ; export func index
0000247: 09                                        ; string length
0000248: 6765 745f 6c6f 6361 6c                   get_local  ; export name
0000251: 00                                        ; export kind
0000252: 0c                                        ; export func index
0000253: 09                                        ; string length
0000254: 7365 745f 6c6f 6361 6c                   set_local  ; export name
000025d: 00                                        ; export kind
000025e: 0d                                        ; export func index
000025f: 09                                        ; string length
0000260: 7465 655f 6c6f 6361 6c                   tee_local  ; export name
0000269: 00                                        ; export kind
000026a: 0e                                        ; export func index
000026b: 0a                                        ; string length
000026c: 6765 745f 676c 6f62 616c                 get_global  ; export name
0000276: 00                                        ; export kind
0000277: 0f                                        ; export func index
0000278: 0a                                        ; string length
0000279: 7365 745f 676c 6f62 616c                 set_global  ; export name
0000283: 00                                        ; export kind
0000284: 10                                        ; export func index
0000285: 08                                        ; string length
0000286: 6933 322e 6c6f 6164                      i32.load  ; export name
000028e: 00                                        ; export kind
000028f: 11                                        ; export func index
0000290: 08                                        ; string length
0000291: 6936 342e 6c6f 6164                      i64.load  ; export name
0000299: 00                                        ; export kind
000029a: 12                                        ; export func index
000029b: 08                                        ; string length
000029c: 6633 322e 6c6f 6164                      f32.load  ; export name
00002a4: 00                                        ; export kind
00002a5: 13                                        ; export func index
00002a6: 08                                        ; string length
00002a7: 6636 342e 6c6f 6164                      f64.load  ; export name
00002af: 00                                        ; export kind
00002b0: 14                                        ; export func index
00002b1: 0b                                        ; string length
00002b2: 6933 322e 6c6f 6164 385f 73              i32.load8_s  ; export name
00002bd: 00                                        ; export kind
00002be: 15                                        ; export func index
00002bf: 0b                                        ; string length
00002c0: 6933 322e 6c6f 6164 385f 75              i32.load8_u  ; export name
00002cb: 00                                        ; export kind
00002cc: 16                                        ; export func index
00002cd: 0c                                        ; string length
00002ce: 6933 322e 6c6f 6164 3136 5f73            i32.load16_s  ; export name
00002da: 00                                        ; export kind
00002db: 17                                        ; export func index
00002dc: 0c                                        ; string length
00002dd: 6933 322e 6c6f 6164 3136 5f75            i32.load16_u  ; export name
00002e9: 00                                        ; export kind
00002ea: 18                                        ; export func index
00002eb: 0b                                        ; string length
00002ec: 6936 342e 6c6f 6164 385f 73              i64.load8_s  ; export name
00002f7: 00                                        ; export kind
00002f8: 19                                        ; export func index
00002f9: 0b                                        ; string length
00002fa: 6936 342e 6c6f 6164 385f 75              i64.load8_u  ; export name
0000305: 00                                        ; export kind
0000306: 1a                                        ; export func index
0000307: 0c                                        ; string length
0000308: 6936 342e 6c6f 6164 3136 5f73            i64.load16_s  ; export name
0000314: 00                                        ; export kind
0000315: 1b                                        ; export func index
0000316: 0c                                        ; string length
0000317: 6936 342e 6c6f 6164 3136 5f75            i64.load16_u  ; export name
0000323: 00                                        ; export kind
0000324: 1c                                        ; export func index
0000325: 0c                                        ; string length
0000326: 6936 342e 6c6f 6164 3332 5f73            i64.load32_s  ; export name
0000332: 00                                        ; export kind
0000333: 1d                                        ; export func index
0000334: 0c                                        ; string length
0000335: 6936 342e 6c6f 6164 3332 5f75            i64.load32_u  ; export name
0000341: 00                                        ; export kind
0000342: 1e                                        ; export func index
0000343: 09                                        ; string length
0000344: 6933 322e 7374 6f72 65                   i32.store  ; export name
000034d: 00                                        ; export kind
000034e: 1f                                        ; export func index
000034f: 09                                        ; string length
0000350: 6936 342e 7374 6f72 65                   i64.store  ; export name
0000359: 00                                        ; export kind
000035a: 20                                        ; export func index
000035b: 09                                        ; string length
000035c: 6633 322e 7374 6f72 65                   f32.store  ; export name
0000365: 00                                        ; export kind
0000366: 21                                        ; export func index
0000367: 09                                        ; string length
0000368: 6636 342e 7374 6f72 65                   f64.store  ; export name
0000371: 00                                        ; export kind
0000372: 22                                        ; export func index
0000373: 0a                                        ; string length
0000374: 6933 322e 7374 6f72 6538                 i32.store8  ; export name
000037e: 00                                        ; export kind
000037f: 23                                        ; export func index
0000380: 0b                                        ; string length
0000381: 6933 322e 7374 6f72 6531 36              i32.store16  ; export name
000038c: 00                                        ; export kind
000038d: 24                                        ; export func index
000038e: 0a                                        ; string length
000038f: 6936 342e 7374 6f72 6538                 i64.store8  ; export name
0000399: 00                                        ; export kind
000039a: 25                                        ; export func index
000039b: 0b                                        ; string length
000039c: 6936 342e 7374 6f72 6531 36              i64.store16  ; export name
00003a7: 00                                        ; export kind
00003a8: 26                                        ; export func index
00003a9: 0b                                        ; string length
00003aa: 6936 342e 7374 6f72 6533 32              i64.store32  ; export name
00003b5: 00                                        ; export kind
00003b6: 27                                        ; export func index
00003b7: 0e                                        ; string length
00003b8: 6375 7272 656e 745f 6d65 6d6f 7279       current_memory  ; export name
00003c6: 00                                        ; export kind
00003c7: 28                                        ; export func index
00003c8: 0b                                        ; string length
00003c9: 6772 6f77 5f6d 656d 6f72 79              grow_memory  ; export name
00003d4: 00                                        ; export kind
00003d5: 29                                        ; export func index
00003d6: 09                                        ; string length
00003d7: 6933 322e 636f 6e73 74                   i32.const  ; export name
00003e0: 00                                        ; export kind
00003e1: 2a                                        ; export func index
00003e2: 09                                        ; string length
00003e3: 6936 342e 636f 6e73 74                   i64.const  ; export name
00003ec: 00                                        ; export kind
00003ed: 2b                                        ; export func index
00003ee: 09                                        ; string length
00003ef: 6633 322e 636f 6e73 74                   f32.const  ; export name
00003f8: 00                                        ; export kind
00003f9: 2c                                        ; export func index
00003fa: 09                                        ; string length
00003fb: 6636 342e 636f 6e73 74                   f64.const  ; export name
0000404: 00                                        ; export kind
0000405: 2d                                        ; export func index
0000406: 07                                        ; string length
0000407: 6933 322e 6571 7a                        i32.eqz  ; export name
000040e: 00                                        ; export kind
000040f: 2e                                        ; export func index
0000410: 06                                        ; string length
0000411: 6933 322e 6571                           i32.eq  ; export name
0000417: 00                                        ; export kind
0000418: 2f                                        ; export func index
0000419: 06                                        ; string length
000041a: 6933 322e 6e65                           i32.ne  ; export name
0000420: 00                                        ; export kind
0000421: 30                                        ; export func index
0000422: 08                                        ; string length
0000423: 6933 322e 6c74 5f73                      i32.lt_s  ; export name
000042b: 00                                        ; export kind
000042c: 31                                        ; export func index
000042d: 08                                        ; string length
000042e: 6933 322e 6c74 5f75                      i32.lt_u  ; export name
0000436: 00                                        ; export kind
0000437: 32                                        ; export func index
0000438: 08                                        ; string length
0000439: 6933 322e 6774 5f73                      i32.gt_s  ; export name
0000441: 00                                        ; export kind
0000442: 33                                        ; export func index
0000443: 08                                        ; string length
0000444: 6933 322e 6774 5f75                      i32.gt_u  ; export name
000044c: 00                                        ; export kind
000044d: 34                                        ; export func index
000044e: 08                                        ; string length
000044f: 6933 322e 6c65 5f73                      i32.le_s  ; export name
0000457: 00                                        ; export kind
0000458: 35                                        ; export func index
0000459: 08                                        ; string length
000045a: 6933 322e 6c65 5f75                      i32.le_u  ; export name
0000462: 00                                        ; export kind
0000463: 36                                        ; export func index
0000464: 08                                        ; string length
0000465: 6933 322e 6765 5f73                      i32.ge_s  ; export name
000046d: 00                                        ; export kind
000046e: 37                                        ; export func index
000046f: 08                                        ; string length
0000470: 6933 322e 6765 5f75                      i32.ge_u  ; export name
0000478: 00                                        ; export kind
0000479: 38                                        ; export func index
000047a: 07                                        ; string length
000047b: 6936 342e 6571 7a                        i64.eqz  ; export name
0000482: 00                                        ; export kind
0000483: 39                                        ; export func index
0000484: 06                                        ; string length
0000485: 6936 342e 6571                           i64.eq  ; export name
000048b: 00                                        ; export kind
000048c: 3a                                        ; export func index
000048d: 06                                        ; string length
000048e: 6936 342e 6e65                           i64.ne  ; export name
0000494: 00                                        ; export kind
0000495: 3b                                        ; export func index
0000496: 08                                        ; string length
0000497: 6936 342e 6c74 5f73                      i64.lt_s  ; export name
000049f: 00                                        ; export kind
00004a0: 3c                                        ; export func index
00004a1: 08                                        ; string length
00004a2: 6936 342e 6c74 5f75                      i64.lt_u  ; export name
00004aa: 00                                        ; export kind
00004ab: 3d                                        ; export func index
00004ac: 08                                        ; string length
00004ad: 6936 342e 6774 5f73                      i64.gt_s  ; export name
00004b5: 00                                        ; export kind
00004b6: 3e                                        ; export func index
00004b7: 08                                        ; string length
00004b8: 6936 342e 6774 5f75                      i64.gt_u  ; export name
00004c0: 00                                        ; export kind
00004c1: 3f                                        ; export func index
00004c2: 08                                        ; string length
00004c3: 6936 342e 6c65 5f73                      i64.le_s  ; export name
00004cb: 00                                        ; export kind
00004cc: 40                                        ; export func index
00004cd: 08                                        ; string length
00004ce: 6936 342e 6c65 5f75                      i64.le_u  ; export name
00004d6: 00                                        ; export kind
00004d7: 41                                        ; export func index
00004d8: 08                                        ; string length
00004d9: 6936 342e 6765 5f73                      i64.ge_s  ; export name
00004e1: 00                                        ; export kind
00004e2: 42                                        ; export func index
00004e3: 08                                        ; string length
00004e4: 6936 342e 6765 5f75                      i64.ge_u  ; export name
00004ec: 00                                        ; export kind
00004ed: 43                                        ; export func index
00004ee: 06                                        ; string length
00004ef: 6633 322e 6571                           f32.eq  ; export name
00004f5: 00                                        ; export kind
00004f6: 44                                        ; export func index
00004f7: 06                                        ; string length
00004f8: 6633 322e 6e65                           f32.ne  ; export name
00004fe: 00                                        ; export kind
00004ff: 45                                        ; export func index
0000500: 06                                        ; string length
0000501: 6633 322e 6c74                           f32.lt  ; export name
0000507: 00                                        ; export kind
0000508: 46                                        ; export func index
0000509: 06                                        ; string length
000050a: 6633 322e 6774                           f32.gt  ; export name
0000510: 00                                        ; export kind
0000511: 47                                        ; export func index
0000512: 06                                        ; string length
0000513: 6633 322e 6c65                           f32.le  ; export name
0000519: 00                                        ; export kind
000051a: 48                                        ; export func index
000051b: 06                                        ; string length
000051c: 6633 322e 6765                           f32.ge  ; export name
0000522: 00                                        ; export kind
0000523: 49                                        ; export func index
0000524: 06                                        ; string length
0000525: 6636 342e 6571                           f64.eq  ; export name
000052b: 00                                        ; export kind
000052c: 4a                                        ; export func index
000052d: 06                                        ; string length
000052e: 6636 342e 6e65                           f64.ne  ; export name
0000534: 00                                        ; export kind
0000535: 4b                                        ; export func index
0000536: 06                                        ; string length
0000537: 6636 342e 6c74                           f64.lt  ; export name
000053d: 00                                        ; export kind
000053e: 4c                                        ; export func index
000053f: 06                                        ; string length
0000540: 6636 342e 6774                           f64.gt  ; export name
0000546: 00                                        ; export kind
0000547: 4d                                        ; export func index
0000548: 06                                        ; string length
0000549: 6636 342e 6c65                           f64.le  ; export name
000054f: 00                                        ; export kind
0000550: 4e                                        ; export func index
0000551: 06                                        ; string length
0000552: 6636 342e 6765                           f64.ge  ; export name
0000558: 00                                        ; export kind
0000559: 4f                                        ; export func index
000055a: 07                                        ; string length
000055b: 6933 322e 636c 7a                        i32.clz  ; export name
0000562: 00                                        ; export kind
0000563: 50                                        ; export func index
0000564: 07                                        ; string length
0000565: 6933 322e 6374 7a                        i32.ctz  ; export name
000056c: 00                                        ; export kind
000056d: 51                                        ; export func index
000056e: 0a                                        ; string length
000056f: 6933 322e 706f 7063 6e74                 i32.popcnt  ; export name
0000579: 00                                        ; export kind
000057a: 52                                        ; export func index
000057b: 07                                        ; string length
000057c: 6933 322e 6164 64                        i32.add  ; export name
0000583: 00                                        ; export kind
0000584: 53                                        ; export func index
0000585: 07                                        ; string length
0000586: 6933 322e 7375 62                        i32.sub  ; export name
000058d: 00                                        ; export kind
000058e: 54                                        ; export func index
000058f: 07                                        ; string length
0000590: 6933 322e 6d75 6c                        i32.mul  ; export name
0000597: 00                                        ; export kind
0000598: 55                                        ; export func index
0000599: 09                                        ; string length
000059a: 6933 322e 6469 765f 73                   i32.div_s  ; export name
00005a3: 00                                        ; export kind
00005a4: 56                                        ; export func index
00005a5: 09                                        ; string length
00005a6: 6933 322e 6469 765f 75                   i32.div_u  ; export name
00005af: 00                                        ; export kind
00005b0: 57                                        ; export func index
00005b1: 09                                        ; string length
00005b2: 6933 322e 7265 6d5f 73                   i32.rem_s  ; export name
00005bb: 00                                        ; export kind
00005bc: 58                                        ; export func index
00005bd: 09                                        ; string length
00005be: 6933 322e 7265 6d5f 75                   i32.rem_u  ; export name
00005c7: 00                                        ; export kind
00005c8: 59                                        ; export func index
00005c9: 07                                        ; string length
00005ca: 6933 322e 616e 64                        i32.and  ; export name
00005d1: 00                                        ; export kind
00005d2: 5a                                        ; export func index
00005d3: 06                                        ; string length
00005d4: 6933 322e 6f72                           i32.or  ; export name
00005da: 00                                        ; export kind
00005db: 5b                                        ; export func index
00005dc: 07                                        ; string length
00005dd: 6933 322e 786f 72                        i32.xor  ; export name
00005e4: 00                                        ; export kind
00005e5: 5c                                        ; export func index
00005e6: 07                                        ; string length
00005e7: 6933 322e 7368 6c                        i32.shl  ; export name
00005ee: 00                                        ; export kind
00005ef: 5d                                        ; export func index
00005f0: 09                                        ; string length
00005f1: 6933 322e 7368 725f 73                   i32.shr_s  ; export name
00005fa: 00                                        ; export kind
00005fb: 5e                                        ; export func index
00005fc: 09                                        ; string length
00005fd: 6933 322e 7368 725f 75                   i32.shr_u  ; export name
0000606: 00                                        ; export kind
0000607: 5f                                        ; export func index
0000608: 08                                        ; string length
0000609: 6933 322e 726f 746c                      i32.rotl  ; export name
0000611: 00                                        ; export kind
0000612: 60                                        ; export func index
0000613: 08                                        ; string length
0000614: 6933 322e 726f 7472                      i32.rotr  ; export name
000061c: 00                                        ; export kind
000061d: 61                                        ; export func index
000061e: 07                                        ; string length
000061f: 6936 342e 636c 7a                        i64.clz  ; export name
0000626: 00                                        ; export kind
0000627: 62                                        ; export func index
0000628: 07                                        ; string length
0000629: 6936 342e 6374 7a                        i64.ctz  ; export name
0000630: 00                                        ; export kind
0000631: 63                                        ; export func index
0000632: 0a                                        ; string length
0000633: 6936 342e 706f 7063 6e74                 i64.popcnt  ; export name
000063d: 00                                        ; export kind
000063e: 64                                        ; export func index
000063f: 07                                        ; string length
0000640: 6936 342e 6164 64                        i64.add  ; export name
0000647: 00                                        ; export kind
0000648: 65                                        ; export func index
0000649: 07                                        ; string length
000064a: 6936 342e 7375 62                        i64.sub  ; export name
0000651: 00                                        ; export kind
0000652: 66                                        ; export func index
0000653: 07                                        ; string length
0000654: 6936 342e 6d75 6c                        i64.mul  ; export name
000065b: 00                                        ; export kind
000065c: 67                                        ; export func index
000065d: 09                                        ; string length
000065e: 6936 342e 6469 765f 73                   i64.div_s  ; export name
0000667: 00                                        ; export kind
0000668: 68                                        ; export func index
0000669: 09                                        ; string length
000066a: 6936 342e 6469 765f 75                   i64.div_u  ; export name
0000673: 00                                        ; export kind
0000674: 69                                        ; export func index
0000675: 09                                        ; string length
0000676: 6936 342e 7265 6d5f 73                   i64.rem_s  ; export name
000067f: 00                                        ; export kind
0000680: 6a                                        ; export func index
0000681: 09                                        ; string length
0000682: 6936 342e 7265 6d5f 75                   i64.rem_u  ; export name
000068b: 00                                        ; export kind
000068c: 6b                                        ; export func index
000068d: 07                                        ; string length
000068e: 6936 342e 616e 64                        i64.and  ; export name
0000695: 00                                        ; export kind
0000696: 6c                                        ; export func index
0000697: 06                                        ; string length
0000698: 6936 342e 6f72                           i64.or  ; export name
000069e: 00                                        ; export kind
000069f: 6d                                        ; export func index
00006a0: 07                                        ; string length
00006a1: 6936 342e 786f 72                        i64.xor  ; export name
00006a8: 00                                        ; export kind
00006a9: 6e                                        ; export func index
00006aa: 07                                        ; string length
00006ab: 6936 342e 7368 6c                        i64.shl  ; export name
00006b2: 00                                        ; export kind
00006b3: 6f                                        ; export func index
00006b4: 09                                        ; string length
00006b5: 6936 342e 7368 725f 73                   i64.shr_s  ; export name
00006be: 00                                        ; export kind
00006bf: 70                                        ; export func index
00006c0: 09                                        ; string length
00006c1: 6936 342e 7368 725f 75                   i64.shr_u  ; export name
00006ca: 00                                        ; export kind
00006cb: 71                                        ; export func index
00006cc: 08                                        ; string length
00006cd: 6936 342e 726f 746c                      i64.rotl  ; export name
00006d5: 00                                        ; export kind
00006d6: 72                                        ; export func index
00006d7: 08                                        ; string length
00006d8: 6936 342e 726f 7472                      i64.rotr  ; export name
00006e0: 00                                        ; export kind
00006e1: 73                                        ; export func index
00006e2: 07                                        ; string length
00006e3: 6633 322e 6162 73                        f32.abs  ; export name
00006ea: 00                                        ; export kind
00006eb: 74                                        ; export func index
00006ec: 07                                        ; string length
00006ed: 6633 322e 6e65 67                        f32.neg  ; export name
00006f4: 00                                        ; export kind
00006f5: 75                                        ; export func index
00006f6: 08                                        ; string length
00006f7: 6633 322e 6365 696c                      f32.ceil  ; export name
00006ff: 00                                        ; export kind
0000700: 76                                        ; export func index
0000701: 09                                        ; string length
0000702: 6633 322e 666c 6f6f 72                   f32.floor  ; export name
000070b: 00                                        ; export kind
000070c: 77                                        ; export func index
000070d: 09                                        ; string length
000070e: 6633 322e 7472 756e 63                   f32.trunc  ; export name
0000717: 00                                        ; export kind
0000718: 78                                        ; export func index
0000719: 0b                                        ; string length
000071a: 6633 322e 6e65 6172 6573 74              f32.nearest  ; export name
0000725: 00                                        ; export kind
0000726: 79                                        ; export func index
0000727: 08                                        ; string length
0000728: 6633 322e 7371 7274                      f32.sqrt  ; export name
0000730: 00                                        ; export kind
0000731: 7a                                        ; export func index
0000732: 07                                        ; string length
0000733: 6633 322e 6164 64                        f32.add  ; export name
000073a: 00                                        ; export kind
000073b: 7b                                        ; export func index
000073c: 07                                        ; string length
000073d: 6633 322e 7375 62                        f32.sub  ; export name
0000744: 00                                        ; export kind
0000745: 7c                                        ; export func index
0000746: 07                                        ; string length
0000747: 6633 322e 6d75 6c                        f32.mul  ; export name
000074e: 00                                        ; export kind
000074f: 7d                                        ; export func index
0000750: 07                                        ; string length
0000751: 6633 322e 6469 76                        f32.div  ; export name
0000758: 00                                        ; export kind
0000759: 7e                                        ; export func index
000075a: 07                                        ; string length
000075b: 6633 322e 6d69 6e                        f32.min  ; export name
0000762: 00                                        ; export kind
0000763: 7f                                        ; export func index
0000764: 07                                        ; string length
0000765: 6633 322e 6d61 78                        f32.max  ; export name
000076c: 00                                        ; export kind
000076d: 8001                                      ; export func index
000076f: 0c                                        ; string length
0000770: 6633 322e 636f 7079 7369 676e            f32.copysign  ; export name
000077c: 00                                        ; export kind
000077d: 8101                                      ; export func index
000077f: 07                                        ; string length
0000780: 6636 342e 6162 73                        f64.abs  ; export name
0000787: 00                                        ; export kind
0000788: 8201                                      ; export func index
000078a: 07                                        ; string length
000078b: 6636 342e 6e65 67                        f64.neg  ; export name
0000792: 00                                        ; export kind
0000793: 8301                                      ; export func index
0000795: 08                                        ; string length
0000796: 6636 342e 6365 696c                      f64.ceil  ; export name
000079e: 00                                        ; export kind
000079f: 8401                                      ; export func index
00007a1: 09                                        ; string length
00007a2: 6636 342e 666c 6f6f 72                   f64.floor  ; export name
00007ab: 00                                        ; export kind
00007ac: 8501                                      ; export func index
00007ae: 09                                        ; string length
00007af: 6636 342e 7472 756e 63                   f64.trunc  ; export name
00007b8: 00                                        ; export kind
00007b9: 8601                                      ; export func index
00007bb: 0b                                        ; string length
00007bc: 6636 342e 6e65 6172 6573 74              f64.nearest  ; export name
00007c7: 00                                        ; export kind
00007c8: 8701                                      ; export func index
00007ca: 08                                        ; string length
00007cb: 6636 342e 7371 7274                      f64.sqrt  ; export name
00007d3: 00                                        ; export kind
00007d4: 8801                                      ; export func index
00007d6: 07                                        ; string length
00007d7: 6636 342e 6164 64                        f64.add  ; export name
00007de: 00                                        ; export kind
00007df: 8901                                      ; export func index
00007e1: 07                                        ; string length
00007e2: 6636 342e 7375 62                        f64.sub  ; export name
00007e9: 00                                        ; export kind
00007ea: 8a01                                      ; export func index
00007ec: 07                                        ; string length
00007ed: 6636 342e 6d75 6c                        f64.mul  ; export name
00007f4: 00                                        ; export kind
00007f5: 8b01                                      ; export func index
00007f7: 07                                        ; string length
00007f8: 6636 342e 6469 76                        f64.div  ; export name
00007ff: 00                                        ; export kind
0000800: 8c01                                      ; export func index
0000802: 07                                        ; string length
0000803: 6636 342e 6d69 6e                        f64.min  ; export name
000080a: 00                                        ; export kind
000080b: 8d01                                      ; export func index
000080d: 07                                        ; string length
000080e: 6636 342e 6d61 78                        f64.max  ; export name
0000815: 00                                        ; export kind
0000816: 8e01                                      ; export func index
0000818: 0c                                        ; string length
0000819: 6636 342e 636f 7079 7369 676e            f64.copysign  ; export name
0000825: 00                                        ; export kind
0000826: 8f01                                      ; export func index
0000828: 0c                                        ; string length
0000829: 6933 322e 7772 6170 2f69 3634            i32.wrap/i64  ; export name
0000835: 00                                        ; export kind
0000836: 9001                                      ; export func index
0000838: 0f                                        ; string length
0000839: 6933 322e 7472 756e 635f 732f 6633 32    i32.trunc_s/f32  ; export name
0000848: 00                                        ; export kind
0000849: 9101                                      ; export func index
000084b: 0f                                        ; string length
000084c: 6933 322e 7472 756e 635f 752f 6633 32    i32.trunc_u/f32  ; export name
000085b: 00                                        ; export kind
000085c: 9201                                      ; export func index
000085e: 0f                                        ; string length
000085f: 6933 322e 7472 756e 635f 732f 6636 34    i32.trunc_s/f64  ; export name
000086e: 00                                        ; export kind
000086f: 9301                                      ; export func index
0000871: 0f                                        ; string length
0000872: 6933 322e 7472 756e 635f 752f 6636 34    i32.trunc_u/f64  ; export name
0000881: 00                                        ; export kind
0000882: 9401                                      ; export func index
0000884: 10                                        ; string length
0000885: 6936 342e 6578 7465 6e64 5f73 2f69 3332  i64.extend_s/i32  ; export name
0000895: 00                                        ; export kind
0000896: 9501                                      ; export func index
0000898: 10                                        ; string length
0000899: 6936 342e 6578 7465 6e64 5f75 2f69 3332  i64.extend_u/i32  ; export name
00008a9: 00                                        ; export kind
00008aa: 9601                                      ; export func index
00008ac: 0f                                        ; string length
00008ad: 6936 342e 7472 756e 635f 732f 6633 32    i64.trunc_s/f32  ; export name
00008bc: 00                                        ; export kind
00008bd: 9701                                      ; export func index
00008bf: 0f                                        ; string length
00008c0: 6936 342e 7472 756e 635f 752f 6633 32    i64.trunc_u/f32  ; export name
00008cf: 00                                        ; export kind
00008d0: 9801                                      ; export func index
00008d2: 0f                                        ; string length
00008d3: 6936 342e 7472 756e 635f 732f 6636 34    i64.trunc_s/f64  ; export name
00008e2: 00                                        ; export kind
00008e3: 9901                                      ; export func index
00008e5: 0f                                        ; string length
00008e6: 6936 342e 7472 756e 635f 752f 6636 34    i64.trunc_u/f64  ; export name
00008f5: 00                                        ; export kind
00008f6: 9a01                                      ; export func index
00008f8: 11                                        ; string length
00008f9: 6633 322e 636f 6e76 6572 745f 732f 6933  f32.convert_s/i3
0000909: 32                                       2  ; export name
000090a: 00                                        ; export kind
000090b: 9b01                                      ; export func index
000090d: 11                                        ; string length
000090e: 6633 322e 636f 6e76 6572 745f 752f 6933  f32.convert_u/i3
000091e: 32                                       2  ; export name
000091f: 00                                        ; export kind
0000920: 9c01                                      ; export func index
0000922: 11                                        ; string length
0000923: 6633 322e 636f 6e76 6572 745f 732f 6936  f32.convert_s/i6
0000933: 34                                       4  ; export name
0000934: 00                                        ; export kind
0000935: 9d01                                      ; export func index
0000937: 11                                        ; string length
0000938: 6633 322e 636f 6e76 6572 745f 752f 6936  f32.convert_u/i6
0000948: 34                                       4  ; export name
0000949: 00                                        ; export kind
000094a: 9e01                                      ; export func index
000094c: 0e                                        ; string length
000094d: 6633 322e 6465 6d6f 7465 2f66 3634       f32.demote/f64  ; export name
000095b: 00                                        ; export kind
000095c: 9f01                                      ; export func index
000095e: 11                                        ; string length
000095f: 6636 342e 636f 6e76 6572 745f 732f 6933  f64.convert_s/i3
000096f: 32                                       2  ; export name
0000970: 00                                        ; export kind
0000971: a001                                      ; export func index
0000973: 11                                        ; string length
0000974: 6636 342e 636f 6e76 6572 745f 752f 6933  f64.convert_u/i3
0000984: 32                                       2  ; export name
0000985: 00                                        ; export kind
0000986: a101                                      ; export func index
0000988: 11                                        ; string length
0000989: 6636 342e 636f 6e76 6572 745f 732f 6936  f64.convert_s/i6
0000999: 34                                       4  ; export name
000099a: 00                                        ; export kind
000099b: a201                                      ; export func index
000099d: 11                                        ; string length
000099e: 6636 342e 636f 6e76 6572 745f 752f 6936  f64.convert_u/i6
00009ae: 34                                       4  ; export name
00009af: 00                                        ; export kind
00009b0: a301                                      ; export func index
00009b2: 0f                                        ; string length
00009b3: 6636 342e 7072 6f6d 6f74 652f 6633 32    f64.promote/f32  ; export name
00009c2: 00                                        ; export kind
00009c3: a401                                      ; export func index
00009c5: 13                                        ; string length
00009c6: 6933 322e 7265 696e 7465 7270 7265 742f  i32.reinterpret/
00009d6: 6633 32                                  f32  ; export name
00009d9: 00                                        ; export kind
00009da: a501                                      ; export func index
00009dc: 13                                        ; string length
00009dd: 6633 322e 7265 696e 7465 7270 7265 742f  f32.reinterpret/
00009ed: 6933 32                                  i32  ; export name
00009f0: 00                                        ; export kind
00009f1: a601                                      ; export func index
00009f3: 13                                        ; string length
00009f4: 6936 342e 7265 696e 7465 7270 7265 742f  i64.reinterpret/
0000a04: 6636 34                                  f64  ; export name
0000a07: 00                                        ; export kind
0000a08: a701                                      ; export func index
0000a0a: 13                                        ; string length
0000a0b: 6636 342e 7265 696e 7465 7270 7265 742f  f64.reinterpret/
0000a1b: 6936 34                                  i64  ; export name
0000a1e: 00                                        ; export kind
0000a1f: a801                                      ; export func index
0000a21: 0d                                        ; string length
0000a22: 6933 322e 6578 7465 6e64 385f 73         i32.extend8_s  ; export name
0000a2f: 00                                        ; export kind
0000a30: a901                                      ; export func index
0000a32: 0e                                        ; string length
0000a33: 6933 322e 6578 7465 6e64 3136 5f73       i32.extend16_s  ; export name
0000a41: 00                                        ; export kind
0000a42: aa01                                      ; export func index
0000a44: 0d                                        ; string length
0000a45: 6936 342e 6578 7465 6e64 385f 73         i64.extend8_s  ; export name
0000a52: 00                                        ; export kind
0000a53: ab01                                      ; export func index
0000a55: 0e                                        ; string length
0000a56: 6936 342e 6578 7465 6e64 3136 5f73       i64.extend16_s  ; export name
0000a64: 00                                        ; export kind
0000a65: ac01                                      ; export func index
0000a67: 0e                                        ; string length
0000a68: 6936 342e 6578 7465 6e64 3332 5f73       i64.extend32_s  ; export name
0000a76: 00                                        ; export kind
0000a77: ad01                                      ; export func index
0000a79: 06                                        ; string length
0000a7a: 616c 6c6f 6361                           alloca  ; export name
0000a80: 00                                        ; export kind
0000a81: ae01                                      ; export func index
0000a83: 09                                        ; string length
0000a84: 6272 5f75 6e6c 6573 73                   br_unless  ; export name
0000a8d: 00                                        ; export kind
0000a8e: af01                                      ; export func index
0000a90: 09                                        ; string length
0000a91: 6361 6c6c 5f68 6f73 74                   call_host  ; export name
0000a9a: 00                                        ; export kind
0000a9b: b001                                      ; export func index
0000a9d: 04                                        ; string length
0000a9e: 6461 7461                                data  ; export name
0000aa2: 00                                        ; export kind
0000aa3: b101                                      ; export func index
0000aa5: 09                                        ; string length
0000aa6: 6472 6f70 5f6b 6565 70                   drop_keep  ; export name
0000aaf: 00                                        ; export kind
0000ab0: b201                                      ; export func index
0000ab2: 13                                        ; string length
0000ab3: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000ac3: 6633 32                                  f32  ; export name
0000ac6: 00                                        ; export kind
0000ac7: b301                                      ; export func index
0000ac9: 13                                        ; string length
0000aca: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000ada: 6633 32                                  f32  ; export name
0000add: 00                                        ; export kind
0000ade: b401                                      ; export func index
0000ae0: 13                                        ; string length
0000ae1: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000af1: 6636 34                                  f64  ; export name
0000af4: 00                                        ; export kind
0000af5: b501                                      ; export func index
0000af7: 13                                        ; string length
0000af8: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000b08: 6636 34                                  f64  ; export name
0000b0b: 00                                        ; export kind
0000b0c: b601                                      ; export func index
0000b0e: 13                                        ; string length
0000b0f: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000b1f: 6633 32                                  f32  ; export name
0000b22: 00                                        ; export kind
0000b23: b701                                      ; export func index
0000b25: 13                                        ; string length
0000b26: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b36: 6633 32                                  f32  ; export name
0000b39: 00                                        ; export kind
0000b3a: b801                                      ; export func index
0000b3c: 13                                        ; string length
0000b3d: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000b4d: 6636 34                                  f64  ; export name
0000b50: 00                                        ; export kind
0000b51: b901                                      ; export func index
0000b53: 13                                        ; string length
0000b54: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b64: 6636 34                                  f64  ; export name
0000b67: 00                                        ; export kind
0000b68: ba01                                      ; export func index
0000b6a: 0b                                        ; string length
0000b6b: 6d65 6d6f 7279 2e69 6e69 74              memory.init  ; export name
0000b76: 00                                        ; export kind
0000b77: bb01                                      ; export func index
0000b79: 09                                        ; string length
0000b7a: 6461 7461 2e64 726f 70                   data.drop  ; export name
0000b83: 00                                        ; export kind
0000b84: bc01                                      ; export func index
0000b86: 0b                                        ; string length
0000b87: 6d65 6d6f 7279 2e63 6f70 79              memory.copy  ; export name
0000b92: 00                                        ; export kind
0000b93: bd01                                      ; export func index
0000b95: 0b                                        ; string length
0000b96: 6d65 6d6f 7279 2e66 696c 6c              memory.fill  ; export name
0000ba1: 00                                        ; export kind
0000ba2: be01                                      ; export func index
0000ba4: 0a                                        ; string length
0000ba5: 7461 626c 652e 696e 6974                 table.init  ; export name
0000baf: 00                                        ; export kind
0000bb0: bf01                                      ; export func index
0000bb2: 09                                        ; string length
0000bb3: 656c 656d 2e64 726f 70                   elem.drop  ; export name
0000bbc: 00                                        ; export kind
0000bbd: c001                                      ; export func index
0000bbf: 0a                                        ; string length
0000bc0: 7461 626c 652e 636f 7079                 table.copy  ; export name
0000bca: 00                                        ; export kind
0000bcb: c101                                      ; export func index
0000bcd: 09                                        ; string length
0000bce: 7631 3238 2e6c 6f61 64                   v128.load  ; export name
0000bd7: 00                                        ; export kind
0000bd8: c201                                      ; export func index
0000bda: 0a                                        ; string length
0000bdb: 7631 3238 2e73 746f 7265                 v128.store  ; export name
0000be5: 00                                        ; export kind
0000be6: c301                                      ; export func index
0000be8: 0a                                        ; string length
0000be9: 7631 3238 2e63 6f6e 7374                 v128.const  ; export name
0000bf3: 00                                        ; export kind
0000bf4: c401                                      ; export func index
0000bf6: 0b                                        ; string length
0000bf7: 6938 7831 362e 7370 6c61 74              i8x16.splat  ; export name
0000c02: 00                                        ; export kind
0000c03: c501                                      ; export func index
0000c05: 14                                        ; string length
0000c06: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000c16: 6e65 5f73                                ne_s  ; export name
0000c1a: 00                                        ; export kind
0000c1b: c601                                      ; export func index
0000c1d: 14                                        ; string length
0000c1e: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000c2e: 6e65 5f75                                ne_u  ; export name
0000c32: 00                                        ; export kind
0000c33: c701                                      ; export func index
0000c35: 12                                        ; string length
0000c36: 6938 7831 362e 7265 706c 6163 655f 6c61  i8x16.replace_la
0000c46: 6e65                                     ne  ; export name
0000c48: 00                                        ; export kind
0000c49: c801                                      ; export func index
0000c4b: 0b                                        ; string length
0000c4c: 6931 3678 382e 7370 6c61 74              i16x8.splat  ; export name
0000c57: 00                                        ; export kind
0000c58: c901                                      ; export func index
0000c5a: 14                                        ; string length
0000c5b: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000c6b: 6e65 5f73                                ne_s  ; export name
0000c6f: 00                                        ; export kind
0000c70: ca01                                      ; export func index
0000c72: 14                                        ; string length
0000c73: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000c83: 6e65 5f75                                ne_u  ; export name
0000c87: 00                                        ; export kind
0000c88: cb01                                      ; export func index
0000c8a: 12                                        ; string length
0000c8b: 6931 3678 382e 7265 706c 6163 655f 6c61  i16x8.replace_la
0000c9b: 6e65                                     ne  ; export name
0000c9d: 00                                        ; export kind
0000c9e: cc01                                      ; export func index
0000ca0: 0b                                        ; string length
0000ca1: 6933 3278 342e 7370 6c61 74              i32x4.splat  ; export name
0000cac: 00                                        ; export kind
0000cad: cd01                                      ; export func index
0000caf: 12                                        ; string length
0000cb0: 6933 3278 342e 6578 7472 6163 745f 6c61  i32x4.extract_la
0000cc0: 6e65                                     ne  ; export name
0000cc2: 00                                        ; export kind
0000cc3: ce01                                      ; export func index
0000cc5: 12                                        ; string length
0000cc6: 6933 3278 342e 7265 706c 6163 655f 6c61  i32x4.replace_la
0000cd6: 6e65                                     ne  ; export name
0000cd8: 00                                        ; export kind
0000cd9: cf01                                      ; export func index
0000cdb: 0b                                        ; string length
0000cdc: 6936 3478 322e 7370 6c61 74              i64x2.splat  ; export name
0000ce7: 00                                        ; export kind
0000ce8: d001                                      ; export func index
0000cea: 12                                        ; string length
0000ceb: 6936 3478 322e 6578 7472 6163 745f 6c61  i64x2.extract_la
0000cfb: 6e65                                     ne  ; export name
0000cfd: 00                                        ; export kind
0000cfe: d101                                      ; export func index
0000d00: 12                                        ; string length
0000d01: 6936 3478 322e 7265 706c 6163 655f 6c61  i64x2.replace_la
0000d11: 6e65                                     ne  ; export name
0000d13: 00                                        ; export kind
0000d14: d201                                      ; export func index
0000d16: 0b                                        ; string length
0000d17: 6633 3278 342e 7370 6c61 74              f32x4.splat  ; export name
0000d22: 00                                        ; export kind
0000d23: d301                                      ; export func index
0000d25: 12                                        ; string length
0000d26: 6633 3278 342e 6578 7472 6163 745f 6c61  f32x4.extract_la
0000d36: 6e65                                     ne  ; export name
0000d38: 00                                        ; export kind
0000d39: d401                                      ; export func index
0000d3b: 12                                        ; string length
0000d3c: 6633 3278 342e 7265 706c 6163 655f 6c61  f32x4.replace_la
0000d4c: 6e65                                     ne  ; export name
0000d4e: 00                                        ; export kind
0000d4f: d501                                      ; export func index
0000d51: 0b                                        ; string length
0000d52: 6636 3478 322e 7370 6c61 74              f64x2.splat  ; export name
0000d5d: 00                                        ; export kind
0000d5e: d601                                      ; export func index
0000d60: 12                                        ; string length
0000d61: 6636 3478 322e 6578 7472 6163 745f 6c61  f64x2.extract_la
0000d71: 6e65                                     ne  ; export name
0000d73: 00                                        ; export kind
0000d74: d701                                      ; export func index
0000d76: 12                                        ; string length
0000d77: 6636 3478 322e 7265 706c 6163 655f 6c61  f64x2.replace_la
0000d87: 6e65                                     ne  ; export name
0000d89: 00                                        ; export kind
0000d8a: d801                                      ; export func index
0000d8c: 08                                        ; string length
0000d8d: 6938 7831 362e 6571                      i8x16.eq  ; export name
0000d95: 00                                        ; export kind
0000d96: d901                                      ; export func index
0000d98: 08                                        ; string length
0000d99: 6938 7831 362e 6e65                      i8x16.ne  ; export name
0000da1: 00                                        ; export kind
0000da2: da01                                      ; export func index
0000da4: 0a                                        ; string length
0000da5: 6938 7831 362e 6c74 5f73                 i8x16.lt_s  ; export name
0000daf: 00                                        ; export kind
0000db0: db01                                      ; export func index
0000db2: 0a                                        ; string length
0000db3: 6938 7831 362e 6c74 5f75                 i8x16.lt_u  ; export name
0000dbd: 00                                        ; export kind
0000dbe: dc01                                      ; export func index
0000dc0: 0a                                        ; string length
0000dc1: 6938 7831 362e 6774 5f73                 i8x16.gt_s  ; export name
0000dcb: 00                                        ; export kind
0000dcc: dd01                                      ; export func index
0000dce: 0a                                        ; string length
0000dcf: 6938 7831 362e 6774 5f75                 i8x16.gt_u  ; export name
0000dd9: 00                                        ; export kind
0000dda: de01                                      ; export func index
0000ddc: 0a                                        ; string length
0000ddd: 6938 7831 362e 6c65 5f73                 i8x16.le_s  ; export name
0000de7: 00                                        ; export kind
0000de8: df01                                      ; export func index
0000dea: 0a                                        ; string length
0000deb: 6938 7831 362e 6c65 5f75                 i8x16.le_u  ; export name
0000df5: 00                                        ; export kind
0000df6: e001                                      ; export func index
0000df8: 0a                                        ; string length
0000df9: 6938 7831 362e 6765 5f73                 i8x16.ge_s  ; export name
0000e03: 00                                        ; export kind
0000e04: e101                                      ; export func index
0000e06: 0a                                        ; string length
0000e07: 6938 7831 362e 6765 5f75                 i8x16.ge_u  ; export name
0000e11: 00                                        ; export kind
0000e12: e201                                      ; export func index
0000e14: 08                                        ; string length
0000e15: 6931 3678 382e 6571                      i16x8.eq  ; export name
0000e1d: 00                                        ; export kind
0000e1e: e301                                      ; export func index
0000e20: 08                                        ; string length
0000e21: 6931 3678 382e 6e65                      i16x8.ne  ; export name
0000e29: 00                                        ; export kind
0000e2a: e401                                      ; export func index
0000e2c: 0a                                        ; string length
0000e2d: 6931 3678 382e 6c74 5f73                 i16x8.lt_s  ; export name
0000e37: 00                                        ; export kind
0000e38: e501                                      ; export func index
0000e3a: 0a                                        ; string length
0000e3b: 6931 3678 382e 6c74 5f75                 i16x8.lt_u  ; export name
0000e45: 00                                        ; export kind
0000e46: e601                                      ; export func index
0000e48: 0a                                        ; string length
0000e49: 6931 3678 382e 6774 5f73                 i16x8.gt_s  ; export name
0000e53: 00                                        ; export kind
0000e54: e701                                      ; export func index
0000e56: 0a                                        ; string length
0000e57: 6931 3678 382e 6774 5f75                 i16x8.gt_u  ; export name
0000e61: 00                                        ; export kind
0000e62: e801                                      ; export func index
0000e64: 0a                                        ; string length
0000e65: 6931 3678 382e 6c65 5f73                 i16x8.le_s  ; export name
0000e6f: 00                                        ; export kind
0000e70: e901                                      ; export func index
0000e72: 0a                                        ; string length
0000e73: 6931 3678 382e 6c65 5f75                 i16x8.le_u  ; export name
0000e7d: 00                                        ; export kind
0000e7e: ea01                                      ; export func index
0000e80: 0a                                        ; string length
0000e81: 6931 3678 382e 6765 5f73                 i16x8.ge_s  ; export name
0000e8b: 00                                        ; export kind
0000e8c: eb01                                      ; export func index
0000e8e: 0a                                        ; string length
0000e8f: 6931 3678 382e 6765 5f75                 i16x8.ge_u  ; export name
0000e99: 00                                        ; export kind
0000e9a: ec01                                      ; export func index
0000e9c: 08                                        ; string length
0000e9d: 6933 3278 342e 6571                      i32x4.eq  ; export name
0000ea5: 00                                        ; export kind
0000ea6: ed01                                      ; export func index
0000ea8: 08                                        ; string length
0000ea9: 6933 3278 342e 6e65                      i32x4.ne  ; export name
0000eb1: 00                                        ; export kind
0000eb2: ee01                                      ; export func index
0000eb4: 0a                                        ; string length
0000eb5: 6933 3278 342e 6c74 5f73                 i32x4.lt_s  ; export name
0000ebf: 00                                        ; export kind
0000ec0: ef01                                      ; export func index
0000ec2: 0a                                        ; string length
0000ec3: 6933 3278 342e 6c74 5f75                 i32x4.lt_u  ; export name
0000ecd: 00                                        ; export kind
0000ece: f001                                      ; export func index
0000ed0: 0a                                        ; string length
0000ed1: 6933 3278 342e 6774 5f73                 i32x4.gt_s  ; export name
0000edb: 00                                        ; export kind
0000edc: f101                                      ; export func index
0000ede: 0a                                        ; string length
0000edf: 6933 3278 342e 6774 5f75                 i32x4.gt_u  ; export name
0000ee9: 00                                        ; export kind
0000eea: f201                                      ; export func index
0000eec: 0a                                        ; string length
0000eed: 6933 3278 342e 6c65 5f73                 i32x4.le_s  ; export name
0000ef7: 00                                        ; export kind
0000ef8: f301                                      ; export func index
0000efa: 0a                                        ; string length
0000efb: 6933 3278 342e 6c65 5f75                 i32x4.le_u  ; export name
0000f05: 00                                        ; export kind
0000f06: f401                                      ; export func index
0000f08: 0a                                        ; string length
0000f09: 6933 3278 342e 6765 5f73                 i32x4.ge_s  ; export name
0000f13: 00                                        ; export kind
0000f14: f501                                      ; export func index
0000f16: 0a                                        ; string length
0000f17: 6933 3278 342e 6765 5f75                 i32x4.ge_u  ; export name
0000f21: 00                                        ; export kind
0000f22: f601                                      ; export func index
0000f24: 08                                        ; string length
0000f25: 6633 3278 342e 6571                      f32x4.eq  ; export name
0000f2d: 00                                        ; export kind
0000f2e: f701                                      ; export func index
0000f30: 08                                        ; string length
0000f31: 6633 3278 342e 6e65                      f32x4.ne  ; export name
0000f39: 00                                        ; export kind
0000f3a: f801                                      ; export func index
0000f3c: 08                                        ; string length
0000f3d: 6633 3278 342e 6c74                      f32x4.lt  ; export name
0000f45: 00                                        ; export kind
0000f46: f901                                      ; export func index
0000f48: 08                                        ; string length
0000f49: 6633 3278 342e 6774                      f32x4.gt  ; export name
0000f51: 00                                        ; export kind
0000f52: fa01                                      ; export func index
0000f54: 08                                        ; string length
0000f55: 6633 3278 342e 6c65                      f32x4.le  ; export name
0000f5d: 00                                        ; export kind
0000f5e: fb01                                      ; export func index
0000f60: 08                                        ; string length
0000f61: 6633 3278 342e 6765                      f32x4.ge  ; export name
0000f69: 00                                        ; export kind
0000f6a: fc01                                      ; export func index
0000f6c: 08                                        ; string length
0000f6d: 6636 3478 322e 6571                      f64x2.eq  ; export name
0000f75: 00                                        ; export kind
0000f76: fd01                                      ; export func index
0000f78: 08                                        ; string length
0000f79: 6636 3478 322e 6e65                      f64x2.ne  ; export name
0000f81: 00                                        ; export kind
0000f82: fe01                                      ; export func index
0000f84: 08                                        ; string length
0000f85: 6636 3478 322e 6c74                      f64x2.lt  ; export name
0000f8d: 00                                        ; export kind
0000f8e: ff01                                      ; export func index
0000f90: 08                                        ; string length
0000f91: 6636 3478 322e 6774                      f64x2.gt  ; export name
0000f99: 00                                        ; export kind
0000f9a: 8002                                      ; export func index
0000f9c: 08                                        ; string length
0000f9d: 6636 3478 322e 6c65                      f64x2.le  ; export name
0000fa5: 00                                        ; export kind
0000fa6: 8102                                      ; export func index
0000fa8: 08                                        ; string length
0000fa9: 6636 3478 322e 6765                      f64x2.ge  ; export name
0000fb1: 00                                        ; export kind
0000fb2: 8202                                      ; export func index
0000fb4: 08                                        ; string length
0000fb5: 7631 3238 2e6e 6f74                      v128.not  ; export name
0000fbd: 00                                        ; export kind
0000fbe: 8302                                      ; export func index
0000fc0: 08                                        ; string length
0000fc1: 7631 3238 2e61 6e64                      v128.and  ; export name
0000fc9: 00                                        ; export kind
0000fca: 8402                                      ; export func index
0000fcc: 07                                        ; string length
0000fcd: 7631 3238 2e6f 72                        v128.or  ; export name
0000fd4: 00                                        ; export kind
0000fd5: 8502                                      ; export func index
0000fd7: 08                                        ; string length
0000fd8: 7631 3238 2e78 6f72                      v128.xor  ; export name
0000fe0: 00                                        ; export kind
0000fe1: 8602                                      ; export func index
0000fe3: 0e                                        ; string length
0000fe4: 7631 3238 2e62 6974 7365 6c65 6374       v128.bitselect  ; export name
0000ff2: 00                                        ; export kind
0000ff3: 8702                                      ; export func index
0000ff5: 09                                        ; string length
0000ff6: 6938 7831 362e 6e65 67                   i8x16.neg  ; export name
0000fff: 00                                        ; export kind
0001000: 8802                                      ; export func index
0001002: 0e                                        ; string length
0001003: 6938 7831 362e 616e 795f 7472 7565       i8x16.any_true  ; export name
0001011: 00                                        ; export kind
0001012: 8902                                      ; export func index
0001014: 0e                                        ; string length
0001015: 6938 7831 362e 616c 6c5f 7472 7565       i8x16.all_true  ; export name
0001023: 00                                        ; export kind
0001024: 8a02                                      ; export func index
0001026: 09                                        ; string length
0001027: 6938 7831 362e 7368 6c                   i8x16.shl  ; export name
0001030: 00                                        ; export kind
0001031: 8b02                                      ; export func index
0001033: 0b                                        ; string length
0001034: 6938 7831 362e 7368 725f 73              i8x16.shr_s  ; export name
000103f: 00                                        ; export kind
0001040: 8c02                                      ; export func index
0001042: 0b                                        ; string length
0001043: 6938 7831 362e 7368 725f 75              i8x16.shr_u  ; export name
000104e: 00                                        ; export kind
000104f: 8d02                                      ; export func index
0001051: 09                                        ; string length
0001052: 6938 7831 362e 6164 64                   i8x16.add  ; export name
000105b: 00                                        ; export kind
000105c: 8e02                                      ; export func index
000105e: 14                                        ; string length
000105f: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
000106f: 7465 5f73                                te_s  ; export name
0001073: 00                                        ; export kind
0001074: 8f02                                      ; export func index
0001076: 14                                        ; string length
0001077: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
0001087: 7465 5f75                                te_u  ; export name
000108b: 00                                        ; export kind
000108c: 9002                                      ; export func index
000108e: 09                                        ; string length
000108f: 6938 7831 362e 7375 62                   i8x16.sub  ; export name
0001098: 00                                        ; export kind
0001099: 9102                                      ; export func index
000109b: 14                                        ; string length
000109c: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
00010ac: 7465 5f73                                te_s  ; export name
00010b0: 00                                        ; export kind
00010b1: 9202                                      ; export func index
00010b3: 14                                        ; string length
00010b4: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
00010c4: 7465 5f75                                te_u  ; export name
00010c8: 00                                        ; export kind
00010c9: 9302                                      ; export func index
00010cb: 09                                        ; string length
00010cc: 6938 7831 362e 6d75 6c                   i8x16.mul  ; export name
00010d5: 00                                        ; export kind
00010d6: 9402                                      ; export func index
00010d8: 09                                        ; string length
00010d9: 6931 3678 382e 6e65 67                   i16x8.neg  ; export name
00010e2: 00                                        ; export kind
00010e3: 9502                                      ; export func index
00010e5: 0e                                        ; string length
00010e6: 6931 3678 382e 616e 795f 7472 7565       i16x8.any_true  ; export name
00010f4: 00                                        ; export kind
00010f5: 9602                                      ; export func index
00010f7: 0e                                        ; string length
00010f8: 6931 3678 382e 616c 6c5f 7472 7565       i16x8.all_true  ; export name
0001106: 00                                        ; export kind
0001107: 9702                                      ; export func index
0001109: 09                                        ; string length
000110a: 6931 3678 382e 7368 6c                   i16x8.shl  ; export name
0001113: 00                                        ; export kind
0001114: 9802                                      ; export func index
0001116: 0b                                        ; string length
0001117: 6931 3678 382e 7368 725f 73              i16x8.shr_s  ; export name
0001122: 00                                        ; export kind
0001123: 9902                                      ; export func index
0001125: 0b                                        ; string length
0001126: 6931 3678 382e 7368 725f 75              i16x8.shr_u  ; export name
0001131: 00                                        ; export kind
0001132: 9a02                                      ; export func index
0001134: 09                                        ; string length
0001135: 6931 3678 382e 6164 64                   i16x8.add  ; export name
000113e: 00                                        ; export kind
000113f: 9b02                                      ; export func index
0001141: 14                                        ; string length
0001142: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
0001152: 7465 5f73                                te_s  ; export name
0001156: 00                                        ; export kind
0001157: 9c02                                      ; export func index
0001159: 14                                        ; string length
000115a: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
000116a: 7465 5f75                                te_u  ; export name
000116e: 00                                        ; export kind
000116f: 9d02                                      ; export func index
0001171: 09                                        ; string length
0001172: 6931 3678 382e 7375 62                   i16x8.sub  ; export name
000117b: 00                                        ; export kind
000117c: 9e02                                      ; export func index
000117e: 14                                        ; string length
000117f: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
000118f: 7465 5f73                                te_s  ; export name
0001193: 00                                        ; export kind
0001194: 9f02                                      ; export func index
0001196: 14                                        ; string length
0001197: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
00011a7: 7465 5f75                                te_u  ; export name
00011ab: 00                                        ; export kind
00011ac: a002                                      ; export func index
00011ae: 09                                        ; string length
00011af: 6931 3678 382e 6d75 6c                   i16x8.mul  ; export name
00011b8: 00                                        ; export kind
00011b9: a102                                      ; export func index
00011bb: 09                                        ; string length
00011bc: 6933 3278 342e 6e65 67                   i32x4.neg  ; export name
00011c5: 00                                        ; export kind
00011c6: a202                                      ; export func index
00011c8: 0e                                        ; string length
00011c9: 6933 3278 342e 616e 795f 7472 7565       i32x4.any_true  ; export name
00011d7: 00                                        ; export kind
00011d8: a302                                      ; export func index
00011da: 0e                                        ; string length
00011db: 6933 3278 342e 616c 6c5f 7472 7565       i32x4.all_true  ; export name
00011e9: 00                                        ; export kind
00011ea: a402                                      ; export func index
00011ec: 09                                        ; string length
00011ed: 6933 3278 342e 7368 6c                   i32x4.shl  ; export name
00011f6: 00                                        ; export kind
00011f7: a502                                      ; export func index
00011f9: 0b                                        ; string length
00011fa: 6933 3278 342e 7368 725f 73              i32x4.shr_s  ; export name
0001205: 00                                        ; export kind
0001206: a602                                      ; export func index
0001208: 0b                                        ; string length
0001209: 6933 3278 342e 7368 725f 75              i32x4.shr_u  ; export name
0001214: 00                                        ; export kind
0001215: a702                                      ; export func index
0001217: 09                                        ; string length
0001218: 6933 3278 342e 6164 64                   i32x4.add  ; export name
0001221: 00                                        ; export kind
0001222: a802                                      ; export func index
0001224: 09                                        ; string length
0001225: 6933 3278 342e 7375 62                   i32x4.sub  ; export name
000122e: 00                                        ; export kind
000122f: a902                                      ; export func index
0001231: 09                                        ; string length
0001232: 6933 3278 342e 6d75 6c                   i32x4.mul  ; export name
000123b: 00                                        ; export kind
000123c: aa02                                      ; export func index
000123e: 09                                        ; string length
000123f: 6936 3478 322e 6e65 67                   i64x2.neg  ; export name
0001248: 00                                        ; export kind
0001249: ab02                                      ; export func index
000124b: 0e                                        ; string length
000124c: 6936 3478 322e 616e 795f 7472 7565       i64x2.any_true  ; export name
000125a: 00                                        ; export kind
000125b: ac02                                      ; export func index
000125d: 0e                                        ; string length
000125e: 6936 3478 322e 616c 6c5f 7472 7565       i64x2.all_true  ; export name
000126c: 00                                        ; export kind
000126d: ad02                                      ; export func index
000126f: 09                                        ; string length
0001270: 6936 3478 322e 7368 6c                   i64x2.shl  ; export name
0001279: 00                                        ; export kind
000127a: ae02                                      ; export func index
000127c: 0b                                        ; string length
000127d: 6936 3478 322e 7368 725f 73              i64x2.shr_s  ; export name
0001288: 00                                        ; export kind
0001289: af02                                      ; export func index
000128b: 0b                                        ; string length
000128c: 6936 3478 322e 7368 725f 75              i64x2.shr_u  ; export name
0001297: 00                                        ; export kind
0001298: b002                                      ; export func index
000129a: 09                                        ; string length
000129b: 6936 3478 322e 6164 64                   i64x2.add  ; export name
00012a4: 00                                        ; export kind
00012a5: b102                                      ; export func index
00012a7: 09                                        ; string length
00012a8: 6936 3478 322e 7375 62                   i64x2.sub  ; export name
00012b1: 00                                        ; export kind
00012b2: b202                                      ; export func index
00012b4: 09                                        ; string length
00012b5: 6633 3278 342e 6162 73                   f32x4.abs  ; export name
00012be: 00                                        ; export kind
00012bf: b302                                      ; export func index
00012c1: 09                                        ; string length
00012c2: 6633 3278 342e 6e65 67                   f32x4.neg  ; export name
00012cb: 00                                        ; export kind
00012cc: b402                                      ; export func index
00012ce: 0a                                        ; string length
00012cf: 6633 3278 342e 7371 7274                 f32x4.sqrt  ; export name
00012d9: 00                                        ; export kind
00012da: b502                                      ; export func index
00012dc: 09                                        ; string length
00012dd: 6633 3278 342e 6164 64                   f32x4.add  ; export name
00012e6: 00                                        ; export kind
00012e7: b602                                      ; export func index
00012e9: 09                                        ; string length
00012ea: 6633 3278 342e 7375 62                   f32x4.sub  ; export name
00012f3: 00                                        ; export kind
00012f4: b702                                      ; export func index
00012f6: 09                                        ; string length
00012f7: 6633 3278 342e 6d75 6c                   f32x4.mul  ; export name
0001300: 00                                        ; export kind
0001301: b802                                      ; export func index
0001303: 09                                        ; string length
0001304: 6633 3278 342e 6469 76                   f32x4.div  ; export name
000130d: 00                                        ; export kind
000130e: b902                                      ; export func index
0001310: 09                                        ; string length
0001311: 6633 3278 342e 6d69 6e                   f32x4.min  ; export name
000131a: 00                                        ; export kind
000131b: ba02                                      ; export func index
000131d: 09                                        ; string length
000131e: 6633 3278 342e 6d61 78                   f32x4.max  ; export name
0001327: 00                                        ; export kind
0001328: bb02                                      ; export func index
000132a: 09                                        ; string length
000132b: 6636 3478 322e 6162 73                   f64x2.abs  ; export name
0001334: 00                                        ; export kind
0001335: bc02                                      ; export func index
0001337: 09                                        ; string length
0001338: 6636 3478 322e 6e65 67                   f64x2.neg  ; export name
0001341: 00                                        ; export kind
0001342: bd02                                      ; export func index
0001344: 0a                                        ; string length
0001345: 6636 3478 322e 7371 7274                 f64x2.sqrt  ; export name
000134f: 00                                        ; export kind
0001350: be02                                      ; export func index
0001352: 09                                        ; string length
0001353: 6636 3478 322e 6164 64                   f64x2.add  ; export name
000135c: 00                                        ; export kind
000135d: bf02                                      ; export func index
000135f: 09                                        ; string length
0001360: 6636 3478 322e 7375 62                   f64x2.sub  ; export name
0001369: 00                                        ; export kind
000136a: c002                                      ; export func index
000136c: 09                                        ; string length
000136d: 6636 3478 322e 6d75 6c                   f64x2.mul  ; export name
0001376: 00                                        ; export kind
0001377: c102                                      ; export func index
0001379: 09                                        ; string length
000137a: 6636 3478 322e 6469 76                   f64x2.div  ; export name
0001383: 00                                        ; export kind
0001384: c202                                      ; export func index
0001386: 09                                        ; string length
0001387: 6636 3478 322e 6d69 6e                   f64x2.min  ; export name
0001390: 00                                        ; export kind
0001391: c302                                      ; export func index
0001393: 09                                        ; string length
0001394: 6636 3478 322e 6d61 78                   f64x2.max  ; export name
000139d: 00                                        ; export kind
000139e: c402                                      ; export func index
00013a0: 17                                        ; string length
00013a1: 6933 3278 342e 7472 756e 635f 7361 745f  i32x4.trunc_sat_
00013b1: 6633 3278 345f 73                        f32x4_s  ; export name
00013b8: 00                                        ; export kind
00013b9: c502                                      ; export func index
00013bb: 17                                        ; string length
00013bc: 6933 3278 342e 7472 756e 635f 7361 745f  i32x4.trunc_sat_
00013cc: 6633 3278 345f 75                        f32x4_u  ; export name
00013d3: 00                                        ; export kind
00013d4: c602                                      ; export func index
00013d6: 17                                        ; string length
00013d7: 6936 3478 322e 7472 756e 635f 7361 745f  i64x2.trunc_sat_
00013e7: 6636 3478 325f 73                        f64x2_s  ; export name
00013ee: 00                                        ; export kind
00013ef: c702                                      ; export func index
00013f1: 17                                        ; string length
00013f2: 6936 3478 322e 7472 756e 635f 7361 745f  i64x2.trunc_sat_
0001402: 6636 3478 325f 75                        f64x2_u  ; export name
0001409: 00                                        ; export kind
000140a: c802                                      ; export func index
000140c: 15                                        ; string length
000140d: 6633 3278 342e 636f 6e76 6572 745f 6933  f32x4.convert_i3
000141d: 3278 345f 73                             2x4_s  ; export name
0001422: 00                                        ; export kind
0001423: c902                                      ; export func index
0001425: 15                                        ; string length
0001426: 6633 3278 342e 636f 6e76 6572 745f 6933  f32x4.convert_i3
0001436: 3278 345f 75                             2x4_u  ; export name
000143b: 00                                        ; export kind
000143c: ca02                                      ; export func index
000143e: 15                                        ; string length
000143f: 6636 3478 322e 636f 6e76 6572 745f 6936  f64x2.convert_i6
000144f: 3478 325f 73                             4x2_s  ; export name
0001454: 00                                        ; export kind
0001455: cb02                                      ; export func index
0001457: 15                                        ; string length
0001458: 6636 3478 322e 636f 6e76 6572 745f 6936  f64x2.convert_i6
0001468: 3478 325f 75                             4x2_u  ; export name
000146d: 00                                        ; export kind
000146e: cc02                                      ; export func index
0001470: 0d                                        ; string length
0001471: 7638 7831 362e 7377 697a 7a6c 65         v8x16.swizzle  ; export name
000147e: 00                                        ; export kind
000147f: cd02                                      ; export func index
0001481: 0d                                        ; string length
0001482: 7638 7831 362e 7368 7566 666c 65         v8x16.shuffle  ; export name
000148f: 00                                        ; export kind
0001490: ce02                                      ; export func index
0001492: 10                                        ; string length
0001493: 6938 7831 362e 6c6f 6164 5f73 706c 6174  i8x16.load_splat  ; export name
00014a3: 00                                        ; export kind
00014a4: cf02                                      ; export func index
00014a6: 10                                        ; string length
00014a7: 6931 3678 382e 6c6f 6164 5f73 706c 6174  i16x8.load_splat  ; export name
00014b7: 00                                        ; export kind
00014b8: d002                                      ; export func index
00014ba: 10                                        ; string length
00014bb: 6933 3278 342e 6c6f 6164 5f73 706c 6174  i32x4.load_splat  ; export name
00014cb: 00                                        ; export kind
00014cc: d102                                      ; export func index
00014ce: 10                                        ; string length
00014cf: 6936 3478 322e 6c6f 6164 5f73 706c 6174  i64x2.load_splat  ; export name
00014df: 00                                        ; export kind
00014e0: d202                                      ; export func index
00014e2: 0d                                        ; string length
00014e3: 6174 6f6d 6963 2e6e 6f74 6966 79         atomic.notify  ; export name
00014f0: 00                                        ; export kind
00014f1: d302                                      ; export func index
00014f3: 0f                                        ; string length
00014f4: 6933 322e 6174 6f6d 6963 2e77 6169 74    i32.atomic.wait  ; export name
0001503: 00                                        ; export kind
0001504: d402                                      ; export func index
0001506: 0f                                        ; string length
0001507: 6936 342e 6174 6f6d 6963 2e77 6169 74    i64.atomic.wait  ; export name
0001516: 00                                        ; export kind
0001517: d502                                      ; export func index
0001519: 0f                                        ; string length
000151a: 6933 322e 6174 6f6d 6963 2e6c 6f61 64    i32.atomic.load  ; export name
0001529: 00                                        ; export kind
000152a: d602                                      ; export func index
000152c: 0f                                        ; string length
000152d: 6936 342e 6174 6f6d 6963 2e6c 6f61 64    i64.atomic.load  ; export name
000153c: 00                                        ; export kind
000153d: d702                                      ; export func index
000153f: 12                                        ; string length
0001540: 6933 322e 6174 6f6d 6963 2e6c 6f61 6438  i32.atomic.load8
0001550: 5f75                                     _u  ; export name
0001552: 00                                        ; export kind
0001553: d802                                      ; export func index
0001555: 13                                        ; string length
0001556: 6933 322e 6174 6f6d 6963 2e6c 6f61 6431  i32.atomic.load1
0001566: 365f 75                                  6_u  ; export name
0001569: 00                                        ; export kind
000156a: d902                                      ; export func index
000156c: 12                                        ; string length
000156d: 6936 342e 6174 6f6d 6963 2e6c 6f61 6438  i64.atomic.load8
000157d: 5f75                                     _u  ; export name
000157f: 00                                        ; export kind
0001580: da02                                      ; export func index
0001582: 13                                        ; string length
0001583: 6936 342e 6174 6f6d 6963 2e6c 6f61 6431  i64.atomic.load1
0001593: 365f 75                                  6_u  ; export name
0001596: 00                                        ; export kind
0001597: db02                                      ; export func index
0001599: 13                                        ; string length
000159a: 6936 342e 6174 6f6d 6963 2e6c 6f61 6433  i64.atomic.load3
00015aa: 325f 75                                  2_u  ; export name
00015ad: 00                                        ; export kind
00015ae: dc02                                      ; export func index
00015b0: 10                                        ; string length
00015b1: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store  ; export name
00015c1: 00                                        ; export kind
00015c2: dd02                                      ; export func index
00015c4: 10                                        ; string length
00015c5: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store  ; export name
00015d5: 00                                        ; export kind
00015d6: de02                                      ; export func index
00015d8: 11                                        ; string length
00015d9: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
00015e9: 38                                       8  ; export name
00015ea: 00                                        ; export kind
00015eb: df02                                      ; export func index
00015ed: 12                                        ; string length
00015ee: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
00015fe: 3136                                     16  ; export name
0001600: 00                                        ; export kind
0001601: e002                                      ; export func index
0001603: 11                                        ; string length
0001604: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
0001614: 38                                       8  ; export name
0001615: 00                                        ; export kind
0001616: e102                                      ; export func index
0001618: 12                                        ; string length
0001619: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
0001629: 3136                                     16  ; export name
000162b: 00                                        ; export kind
000162c: e202                                      ; export func index
000162e: 12                                        ; string length
000162f: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
000163f: 3332                                     32  ; export name
0001641: 00                                        ; export kind
0001642: e302                                      ; export func index
0001644: 12                                        ; string length
0001645: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
0001655: 6464                                     dd  ; export name
0001657: 00                                        ; export kind
0001658: e402                                      ; export func index
000165a: 12                                        ; string length
000165b: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
000166b: 6464                                     dd  ; export name
000166d: 00                                        ; export kind
000166e: e502                                      ; export func index
0001670: 15                                        ; string length
0001671: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001681: 6164 645f 75                             add_u  ; export name
0001686: 00                                        ; export kind
0001687: e602                                      ; export func index
0001689: 16                                        ; string length
000168a: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
000169a: 2e61 6464 5f75                           .add_u  ; export name
00016a0: 00                                        ; export kind
00016a1: e702                                      ; export func index
00016a3: 15                                        ; string length
00016a4: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00016b4: 6164 645f 75                             add_u  ; export name
00016b9: 00                                        ; export kind
00016ba: e802                                      ; export func index
00016bc: 16                                        ; string length
00016bd: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00016cd: 2e61 6464 5f75                           .add_u  ; export name
00016d3: 00                                        ; export kind
00016d4: e902                                      ; export func index
00016d6: 16                                        ; string length
00016d7: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00016e7: 2e61 6464 5f75                           .add_u  ; export name
00016ed: 00                                        ; export kind
00016ee: ea02                                      ; export func index
00016f0: 12                                        ; string length
00016f1: 6933 322e 6174 6f6d 6963 2e72 6d77 2e73  i32.atomic.rmw.s
0001701: 7562                                     ub  ; export name
0001703: 00                                        ; export kind
0001704: eb02                                      ; export func index
0001706: 12                                        ; string length
0001707: 6936 342e 6174 6f6d 6963 2e72 6d77 2e73  i64.atomic.rmw.s
0001717: 7562                                     ub  ; export name
0001719: 00                                        ; export kind
000171a: ec02                                      ; export func index
000171c: 15                                        ; string length
000171d: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
000172d: 7375 625f 75                             sub_u  ; export name
0001732: 00                                        ; export kind
0001733: ed02                                      ; export func index
0001735: 16                                        ; string length
0001736: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001746: 2e73 7562 5f75                           .sub_u  ; export name
000174c: 00                                        ; export kind
000174d: ee02                                      ; export func index
000174f: 15                                        ; string length
0001750: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
0001760: 7375 625f 75                             sub_u  ; export name
0001765: 00                                        ; export kind
0001766: ef02                                      ; export func index
0001768: 16                                        ; string length
0001769: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001779: 2e73 7562 5f75                           .sub_u  ; export name
000177f: 00                                        ; export kind
0001780: f002                                      ; export func index
0001782: 16                                        ; string length
0001783: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001793: 2e73 7562 5f75                           .sub_u  ; export name
0001799: 00                                        ; export kind
000179a: f102                                      ; export func index
000179c: 12                                        ; string length
000179d: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
00017ad: 6e64                                     nd  ; export name
00017af: 00                                        ; export kind
00017b0: f202                                      ; export func index
00017b2: 12                                        ; string length
00017b3: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
00017c3: 6e64                                     nd  ; export name
00017c5: 00                                        ; export kind
00017c6: f302                                      ; export func index
00017c8: 15                                        ; string length
00017c9: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
00017d9: 616e 645f 75                             and_u  ; export name
00017de: 00                                        ; export kind
00017df: f402                                      ; export func index
00017e1: 16                                        ; string length
00017e2: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00017f2: 2e61 6e64 5f75                           .and_u  ; export name
00017f8: 00                                        ; export kind
00017f9: f502                                      ; export func index
00017fb: 15                                        ; string length
00017fc: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
000180c: 616e 645f 75                             and_u  ; export name
0001811: 00                                        ; export kind
0001812: f602                                      ; export func index
0001814: 16                                        ; string length
0001815: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001825: 2e61 6e64 5f75                           .and_u  ; export name
000182b: 00                                        ; export kind
000182c: f702                                      ; export func index
000182e: 16                                        ; string length
000182f: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
000183f: 2e61 6e64 5f75                           .and_u  ; export name
0001845: 00                                        ; export kind
0001846: f802                                      ; export func index
0001848: 11                                        ; string length
0001849: 6933 322e 6174 6f6d 6963 2e72 6d77 2e6f  i32.atomic.rmw.o
0001859: 72                                       r  ; export name
000185a: 00                                        ; export kind
000185b: f902                                      ; export func index
000185d: 11                                        ; string length
000185e: 6936 342e 6174 6f6d 6963 2e72 6d77 2e6f  i64.atomic.rmw.o
000186e: 72                                       r  ; export name
000186f: 00                                        ; export kind
0001870: fa02                                      ; export func index
0001872: 14                                        ; string length
0001873: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001883: 6f72 5f75                                or_u  ; export name
0001887: 00                                        ; export kind
0001888: fb02                                      ; export func index
000188a: 15                                        ; string length
000188b: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
000189b: 2e6f 725f 75                             .or_u  ; export name
00018a0: 00                                        ; export kind
00018a1: fc02                                      ; export func index
00018a3: 14                                        ; string length
00018a4: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00018b4: 6f72 5f75                                or_u  ; export name
00018b8: 00                                        ; export kind
00018b9: fd02                                      ; export func index
00018bb: 15                                        ; string length
00018bc: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00018cc: 2e6f 725f 75                             .or_u  ; export name
00018d1: 00                                        ; export kind
00018d2: fe02                                      ; export func index
00018d4: 15                                        ; string length
00018d5: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00018e5: 2e6f 725f 75                             .or_u  ; export name
00018ea: 00                                        ; export kind
00018eb: ff02                                      ; export func index
00018ed: 12                                        ; string length
00018ee: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
00018fe: 6f72                                     or  ; export name
0001900: 00                                        ; export kind
0001901: 8003                                      ; export func index
0001903: 12                                        ; string length
0001904: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
0001914: 6f72                                     or  ; export name
0001916: 00                                        ; export kind
0001917: 8103                                      ; export func index
0001919: 15                                        ; string length
000191a: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
000192a: 786f 725f 75                             xor_u  ; export name
000192f: 00                                        ; export kind
0001930: 8203                                      ; export func index
0001932: 16                                        ; string length
0001933: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001943: 2e78 6f72 5f75                           .xor_u  ; export name
0001949: 00                                        ; export kind
000194a: 8303                                      ; export func index
000194c: 15                                        ; string length
000194d: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
000195d: 786f 725f 75                             xor_u  ; export name
0001962: 00                                        ; export kind
0001963: 8403                                      ; export func index
0001965: 16                                        ; string length
0001966: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001976: 2e78 6f72 5f75                           .xor_u  ; export name
000197c: 00                                        ; export kind
000197d: 8503                                      ; export func index
000197f: 16                                        ; string length
0001980: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001990: 2e78 6f72 5f75                           .xor_u  ; export name
0001996: 00                                        ; export kind
0001997: 8603                                      ; export func index
0001999: 13                                        ; string length
000199a: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
00019aa: 6368 67                                  chg  ; export name
00019ad: 00                                        ; export kind
00019ae: 8703                                      ; export func index
00019b0: 13                                        ; string length
00019b1: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
00019c1: 6368 67                                  chg  ; export name
00019c4: 00                                        ; export kind
00019c5: 8803                                      ; export func index
00019c7: 16                                        ; string length
00019c8: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
00019d8: 7863 6867 5f75                           xchg_u  ; export name
00019de: 00                                        ; export kind
00019df: 8903                                      ; export func index
00019e1: 17                                        ; string length
00019e2: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00019f2: 2e78 6368 675f 75                        .xchg_u  ; export name
00019f9: 00                                        ; export kind
00019fa: 8a03                                      ; export func index
00019fc: 16                                        ; string length
00019fd: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
0001a0d: 7863 6867 5f75                           xchg_u  ; export name
0001a13: 00                                        ; export kind
0001a14: 8b03                                      ; export func index
0001a16: 17                                        ; string length
0001a17: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001a27: 2e78 6368 675f 75                        .xchg_u  ; export name
0001a2e: 00                                        ; export kind
0001a2f: 8c03                                      ; export func index
0001a31: 17                                        ; string length
0001a32: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001a42: 2e78 6368 675f 75                        .xchg_u  ; export name
0001a49: 00                                        ; export kind
0001a4a: 8d03                                      ; export func index
0001a4c: 16                                        ; string length
0001a4d: 6933 322e 6174 6f6d 6963 2e72 6d77 2e63  i32.atomic.rmw.c
0001a5d: 6d70 7863 6867                           mpxchg  ; export name
0001a63: 00                                        ; export kind
0001a64: 8e03                                      ; export func index
0001a66: 16                                        ; string length
0001a67: 6936 342e 6174 6f6d 6963 2e72 6d77 2e63  i64.atomic.rmw.c
0001a77: 6d70 7863 6867                           mpxchg  ; export name
0001a7d: 00                                        ; export kind
0001a7e: 8f03                                      ; export func index
0001a80: 19                                        ; string length
0001a81: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001a91: 636d 7078 6368 675f 75                   cmpxchg_u  ; export name
0001a9a: 00                                        ; export kind
0001a9b: 9003                                      ; export func index
0001a9d: 1a                                        ; string length
0001a9e: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001aae: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001ab8: 00                                        ; export kind
0001ab9: 9103                                      ; export func index
0001abb: 19                                        ; string length
0001abc: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
0001acc: 636d 7078 6368 675f 75                   cmpxchg_u  ; export name
0001ad5: 00                                        ; export kind
0001ad6: 9203                                      ; export func index
0001ad8: 1a                                        ; string length
0001ad9: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001ae9: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001af3: 00                                        ; export kind
0001af4: 9303                                      ; export func index
0001af6: 1a                                        ; string length
0001af7: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001b07: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001b11: 00                                        ; export kind
0001b12: 9403                                      ; export func index
; move data: [1d2, 1b14) -> [1d3, 1b15)
00001d1: c232                                      ; FIXUP section size
; section "Elem" (9)
0001b15: 09                                        ; section code
0001b16: 00                                        ; section size (guess)
0001b17: 02                                        ; num elem segments
; elem segment header 0
0001b18: 00                                        ; segment flags
0001b19: 41                                        ; i32.const
0001b1a: 00                                        ; i32 literal
0001b1b: 0b                                        ; end
0001b1c: 02                                        ; num elems
0001b1d: 01                                        ; elem expr function index
0001b1e: 01                                        ; elem expr function index
; elem segment header 1
0001b1f: 01                                        ; segment flags
0001b20: 70                                        ; funcref
0001b21: 00                                        ; num elems
0001b16: 0b                                        ; FIXUP section size
; section "DataCount" (12)
0001b22: 0c                                        ; section code
0001b23: 00                                        ; section size (guess)
0001b24: 01                                        ; data count
0001b23: 01                                        ; FIXUP section size
; section "Code" (10)
0001b25: 0a                                        ; section code
0001b26: 00                                        ; section size (guess)
0001b27: 9403                                      ; num functions
; function body 0
0001b29: 00                                        ; func body size (guess)
0001b2a: 00                                        ; local decl count
0001b2b: 0b                                        ; end
0001b29: 02                                        ; FIXUP func body size
; function body 1
0001b2c: 00                                        ; func body size (guess)
0001b2d: 00                                        ; local decl count
0001b2e: 00                                        ; unreachable
0001b2f: 0b                                        ; end
0001b2c: 03                                        ; FIXUP func body size
; function body 2
0001b30: 00                                        ; func body size (guess)
0001b31: 00                                        ; local decl count
0001b32: 0c                                        ; br
0001b33: 00                                        ; break depth
0001b34: 0b                                        ; end
0001b30: 04                                        ; FIXUP func body size
; function body 3
0001b35: 00                                        ; func body size (guess)
0001b36: 00                                        ; local decl count
0001b37: 41                                        ; i32.const
0001b38: 01                                        ; i32 literal
0001b39: 0e                                        ; br_table
0001b3a: 00                                        ; num targets
0001b3b: 00                                        ; break depth for default
0001b3c: 0b                                        ; end
0001b35: 07                                        ; FIXUP func body size
; function body 4
0001b3d: 00                                        ; func body size (guess)
0001b3e: 00                                        ; local decl count
0001b3f: 0f                                        ; return
0001b40: 0b                                        ; end
0001b3d: 03                                        ; FIXUP func body size
; function body 5
0001b41: 00                                        ; func body size (guess)
0001b42: 00                                        ; local decl count
0001b43: 10                                        ; call
0001b44: 01                                        ; function index
0001b45: 0b                                        ; end
0001b41: 04                                        ; FIXUP func body size
; function body 6
0001b46: 00                                        ; func body size (guess)
0001b47: 00                                        ; local decl count
0001b48: 41                                        ; i32.const
0001b49: 01                                        ; i32 literal
0001b4a: 11                                        ; call_indirect
0001b4b: 00                                        ; signature index
0001b4c: 00                                        ; table index
0001b4d: 0b                                        ; end
0001b46: 07                                        ; FIXUP func body size
; function body 7
0001b4e: 00                                        ; func body size (guess)
0001b4f: 00                                        ; local decl count
0001b50: 12                                        ; return_call
0001b51: 01                                        ; function index
0001b52: 0b                                        ; end
0001b4e: 04                                        ; FIXUP func body size
; function body 8
0001b53: 00                                        ; func body size (guess)
0001b54: 00                                        ; local decl count
0001b55: 41                                        ; i32.const
0001b56: 01                                        ; i32 literal
0001b57: 13                                        ; return_call_indirect
0001b58: 00                                        ; signature index
0001b59: 00                                        ; table index
0001b5a: 0b                                        ; end
0001b53: 07                                        ; FIXUP func body size
; function body 9
0001b5b: 00                                        ; func body size (guess)
0001b5c: 00                                        ; local decl count
0001b5d: 41                                        ; i32.const
0001b5e: 01                                        ; i32 literal
0001b5f: 1a                                        ; drop
0001b60: 0b                                        ; end
0001b5b: 05                                        ; FIXUP func body size
; function body 10
0001b61: 00                                        ; func body size (guess)
0001b62: 00                                        ; local decl count
0001b63: 41                                        ; i32.const
0001b64: 01                                        ; i32 literal
0001b65: 41                                        ; i32.const
0001b66: 02                                        ; i32 literal
0001b67: 41                                        ; i32.const
0001b68: 03                                        ; i32 literal
0001b69: 1b                                        ; select
0001b6a: 1a                                        ; drop
0001b6b: 0b                                        ; end
0001b61: 0a                                        ; FIXUP func body size
; function body 11
0001b6c: 00                                        ; func body size (guess)
0001b6d: 01                                        ; local decl count
0001b6e: 01                                        ; local type count
0001b6f: 7f                                        ; i32
0001b70: 20                                        ; local.get
0001b71: 00                                        ; local index
0001b72: 1a                                        ; drop
0001b73: 0b                                        ; end
0001b6c: 07                                        ; FIXUP func body size
; function body 12
0001b74: 00                                        ; func body size (guess)
0001b75: 01                                        ; local decl count
0001b76: 01                                        ; local type count
0001b77: 7f                                        ; i32
0001b78: 41                                        ; i32.const
0001b79: 01                                        ; i32 literal
0001b7a: 21                                        ; local.set
0001b7b: 00                                        ; local index
0001b7c: 0b                                        ; end
0001b74: 08                                        ; FIXUP func body size
; function body 13
0001b7d: 00                                        ; func body size (guess)
0001b7e: 01                                        ; local decl count
0001b7f: 01                                        ; local type count
0001b80: 7f                                        ; i32
0001b81: 41                                        ; i32.const
0001b82: 01                                        ; i32 literal
0001b83: 22                                        ; local.tee
0001b84: 00                                        ; local index
0001b85: 1a                                        ; drop
0001b86: 0b                                        ; end
0001b7d: 09                                        ; FIXUP func body size
; function body 14
0001b87: 00                                        ; func body size (guess)
0001b88: 00                                        ; local decl count
0001b89: 23                                        ; global.get
0001b8a: 00                                        ; global index
0001b8b: 1a                                        ; drop
0001b8c: 0b                                        ; end
0001b87: 05                                        ; FIXUP func body size
; function body 15
0001b8d: 00                                        ; func body size (guess)
0001b8e: 00                                        ; local decl count
0001b8f: 41                                        ; i32.const
0001b90: 01                                        ; i32 literal
0001b91: 24                                        ; global.set
0001b92: 00                                        ; global index
0001b93: 0b                                        ; end
0001b8d: 06                                        ; FIXUP func body size
; function body 16
0001b94: 00                                        ; func body size (guess)
0001b95: 00                                        ; local decl count
0001b96: 41                                        ; i32.const
0001b97: 01                                        ; i32 literal
0001b98: 28                                        ; i32.load
0001b99: 02                                        ; alignment
0001b9a: 02                                        ; load offset
0001b9b: 1a                                        ; drop
0001b9c: 0b                                        ; end
0001b94: 08                                        ; FIXUP func body size
; function body 17
0001b9d: 00                                        ; func body size (guess)
0001b9e: 00                                        ; local decl count
0001b9f: 41                                        ; i32.const
0001ba0: 01                                        ; i32 literal
0001ba1: 29                                        ; i64.load
0001ba2: 03                                        ; alignment
0001ba3: 02                                        ; load offset
0001ba4: 1a                                        ; drop
0001ba5: 0b                                        ; end
0001b9d: 08                                        ; FIXUP func body size
; function body 18
0001ba6: 00                                        ; func body size (guess)
0001ba7: 00                                        ; local decl count
0001ba8: 41                                        ; i32.const
0001ba9: 01                                        ; i32 literal
0001baa: 2a                                        ; f32.load
0001bab: 02                                        ; alignment
0001bac: 02                                        ; load offset
0001bad: 1a                                        ; drop
0001bae: 0b                                        ; end
0001ba6: 08                                        ; FIXUP func body size
; function body 19
0001baf: 00                                        ; func body size (guess)
0001bb0: 00                                        ; local decl count
0001bb1: 41                                        ; i32.const
0001bb2: 01                                        ; i32 literal
0001bb3: 2b                                        ; f64.load
0001bb4: 03                                        ; alignment
0001bb5: 02                                        ; load offset
0001bb6: 1a                                        ; drop
0001bb7: 0b                                        ; end
0001baf: 08                                        ; FIXUP func body size
; function body 20
0001bb8: 00                                        ; func body size (guess)
0001bb9: 00                                        ; local decl count
0001bba: 41                                        ; i32.const
0001bbb: 01                                        ; i32 literal
0001bbc: 2c                                        ; i32.load8_s
0001bbd: 00                                        ; alignment
0001bbe: 02                                        ; load offset
0001bbf: 1a                                        ; drop
0001bc0: 0b                                        ; end
0001bb8: 08                                        ; FIXUP func body size
; function body 21
0001bc1: 00                                        ; func body size (guess)
0001bc2: 00                                        ; local decl count
0001bc3: 41                                        ; i32.const
0001bc4: 01                                        ; i32 literal
0001bc5: 2d                                        ; i32.load8_u
0001bc6: 00                                        ; alignment
0001bc7: 02                                        ; load offset
0001bc8: 1a                                        ; drop
0001bc9: 0b                                        ; end
0001bc1: 08                                        ; FIXUP func body size
; function body 22
0001bca: 00                                        ; func body size (guess)
0001bcb: 00                                        ; local decl count
0001bcc: 41                                        ; i32.const
0001bcd: 01                                        ; i32 literal
0001bce: 2e                                        ; i32.load16_s
0001bcf: 01                                        ; alignment
0001bd0: 02                                        ; load offset
0001bd1: 1a                                        ; drop
0001bd2: 0b                                        ; end
0001bca: 08                                        ; FIXUP func body size
; function body 23
0001bd3: 00                                        ; func body size (guess)
0001bd4: 00                                        ; local decl count
0001bd5: 41                                        ; i32.const
0001bd6: 01                                        ; i32 literal
0001bd7: 2f                                        ; i32.load16_u
0001bd8: 01                                        ; alignment
0001bd9: 02                                        ; load offset
0001bda: 1a                                        ; drop
0001bdb: 0b                                        ; end
0001bd3: 08                                        ; FIXUP func body size
; function body 24
0001bdc: 00                                        ; func body size (guess)
0001bdd: 00                                        ; local decl count
0001bde: 41                                        ; i32.const
0001bdf: 01                                        ; i32 literal
0001be0: 30                                        ; i64.load8_s
0001be1: 00                                        ; alignment
0001be2: 02                                        ; load offset
0001be3: 1a                                        ; drop
0001be4: 0b                                        ; end
0001bdc: 08                                        ; FIXUP func body size
; function body 25
0001be5: 00                                        ; func body size (guess)
0001be6: 00                                        ; local decl count
0001be7: 41                                        ; i32.const
0001be8: 01                                        ; i32 literal
0001be9: 31                                        ; i64.load8_u
0001bea: 00                                        ; alignment
0001beb: 02                                        ; load offset
0001bec: 1a                                        ; drop
0001bed: 0b                                        ; end
0001be5: 08                                        ; FIXUP func body size
; function body 26
0001bee: 00                                        ; func body size (guess)
0001bef: 00                                        ; local decl count
0001bf0: 41                                        ; i32.const
0001bf1: 01                                        ; i32 literal
0001bf2: 32                                        ; i64.load16_s
0001bf3: 01                                        ; alignment
0001bf4: 02                                        ; load offset
0001bf5: 1a                                        ; drop
0001bf6: 0b                                        ; end
0001bee: 08                                        ; FIXUP func body size
; function body 27
0001bf7: 00                                        ; func body size (guess)
0001bf8: 00                                        ; local decl count
0001bf9: 41                                        ; i32.const
0001bfa: 01                                        ; i32 literal
0001bfb: 33                                        ; i64.load16_u
0001bfc: 01                                        ; alignment
0001bfd: 02                                        ; load offset
0001bfe: 1a                                        ; drop
0001bff: 0b                                        ; end
0001bf7: 08                                        ; FIXUP func body size
; function body 28
0001c00: 00                                        ; func body size (guess)
0001c01: 00                                        ; local decl count
0001c02: 41                                        ; i32.const
0001c03: 01                                        ; i32 literal
0001c04: 34                                        ; i64.load32_s
0001c05: 02                                        ; alignment
0001c06: 02                                        ; load offset
0001c07: 1a                                        ; drop
0001c08: 0b                                        ; end
0001c00: 08                                        ; FIXUP func body size
; function body 29
0001c09: 00                                        ; func body size (guess)
0001c0a: 00                                        ; local decl count
0001c0b: 41                                        ; i32.const
0001c0c: 01                                        ; i32 literal
0001c0d: 35                                        ; i64.load32_u
0001c0e: 02                                        ; alignment
0001c0f: 02                                        ; load offset
0001c10: 1a                                        ; drop
0001c11: 0b                                        ; end
0001c09: 08                                        ; FIXUP func body size
; function body 30
0001c12: 00                                        ; func body size (guess)
0001c13: 00                                        ; local decl count
0001c14: 41                                        ; i32.const
0001c15: 01                                        ; i32 literal
0001c16: 41                                        ; i32.const
0001c17: 02                                        ; i32 literal
0001c18: 36                                        ; i32.store
0001c19: 02                                        ; alignment
0001c1a: 02                                        ; store offset
0001c1b: 0b                                        ; end
0001c12: 09                                        ; FIXUP func body size
; function body 31
0001c1c: 00                                        ; func body size (guess)
0001c1d: 00                                        ; local decl count
0001c1e: 41                                        ; i32.const
0001c1f: 01                                        ; i32 literal
0001c20: 42                                        ; i64.const
0001c21: 02                                        ; i64 literal
0001c22: 37                                        ; i64.store
0001c23: 03                                        ; alignment
0001c24: 02                                        ; store offset
0001c25: 0b                                        ; end
0001c1c: 09                                        ; FIXUP func body size
; function body 32
0001c26: 00                                        ; func body size (guess)
0001c27: 00                                        ; local decl count
0001c28: 41                                        ; i32.const
0001c29: 01                                        ; i32 literal
0001c2a: 43                                        ; f32.const
0001c2b: 0000 0040                                 ; f32 literal
0001c2f: 38                                        ; f32.store
0001c30: 02                                        ; alignment
0001c31: 02                                        ; store offset
0001c32: 0b                                        ; end
0001c26: 0c                                        ; FIXUP func body size
; function body 33
0001c33: 00                                        ; func body size (guess)
0001c34: 00                                        ; local decl count
0001c35: 41                                        ; i32.const
0001c36: 01                                        ; i32 literal
0001c37: 44                                        ; f64.const
0001c38: 0000 0000 0000 0040                       ; f64 literal
0001c40: 39                                        ; f64.store
0001c41: 03                                        ; alignment
0001c42: 02                                        ; store offset
0001c43: 0b                                        ; end
0001c33: 10                                        ; FIXUP func body size
; function body 34
0001c44: 00                                        ; func body size (guess)
0001c45: 00                                        ; local decl count
0001c46: 41                                        ; i32.const
0001c47: 01                                        ; i32 literal
0001c48: 41                                        ; i32.const
0001c49: 02                                        ; i32 literal
0001c4a: 3a                                        ; i32.store8
0001c4b: 00                                        ; alignment
0001c4c: 02                                        ; store offset
0001c4d: 0b                                        ; end
0001c44: 09                                        ; FIXUP func body size
; function body 35
0001c4e: 00                                        ; func body size (guess)
0001c4f: 00                                        ; local decl count
0001c50: 41                                        ; i32.const
0001c51: 01                                        ; i32 literal
0001c52: 41                                        ; i32.const
0001c53: 02                                        ; i32 literal
0001c54: 3b                                        ; i32.store16
0001c55: 01                                        ; alignment
0001c56: 02                                        ; store offset
0001c57: 0b                                        ; end
0001c4e: 09                                        ; FIXUP func body size
; function body 36
0001c58: 00                                        ; func body size (guess)
0001c59: 00                                        ; local decl count
0001c5a: 41                                        ; i32.const
0001c5b: 01                                        ; i32 literal
0001c5c: 42                                        ; i64.const
0001c5d: 02                                        ; i64 literal
0001c5e: 3c                                        ; i64.store8
0001c5f: 00                                        ; alignment
0001c60: 02                                        ; store offset
0001c61: 0b                                        ; end
0001c58: 09                                        ; FIXUP func body size
; function body 37
0001c62: 00                                        ; func body size (guess)
0001c63: 00                                        ; local decl count
0001c64: 41                                        ; i32.const
0001c65: 01                                        ; i32 literal
0001c66: 42                                        ; i64.const
0001c67: 02                                        ; i64 literal
0001c68: 3d                                        ; i64.store16
0001c69: 01                                        ; alignment
0001c6a: 02                                        ; store offset
0001c6b: 0b                                        ; end
0001c62: 09                                        ; FIXUP func body size
; function body 38
0001c6c: 00                                        ; func body size (guess)
0001c6d: 00                                        ; local decl count
0001c6e: 41                                        ; i32.const
0001c6f: 01                                        ; i32 literal
0001c70: 42                                        ; i64.const
0001c71: 02                                        ; i64 literal
0001c72: 3e                                        ; i64.store32
0001c73: 02                                        ; alignment
0001c74: 02                                        ; store offset
0001c75: 0b                                        ; end
0001c6c: 09                                        ; FIXUP func body size
; function body 39
0001c76: 00                                        ; func body size (guess)
0001c77: 00                                        ; local decl count
0001c78: 3f                                        ; memory.size
0001c79: 00                                        ; memory.size reserved
0001c7a: 1a                                        ; drop
0001c7b: 0b                                        ; end
0001c76: 05                                        ; FIXUP func body size
; function body 40
0001c7c: 00                                        ; func body size (guess)
0001c7d: 00                                        ; local decl count
0001c7e: 41                                        ; i32.const
0001c7f: 01                                        ; i32 literal
0001c80: 40                                        ; memory.grow
0001c81: 00                                        ; memory.grow reserved
0001c82: 1a                                        ; drop
0001c83: 0b                                        ; end
0001c7c: 07                                        ; FIXUP func body size
; function body 41
0001c84: 00                                        ; func body size (guess)
0001c85: 00                                        ; local decl count
0001c86: 41                                        ; i32.const
0001c87: 01                                        ; i32 literal
0001c88: 1a                                        ; drop
0001c89: 0b                                        ; end
0001c84: 05                                        ; FIXUP func body size
; function body 42
0001c8a: 00                                        ; func body size (guess)
0001c8b: 00                                        ; local decl count
0001c8c: 42                                        ; i64.const
0001c8d: 01                                        ; i64 literal
0001c8e: 1a                                        ; drop
0001c8f: 0b                                        ; end
0001c8a: 05                                        ; FIXUP func body size
; function body 43
0001c90: 00                                        ; func body size (guess)
0001c91: 00                                        ; local decl count
0001c92: 43                                        ; f32.const
0001c93: 0000 803f                                 ; f32 literal
0001c97: 1a                                        ; drop
0001c98: 0b                                        ; end
0001c90: 08                                        ; FIXUP func body size
; function body 44
0001c99: 00                                        ; func body size (guess)
0001c9a: 00                                        ; local decl count
0001c9b: 44                                        ; f64.const
0001c9c: 0000 0000 0000 f03f                       ; f64 literal
0001ca4: 1a                                        ; drop
0001ca5: 0b                                        ; end
0001c99: 0c                                        ; FIXUP func body size
; function body 45
0001ca6: 00                                        ; func body size (guess)
0001ca7: 00                                        ; local decl count
0001ca8: 41                                        ; i32.const
0001ca9: 01                                        ; i32 literal
0001caa: 45                                        ; i32.eqz
0001cab: 1a                                        ; drop
0001cac: 0b                                        ; end
0001ca6: 06                                        ; FIXUP func body size
; function body 46
0001cad: 00                                        ; func body size (guess)
0001cae: 00                                        ; local decl count
0001caf: 41                                        ; i32.const
0001cb0: 01                                        ; i32 literal
0001cb1: 41                                        ; i32.const
0001cb2: 02                                        ; i32 literal
0001cb3: 46                                        ; i32.eq
0001cb4: 1a                                        ; drop
0001cb5: 0b                                        ; end
0001cad: 08                                        ; FIXUP func body size
; function body 47
0001cb6: 00                                        ; func body size (guess)
0001cb7: 00                                        ; local decl count
0001cb8: 41                                        ; i32.const
0001cb9: 01                                        ; i32 literal
0001cba: 41                                        ; i32.const
0001cbb: 02                                        ; i32 literal
0001cbc: 47                                        ; i32.ne
0001cbd: 1a                                        ; drop
0001cbe: 0b                                        ; end
0001cb6: 08                                        ; FIXUP func body size
; function body 48
0001cbf: 00                                        ; func body size (guess)
0001cc0: 00                                        ; local decl count
0001cc1: 41                                        ; i32.const
0001cc2: 01                                        ; i32 literal
0001cc3: 41                                        ; i32.const
0001cc4: 02                                        ; i32 literal
0001cc5: 48                                        ; i32.lt_s
0001cc6: 1a                                        ; drop
0001cc7: 0b                                        ; end
0001cbf: 08                                        ; FIXUP func body size
; function body 49
0001cc8: 00                                        ; func body size (guess)
0001cc9: 00                                        ; local decl count
0001cca: 41                                        ; i32.const
0001ccb: 01                                        ; i32 literal
0001ccc: 41                                        ; i32.const
0001ccd: 02                                        ; i32 literal
0001cce: 49                                        ; i32.lt_u
0001ccf: 1a                                        ; drop
0001cd0: 0b                                        ; end
0001cc8: 08                                        ; FIXUP func body size
; function body 50
0001cd1: 00                                        ; func body size (guess)
0001cd2: 00                                        ; local decl count
0001cd3: 41                                        ; i32.const
0001cd4: 01                                        ; i32 literal
0001cd5: 41                                        ; i32.const
0001cd6: 02                                        ; i32 literal
0001cd7: 4a                                        ; i32.gt_s
0001cd8: 1a                                        ; drop
0001cd9: 0b                                        ; end
0001cd1: 08                                        ; FIXUP func body size
; function body 51
0001cda: 00                                        ; func body size (guess)
0001cdb: 00                                        ; local decl count
0001cdc: 41                                        ; i32.const
0001cdd: 01                                        ; i32 literal
0001cde: 41                                        ; i32.const
0001cdf: 02                                        ; i32 literal
0001ce0: 4b                                        ; i32.gt_u
0001ce1: 1a                                        ; drop
0001ce2: 0b                                        ; end
0001cda: 08                                        ; FIXUP func body size
; function body 52
0001ce3: 00                                        ; func body size (guess)
0001ce4: 00                                        ; local decl count
0001ce5: 41                                        ; i32.const
0001ce6: 01                                        ; i32 literal
0001ce7: 41                                        ; i32.const
0001ce8: 02                                        ; i32 literal
0001ce9: 4c                                        ; i32.le_s
0001cea: 1a                                        ; drop
0001ceb: 0b                                        ; end
0001ce3: 08                                        ; FIXUP func body size
; function body 53
0001cec: 00                                        ; func body size (guess)
0001ced: 00                                        ; local decl count
0001cee: 41                                        ; i32.const
0001cef: 01                                        ; i32 literal
0001cf0: 41                                        ; i32.const
0001cf1: 02                                        ; i32 literal
0001cf2: 4d                                        ; i32.le_u
0001cf3: 1a                                        ; drop
0001cf4: 0b                                        ; end
0001cec: 08                                        ; FIXUP func body size
; function body 54
0001cf5: 00                                        ; func body size (guess)
0001cf6: 00                                        ; local decl count
0001cf7: 41                                        ; i32.const
0001cf8: 01                                        ; i32 literal
0001cf9: 41                                        ; i32.const
0001cfa: 02                                        ; i32 literal
0001cfb: 4e                                        ; i32.ge_s
0001cfc: 1a                                        ; drop
0001cfd: 0b                                        ; end
0001cf5: 08                                        ; FIXUP func body size
; function body 55
0001cfe: 00                                        ; func body size (guess)
0001cff: 00                                        ; local decl count
0001d00: 41                                        ; i32.const
0001d01: 01                                        ; i32 literal
0001d02: 41                                        ; i32.const
0001d03: 02                                        ; i32 literal
0001d04: 4f                                        ; i32.ge_u
0001d05: 1a                                        ; drop
0001d06: 0b                                        ; end
0001cfe: 08                                        ; FIXUP func body size
; function body 56
0001d07: 00                                        ; func body size (guess)
0001d08: 00                                        ; local decl count
0001d09: 42                                        ; i64.const
0001d0a: 01                                        ; i64 literal
0001d0b: 50                                        ; i64.eqz
0001d0c: 1a                                        ; drop
0001d0d: 0b                                        ; end
0001d07: 06                                        ; FIXUP func body size
; function body 57
0001d0e: 00                                        ; func body size (guess)
0001d0f: 00                                        ; local decl count
0001d10: 42                                        ; i64.const
0001d11: 01                                        ; i64 literal
0001d12: 42                                        ; i64.const
0001d13: 02                                        ; i64 literal
0001d14: 51                                        ; i64.eq
0001d15: 1a                                        ; drop
0001d16: 0b                                        ; end
0001d0e: 08                                        ; FIXUP func body size
; function body 58
0001d17: 00                                        ; func body size (guess)
0001d18: 00                                        ; local decl count
0001d19: 42                                        ; i64.const
0001d1a: 01                                        ; i64 literal
0001d1b: 42                                        ; i64.const
0001d1c: 02                                        ; i64 literal
0001d1d: 52                                        ; i64.ne
0001d1e: 1a                                        ; drop
0001d1f: 0b                                        ; end
0001d17: 08                                        ; FIXUP func body size
; function body 59
0001d20: 00                                        ; func body size (guess)
0001d21: 00                                        ; local decl count
0001d22: 42                                        ; i64.const
0001d23: 01                                        ; i64 literal
0001d24: 42                                        ; i64.const
0001d25: 02                                        ; i64 literal
0001d26: 53                                        ; i64.lt_s
0001d27: 1a                                        ; drop
0001d28: 0b                                        ; end
0001d20: 08                                        ; FIXUP func body size
; function body 60
0001d29: 00                                        ; func body size (guess)
0001d2a: 00                                        ; local decl count
0001d2b: 42                                        ; i64.const
0001d2c: 01                                        ; i64 literal
0001d2d: 42                                        ; i64.const
0001d2e: 02                                        ; i64 literal
0001d2f: 54                                        ; i64.lt_u
0001d30: 1a                                        ; drop
0001d31: 0b                                        ; end
0001d29: 08                                        ; FIXUP func body size
; function body 61
0001d32: 00                                        ; func body size (guess)
0001d33: 00                                        ; local decl count
0001d34: 42                                        ; i64.const
0001d35: 01                                        ; i64 literal
0001d36: 42                                        ; i64.const
0001d37: 02                                        ; i64 literal
0001d38: 55                                        ; i64.gt_s
0001d39: 1a                                        ; drop
0001d3a: 0b                                        ; end
0001d32: 08                                        ; FIXUP func body size
; function body 62
0001d3b: 00                                        ; func body size (guess)
0001d3c: 00                                        ; local decl count
0001d3d: 42                                        ; i64.const
0001d3e: 01                                        ; i64 literal
0001d3f: 42                                        ; i64.const
0001d40: 02                                        ; i64 literal
0001d41: 56                                        ; i64.gt_u
0001d42: 1a                                        ; drop
0001d43: 0b                                        ; end
0001d3b: 08                                        ; FIXUP func body size
; function body 63
0001d44: 00                                        ; func body size (guess)
0001d45: 00                                        ; local decl count
0001d46: 42                                        ; i64.const
0001d47: 01                                        ; i64 literal
0001d48: 42                                        ; i64.const
0001d49: 02                                        ; i64 literal
0001d4a: 57                                        ; i64.le_s
0001d4b: 1a                                        ; drop
0001d4c: 0b                                        ; end
0001d44: 08                                        ; FIXUP func body size
; function body 64
0001d4d: 00                                        ; func body size (guess)
0001d4e: 00                                        ; local decl count
0001d4f: 42                                        ; i64.const
0001d50: 01                                        ; i64 literal
0001d51: 42                                        ; i64.const
0001d52: 02                                        ; i64 literal
0001d53: 58                                        ; i64.le_u
0001d54: 1a                                        ; drop
0001d55: 0b                                        ; end
0001d4d: 08                                        ; FIXUP func body size
; function body 65
0001d56: 00                                        ; func body size (guess)
0001d57: 00                                        ; local decl count
0001d58: 42                                        ; i64.const
0001d59: 01                                        ; i64 literal
0001d5a: 42                                        ; i64.const
0001d5b: 02                                        ; i64 literal
0001d5c: 59                                        ; i64.ge_s
0001d5d: 1a                                        ; drop
0001d5e: 0b                                        ; end
0001d56: 08                                        ; FIXUP func body size
; function body 66
0001d5f: 00                                        ; func body size (guess)
0001d60: 00                                        ; local decl count
0001d61: 42                                        ; i64.const
0001d62: 01                                        ; i64 literal
0001d63: 42                                        ; i64.const
0001d64: 02                                        ; i64 literal
0001d65: 5a                                        ; i64.ge_u
0001d66: 1a                                        ; drop
0001d67: 0b                                        ; end
0001d5f: 08                                        ; FIXUP func body size
; function body 67
0001d68: 00                                        ; func body size (guess)
0001d69: 00                                        ; local decl count
0001d6a: 43                                        ; f32.const
0001d6b: 0000 803f                                 ; f32 literal
0001d6f: 43                                        ; f32.const
0001d70: 0000 0040                                 ; f32 literal
0001d74: 5b                                        ; f32.eq
0001d75: 1a                                        ; drop
0001d76: 0b                                        ; end
0001d68: 0e                                        ; FIXUP func body size
; function body 68
0001d77: 00                                        ; func body size (guess)
0001d78: 00                                        ; local decl count
0001d79: 43                                        ; f32.const
0001d7a: 0000 803f                                 ; f32 literal
0001d7e: 43                                        ; f32.const
0001d7f: 0000 0040                                 ; f32 literal
0001d83: 5c                                        ; f32.ne
0001d84: 1a                                        ; drop
0001d85: 0b                                        ; end
0001d77: 0e                                        ; FIXUP func body size
; function body 69
0001d86: 00                                        ; func body size (guess)
0001d87: 00                                        ; local decl count
0001d88: 43                                        ; f32.const
0001d89: 0000 803f                                 ; f32 literal
0001d8d: 43                                        ; f32.const
0001d8e: 0000 0040                                 ; f32 literal
0001d92: 5d                                        ; f32.lt
0001d93: 1a                                        ; drop
0001d94: 0b                                        ; end
0001d86: 0e                                        ; FIXUP func body size
; function body 70
0001d95: 00                                        ; func body size (guess)
0001d96: 00                                        ; local decl count
0001d97: 43                                        ; f32.const
0001d98: 0000 803f                                 ; f32 literal
0001d9c: 43                                        ; f32.const
0001d9d: 0000 0040                                 ; f32 literal
0001da1: 5e                                        ; f32.gt
0001da2: 1a                                        ; drop
0001da3: 0b                                        ; end
0001d95: 0e                                        ; FIXUP func body size
; function body 71
0001da4: 00                                        ; func body size (guess)
0001da5: 00                                        ; local decl count
0001da6: 43                                        ; f32.const
0001da7: 0000 803f                                 ; f32 literal
0001dab: 43                                        ; f32.const
0001dac: 0000 0040                                 ; f32 literal
0001db0: 5f                                        ; f32.le
0001db1: 1a                                        ; drop
0001db2: 0b                                        ; end
0001da4: 0e                                        ; FIXUP func body size
; function body 72
0001db3: 00                                        ; func body size (guess)
0001db4: 00                                        ; local decl count
0001db5: 43                                        ; f32.const
0001db6: 0000 803f                                 ; f32 literal
0001dba: 43                                        ; f32.const
0001dbb: 0000 0040                                 ; f32 literal
0001dbf: 60                                        ; f32.ge
0001dc0: 1a                                        ; drop
0001dc1: 0b                                        ; end
0001db3: 0e                                        ; FIXUP func body size
; function body 73
0001dc2: 00                                        ; func body size (guess)
0001dc3: 00                                        ; local decl count
0001dc4: 44                                        ; f64.const
0001dc5: 0000 0000 0000 f03f                       ; f64 literal
0001dcd: 44                                        ; f64.const
0001dce: 0000 0000 0000 0040                       ; f64 literal
0001dd6: 61                                        ; f64.eq
0001dd7: 1a                                        ; drop
0001dd8: 0b                                        ; end
0001dc2: 16                                        ; FIXUP func body size
; function body 74
0001dd9: 00                                        ; func body size (guess)
0001dda: 00                                        ; local decl count
0001ddb: 44                                        ; f64.const
0001ddc: 0000 0000 0000 f03f                       ; f64 literal
0001de4: 44                                        ; f64.const
0001de5: 0000 0000 0000 0040                       ; f64 literal
0001ded: 62                                        ; f64.ne
0001dee: 1a                                        ; drop
0001def: 0b                                        ; end
0001dd9: 16                                        ; FIXUP func body size
; function body 75
0001df0: 00                                        ; func body size (guess)
0001df1: 00                                        ; local decl count
0001df2: 44                                        ; f64.const
0001df3: 0000 0000 0000 f03f                       ; f64 literal
0001dfb: 44                                        ; f64.const
0001dfc: 0000 0000 0000 0040                       ; f64 literal
0001e04: 63                                        ; f64.lt
0001e05: 1a                                        ; drop
0001e06: 0b                                        ; end
0001df0: 16                                        ; FIXUP func body size
; function body 76
0001e07: 00                                        ; func body size (guess)
0001e08: 00                                        ; local decl count
0001e09: 44                                        ; f64.const
0001e0a: 0000 0000 0000 f03f                       ; f64 literal
0001e12: 44                                        ; f64.const
0001e13: 0000 0000 0000 0040                       ; f64 literal
0001e1b: 64                                        ; f64.gt
0001e1c: 1a                                        ; drop
0001e1d: 0b                                        ; end
0001e07: 16                                        ; FIXUP func body size
; function body 77
0001e1e: 00                                        ; func body size (guess)
0001e1f: 00                                        ; local decl count
0001e20: 44                                        ; f64.const
0001e21: 0000 0000 0000 f03f                       ; f64 literal
0001e29: 44                                        ; f64.const
0001e2a: 0000 0000 0000 0040                       ; f64 literal
0001e32: 65                                        ; f64.le
0001e33: 1a                                        ; drop
0001e34: 0b                                        ; end
0001e1e: 16                                        ; FIXUP func body size
; function body 78
0001e35: 00                                        ; func body size (guess)
0001e36: 00                                        ; local decl count
0001e37: 44                                        ; f64.const
0001e38: 0000 0000 0000 f03f                       ; f64 literal
0001e40: 44                                        ; f64.const
0001e41: 0000 0000 0000 0040                       ; f64 literal
0001e49: 66                                        ; f64.ge
0001e4a: 1a                                        ; drop
0001e4b: 0b                                        ; end
0001e35: 16                                        ; FIXUP func body size
; function body 79
0001e4c: 00                                        ; func body size (guess)
0001e4d: 00                                        ; local decl count
0001e4e: 41                                        ; i32.const
0001e4f: 01                                        ; i32 literal
0001e50: 67                                        ; i32.clz
0001e51: 1a                                        ; drop
0001e52: 0b                                        ; end
0001e4c: 06                                        ; FIXUP func body size
; function body 80
0001e53: 00                                        ; func body size (guess)
0001e54: 00                                        ; local decl count
0001e55: 41                                        ; i32.const
0001e56: 01                                        ; i32 literal
0001e57: 68                                        ; i32.ctz
0001e58: 1a                                        ; drop
0001e59: 0b                                        ; end
0001e53: 06                                        ; FIXUP func body size
; function body 81
0001e5a: 00                                        ; func body size (guess)
0001e5b: 00                                        ; local decl count
0001e5c: 41                                        ; i32.const
0001e5d: 01                                        ; i32 literal
0001e5e: 69                                        ; i32.popcnt
0001e5f: 1a                                        ; drop
0001e60: 0b                                        ; end
0001e5a: 06                                        ; FIXUP func body size
; function body 82
0001e61: 00                                        ; func body size (guess)
0001e62: 00                                        ; local decl count
0001e63: 41                                        ; i32.const
0001e64: 01                                        ; i32 literal
0001e65: 41                                        ; i32.const
0001e66: 02                                        ; i32 literal
0001e67: 6a                                        ; i32.add
0001e68: 1a                                        ; drop
0001e69: 0b                                        ; end
0001e61: 08                                        ; FIXUP func body size
; function body 83
0001e6a: 00                                        ; func body size (guess)
0001e6b: 00                                        ; local decl count
0001e6c: 41                                        ; i32.const
0001e6d: 01                                        ; i32 literal
0001e6e: 41                                        ; i32.const
0001e6f: 02                                        ; i32 literal
0001e70: 6b                                        ; i32.sub
0001e71: 1a                                        ; drop
0001e72: 0b                                        ; end
0001e6a: 08                                        ; FIXUP func body size
; function body 84
0001e73: 00                                        ; func body size (guess)
0001e74: 00                                        ; local decl count
0001e75: 41                                        ; i32.const
0001e76: 01                                        ; i32 literal
0001e77: 41                                        ; i32.const
0001e78: 02                                        ; i32 literal
0001e79: 6c                                        ; i32.mul
0001e7a: 1a                                        ; drop
0001e7b: 0b                                        ; end
0001e73: 08                                        ; FIXUP func body size
; function body 85
0001e7c: 00                                        ; func body size (guess)
0001e7d: 00                                        ; local decl count
0001e7e: 41                                        ; i32.const
0001e7f: 01                                        ; i32 literal
0001e80: 41                                        ; i32.const
0001e81: 02                                        ; i32 literal
0001e82: 6d                                        ; i32.div_s
0001e83: 1a                                        ; drop
0001e84: 0b                                        ; end
0001e7c: 08                                        ; FIXUP func body size
; function body 86
0001e85: 00                                        ; func body size (guess)
0001e86: 00                                        ; local decl count
0001e87: 41                                        ; i32.const
0001e88: 01                                        ; i32 literal
0001e89: 41                                        ; i32.const
0001e8a: 02                                        ; i32 literal
0001e8b: 6e                                        ; i32.div_u
0001e8c: 1a                                        ; drop
0001e8d: 0b                                        ; end
0001e85: 08                                        ; FIXUP func body size
; function body 87
0001e8e: 00                                        ; func body size (guess)
0001e8f: 00                                        ; local decl count
0001e90: 41                                        ; i32.const
0001e91: 01                                        ; i32 literal
0001e92: 41                                        ; i32.const
0001e93: 02                                        ; i32 literal
0001e94: 6f                                        ; i32.rem_s
0001e95: 1a                                        ; drop
0001e96: 0b                                        ; end
0001e8e: 08                                        ; FIXUP func body size
; function body 88
0001e97: 00                                        ; func body size (guess)
0001e98: 00                                        ; local decl count
0001e99: 41                                        ; i32.const
0001e9a: 01                                        ; i32 literal
0001e9b: 41                                        ; i32.const
0001e9c: 02                                        ; i32 literal
0001e9d: 70                                        ; i32.rem_u
0001e9e: 1a                                        ; drop
0001e9f: 0b                                        ; end
0001e97: 08                                        ; FIXUP func body size
; function body 89
0001ea0: 00                                        ; func body size (guess)
0001ea1: 00                                        ; local decl count
0001ea2: 41                                        ; i32.const
0001ea3: 01                                        ; i32 literal
0001ea4: 41                                        ; i32.const
0001ea5: 02                                        ; i32 literal
0001ea6: 71                                        ; i32.and
0001ea7: 1a                                        ; drop
0001ea8: 0b                                        ; end
0001ea0: 08                                        ; FIXUP func body size
; function body 90
0001ea9: 00                                        ; func body size (guess)
0001eaa: 00                                        ; local decl count
0001eab: 41                                        ; i32.const
0001eac: 01                                        ; i32 literal
0001ead: 41                                        ; i32.const
0001eae: 02                                        ; i32 literal
0001eaf: 72                                        ; i32.or
0001eb0: 1a                                        ; drop
0001eb1: 0b                                        ; end
0001ea9: 08                                        ; FIXUP func body size
; function body 91
0001eb2: 00                                        ; func body size (guess)
0001eb3: 00                                        ; local decl count
0001eb4: 41                                        ; i32.const
0001eb5: 01                                        ; i32 literal
0001eb6: 41                                        ; i32.const
0001eb7: 02                                        ; i32 literal
0001eb8: 73                                        ; i32.xor
0001eb9: 1a                                        ; drop
0001eba: 0b                                        ; end
0001eb2: 08                                        ; FIXUP func body size
; function body 92
0001ebb: 00                                        ; func body size (guess)
0001ebc: 00                                        ; local decl count
0001ebd: 41                                        ; i32.const
0001ebe: 01                                        ; i32 literal
0001ebf: 41                                        ; i32.const
0001ec0: 02                                        ; i32 literal
0001ec1: 74                                        ; i32.shl
0001ec2: 1a                                        ; drop
0001ec3: 0b                                        ; end
0001ebb: 08                                        ; FIXUP func body size
; function body 93
0001ec4: 00                                        ; func body size (guess)
0001ec5: 00                                        ; local decl count
0001ec6: 41                                        ; i32.const
0001ec7: 01                                        ; i32 literal
0001ec8: 41                                        ; i32.const
0001ec9: 02                                        ; i32 literal
0001eca: 75                                        ; i32.shr_s
0001ecb: 1a                                        ; drop
0001ecc: 0b                                        ; end
0001ec4: 08                                        ; FIXUP func body size
; function body 94
0001ecd: 00                                        ; func body size (guess)
0001ece: 00                                        ; local decl count
0001ecf: 41                                        ; i32.const
0001ed0: 01                                        ; i32 literal
0001ed1: 41                                        ; i32.const
0001ed2: 02                                        ; i32 literal
0001ed3: 76                                        ; i32.shr_u
0001ed4: 1a                                        ; drop
0001ed5: 0b                                        ; end
0001ecd: 08                                        ; FIXUP func body size
; function body 95
0001ed6: 00                                        ; func body size (guess)
0001ed7: 00                                        ; local decl count
0001ed8: 41                                        ; i32.const
0001ed9: 01                                        ; i32 literal
0001eda: 41                                        ; i32.const
0001edb: 02                                        ; i32 literal
0001edc: 77                                        ; i32.rotl
0001edd: 1a                                        ; drop
0001ede: 0b                                        ; end
0001ed6: 08                                        ; FIXUP func body size
; function body 96
0001edf: 00                                        ; func body size (guess)
0001ee0: 00                                        ; local decl count
0001ee1: 41                                        ; i32.const
0001ee2: 01                                        ; i32 literal
0001ee3: 41                                        ; i32.const
0001ee4: 02                                        ; i32 literal
0001ee5: 78                                        ; i32.rotr
0001ee6: 1a                                        ; drop
0001ee7: 0b                                        ; end
0001edf: 08                                        ; FIXUP func body size
; function body 97
0001ee8: 00                                        ; func body size (guess)
0001ee9: 00                                        ; local decl count
0001eea: 42                                        ; i64.const
0001eeb: 01                                        ; i64 literal
0001eec: 79                                        ; i64.clz
0001eed: 1a                                        ; drop
0001eee: 0b                                        ; end
0001ee8: 06                                        ; FIXUP func body size
; function body 98
0001eef: 00                                        ; func body size (guess)
0001ef0: 00                                        ; local decl count
0001ef1: 42                                        ; i64.const
0001ef2: 01                                        ; i64 literal
0001ef3: 7a                                        ; i64.ctz
0001ef4: 1a                                        ; drop
0001ef5: 0b                                        ; end
0001eef: 06                                        ; FIXUP func body size
; function body 99
0001ef6: 00                                        ; func body size (guess)
0001ef7: 00                                        ; local decl count
0001ef8: 42                                        ; i64.const
0001ef9: 01                                        ; i64 literal
0001efa: 7b                                        ; i64.popcnt
0001efb: 1a                                        ; drop
0001efc: 0b                                        ; end
0001ef6: 06                                        ; FIXUP func body size
; function body 100
0001efd: 00                                        ; func body size (guess)
0001efe: 00                                        ; local decl count
0001eff: 42                                        ; i64.const
0001f00: 01                                        ; i64 literal
0001f01: 42                                        ; i64.const
0001f02: 02                                        ; i64 literal
0001f03: 7c                                        ; i64.add
0001f04: 1a                                        ; drop
0001f05: 0b                                        ; end
0001efd: 08                                        ; FIXUP func body size
; function body 101
0001f06: 00                                        ; func body size (guess)
0001f07: 00                                        ; local decl count
0001f08: 42                                        ; i64.const
0001f09: 01                                        ; i64 literal
0001f0a: 42                                        ; i64.const
0001f0b: 02                                        ; i64 literal
0001f0c: 7d                                        ; i64.sub
0001f0d: 1a                                        ; drop
0001f0e: 0b                                        ; end
0001f06: 08                                        ; FIXUP func body size
; function body 102
0001f0f: 00                                        ; func body size (guess)
0001f10: 00                                        ; local decl count
0001f11: 42                                        ; i64.const
0001f12: 01                                        ; i64 literal
0001f13: 42                                        ; i64.const
0001f14: 02                                        ; i64 literal
0001f15: 7e                                        ; i64.mul
0001f16: 1a                                        ; drop
0001f17: 0b                                        ; end
0001f0f: 08                                        ; FIXUP func body size
; function body 103
0001f18: 00                                        ; func body size (guess)
0001f19: 00                                        ; local decl count
0001f1a: 42                                        ; i64.const
0001f1b: 01                                        ; i64 literal
0001f1c: 42                                        ; i64.const
0001f1d: 02                                        ; i64 literal
0001f1e: 7f                                        ; i64.div_s
0001f1f: 1a                                        ; drop
0001f20: 0b                                        ; end
0001f18: 08                                        ; FIXUP func body size
; function body 104
0001f21: 00                                        ; func body size (guess)
0001f22: 00                                        ; local decl count
0001f23: 42                                        ; i64.const
0001f24: 01                                        ; i64 literal
0001f25: 42                                        ; i64.const
0001f26: 02                                        ; i64 literal
0001f27: 80                                        ; i64.div_u
0001f28: 1a                                        ; drop
0001f29: 0b                                        ; end
0001f21: 08                                        ; FIXUP func body size
; function body 105
0001f2a: 00                                        ; func body size (guess)
0001f2b: 00                                        ; local decl count
0001f2c: 42                                        ; i64.const
0001f2d: 01                                        ; i64 literal
0001f2e: 42                                        ; i64.const
0001f2f: 02                                        ; i64 literal
0001f30: 81                                        ; i64.rem_s
0001f31: 1a                                        ; drop
0001f32: 0b                                        ; end
0001f2a: 08                                        ; FIXUP func body size
; function body 106
0001f33: 00                                        ; func body size (guess)
0001f34: 00                                        ; local decl count
0001f35: 42                                        ; i64.const
0001f36: 01                                        ; i64 literal
0001f37: 42                                        ; i64.const
0001f38: 02                                        ; i64 literal
0001f39: 82                                        ; i64.rem_u
0001f3a: 1a                                        ; drop
0001f3b: 0b                                        ; end
0001f33: 08                                        ; FIXUP func body size
; function body 107
0001f3c: 00                                        ; func body size (guess)
0001f3d: 00                                        ; local decl count
0001f3e: 42                                        ; i64.const
0001f3f: 01                                        ; i64 literal
0001f40: 42                                        ; i64.const
0001f41: 02                                        ; i64 literal
0001f42: 83                                        ; i64.and
0001f43: 1a                                        ; drop
0001f44: 0b                                        ; end
0001f3c: 08                                        ; FIXUP func body size
; function body 108
0001f45: 00                                        ; func body size (guess)
0001f46: 00                                        ; local decl count
0001f47: 42                                        ; i64.const
0001f48: 01                                        ; i64 literal
0001f49: 42                                        ; i64.const
0001f4a: 02                                        ; i64 literal
0001f4b: 84                                        ; i64.or
0001f4c: 1a                                        ; drop
0001f4d: 0b                                        ; end
0001f45: 08                                        ; FIXUP func body size
; function body 109
0001f4e: 00                                        ; func body size (guess)
0001f4f: 00                                        ; local decl count
0001f50: 42                                        ; i64.const
0001f51: 01                                        ; i64 literal
0001f52: 42                                        ; i64.const
0001f53: 02                                        ; i64 literal
0001f54: 85                                        ; i64.xor
0001f55: 1a                                        ; drop
0001f56: 0b                                        ; end
0001f4e: 08                                        ; FIXUP func body size
; function body 110
0001f57: 00                                        ; func body size (guess)
0001f58: 00                                        ; local decl count
0001f59: 42                                        ; i64.const
0001f5a: 01                                        ; i64 literal
0001f5b: 42                                        ; i64.const
0001f5c: 02                                        ; i64 literal
0001f5d: 86                                        ; i64.shl
0001f5e: 1a                                        ; drop
0001f5f: 0b                                        ; end
0001f57: 08                                        ; FIXUP func body size
; function body 111
0001f60: 00                                        ; func body size (guess)
0001f61: 00                                        ; local decl count
0001f62: 42                                        ; i64.const
0001f63: 01                                        ; i64 literal
0001f64: 42                                        ; i64.const
0001f65: 02                                        ; i64 literal
0001f66: 87                                        ; i64.shr_s
0001f67: 1a                                        ; drop
0001f68: 0b                                        ; end
0001f60: 08                                        ; FIXUP func body size
; function body 112
0001f69: 00                                        ; func body size (guess)
0001f6a: 00                                        ; local decl count
0001f6b: 42                                        ; i64.const
0001f6c: 01                                        ; i64 literal
0001f6d: 42                                        ; i64.const
0001f6e: 02                                        ; i64 literal
0001f6f: 88                                        ; i64.shr_u
0001f70: 1a                                        ; drop
0001f71: 0b                                        ; end
0001f69: 08                                        ; FIXUP func body size
; function body 113
0001f72: 00                                        ; func body size (guess)
0001f73: 00                                        ; local decl count
0001f74: 42                                        ; i64.const
0001f75: 01                                        ; i64 literal
0001f76: 42                                        ; i64.const
0001f77: 02                                        ; i64 literal
0001f78: 89                                        ; i64.rotl
0001f79: 1a                                        ; drop
0001f7a: 0b                                        ; end
0001f72: 08                                        ; FIXUP func body size
; function body 114
0001f7b: 00                                        ; func body size (guess)
0001f7c: 00                                        ; local decl count
0001f7d: 42                                        ; i64.const
0001f7e: 01                                        ; i64 literal
0001f7f: 42                                        ; i64.const
0001f80: 02                                        ; i64 literal
0001f81: 8a                                        ; i64.rotr
0001f82: 1a                                        ; drop
0001f83: 0b                                        ; end
0001f7b: 08                                        ; FIXUP func body size
; function body 115
0001f84: 00                                        ; func body size (guess)
0001f85: 00                                        ; local decl count
0001f86: 43                                        ; f32.const
0001f87: 0000 803f                                 ; f32 literal
0001f8b: 8b                                        ; f32.abs
0001f8c: 1a                                        ; drop
0001f8d: 0b                                        ; end
0001f84: 09                                        ; FIXUP func body size
; function body 116
0001f8e: 00                                        ; func body size (guess)
0001f8f: 00                                        ; local decl count
0001f90: 43                                        ; f32.const
0001f91: 0000 803f                                 ; f32 literal
0001f95: 8c                                        ; f32.neg
0001f96: 1a                                        ; drop
0001f97: 0b                                        ; end
0001f8e: 09                                        ; FIXUP func body size
; function body 117
0001f98: 00                                        ; func body size (guess)
0001f99: 00                                        ; local decl count
0001f9a: 43                                        ; f32.const
0001f9b: 0000 803f                                 ; f32 literal
0001f9f: 8d                                        ; f32.ceil
0001fa0: 1a                                        ; drop
0001fa1: 0b                                        ; end
0001f98: 09                                        ; FIXUP func body size
; function body 118
0001fa2: 00                                        ; func body size (guess)
0001fa3: 00                                        ; local decl count
0001fa4: 43                                        ; f32.const
0001fa5: 0000 803f                                 ; f32 literal
0001fa9: 8e                                        ; f32.floor
0001faa: 1a                                        ; drop
0001fab: 0b                                        ; end
0001fa2: 09                                        ; FIXUP func body size
; function body 119
0001fac: 00                                        ; func body size (guess)
0001fad: 00                                        ; local decl count
0001fae: 43                                        ; f32.const
0001faf: 0000 803f                                 ; f32 literal
0001fb3: 8f                                        ; f32.trunc
0001fb4: 1a                                        ; drop
0001fb5: 0b                                        ; end
0001fac: 09                                        ; FIXUP func body size
; function body 120
0001fb6: 00                                        ; func body size (guess)
0001fb7: 00                                        ; local decl count
0001fb8: 43                                        ; f32.const
0001fb9: 0000 803f                                 ; f32 literal
0001fbd: 90                                        ; f32.nearest
0001fbe: 1a                                        ; drop
0001fbf: 0b                                        ; end
0001fb6: 09                                        ; FIXUP func body size
; function body 121
0001fc0: 00                                        ; func body size (guess)
0001fc1: 00                                        ; local decl count
0001fc2: 43                                        ; f32.const
0001fc3: 0000 803f                                 ; f32 literal
0001fc7: 91                                        ; f32.sqrt
0001fc8: 1a                                        ; drop
0001fc9: 0b                                        ; end
0001fc0: 09                                        ; FIXUP func body size
; function body 122
0001fca: 00                                        ; func body size (guess)
0001fcb: 00                                        ; local decl count
0001fcc: 43                                        ; f32.const
0001fcd: 0000 803f                                 ; f32 literal
0001fd1: 43                                        ; f32.const
0001fd2: 0000 0040                                 ; f32 literal
0001fd6: 92                                        ; f32.add
0001fd7: 1a                                        ; drop
0001fd8: 0b                                        ; end
0001fca: 0e                                        ; FIXUP func body size
; function body 123
0001fd9: 00                                        ; func body size (guess)
0001fda: 00                                        ; local decl count
0001fdb: 43                                        ; f32.const
0001fdc: 0000 803f                                 ; f32 literal
0001fe0: 43                                        ; f32.const
0001fe1: 0000 0040                                 ; f32 literal
0001fe5: 93                                        ; f32.sub
0001fe6: 1a                                        ; drop
0001fe7: 0b                                        ; end
0001fd9: 0e                                        ; FIXUP func body size
; function body 124
0001fe8: 00                                        ; func body size (guess)
0001fe9: 00                                        ; local decl count
0001fea: 43                                        ; f32.const
0001feb: 0000 803f                                 ; f32 literal
0001fef: 43                                        ; f32.const
0001ff0: 0000 0040                                 ; f32 literal
0001ff4: 94                                        ; f32.mul
0001ff5: 1a                                        ; drop
0001ff6: 0b                                        ; end
0001fe8: 0e                                        ; FIXUP func body size
; function body 125
0001ff7: 00                                        ; func body size (guess)
0001ff8: 00                                        ; local decl count
0001ff9: 43                                        ; f32.const
0001ffa: 0000 803f                                 ; f32 literal
0001ffe: 43                                        ; f32.const
0001fff: 0000 0040                                 ; f32 literal
0002003: 95                                        ; f32.div
0002004: 1a                                        ; drop
0002005: 0b                                        ; end
0001ff7: 0e                                        ; FIXUP func body size
; function body 126
0002006: 00                                        ; func body size (guess)
0002007: 00                                        ; local decl count
0002008: 43                                        ; f32.const
0002009: 0000 803f                                 ; f32 literal
000200d: 43                                        ; f32.const
000200e: 0000 0040                                 ; f32 literal
0002012: 96                                        ; f32.min
0002013: 1a                                        ; drop
0002014: 0b                                        ; end
0002006: 0e                                        ; FIXUP func body size
; function body 127
0002015: 00                                        ; func body size (guess)
0002016: 00                                        ; local decl count
0002017: 43                                        ; f32.const
0002018: 0000 803f                                 ; f32 literal
000201c: 43                                        ; f32.const
000201d: 0000 0040                                 ; f32 literal
0002021: 97                                        ; f32.max
0002022: 1a                                        ; drop
0002023: 0b                                        ; end
0002015: 0e                                        ; FIXUP func body size
; function body 128
0002024: 00                                        ; func body size (guess)
0002025: 00                                        ; local decl count
0002026: 43                                        ; f32.const
0002027: 0000 803f                                 ; f32 literal
000202b: 43                                        ; f32.const
000202c: 0000 0040                                 ; f32 literal
0002030: 98                                        ; f32.copysign
0002031: 1a                                        ; drop
0002032: 0b                                        ; end
0002024: 0e                                        ; FIXUP func body size
; function body 129
0002033: 00                                        ; func body size (guess)
0002034: 00                                        ; local decl count
0002035: 44                                        ; f64.const
0002036: 0000 0000 0000 f03f                       ; f64 literal
000203e: 99                                        ; f64.abs
000203f: 1a                                        ; drop
0002040: 0b                                        ; end
0002033: 0d                                        ; FIXUP func body size
; function body 130
0002041: 00                                        ; func body size (guess)
0002042: 00                                        ; local decl count
0002043: 44                                        ; f64.const
0002044: 0000 0000 0000 f03f                       ; f64 literal
000204c: 9a                                        ; f64.neg
000204d: 1a                                        ; drop
000204e: 0b                                        ; end
0002041: 0d                                        ; FIXUP func body size
; function body 131
000204f: 00                                        ; func body size (guess)
0002050: 00                                        ; local decl count
0002051: 44                                        ; f64.const
0002052: 0000 0000 0000 f03f                       ; f64 literal
000205a: 9b                                        ; f64.ceil
000205b: 1a                                        ; drop
000205c: 0b                                        ; end
000204f: 0d                                        ; FIXUP func body size
; function body 132
000205d: 00                                        ; func body size (guess)
000205e: 00                                        ; local decl count
000205f: 44                                        ; f64.const
0002060: 0000 0000 0000 f03f                       ; f64 literal
0002068: 9c                                        ; f64.floor
0002069: 1a                                        ; drop
000206a: 0b                                        ; end
000205d: 0d                                        ; FIXUP func body size
; function body 133
000206b: 00                                        ; func body size (guess)
000206c: 00                                        ; local decl count
000206d: 44                                        ; f64.const
000206e: 0000 0000 0000 f03f                       ; f64 literal
0002076: 9d                                        ; f64.trunc
0002077: 1a                                        ; drop
0002078: 0b                                        ; end
000206b: 0d                                        ; FIXUP func body size
; function body 134
0002079: 00                                        ; func body size (guess)
000207a: 00                                        ; local decl count
000207b: 44                                        ; f64.const
000207c: 0000 0000 0000 f03f                       ; f64 literal
0002084: 9e                                        ; f64.nearest
0002085: 1a                                        ; drop
0002086: 0b                                        ; end
0002079: 0d                                        ; FIXUP func body size
; function body 135
0002087: 00                                        ; func body size (guess)
0002088: 00                                        ; local decl count
0002089: 44                                        ; f64.const
000208a: 0000 0000 0000 f03f                       ; f64 literal
0002092: 9f                                        ; f64.sqrt
0002093: 1a                                        ; drop
0002094: 0b                                        ; end
0002087: 0d                                        ; FIXUP func body size
; function body 136
0002095: 00                                        ; func body size (guess)
0002096: 00                                        ; local decl count
0002097: 44                                        ; f64.const
0002098: 0000 0000 0000 f03f                       ; f64 literal
00020a0: 44                                        ; f64.const
00020a1: 0000 0000 0000 0040                       ; f64 literal
00020a9: a0                                        ; f64.add
00020aa: 1a                                        ; drop
00020ab: 0b                                        ; end
0002095: 16                                        ; FIXUP func body size
; function body 137
00020ac: 00                                        ; func body size (guess)
00020ad: 00                                        ; local decl count
00020ae: 44                                        ; f64.const
00020af: 0000 0000 0000 f03f                       ; f64 literal
00020b7: 44                                        ; f64.const
00020b8: 0000 0000 0000 0040                       ; f64 literal
00020c0: a1                                        ; f64.sub
00020c1: 1a                                        ; drop
00020c2: 0b                                        ; end
00020ac: 16                                        ; FIXUP func body size
; function body 138
00020c3: 00                                        ; func body size (guess)
00020c4: 00                                        ; local decl count
00020c5: 44                                        ; f64.const
00020c6: 0000 0000 0000 f03f                       ; f64 literal
00020ce: 44                                        ; f64.const
00020cf: 0000 0000 0000 0040                       ; f64 literal
00020d7: a2                                        ; f64.mul
00020d8: 1a                                        ; drop
00020d9: 0b                                        ; end
00020c3: 16                                        ; FIXUP func body size
; function body 139
00020da: 00                                        ; func body size (guess)
00020db: 00                                        ; local decl count
00020dc: 44                                        ; f64.const
00020dd: 0000 0000 0000 f03f                       ; f64 literal
00020e5: 44                                        ; f64.const
00020e6: 0000 0000 0000 0040                       ; f64 literal
00020ee: a3                                        ; f64.div
00020ef: 1a                                        ; drop
00020f0: 0b                                        ; end
00020da: 16                                        ; FIXUP func body size
; function body 140
00020f1: 00                                        ; func body size (guess)
00020f2: 00                                        ; local decl count
00020f3: 44                                        ; f64.const
00020f4: 0000 0000 0000 f03f                       ; f64 literal
00020fc: 44                                        ; f64.const
00020fd: 0000 0000 0000 0040                       ; f64 literal
0002105: a4                                        ; f64.min
0002106: 1a                                        ; drop
0002107: 0b                                        ; end
00020f1: 16                                        ; FIXUP func body size
; function body 141
0002108: 00                                        ; func body size (guess)
0002109: 00                                        ; local decl count
000210a: 44                                        ; f64.const
000210b: 0000 0000 0000 f03f                       ; f64 literal
0002113: 44                                        ; f64.const
0002114: 0000 0000 0000 0040                       ; f64 literal
000211c: a5                                        ; f64.max
000211d: 1a                                        ; drop
000211e: 0b                                        ; end
0002108: 16                                        ; FIXUP func body size
; function body 142
000211f: 00                                        ; func body size (guess)
0002120: 00                                        ; local decl count
0002121: 44                                        ; f64.const
0002122: 0000 0000 0000 f03f                       ; f64 literal
000212a: 44                                        ; f64.const
000212b: 0000 0000 0000 0040                       ; f64 literal
0002133: a6                                        ; f64.copysign
0002134: 1a                                        ; drop
0002135: 0b                                        ; end
000211f: 16                                        ; FIXUP func body size
; function body 143
0002136: 00                                        ; func body size (guess)
0002137: 00                                        ; local decl count
0002138: 42                                        ; i64.const
0002139: 01                                        ; i64 literal
000213a: a7                                        ; i32.wrap_i64
000213b: 1a                                        ; drop
000213c: 0b                                        ; end
0002136: 06                                        ; FIXUP func body size
; function body 144
000213d: 00                                        ; func body size (guess)
000213e: 00                                        ; local decl count
000213f: 43                                        ; f32.const
0002140: 0000 803f                                 ; f32 literal
0002144: a8                                        ; i32.trunc_f32_s
0002145: 1a                                        ; drop
0002146: 0b                                        ; end
000213d: 09                                        ; FIXUP func body size
; function body 145
0002147: 00                                        ; func body size (guess)
0002148: 00                                        ; local decl count
0002149: 43                                        ; f32.const
000214a: 0000 803f                                 ; f32 literal
000214e: a9                                        ; i32.trunc_f32_u
000214f: 1a                                        ; drop
0002150: 0b                                        ; end
0002147: 09                                        ; FIXUP func body size
; function body 146
0002151: 00                                        ; func body size (guess)
0002152: 00                                        ; local decl count
0002153: 44                                        ; f64.const
0002154: 0000 0000 0000 f03f                       ; f64 literal
000215c: aa                                        ; i32.trunc_f64_s
000215d: 1a                                        ; drop
000215e: 0b                                        ; end
0002151: 0d                                        ; FIXUP func body size
; function body 147
000215f: 00                                        ; func body size (guess)
0002160: 00                                        ; local decl count
0002161: 44                                        ; f64.const
0002162: 0000 0000 0000 f03f                       ; f64 literal
000216a: ab                                        ; i32.trunc_f64_u
000216b: 1a                                        ; drop
000216c: 0b                                        ; end
000215f: 0d                                        ; FIXUP func body size
; function body 148
000216d: 00                                        ; func body size (guess)
000216e: 00                                        ; local decl count
000216f: 41                                        ; i32.const
0002170: 01                                        ; i32 literal
0002171: ac                                        ; i64.extend_i32_s
0002172: 1a                                        ; drop
0002173: 0b                                        ; end
000216d: 06                                        ; FIXUP func body size
; function body 149
0002174: 00                                        ; func body size (guess)
0002175: 00                                        ; local decl count
0002176: 41                                        ; i32.const
0002177: 01                                        ; i32 literal
0002178: ad                                        ; i64.extend_i32_u
0002179: 1a                                        ; drop
000217a: 0b                                        ; end
0002174: 06                                        ; FIXUP func body size
; function body 150
000217b: 00                                        ; func body size (guess)
000217c: 00                                        ; local decl count
000217d: 43                                        ; f32.const
000217e: 0000 803f                                 ; f32 literal
0002182: ae                                        ; i64.trunc_f32_s
0002183: 1a                                        ; drop
0002184: 0b                                        ; end
000217b: 09                                        ; FIXUP func body size
; function body 151
0002185: 00                                        ; func body size (guess)
0002186: 00                                        ; local decl count
0002187: 43                                        ; f32.const
0002188: 0000 803f                                 ; f32 literal
000218c: af                                        ; i64.trunc_f32_u
000218d: 1a                                        ; drop
000218e: 0b                                        ; end
0002185: 09                                        ; FIXUP func body size
; function body 152
000218f: 00                                        ; func body size (guess)
0002190: 00                                        ; local decl count
0002191: 44                                        ; f64.const
0002192: 0000 0000 0000 f03f                       ; f64 literal
000219a: b0                                        ; i64.trunc_f64_s
000219b: 1a                                        ; drop
000219c: 0b                                        ; end
000218f: 0d                                        ; FIXUP func body size
; function body 153
000219d: 00                                        ; func body size (guess)
000219e: 00                                        ; local decl count
000219f: 44                                        ; f64.const
00021a0: 0000 0000 0000 f03f                       ; f64 literal
00021a8: b1                                        ; i64.trunc_f64_u
00021a9: 1a                                        ; drop
00021aa: 0b                                        ; end
000219d: 0d                                        ; FIXUP func body size
; function body 154
00021ab: 00                                        ; func body size (guess)
00021ac: 00                                        ; local decl count
00021ad: 41                                        ; i32.const
00021ae: 01                                        ; i32 literal
00021af: b2                                        ; f32.convert_i32_s
00021b0: 1a                                        ; drop
00021b1: 0b                                        ; end
00021ab: 06                                        ; FIXUP func body size
; function body 155
00021b2: 00                                        ; func body size (guess)
00021b3: 00                                        ; local decl count
00021b4: 41                                        ; i32.const
00021b5: 01                                        ; i32 literal
00021b6: b3                                        ; f32.convert_i32_u
00021b7: 1a                                        ; drop
00021b8: 0b                                        ; end
00021b2: 06                                        ; FIXUP func body size
; function body 156
00021b9: 00                                        ; func body size (guess)
00021ba: 00                                        ; local decl count
00021bb: 42                                        ; i64.const
00021bc: 01                                        ; i64 literal
00021bd: b4                                        ; f32.convert_i64_s
00021be: 1a                                        ; drop
00021bf: 0b                                        ; end
00021b9: 06                                        ; FIXUP func body size
; function body 157
00021c0: 00                                        ; func body size (guess)
00021c1: 00                                        ; local decl count
00021c2: 42                                        ; i64.const
00021c3: 01                                        ; i64 literal
00021c4: b5                                        ; f32.convert_i64_u
00021c5: 1a                                        ; drop
00021c6: 0b                                        ; end
00021c0: 06                                        ; FIXUP func body size
; function body 158
00021c7: 00                                        ; func body size (guess)
00021c8: 00                                        ; local decl count
00021c9: 44                                        ; f64.const
00021ca: 0000 0000 0000 f03f                       ; f64 literal
00021d2: b6                                        ; f32.demote_f64
00021d3: 1a                                        ; drop
00021d4: 0b                                        ; end
00021c7: 0d                                        ; FIXUP func body size
; function body 159
00021d5: 00                                        ; func body size (guess)
00021d6: 00                                        ; local decl count
00021d7: 41                                        ; i32.const
00021d8: 01                                        ; i32 literal
00021d9: b7                                        ; f64.convert_i32_s
00021da: 1a                                        ; drop
00021db: 0b                                        ; end
00021d5: 06                                        ; FIXUP func body size
; function body 160
00021dc: 00                                        ; func body size (guess)
00021dd: 00                                        ; local decl count
00021de: 41                                        ; i32.const
00021df: 01                                        ; i32 literal
00021e0: b8                                        ; f64.convert_i32_u
00021e1: 1a                                        ; drop
00021e2: 0b                                        ; end
00021dc: 06                                        ; FIXUP func body size
; function body 161
00021e3: 00                                        ; func body size (guess)
00021e4: 00                                        ; local decl count
00021e5: 42                                        ; i64.const
00021e6: 01                                        ; i64 literal
00021e7: b9                                        ; f64.convert_i64_s
00021e8: 1a                                        ; drop
00021e9: 0b                                        ; end
00021e3: 06                                        ; FIXUP func body size
; function body 162
00021ea: 00                                        ; func body size (guess)
00021eb: 00                                        ; local decl count
00021ec: 42                                        ; i64.const
00021ed: 01                                        ; i64 literal
00021ee: ba                                        ; f64.convert_i64_u
00021ef: 1a                                        ; drop
00021f0: 0b                                        ; end
00021ea: 06                                        ; FIXUP func body size
; function body 163
00021f1: 00                                        ; func body size (guess)
00021f2: 00                                        ; local decl count
00021f3: 43                                        ; f32.const
00021f4: 0000 803f                                 ; f32 literal
00021f8: bb                                        ; f64.promote_f32
00021f9: 1a                                        ; drop
00021fa: 0b                                        ; end
00021f1: 09                                        ; FIXUP func body size
; function body 164
00021fb: 00                                        ; func body size (guess)
00021fc: 00                                        ; local decl count
00021fd: 41                                        ; i32.const
00021fe: 01                                        ; i32 literal
00021ff: be                                        ; f32.reinterpret_i32
0002200: 1a                                        ; drop
0002201: 0b                                        ; end
00021fb: 06                                        ; FIXUP func body size
; function body 165
0002202: 00                                        ; func body size (guess)
0002203: 00                                        ; local decl count
0002204: 43                                        ; f32.const
0002205: 0000 803f                                 ; f32 literal
0002209: bc                                        ; i32.reinterpret_f32
000220a: 1a                                        ; drop
000220b: 0b                                        ; end
0002202: 09                                        ; FIXUP func body size
; function body 166
000220c: 00                                        ; func body size (guess)
000220d: 00                                        ; local decl count
000220e: 42                                        ; i64.const
000220f: 01                                        ; i64 literal
0002210: bf                                        ; f64.reinterpret_i64
0002211: 1a                                        ; drop
0002212: 0b                                        ; end
000220c: 06                                        ; FIXUP func body size
; function body 167
0002213: 00                                        ; func body size (guess)
0002214: 00                                        ; local decl count
0002215: 44                                        ; f64.const
0002216: 0000 0000 0000 f03f                       ; f64 literal
000221e: bd                                        ; i64.reinterpret_f64
000221f: 1a                                        ; drop
0002220: 0b                                        ; end
0002213: 0d                                        ; FIXUP func body size
; function body 168
0002221: 00                                        ; func body size (guess)
0002222: 00                                        ; local decl count
0002223: 41                                        ; i32.const
0002224: 01                                        ; i32 literal
0002225: c0                                        ; i32.extend8_s
0002226: 1a                                        ; drop
0002227: 0b                                        ; end
0002221: 06                                        ; FIXUP func body size
; function body 169
0002228: 00                                        ; func body size (guess)
0002229: 00                                        ; local decl count
000222a: 41                                        ; i32.const
000222b: 01                                        ; i32 literal
000222c: c1                                        ; i32.extend16_s
000222d: 1a                                        ; drop
000222e: 0b                                        ; end
0002228: 06                                        ; FIXUP func body size
; function body 170
000222f: 00                                        ; func body size (guess)
0002230: 00                                        ; local decl count
0002231: 42                                        ; i64.const
0002232: 01                                        ; i64 literal
0002233: c2                                        ; i64.extend8_s
0002234: 1a                                        ; drop
0002235: 0b                                        ; end
000222f: 06                                        ; FIXUP func body size
; function body 171
0002236: 00                                        ; func body size (guess)
0002237: 00                                        ; local decl count
0002238: 42                                        ; i64.const
0002239: 01                                        ; i64 literal
000223a: c3                                        ; i64.extend16_s
000223b: 1a                                        ; drop
000223c: 0b                                        ; end
0002236: 06                                        ; FIXUP func body size
; function body 172
000223d: 00                                        ; func body size (guess)
000223e: 00                                        ; local decl count
000223f: 42                                        ; i64.const
0002240: 01                                        ; i64 literal
0002241: c4                                        ; i64.extend32_s
0002242: 1a                                        ; drop
0002243: 0b                                        ; end
000223d: 06                                        ; FIXUP func body size
; function body 173
0002244: 00                                        ; func body size (guess)
0002245: 01                                        ; local decl count
0002246: 01                                        ; local type count
0002247: 7f                                        ; i32
0002248: 0b                                        ; end
0002244: 04                                        ; FIXUP func body size
; function body 174
0002249: 00                                        ; func body size (guess)
000224a: 00                                        ; local decl count
000224b: 41                                        ; i32.const
000224c: 01                                        ; i32 literal
000224d: 0d                                        ; br_if
000224e: 00                                        ; break depth
000224f: 0b                                        ; end
0002249: 06                                        ; FIXUP func body size
; function body 175
0002250: 00                                        ; func body size (guess)
0002251: 00                                        ; local decl count
0002252: 41                                        ; i32.const
0002253: 01                                        ; i32 literal
0002254: 10                                        ; call
0002255: 00                                        ; function index
0002256: 0b                                        ; end
0002250: 06                                        ; FIXUP func body size
; function body 176
0002257: 00                                        ; func body size (guess)
0002258: 00                                        ; local decl count
0002259: 41                                        ; i32.const
000225a: 01                                        ; i32 literal
000225b: 0e                                        ; br_table
000225c: 00                                        ; num targets
000225d: 00                                        ; break depth for default
000225e: 0b                                        ; end
0002257: 07                                        ; FIXUP func body size
; function body 177
000225f: 00                                        ; func body size (guess)
0002260: 00                                        ; local decl count
0002261: 02                                        ; block
0002262: 7f                                        ; i32
0002263: 41                                        ; i32.const
0002264: 01                                        ; i32 literal
0002265: 41                                        ; i32.const
0002266: 02                                        ; i32 literal
0002267: 0c                                        ; br
0002268: 00                                        ; break depth
0002269: 0b                                        ; end
000226a: 1a                                        ; drop
000226b: 0b                                        ; end
000225f: 0c                                        ; FIXUP func body size
; function body 178
000226c: 00                                        ; func body size (guess)
000226d: 00                                        ; local decl count
000226e: 43                                        ; f32.const
000226f: 0000 803f                                 ; f32 literal
0002273: fc                                        ; prefix
0002274: 00                                        ; i32.trunc_sat_f32_s
0002275: 1a                                        ; drop
0002276: 0b                                        ; end
000226c: 0a                                        ; FIXUP func body size
; function body 179
0002277: 00                                        ; func body size (guess)
0002278: 00                                        ; local decl count
0002279: 43                                        ; f32.const
000227a: 0000 803f                                 ; f32 literal
000227e: fc                                        ; prefix
000227f: 01                                        ; i32.trunc_sat_f32_u
0002280: 1a                                        ; drop
0002281: 0b                                        ; end
0002277: 0a                                        ; FIXUP func body size
; function body 180
0002282: 00                                        ; func body size (guess)
0002283: 00                                        ; local decl count
0002284: 44                                        ; f64.const
0002285: 0000 0000 0000 f03f                       ; f64 literal
000228d: fc                                        ; prefix
000228e: 02                                        ; i32.trunc_sat_f64_s
000228f: 1a                                        ; drop
0002290: 0b                                        ; end
0002282: 0e                                        ; FIXUP func body size
; function body 181
0002291: 00                                        ; func body size (guess)
0002292: 00                                        ; local decl count
0002293: 44                                        ; f64.const
0002294: 0000 0000 0000 f03f                       ; f64 literal
000229c: fc                                        ; prefix
000229d: 03                                        ; i32.trunc_sat_f64_u
000229e: 1a                                        ; drop
000229f: 0b                                        ; end
0002291: 0e                                        ; FIXUP func body size
; function body 182
00022a0: 00                                        ; func body size (guess)
00022a1: 00                                        ; local decl count
00022a2: 43                                        ; f32.const
00022a3: 0000 803f                                 ; f32 literal
00022a7: fc                                        ; prefix
00022a8: 04                                        ; i64.trunc_sat_f32_s
00022a9: 1a                                        ; drop
00022aa: 0b                                        ; end
00022a0: 0a                                        ; FIXUP func body size
; function body 183
00022ab: 00                                        ; func body size (guess)
00022ac: 00                                        ; local decl count
00022ad: 43                                        ; f32.const
00022ae: 0000 803f                                 ; f32 literal
00022b2: fc                                        ; prefix
00022b3: 05                                        ; i64.trunc_sat_f32_u
00022b4: 1a                                        ; drop
00022b5: 0b                                        ; end
00022ab: 0a                                        ; FIXUP func body size
; function body 184
00022b6: 00                                        ; func body size (guess)
00022b7: 00                                        ; local decl count
00022b8: 44                                        ; f64.const
00022b9: 0000 0000 0000 f03f                       ; f64 literal
00022c1: fc                                        ; prefix
00022c2: 06                                        ; i64.trunc_sat_f64_s
00022c3: 1a                                        ; drop
00022c4: 0b                                        ; end
00022b6: 0e                                        ; FIXUP func body size
; function body 185
00022c5: 00                                        ; func body size (guess)
00022c6: 00                                        ; local decl count
00022c7: 44                                        ; f64.const
00022c8: 0000 0000 0000 f03f                       ; f64 literal
00022d0: fc                                        ; prefix
00022d1: 07                                        ; i64.trunc_sat_f64_u
00022d2: 1a                                        ; drop
00022d3: 0b                                        ; end
00022c5: 0e                                        ; FIXUP func body size
; function body 186
00022d4: 00                                        ; func body size (guess)
00022d5: 00                                        ; local decl count
00022d6: 41                                        ; i32.const
00022d7: 01                                        ; i32 literal
00022d8: 41                                        ; i32.const
00022d9: 02                                        ; i32 literal
00022da: 41                                        ; i32.const
00022db: 03                                        ; i32 literal
00022dc: fc                                        ; prefix
00022dd: 08                                        ; memory.init
00022de: 00                                        ; memory.init segment
00022df: 00                                        ; memory.init reserved
00022e0: 0b                                        ; end
00022d4: 0c                                        ; FIXUP func body size
; function body 187
00022e1: 00                                        ; func body size (guess)
00022e2: 00                                        ; local decl count
00022e3: fc                                        ; prefix
00022e4: 09                                        ; data.drop
00022e5: 00                                        ; data.drop segment
00022e6: 0b                                        ; end
00022e1: 05                                        ; FIXUP func body size
; function body 188
00022e7: 00                                        ; func body size (guess)
00022e8: 00                                        ; local decl count
00022e9: 41                                        ; i32.const
00022ea: 01                                        ; i32 literal
00022eb: 41                                        ; i32.const
00022ec: 02                                        ; i32 literal
00022ed: 41                                        ; i32.const
00022ee: 03                                        ; i32 literal
00022ef: fc                                        ; prefix
00022f0: 0a                                        ; memory.copy
00022f1: 00                                        ; memory.copy reserved
00022f2: 00                                        ; memory.copy reserved
00022f3: 0b                                        ; end
00022e7: 0c                                        ; FIXUP func body size
; function body 189
00022f4: 00                                        ; func body size (guess)
00022f5: 00                                        ; local decl count
00022f6: 41                                        ; i32.const
00022f7: 01                                        ; i32 literal
00022f8: 41                                        ; i32.const
00022f9: 02                                        ; i32 literal
00022fa: 41                                        ; i32.const
00022fb: 03                                        ; i32 literal
00022fc: fc                                        ; prefix
00022fd: 0b                                        ; memory.fill
00022fe: 00                                        ; memory.fill reserved
00022ff: 0b                                        ; end
00022f4: 0b                                        ; FIXUP func body size
; function body 190
0002300: 00                                        ; func body size (guess)
0002301: 00                                        ; local decl count
0002302: 41                                        ; i32.const
0002303: 01                                        ; i32 literal
0002304: 41                                        ; i32.const
0002305: 02                                        ; i32 literal
0002306: 41                                        ; i32.const
0002307: 03                                        ; i32 literal
0002308: fc                                        ; prefix
0002309: 0c                                        ; table.init
000230a: 00                                        ; table.init segment
000230b: 00                                        ; table.init table
000230c: 0b                                        ; end
0002300: 0c                                        ; FIXUP func body size
; function body 191
000230d: 00                                        ; func body size (guess)
000230e: 00                                        ; local decl count
000230f: fc                                        ; prefix
0002310: 0d                                        ; elem.drop
0002311: 00                                        ; elem.drop segment
0002312: 0b                                        ; end
000230d: 05                                        ; FIXUP func body size
; function body 192
0002313: 00                                        ; func body size (guess)
0002314: 00                                        ; local decl count
0002315: 41                                        ; i32.const
0002316: 01                                        ; i32 literal
0002317: 41                                        ; i32.const
0002318: 02                                        ; i32 literal
0002319: 41                                        ; i32.const
000231a: 03                                        ; i32 literal
000231b: fc                                        ; prefix
000231c: 0e                                        ; table.copy
000231d: 00                                        ; table.copy dst_table
000231e: 00                                        ; table.copy src_table
000231f: 0b                                        ; end
0002313: 0c                                        ; FIXUP func body size
; function body 193
0002320: 00                                        ; func body size (guess)
0002321: 00                                        ; local decl count
0002322: 41                                        ; i32.const
0002323: 01                                        ; i32 literal
0002324: fd                                        ; prefix
0002325: 00                                        ; v128.load
0002326: 04                                        ; alignment
0002327: 03                                        ; load offset
0002328: 1a                                        ; drop
0002329: 0b                                        ; end
0002320: 09                                        ; FIXUP func body size
; function body 194
000232a: 00                                        ; func body size (guess)
000232b: 00                                        ; local decl count
000232c: 41                                        ; i32.const
000232d: 01                                        ; i32 literal
000232e: fd                                        ; prefix
000232f: 02                                        ; v128.const
0002330: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002340: fd                                        ; prefix
0002341: 01                                        ; v128.store
0002342: 04                                        ; alignment
0002343: 03                                        ; store offset
0002344: 0b                                        ; end
000232a: 1a                                        ; FIXUP func body size
; function body 195
0002345: 00                                        ; func body size (guess)
0002346: 00                                        ; local decl count
0002347: fd                                        ; prefix
0002348: 02                                        ; v128.const
0002349: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002359: 1a                                        ; drop
000235a: 0b                                        ; end
0002345: 15                                        ; FIXUP func body size
; function body 196
000235b: 00                                        ; func body size (guess)
000235c: 00                                        ; local decl count
000235d: 41                                        ; i32.const
000235e: 01                                        ; i32 literal
000235f: fd                                        ; prefix
0002360: 04                                        ; i8x16.splat
0002361: 1a                                        ; drop
0002362: 0b                                        ; end
000235b: 07                                        ; FIXUP func body size
; function body 197
0002363: 00                                        ; func body size (guess)
0002364: 00                                        ; local decl count
0002365: fd                                        ; prefix
0002366: 02                                        ; v128.const
0002367: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002377: fd                                        ; prefix
0002378: 05                                        ; i8x16.extract_lane_s
0002379: 0f                                        ; Simd Lane literal
000237a: 1a                                        ; drop
000237b: 0b                                        ; end
0002363: 18                                        ; FIXUP func body size
; function body 198
000237c: 00                                        ; func body size (guess)
000237d: 00                                        ; local decl count
000237e: fd                                        ; prefix
000237f: 02                                        ; v128.const
0002380: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002390: fd                                        ; prefix
0002391: 06                                        ; i8x16.extract_lane_u
0002392: 0f                                        ; Simd Lane literal
0002393: 1a                                        ; drop
0002394: 0b                                        ; end
000237c: 18                                        ; FIXUP func body size
; function body 199
0002395: 00                                        ; func body size (guess)
0002396: 00                                        ; local decl count
0002397: fd                                        ; prefix
0002398: 02                                        ; v128.const
0002399: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023a9: 41                                        ; i32.const
00023aa: 00                                        ; i32 literal
00023ab: fd                                        ; prefix
00023ac: 07                                        ; i8x16.replace_lane
00023ad: 0f                                        ; Simd Lane literal
00023ae: 1a                                        ; drop
00023af: 0b                                        ; end
0002395: 1a                                        ; FIXUP func body size
; function body 200
00023b0: 00                                        ; func body size (guess)
00023b1: 00                                        ; local decl count
00023b2: 41                                        ; i32.const
00023b3: 01                                        ; i32 literal
00023b4: fd                                        ; prefix
00023b5: 08                                        ; i16x8.splat
00023b6: 1a                                        ; drop
00023b7: 0b                                        ; end
00023b0: 07                                        ; FIXUP func body size
; function body 201
00023b8: 00                                        ; func body size (guess)
00023b9: 00                                        ; local decl count
00023ba: fd                                        ; prefix
00023bb: 02                                        ; v128.const
00023bc: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023cc: fd                                        ; prefix
00023cd: 09                                        ; i16x8.extract_lane_s
00023ce: 07                                        ; Simd Lane literal
00023cf: 1a                                        ; drop
00023d0: 0b                                        ; end
00023b8: 18                                        ; FIXUP func body size
; function body 202
00023d1: 00                                        ; func body size (guess)
00023d2: 00                                        ; local decl count
00023d3: fd                                        ; prefix
00023d4: 02                                        ; v128.const
00023d5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023e5: fd                                        ; prefix
00023e6: 0a                                        ; i16x8.extract_lane_u
00023e7: 07                                        ; Simd Lane literal
00023e8: 1a                                        ; drop
00023e9: 0b                                        ; end
00023d1: 18                                        ; FIXUP func body size
; function body 203
00023ea: 00                                        ; func body size (guess)
00023eb: 00                                        ; local decl count
00023ec: fd                                        ; prefix
00023ed: 02                                        ; v128.const
00023ee: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023fe: 41                                        ; i32.const
00023ff: 00                                        ; i32 literal
0002400: fd                                        ; prefix
0002401: 0b                                        ; i16x8.replace_lane
0002402: 07                                        ; Simd Lane literal
0002403: 1a                                        ; drop
0002404: 0b                                        ; end
00023ea: 1a                                        ; FIXUP func body size
; function body 204
0002405: 00                                        ; func body size (guess)
0002406: 00                                        ; local decl count
0002407: 41                                        ; i32.const
0002408: 01                                        ; i32 literal
0002409: fd                                        ; prefix
000240a: 0c                                        ; i32x4.splat
000240b: 1a                                        ; drop
000240c: 0b                                        ; end
0002405: 07                                        ; FIXUP func body size
; function body 205
000240d: 00                                        ; func body size (guess)
000240e: 00                                        ; local decl count
000240f: fd                                        ; prefix
0002410: 02                                        ; v128.const
0002411: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002421: fd                                        ; prefix
0002422: 0d                                        ; i32x4.extract_lane
0002423: 03                                        ; Simd Lane literal
0002424: 1a                                        ; drop
0002425: 0b                                        ; end
000240d: 18                                        ; FIXUP func body size
; function body 206
0002426: 00                                        ; func body size (guess)
0002427: 00                                        ; local decl count
0002428: fd                                        ; prefix
0002429: 02                                        ; v128.const
000242a: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000243a: 41                                        ; i32.const
000243b: 00                                        ; i32 literal
000243c: fd                                        ; prefix
000243d: 0e                                        ; i32x4.replace_lane
000243e: 03                                        ; Simd Lane literal
000243f: 1a                                        ; drop
0002440: 0b                                        ; end
0002426: 1a                                        ; FIXUP func body size
; function body 207
0002441: 00                                        ; func body size (guess)
0002442: 00                                        ; local decl count
0002443: 42                                        ; i64.const
0002444: 01                                        ; i64 literal
0002445: fd                                        ; prefix
0002446: 0f                                        ; i64x2.splat
0002447: 1a                                        ; drop
0002448: 0b                                        ; end
0002441: 07                                        ; FIXUP func body size
; function body 208
0002449: 00                                        ; func body size (guess)
000244a: 00                                        ; local decl count
000244b: fd                                        ; prefix
000244c: 02                                        ; v128.const
000244d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000245d: fd                                        ; prefix
000245e: 10                                        ; i64x2.extract_lane
000245f: 01                                        ; Simd Lane literal
0002460: 1a                                        ; drop
0002461: 0b                                        ; end
0002449: 18                                        ; FIXUP func body size
; function body 209
0002462: 00                                        ; func body size (guess)
0002463: 00                                        ; local decl count
0002464: fd                                        ; prefix
0002465: 02                                        ; v128.const
0002466: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002476: 42                                        ; i64.const
0002477: 00                                        ; i64 literal
0002478: fd                                        ; prefix
0002479: 11                                        ; i64x2.replace_lane
000247a: 01                                        ; Simd Lane literal
000247b: 1a                                        ; drop
000247c: 0b                                        ; end
0002462: 1a                                        ; FIXUP func body size
; function body 210
000247d: 00                                        ; func body size (guess)
000247e: 00                                        ; local decl count
000247f: 43                                        ; f32.const
0002480: 0000 803f                                 ; f32 literal
0002484: fd                                        ; prefix
0002485: 12                                        ; f32x4.splat
0002486: 1a                                        ; drop
0002487: 0b                                        ; end
000247d: 0a                                        ; FIXUP func body size
; function body 211
0002488: 00                                        ; func body size (guess)
0002489: 00                                        ; local decl count
000248a: fd                                        ; prefix
000248b: 02                                        ; v128.const
000248c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000249c: fd                                        ; prefix
000249d: 13                                        ; f32x4.extract_lane
000249e: 03                                        ; Simd Lane literal
000249f: 1a                                        ; drop
00024a0: 0b                                        ; end
0002488: 18                                        ; FIXUP func body size
; function body 212
00024a1: 00                                        ; func body size (guess)
00024a2: 00                                        ; local decl count
00024a3: fd                                        ; prefix
00024a4: 02                                        ; v128.const
00024a5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024b5: 43                                        ; f32.const
00024b6: 0000 0000                                 ; f32 literal
00024ba: fd                                        ; prefix
00024bb: 14                                        ; f32x4.replace_lane
00024bc: 03                                        ; Simd Lane literal
00024bd: 1a                                        ; drop
00024be: 0b                                        ; end
00024a1: 1d                                        ; FIXUP func body size
; function body 213
00024bf: 00                                        ; func body size (guess)
00024c0: 00                                        ; local decl count
00024c1: 44                                        ; f64.const
00024c2: 0000 0000 0000 f03f                       ; f64 literal
00024ca: fd                                        ; prefix
00024cb: 15                                        ; f64x2.splat
00024cc: 1a                                        ; drop
00024cd: 0b                                        ; end
00024bf: 0e                                        ; FIXUP func body size
; function body 214
00024ce: 00                                        ; func body size (guess)
00024cf: 00                                        ; local decl count
00024d0: fd                                        ; prefix
00024d1: 02                                        ; v128.const
00024d2: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024e2: fd                                        ; prefix
00024e3: 16                                        ; f64x2.extract_lane
00024e4: 01                                        ; Simd Lane literal
00024e5: 1a                                        ; drop
00024e6: 0b                                        ; end
00024ce: 18                                        ; FIXUP func body size
; function body 215
00024e7: 00                                        ; func body size (guess)
00024e8: 00                                        ; local decl count
00024e9: fd                                        ; prefix
00024ea: 02                                        ; v128.const
00024eb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024fb: 44                                        ; f64.const
00024fc: 0000 0000 0000 0000                       ; f64 literal
0002504: fd                                        ; prefix
0002505: 17                                        ; f64x2.replace_lane
0002506: 01                                        ; Simd Lane literal
0002507: 1a                                        ; drop
0002508: 0b                                        ; end
00024e7: 21                                        ; FIXUP func body size
; function body 216
0002509: 00                                        ; func body size (guess)
000250a: 00                                        ; local decl count
000250b: fd                                        ; prefix
000250c: 02                                        ; v128.const
000250d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000251d: fd                                        ; prefix
000251e: 02                                        ; v128.const
000251f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000252f: fd                                        ; prefix
0002530: 18                                        ; i8x16.eq
0002531: 1a                                        ; drop
0002532: 0b                                        ; end
0002509: 29                                        ; FIXUP func body size
; function body 217
0002533: 00                                        ; func body size (guess)
0002534: 00                                        ; local decl count
0002535: fd                                        ; prefix
0002536: 02                                        ; v128.const
0002537: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002547: fd                                        ; prefix
0002548: 02                                        ; v128.const
0002549: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002559: fd                                        ; prefix
000255a: 19                                        ; i8x16.ne
000255b: 1a                                        ; drop
000255c: 0b                                        ; end
0002533: 29                                        ; FIXUP func body size
; function body 218
000255d: 00                                        ; func body size (guess)
000255e: 00                                        ; local decl count
000255f: fd                                        ; prefix
0002560: 02                                        ; v128.const
0002561: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002571: fd                                        ; prefix
0002572: 02                                        ; v128.const
0002573: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002583: fd                                        ; prefix
0002584: 1a                                        ; i8x16.lt_s
0002585: 1a                                        ; drop
0002586: 0b                                        ; end
000255d: 29                                        ; FIXUP func body size
; function body 219
0002587: 00                                        ; func body size (guess)
0002588: 00                                        ; local decl count
0002589: fd                                        ; prefix
000258a: 02                                        ; v128.const
000258b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000259b: fd                                        ; prefix
000259c: 02                                        ; v128.const
000259d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025ad: fd                                        ; prefix
00025ae: 1b                                        ; i8x16.lt_u
00025af: 1a                                        ; drop
00025b0: 0b                                        ; end
0002587: 29                                        ; FIXUP func body size
; function body 220
00025b1: 00                                        ; func body size (guess)
00025b2: 00                                        ; local decl count
00025b3: fd                                        ; prefix
00025b4: 02                                        ; v128.const
00025b5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025c5: fd                                        ; prefix
00025c6: 02                                        ; v128.const
00025c7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025d7: fd                                        ; prefix
00025d8: 1c                                        ; i8x16.gt_s
00025d9: 1a                                        ; drop
00025da: 0b                                        ; end
00025b1: 29                                        ; FIXUP func body size
; function body 221
00025db: 00                                        ; func body size (guess)
00025dc: 00                                        ; local decl count
00025dd: fd                                        ; prefix
00025de: 02                                        ; v128.const
00025df: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025ef: fd                                        ; prefix
00025f0: 02                                        ; v128.const
00025f1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002601: fd                                        ; prefix
0002602: 1d                                        ; i8x16.gt_u
0002603: 1a                                        ; drop
0002604: 0b                                        ; end
00025db: 29                                        ; FIXUP func body size
; function body 222
0002605: 00                                        ; func body size (guess)
0002606: 00                                        ; local decl count
0002607: fd                                        ; prefix
0002608: 02                                        ; v128.const
0002609: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002619: fd                                        ; prefix
000261a: 02                                        ; v128.const
000261b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000262b: fd                                        ; prefix
000262c: 1e                                        ; i8x16.le_s
000262d: 1a                                        ; drop
000262e: 0b                                        ; end
0002605: 29                                        ; FIXUP func body size
; function body 223
000262f: 00                                        ; func body size (guess)
0002630: 00                                        ; local decl count
0002631: fd                                        ; prefix
0002632: 02                                        ; v128.const
0002633: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002643: fd                                        ; prefix
0002644: 02                                        ; v128.const
0002645: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002655: fd                                        ; prefix
0002656: 1f                                        ; i8x16.le_u
0002657: 1a                                        ; drop
0002658: 0b                                        ; end
000262f: 29                                        ; FIXUP func body size
; function body 224
0002659: 00                                        ; func body size (guess)
000265a: 00                                        ; local decl count
000265b: fd                                        ; prefix
000265c: 02                                        ; v128.const
000265d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000266d: fd                                        ; prefix
000266e: 02                                        ; v128.const
000266f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000267f: fd                                        ; prefix
0002680: 20                                        ; i8x16.ge_s
0002681: 1a                                        ; drop
0002682: 0b                                        ; end
0002659: 29                                        ; FIXUP func body size
; function body 225
0002683: 00                                        ; func body size (guess)
0002684: 00                                        ; local decl count
0002685: fd                                        ; prefix
0002686: 02                                        ; v128.const
0002687: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002697: fd                                        ; prefix
0002698: 02                                        ; v128.const
0002699: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026a9: fd                                        ; prefix
00026aa: 21                                        ; i8x16.ge_u
00026ab: 1a                                        ; drop
00026ac: 0b                                        ; end
0002683: 29                                        ; FIXUP func body size
; function body 226
00026ad: 00                                        ; func body size (guess)
00026ae: 00                                        ; local decl count
00026af: fd                                        ; prefix
00026b0: 02                                        ; v128.const
00026b1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026c1: fd                                        ; prefix
00026c2: 02                                        ; v128.const
00026c3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026d3: fd                                        ; prefix
00026d4: 22                                        ; i16x8.eq
00026d5: 1a                                        ; drop
00026d6: 0b                                        ; end
00026ad: 29                                        ; FIXUP func body size
; function body 227
00026d7: 00                                        ; func body size (guess)
00026d8: 00                                        ; local decl count
00026d9: fd                                        ; prefix
00026da: 02                                        ; v128.const
00026db: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026eb: fd                                        ; prefix
00026ec: 02                                        ; v128.const
00026ed: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026fd: fd                                        ; prefix
00026fe: 23                                        ; i16x8.ne
00026ff: 1a                                        ; drop
0002700: 0b                                        ; end
00026d7: 29                                        ; FIXUP func body size
; function body 228
0002701: 00                                        ; func body size (guess)
0002702: 00                                        ; local decl count
0002703: fd                                        ; prefix
0002704: 02                                        ; v128.const
0002705: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002715: fd                                        ; prefix
0002716: 02                                        ; v128.const
0002717: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002727: fd                                        ; prefix
0002728: 24                                        ; i16x8.lt_s
0002729: 1a                                        ; drop
000272a: 0b                                        ; end
0002701: 29                                        ; FIXUP func body size
; function body 229
000272b: 00                                        ; func body size (guess)
000272c: 00                                        ; local decl count
000272d: fd                                        ; prefix
000272e: 02                                        ; v128.const
000272f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000273f: fd                                        ; prefix
0002740: 02                                        ; v128.const
0002741: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002751: fd                                        ; prefix
0002752: 25                                        ; i16x8.lt_u
0002753: 1a                                        ; drop
0002754: 0b                                        ; end
000272b: 29                                        ; FIXUP func body size
; function body 230
0002755: 00                                        ; func body size (guess)
0002756: 00                                        ; local decl count
0002757: fd                                        ; prefix
0002758: 02                                        ; v128.const
0002759: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002769: fd                                        ; prefix
000276a: 02                                        ; v128.const
000276b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000277b: fd                                        ; prefix
000277c: 26                                        ; i16x8.gt_s
000277d: 1a                                        ; drop
000277e: 0b                                        ; end
0002755: 29                                        ; FIXUP func body size
; function body 231
000277f: 00                                        ; func body size (guess)
0002780: 00                                        ; local decl count
0002781: fd                                        ; prefix
0002782: 02                                        ; v128.const
0002783: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002793: fd                                        ; prefix
0002794: 02                                        ; v128.const
0002795: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027a5: fd                                        ; prefix
00027a6: 27                                        ; i16x8.gt_u
00027a7: 1a                                        ; drop
00027a8: 0b                                        ; end
000277f: 29                                        ; FIXUP func body size
; function body 232
00027a9: 00                                        ; func body size (guess)
00027aa: 00                                        ; local decl count
00027ab: fd                                        ; prefix
00027ac: 02                                        ; v128.const
00027ad: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027bd: fd                                        ; prefix
00027be: 02                                        ; v128.const
00027bf: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027cf: fd                                        ; prefix
00027d0: 28                                        ; i16x8.le_s
00027d1: 1a                                        ; drop
00027d2: 0b                                        ; end
00027a9: 29                                        ; FIXUP func body size
; function body 233
00027d3: 00                                        ; func body size (guess)
00027d4: 00                                        ; local decl count
00027d5: fd                                        ; prefix
00027d6: 02                                        ; v128.const
00027d7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027e7: fd                                        ; prefix
00027e8: 02                                        ; v128.const
00027e9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027f9: fd                                        ; prefix
00027fa: 29                                        ; i16x8.le_u
00027fb: 1a                                        ; drop
00027fc: 0b                                        ; end
00027d3: 29                                        ; FIXUP func body size
; function body 234
00027fd: 00                                        ; func body size (guess)
00027fe: 00                                        ; local decl count
00027ff: fd                                        ; prefix
0002800: 02                                        ; v128.const
0002801: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002811: fd                                        ; prefix
0002812: 02                                        ; v128.const
0002813: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002823: fd                                        ; prefix
0002824: 2a                                        ; i16x8.ge_s
0002825: 1a                                        ; drop
0002826: 0b                                        ; end
00027fd: 29                                        ; FIXUP func body size
; function body 235
0002827: 00                                        ; func body size (guess)
0002828: 00                                        ; local decl count
0002829: fd                                        ; prefix
000282a: 02                                        ; v128.const
000282b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000283b: fd                                        ; prefix
000283c: 02                                        ; v128.const
000283d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000284d: fd                                        ; prefix
000284e: 2b                                        ; i16x8.ge_u
000284f: 1a                                        ; drop
0002850: 0b                                        ; end
0002827: 29                                        ; FIXUP func body size
; function body 236
0002851: 00                                        ; func body size (guess)
0002852: 00                                        ; local decl count
0002853: fd                                        ; prefix
0002854: 02                                        ; v128.const
0002855: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002865: fd                                        ; prefix
0002866: 02                                        ; v128.const
0002867: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002877: fd                                        ; prefix
0002878: 2c                                        ; i32x4.eq
0002879: 1a                                        ; drop
000287a: 0b                                        ; end
0002851: 29                                        ; FIXUP func body size
; function body 237
000287b: 00                                        ; func body size (guess)
000287c: 00                                        ; local decl count
000287d: fd                                        ; prefix
000287e: 02                                        ; v128.const
000287f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000288f: fd                                        ; prefix
0002890: 02                                        ; v128.const
0002891: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028a1: fd                                        ; prefix
00028a2: 2d                                        ; i32x4.ne
00028a3: 1a                                        ; drop
00028a4: 0b                                        ; end
000287b: 29                                        ; FIXUP func body size
; function body 238
00028a5: 00                                        ; func body size (guess)
00028a6: 00                                        ; local decl count
00028a7: fd                                        ; prefix
00028a8: 02                                        ; v128.const
00028a9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028b9: fd                                        ; prefix
00028ba: 02                                        ; v128.const
00028bb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028cb: fd                                        ; prefix
00028cc: 2e                                        ; i32x4.lt_s
00028cd: 1a                                        ; drop
00028ce: 0b                                        ; end
00028a5: 29                                        ; FIXUP func body size
; function body 239
00028cf: 00                                        ; func body size (guess)
00028d0: 00                                        ; local decl count
00028d1: fd                                        ; prefix
00028d2: 02                                        ; v128.const
00028d3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028e3: fd                                        ; prefix
00028e4: 02                                        ; v128.const
00028e5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028f5: fd                                        ; prefix
00028f6: 2f                                        ; i32x4.lt_u
00028f7: 1a                                        ; drop
00028f8: 0b                                        ; end
00028cf: 29                                        ; FIXUP func body size
; function body 240
00028f9: 00                                        ; func body size (guess)
00028fa: 00                                        ; local decl count
00028fb: fd                                        ; prefix
00028fc: 02                                        ; v128.const
00028fd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000290d: fd                                        ; prefix
000290e: 02                                        ; v128.const
000290f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000291f: fd                                        ; prefix
0002920: 30                                        ; i32x4.gt_s
0002921: 1a                                        ; drop
0002922: 0b                                        ; end
00028f9: 29                                        ; FIXUP func body size
; function body 241
0002923: 00                                        ; func body size (guess)
0002924: 00                                        ; local decl count
0002925: fd                                        ; prefix
0002926: 02                                        ; v128.const
0002927: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002937: fd                                        ; prefix
0002938: 02                                        ; v128.const
0002939: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002949: fd                                        ; prefix
000294a: 31                                        ; i32x4.gt_u
000294b: 1a                                        ; drop
000294c: 0b                                        ; end
0002923: 29                                        ; FIXUP func body size
; function body 242
000294d: 00                                        ; func body size (guess)
000294e: 00                                        ; local decl count
000294f: fd                                        ; prefix
0002950: 02                                        ; v128.const
0002951: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002961: fd                                        ; prefix
0002962: 02                                        ; v128.const
0002963: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002973: fd                                        ; prefix
0002974: 32                                        ; i32x4.le_s
0002975: 1a                                        ; drop
0002976: 0b                                        ; end
000294d: 29                                        ; FIXUP func body size
; function body 243
0002977: 00                                        ; func body size (guess)
0002978: 00                                        ; local decl count
0002979: fd                                        ; prefix
000297a: 02                                        ; v128.const
000297b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000298b: fd                                        ; prefix
000298c: 02                                        ; v128.const
000298d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000299d: fd                                        ; prefix
000299e: 33                                        ; i32x4.le_u
000299f: 1a                                        ; drop
00029a0: 0b                                        ; end
0002977: 29                                        ; FIXUP func body size
; function body 244
00029a1: 00                                        ; func body size (guess)
00029a2: 00                                        ; local decl count
00029a3: fd                                        ; prefix
00029a4: 02                                        ; v128.const
00029a5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029b5: fd                                        ; prefix
00029b6: 02                                        ; v128.const
00029b7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00029c7: fd                                        ; prefix
00029c8: 34                                        ; i32x4.ge_s
00029c9: 1a                                        ; drop
00029ca: 0b                                        ; end
00029a1: 29                                        ; FIXUP func body size
; function body 245
00029cb: 00                                        ; func body size (guess)
00029cc: 00                                        ; local decl count
00029cd: fd                                        ; prefix
00029ce: 02                                        ; v128.const
00029cf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029df: fd                                        ; prefix
00029e0: 02                                        ; v128.const
00029e1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00029f1: fd                                        ; prefix
00029f2: 35                                        ; i32x4.ge_u
00029f3: 1a                                        ; drop
00029f4: 0b                                        ; end
00029cb: 29                                        ; FIXUP func body size
; function body 246
00029f5: 00                                        ; func body size (guess)
00029f6: 00                                        ; local decl count
00029f7: fd                                        ; prefix
00029f8: 02                                        ; v128.const
00029f9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a09: fd                                        ; prefix
0002a0a: 02                                        ; v128.const
0002a0b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a1b: fd                                        ; prefix
0002a1c: 40                                        ; f32x4.eq
0002a1d: 1a                                        ; drop
0002a1e: 0b                                        ; end
00029f5: 29                                        ; FIXUP func body size
; function body 247
0002a1f: 00                                        ; func body size (guess)
0002a20: 00                                        ; local decl count
0002a21: fd                                        ; prefix
0002a22: 02                                        ; v128.const
0002a23: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a33: fd                                        ; prefix
0002a34: 02                                        ; v128.const
0002a35: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a45: fd                                        ; prefix
0002a46: 41                                        ; f32x4.ne
0002a47: 1a                                        ; drop
0002a48: 0b                                        ; end
0002a1f: 29                                        ; FIXUP func body size
; function body 248
0002a49: 00                                        ; func body size (guess)
0002a4a: 00                                        ; local decl count
0002a4b: fd                                        ; prefix
0002a4c: 02                                        ; v128.const
0002a4d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a5d: fd                                        ; prefix
0002a5e: 02                                        ; v128.const
0002a5f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a6f: fd                                        ; prefix
0002a70: 42                                        ; f32x4.lt
0002a71: 1a                                        ; drop
0002a72: 0b                                        ; end
0002a49: 29                                        ; FIXUP func body size
; function body 249
0002a73: 00                                        ; func body size (guess)
0002a74: 00                                        ; local decl count
0002a75: fd                                        ; prefix
0002a76: 02                                        ; v128.const
0002a77: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a87: fd                                        ; prefix
0002a88: 02                                        ; v128.const
0002a89: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a99: fd                                        ; prefix
0002a9a: 43                                        ; f32x4.gt
0002a9b: 1a                                        ; drop
0002a9c: 0b                                        ; end
0002a73: 29                                        ; FIXUP func body size
; function body 250
0002a9d: 00                                        ; func body size (guess)
0002a9e: 00                                        ; local decl count
0002a9f: fd                                        ; prefix
0002aa0: 02                                        ; v128.const
0002aa1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ab1: fd                                        ; prefix
0002ab2: 02                                        ; v128.const
0002ab3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ac3: fd                                        ; prefix
0002ac4: 44                                        ; f32x4.le
0002ac5: 1a                                        ; drop
0002ac6: 0b                                        ; end
0002a9d: 29                                        ; FIXUP func body size
; function body 251
0002ac7: 00                                        ; func body size (guess)
0002ac8: 00                                        ; local decl count
0002ac9: fd                                        ; prefix
0002aca: 02                                        ; v128.const
0002acb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002adb: fd                                        ; prefix
0002adc: 02                                        ; v128.const
0002add: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002aed: fd                                        ; prefix
0002aee: 45                                        ; f32x4.ge
0002aef: 1a                                        ; drop
0002af0: 0b                                        ; end
0002ac7: 29                                        ; FIXUP func body size
; function body 252
0002af1: 00                                        ; func body size (guess)
0002af2: 00                                        ; local decl count
0002af3: fd                                        ; prefix
0002af4: 02                                        ; v128.const
0002af5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b05: fd                                        ; prefix
0002b06: 02                                        ; v128.const
0002b07: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b17: fd                                        ; prefix
0002b18: 46                                        ; f64x2.eq
0002b19: 1a                                        ; drop
0002b1a: 0b                                        ; end
0002af1: 29                                        ; FIXUP func body size
; function body 253
0002b1b: 00                                        ; func body size (guess)
0002b1c: 00                                        ; local decl count
0002b1d: fd                                        ; prefix
0002b1e: 02                                        ; v128.const
0002b1f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b2f: fd                                        ; prefix
0002b30: 02                                        ; v128.const
0002b31: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b41: fd                                        ; prefix
0002b42: 47                                        ; f64x2.ne
0002b43: 1a                                        ; drop
0002b44: 0b                                        ; end
0002b1b: 29                                        ; FIXUP func body size
; function body 254
0002b45: 00                                        ; func body size (guess)
0002b46: 00                                        ; local decl count
0002b47: fd                                        ; prefix
0002b48: 02                                        ; v128.const
0002b49: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b59: fd                                        ; prefix
0002b5a: 02                                        ; v128.const
0002b5b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b6b: fd                                        ; prefix
0002b6c: 48                                        ; f64x2.lt
0002b6d: 1a                                        ; drop
0002b6e: 0b                                        ; end
0002b45: 29                                        ; FIXUP func body size
; function body 255
0002b6f: 00                                        ; func body size (guess)
0002b70: 00                                        ; local decl count
0002b71: fd                                        ; prefix
0002b72: 02                                        ; v128.const
0002b73: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b83: fd                                        ; prefix
0002b84: 02                                        ; v128.const
0002b85: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b95: fd                                        ; prefix
0002b96: 49                                        ; f64x2.gt
0002b97: 1a                                        ; drop
0002b98: 0b                                        ; end
0002b6f: 29                                        ; FIXUP func body size
; function body 256
0002b99: 00                                        ; func body size (guess)
0002b9a: 00                                        ; local decl count
0002b9b: fd                                        ; prefix
0002b9c: 02                                        ; v128.const
0002b9d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002bad: fd                                        ; prefix
0002bae: 02                                        ; v128.const
0002baf: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002bbf: fd                                        ; prefix
0002bc0: 4a                                        ; f64x2.le
0002bc1: 1a                                        ; drop
0002bc2: 0b                                        ; end
0002b99: 29                                        ; FIXUP func body size
; function body 257
0002bc3: 00                                        ; func body size (guess)
0002bc4: 00                                        ; local decl count
0002bc5: fd                                        ; prefix
0002bc6: 02                                        ; v128.const
0002bc7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002bd7: fd                                        ; prefix
0002bd8: 02                                        ; v128.const
0002bd9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002be9: fd                                        ; prefix
0002bea: 4b                                        ; f64x2.ge
0002beb: 1a                                        ; drop
0002bec: 0b                                        ; end
0002bc3: 29                                        ; FIXUP func body size
; function body 258
0002bed: 00                                        ; func body size (guess)
0002bee: 00                                        ; local decl count
0002bef: fd                                        ; prefix
0002bf0: 02                                        ; v128.const
0002bf1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c01: fd                                        ; prefix
0002c02: 4c                                        ; v128.not
0002c03: 1a                                        ; drop
0002c04: 0b                                        ; end
0002bed: 17                                        ; FIXUP func body size
; function body 259
0002c05: 00                                        ; func body size (guess)
0002c06: 00                                        ; local decl count
0002c07: fd                                        ; prefix
0002c08: 02                                        ; v128.const
0002c09: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c19: fd                                        ; prefix
0002c1a: 02                                        ; v128.const
0002c1b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c2b: fd                                        ; prefix
0002c2c: 4d                                        ; v128.and
0002c2d: 1a                                        ; drop
0002c2e: 0b                                        ; end
0002c05: 29                                        ; FIXUP func body size
; function body 260
0002c2f: 00                                        ; func body size (guess)
0002c30: 00                                        ; local decl count
0002c31: fd                                        ; prefix
0002c32: 02                                        ; v128.const
0002c33: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c43: fd                                        ; prefix
0002c44: 02                                        ; v128.const
0002c45: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c55: fd                                        ; prefix
0002c56: 4e                                        ; v128.or
0002c57: 1a                                        ; drop
0002c58: 0b                                        ; end
0002c2f: 29                                        ; FIXUP func body size
; function body 261
0002c59: 00                                        ; func body size (guess)
0002c5a: 00                                        ; local decl count
0002c5b: fd                                        ; prefix
0002c5c: 02                                        ; v128.const
0002c5d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c6d: fd                                        ; prefix
0002c6e: 02                                        ; v128.const
0002c6f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c7f: fd                                        ; prefix
0002c80: 4f                                        ; v128.xor
0002c81: 1a                                        ; drop
0002c82: 0b                                        ; end
0002c59: 29                                        ; FIXUP func body size
; function body 262
0002c83: 00                                        ; func body size (guess)
0002c84: 00                                        ; local decl count
0002c85: fd                                        ; prefix
0002c86: 02                                        ; v128.const
0002c87: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c97: fd                                        ; prefix
0002c98: 02                                        ; v128.const
0002c99: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ca9: fd                                        ; prefix
0002caa: 02                                        ; v128.const
0002cab: 0300 0000 0300 0000 0300 0000 0300 0000   ; v128 literal
0002cbb: fd                                        ; prefix
0002cbc: 50                                        ; v128.bitselect
0002cbd: 1a                                        ; drop
0002cbe: 0b                                        ; end
0002c83: 3b                                        ; FIXUP func body size
; function body 263
0002cbf: 00                                        ; func body size (guess)
0002cc0: 00                                        ; local decl count
0002cc1: fd                                        ; prefix
0002cc2: 02                                        ; v128.const
0002cc3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cd3: fd                                        ; prefix
0002cd4: 51                                        ; i8x16.neg
0002cd5: 1a                                        ; drop
0002cd6: 0b                                        ; end
0002cbf: 17                                        ; FIXUP func body size
; function body 264
0002cd7: 00                                        ; func body size (guess)
0002cd8: 00                                        ; local decl count
0002cd9: fd                                        ; prefix
0002cda: 02                                        ; v128.const
0002cdb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ceb: fd                                        ; prefix
0002cec: 52                                        ; i8x16.any_true
0002ced: 1a                                        ; drop
0002cee: 0b                                        ; end
0002cd7: 17                                        ; FIXUP func body size
; function body 265
0002cef: 00                                        ; func body size (guess)
0002cf0: 00                                        ; local decl count
0002cf1: fd                                        ; prefix
0002cf2: 02                                        ; v128.const
0002cf3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d03: fd                                        ; prefix
0002d04: 53                                        ; i8x16.all_true
0002d05: 1a                                        ; drop
0002d06: 0b                                        ; end
0002cef: 17                                        ; FIXUP func body size
; function body 266
0002d07: 00                                        ; func body size (guess)
0002d08: 00                                        ; local decl count
0002d09: fd                                        ; prefix
0002d0a: 02                                        ; v128.const
0002d0b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d1b: 41                                        ; i32.const
0002d1c: 00                                        ; i32 literal
0002d1d: fd                                        ; prefix
0002d1e: 54                                        ; i8x16.shl
0002d1f: 1a                                        ; drop
0002d20: 0b                                        ; end
0002d07: 19                                        ; FIXUP func body size
; function body 267
0002d21: 00                                        ; func body size (guess)
0002d22: 00                                        ; local decl count
0002d23: fd                                        ; prefix
0002d24: 02                                        ; v128.const
0002d25: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d35: 41                                        ; i32.const
0002d36: 00                                        ; i32 literal
0002d37: fd                                        ; prefix
0002d38: 55                                        ; i8x16.shr_s
0002d39: 1a                                        ; drop
0002d3a: 0b                                        ; end
0002d21: 19                                        ; FIXUP func body size
; function body 268
0002d3b: 00                                        ; func body size (guess)
0002d3c: 00                                        ; local decl count
0002d3d: fd                                        ; prefix
0002d3e: 02                                        ; v128.const
0002d3f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d4f: 41                                        ; i32.const
0002d50: 00                                        ; i32 literal
0002d51: fd                                        ; prefix
0002d52: 56                                        ; i8x16.shr_u
0002d53: 1a                                        ; drop
0002d54: 0b                                        ; end
0002d3b: 19                                        ; FIXUP func body size
; function body 269
0002d55: 00                                        ; func body size (guess)
0002d56: 00                                        ; local decl count
0002d57: fd                                        ; prefix
0002d58: 02                                        ; v128.const
0002d59: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d69: fd                                        ; prefix
0002d6a: 02                                        ; v128.const
0002d6b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d7b: fd                                        ; prefix
0002d7c: 57                                        ; i8x16.add
0002d7d: 1a                                        ; drop
0002d7e: 0b                                        ; end
0002d55: 29                                        ; FIXUP func body size
; function body 270
0002d7f: 00                                        ; func body size (guess)
0002d80: 00                                        ; local decl count
0002d81: fd                                        ; prefix
0002d82: 02                                        ; v128.const
0002d83: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d93: fd                                        ; prefix
0002d94: 02                                        ; v128.const
0002d95: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002da5: fd                                        ; prefix
0002da6: 58                                        ; i8x16.add_saturate_s
0002da7: 1a                                        ; drop
0002da8: 0b                                        ; end
0002d7f: 29                                        ; FIXUP func body size
; function body 271
0002da9: 00                                        ; func body size (guess)
0002daa: 00                                        ; local decl count
0002dab: fd                                        ; prefix
0002dac: 02                                        ; v128.const
0002dad: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002dbd: fd                                        ; prefix
0002dbe: 02                                        ; v128.const
0002dbf: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002dcf: fd                                        ; prefix
0002dd0: 59                                        ; i8x16.add_saturate_u
0002dd1: 1a                                        ; drop
0002dd2: 0b                                        ; end
0002da9: 29                                        ; FIXUP func body size
; function body 272
0002dd3: 00                                        ; func body size (guess)
0002dd4: 00                                        ; local decl count
0002dd5: fd                                        ; prefix
0002dd6: 02                                        ; v128.const
0002dd7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002de7: fd                                        ; prefix
0002de8: 02                                        ; v128.const
0002de9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002df9: fd                                        ; prefix
0002dfa: 5a                                        ; i8x16.sub
0002dfb: 1a                                        ; drop
0002dfc: 0b                                        ; end
0002dd3: 29                                        ; FIXUP func body size
; function body 273
0002dfd: 00                                        ; func body size (guess)
0002dfe: 00                                        ; local decl count
0002dff: fd                                        ; prefix
0002e00: 02                                        ; v128.const
0002e01: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e11: fd                                        ; prefix
0002e12: 02                                        ; v128.const
0002e13: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e23: fd                                        ; prefix
0002e24: 5b                                        ; i8x16.sub_saturate_s
0002e25: 1a                                        ; drop
0002e26: 0b                                        ; end
0002dfd: 29                                        ; FIXUP func body size
; function body 274
0002e27: 00                                        ; func body size (guess)
0002e28: 00                                        ; local decl count
0002e29: fd                                        ; prefix
0002e2a: 02                                        ; v128.const
0002e2b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e3b: fd                                        ; prefix
0002e3c: 02                                        ; v128.const
0002e3d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e4d: fd                                        ; prefix
0002e4e: 5c                                        ; i8x16.sub_saturate_u
0002e4f: 1a                                        ; drop
0002e50: 0b                                        ; end
0002e27: 29                                        ; FIXUP func body size
; function body 275
0002e51: 00                                        ; func body size (guess)
0002e52: 00                                        ; local decl count
0002e53: fd                                        ; prefix
0002e54: 02                                        ; v128.const
0002e55: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e65: fd                                        ; prefix
0002e66: 02                                        ; v128.const
0002e67: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e77: fd                                        ; prefix
0002e78: 5d                                        ; i8x16.mul
0002e79: 1a                                        ; drop
0002e7a: 0b                                        ; end
0002e51: 29                                        ; FIXUP func body size
; function body 276
0002e7b: 00                                        ; func body size (guess)
0002e7c: 00                                        ; local decl count
0002e7d: fd                                        ; prefix
0002e7e: 02                                        ; v128.const
0002e7f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e8f: fd                                        ; prefix
0002e90: 62                                        ; i16x8.neg
0002e91: 1a                                        ; drop
0002e92: 0b                                        ; end
0002e7b: 17                                        ; FIXUP func body size
; function body 277
0002e93: 00                                        ; func body size (guess)
0002e94: 00                                        ; local decl count
0002e95: fd                                        ; prefix
0002e96: 02                                        ; v128.const
0002e97: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ea7: fd                                        ; prefix
0002ea8: 63                                        ; i16x8.any_true
0002ea9: 1a                                        ; drop
0002eaa: 0b                                        ; end
0002e93: 17                                        ; FIXUP func body size
; function body 278
0002eab: 00                                        ; func body size (guess)
0002eac: 00                                        ; local decl count
0002ead: fd                                        ; prefix
0002eae: 02                                        ; v128.const
0002eaf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ebf: fd                                        ; prefix
0002ec0: 64                                        ; i16x8.all_true
0002ec1: 1a                                        ; drop
0002ec2: 0b                                        ; end
0002eab: 17                                        ; FIXUP func body size
; function body 279
0002ec3: 00                                        ; func body size (guess)
0002ec4: 00                                        ; local decl count
0002ec5: fd                                        ; prefix
0002ec6: 02                                        ; v128.const
0002ec7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ed7: 41                                        ; i32.const
0002ed8: 00                                        ; i32 literal
0002ed9: fd                                        ; prefix
0002eda: 65                                        ; i16x8.shl
0002edb: 1a                                        ; drop
0002edc: 0b                                        ; end
0002ec3: 19                                        ; FIXUP func body size
; function body 280
0002edd: 00                                        ; func body size (guess)
0002ede: 00                                        ; local decl count
0002edf: fd                                        ; prefix
0002ee0: 02                                        ; v128.const
0002ee1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ef1: 41                                        ; i32.const
0002ef2: 00                                        ; i32 literal
0002ef3: fd                                        ; prefix
0002ef4: 66                                        ; i16x8.shr_s
0002ef5: 1a                                        ; drop
0002ef6: 0b                                        ; end
0002edd: 19                                        ; FIXUP func body size
; function body 281
0002ef7: 00                                        ; func body size (guess)
0002ef8: 00                                        ; local decl count
0002ef9: fd                                        ; prefix
0002efa: 02                                        ; v128.const
0002efb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f0b: 41                                        ; i32.const
0002f0c: 00                                        ; i32 literal
0002f0d: fd                                        ; prefix
0002f0e: 67                                        ; i16x8.shr_u
0002f0f: 1a                                        ; drop
0002f10: 0b                                        ; end
0002ef7: 19                                        ; FIXUP func body size
; function body 282
0002f11: 00                                        ; func body size (guess)
0002f12: 00                                        ; local decl count
0002f13: fd                                        ; prefix
0002f14: 02                                        ; v128.const
0002f15: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f25: fd                                        ; prefix
0002f26: 02                                        ; v128.const
0002f27: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f37: fd                                        ; prefix
0002f38: 68                                        ; i16x8.add
0002f39: 1a                                        ; drop
0002f3a: 0b                                        ; end
0002f11: 29                                        ; FIXUP func body size
; function body 283
0002f3b: 00                                        ; func body size (guess)
0002f3c: 00                                        ; local decl count
0002f3d: fd                                        ; prefix
0002f3e: 02                                        ; v128.const
0002f3f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f4f: fd                                        ; prefix
0002f50: 02                                        ; v128.const
0002f51: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f61: fd                                        ; prefix
0002f62: 69                                        ; i16x8.add_saturate_s
0002f63: 1a                                        ; drop
0002f64: 0b                                        ; end
0002f3b: 29                                        ; FIXUP func body size
; function body 284
0002f65: 00                                        ; func body size (guess)
0002f66: 00                                        ; local decl count
0002f67: fd                                        ; prefix
0002f68: 02                                        ; v128.const
0002f69: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f79: fd                                        ; prefix
0002f7a: 02                                        ; v128.const
0002f7b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f8b: fd                                        ; prefix
0002f8c: 6a                                        ; i16x8.add_saturate_u
0002f8d: 1a                                        ; drop
0002f8e: 0b                                        ; end
0002f65: 29                                        ; FIXUP func body size
; function body 285
0002f8f: 00                                        ; func body size (guess)
0002f90: 00                                        ; local decl count
0002f91: fd                                        ; prefix
0002f92: 02                                        ; v128.const
0002f93: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fa3: fd                                        ; prefix
0002fa4: 02                                        ; v128.const
0002fa5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002fb5: fd                                        ; prefix
0002fb6: 6b                                        ; i16x8.sub
0002fb7: 1a                                        ; drop
0002fb8: 0b                                        ; end
0002f8f: 29                                        ; FIXUP func body size
; function body 286
0002fb9: 00                                        ; func body size (guess)
0002fba: 00                                        ; local decl count
0002fbb: fd                                        ; prefix
0002fbc: 02                                        ; v128.const
0002fbd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fcd: fd                                        ; prefix
0002fce: 02                                        ; v128.const
0002fcf: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002fdf: fd                                        ; prefix
0002fe0: 6c                                        ; i16x8.sub_saturate_s
0002fe1: 1a                                        ; drop
0002fe2: 0b                                        ; end
0002fb9: 29                                        ; FIXUP func body size
; function body 287
0002fe3: 00                                        ; func body size (guess)
0002fe4: 00                                        ; local decl count
0002fe5: fd                                        ; prefix
0002fe6: 02                                        ; v128.const
0002fe7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ff7: fd                                        ; prefix
0002ff8: 02                                        ; v128.const
0002ff9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003009: fd                                        ; prefix
000300a: 6d                                        ; i16x8.sub_saturate_u
000300b: 1a                                        ; drop
000300c: 0b                                        ; end
0002fe3: 29                                        ; FIXUP func body size
; function body 288
000300d: 00                                        ; func body size (guess)
000300e: 00                                        ; local decl count
000300f: fd                                        ; prefix
0003010: 02                                        ; v128.const
0003011: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003021: fd                                        ; prefix
0003022: 02                                        ; v128.const
0003023: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003033: fd                                        ; prefix
0003034: 6e                                        ; i16x8.mul
0003035: 1a                                        ; drop
0003036: 0b                                        ; end
000300d: 29                                        ; FIXUP func body size
; function body 289
0003037: 00                                        ; func body size (guess)
0003038: 00                                        ; local decl count
0003039: fd                                        ; prefix
000303a: 02                                        ; v128.const
000303b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000304b: fd                                        ; prefix
000304c: 73                                        ; i32x4.neg
000304d: 1a                                        ; drop
000304e: 0b                                        ; end
0003037: 17                                        ; FIXUP func body size
; function body 290
000304f: 00                                        ; func body size (guess)
0003050: 00                                        ; local decl count
0003051: fd                                        ; prefix
0003052: 02                                        ; v128.const
0003053: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003063: fd                                        ; prefix
0003064: 74                                        ; i32x4.any_true
0003065: 1a                                        ; drop
0003066: 0b                                        ; end
000304f: 17                                        ; FIXUP func body size
; function body 291
0003067: 00                                        ; func body size (guess)
0003068: 00                                        ; local decl count
0003069: fd                                        ; prefix
000306a: 02                                        ; v128.const
000306b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000307b: fd                                        ; prefix
000307c: 75                                        ; i32x4.all_true
000307d: 1a                                        ; drop
000307e: 0b                                        ; end
0003067: 17                                        ; FIXUP func body size
; function body 292
000307f: 00                                        ; func body size (guess)
0003080: 00                                        ; local decl count
0003081: fd                                        ; prefix
0003082: 02                                        ; v128.const
0003083: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003093: 41                                        ; i32.const
0003094: 00                                        ; i32 literal
0003095: fd                                        ; prefix
0003096: 76                                        ; i32x4.shl
0003097: 1a                                        ; drop
0003098: 0b                                        ; end
000307f: 19                                        ; FIXUP func body size
; function body 293
0003099: 00                                        ; func body size (guess)
000309a: 00                                        ; local decl count
000309b: fd                                        ; prefix
000309c: 02                                        ; v128.const
000309d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030ad: 41                                        ; i32.const
00030ae: 00                                        ; i32 literal
00030af: fd                                        ; prefix
00030b0: 77                                        ; i32x4.shr_s
00030b1: 1a                                        ; drop
00030b2: 0b                                        ; end
0003099: 19                                        ; FIXUP func body size
; function body 294
00030b3: 00                                        ; func body size (guess)
00030b4: 00                                        ; local decl count
00030b5: fd                                        ; prefix
00030b6: 02                                        ; v128.const
00030b7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030c7: 41                                        ; i32.const
00030c8: 00                                        ; i32 literal
00030c9: fd                                        ; prefix
00030ca: 78                                        ; i32x4.shr_u
00030cb: 1a                                        ; drop
00030cc: 0b                                        ; end
00030b3: 19                                        ; FIXUP func body size
; function body 295
00030cd: 00                                        ; func body size (guess)
00030ce: 00                                        ; local decl count
00030cf: fd                                        ; prefix
00030d0: 02                                        ; v128.const
00030d1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030e1: fd                                        ; prefix
00030e2: 02                                        ; v128.const
00030e3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00030f3: fd                                        ; prefix
00030f4: 79                                        ; i32x4.add
00030f5: 1a                                        ; drop
00030f6: 0b                                        ; end
00030cd: 29                                        ; FIXUP func body size
; function body 296
00030f7: 00                                        ; func body size (guess)
00030f8: 00                                        ; local decl count
00030f9: fd                                        ; prefix
00030fa: 02                                        ; v128.const
00030fb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000310b: fd                                        ; prefix
000310c: 02                                        ; v128.const
000310d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000311d: fd                                        ; prefix
000311e: 7c                                        ; i32x4.sub
000311f: 1a                                        ; drop
0003120: 0b                                        ; end
00030f7: 29                                        ; FIXUP func body size
; function body 297
0003121: 00                                        ; func body size (guess)
0003122: 00                                        ; local decl count
0003123: fd                                        ; prefix
0003124: 02                                        ; v128.const
0003125: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003135: fd                                        ; prefix
0003136: 02                                        ; v128.const
0003137: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003147: fd                                        ; prefix
0003148: 7f                                        ; i32x4.mul
0003149: 1a                                        ; drop
000314a: 0b                                        ; end
0003121: 29                                        ; FIXUP func body size
; function body 298
000314b: 00                                        ; func body size (guess)
000314c: 00                                        ; local decl count
000314d: fd                                        ; prefix
000314e: 02                                        ; v128.const
000314f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000315f: fd                                        ; prefix
0003160: 8401                                      ; i64x2.neg
0003162: 1a                                        ; drop
0003163: 0b                                        ; end
000314b: 18                                        ; FIXUP func body size
; function body 299
0003164: 00                                        ; func body size (guess)
0003165: 00                                        ; local decl count
0003166: fd                                        ; prefix
0003167: 02                                        ; v128.const
0003168: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003178: fd                                        ; prefix
0003179: 8501                                      ; i64x2.any_true
000317b: 1a                                        ; drop
000317c: 0b                                        ; end
0003164: 18                                        ; FIXUP func body size
; function body 300
000317d: 00                                        ; func body size (guess)
000317e: 00                                        ; local decl count
000317f: fd                                        ; prefix
0003180: 02                                        ; v128.const
0003181: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003191: fd                                        ; prefix
0003192: 8601                                      ; i64x2.all_true
0003194: 1a                                        ; drop
0003195: 0b                                        ; end
000317d: 18                                        ; FIXUP func body size
; function body 301
0003196: 00                                        ; func body size (guess)
0003197: 00                                        ; local decl count
0003198: fd                                        ; prefix
0003199: 02                                        ; v128.const
000319a: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031aa: 41                                        ; i32.const
00031ab: 00                                        ; i32 literal
00031ac: fd                                        ; prefix
00031ad: 8701                                      ; i64x2.shl
00031af: 1a                                        ; drop
00031b0: 0b                                        ; end
0003196: 1a                                        ; FIXUP func body size
; function body 302
00031b1: 00                                        ; func body size (guess)
00031b2: 00                                        ; local decl count
00031b3: fd                                        ; prefix
00031b4: 02                                        ; v128.const
00031b5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031c5: 41                                        ; i32.const
00031c6: 00                                        ; i32 literal
00031c7: fd                                        ; prefix
00031c8: 8801                                      ; i64x2.shr_s
00031ca: 1a                                        ; drop
00031cb: 0b                                        ; end
00031b1: 1a                                        ; FIXUP func body size
; function body 303
00031cc: 00                                        ; func body size (guess)
00031cd: 00                                        ; local decl count
00031ce: fd                                        ; prefix
00031cf: 02                                        ; v128.const
00031d0: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031e0: 41                                        ; i32.const
00031e1: 00                                        ; i32 literal
00031e2: fd                                        ; prefix
00031e3: 8901                                      ; i64x2.shr_u
00031e5: 1a                                        ; drop
00031e6: 0b                                        ; end
00031cc: 1a                                        ; FIXUP func body size
; function body 304
00031e7: 00                                        ; func body size (guess)
00031e8: 00                                        ; local decl count
00031e9: fd                                        ; prefix
00031ea: 02                                        ; v128.const
00031eb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031fb: fd                                        ; prefix
00031fc: 02                                        ; v128.const
00031fd: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000320d: fd                                        ; prefix
000320e: 8a01                                      ; i64x2.add
0003210: 1a                                        ; drop
0003211: 0b                                        ; end
00031e7: 2a                                        ; FIXUP func body size
; function body 305
0003212: 00                                        ; func body size (guess)
0003213: 00                                        ; local decl count
0003214: fd                                        ; prefix
0003215: 02                                        ; v128.const
0003216: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003226: fd                                        ; prefix
0003227: 02                                        ; v128.const
0003228: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003238: fd                                        ; prefix
0003239: 8d01                                      ; i64x2.sub
000323b: 1a                                        ; drop
000323c: 0b                                        ; end
0003212: 2a                                        ; FIXUP func body size
; function body 306
000323d: 00                                        ; func body size (guess)
000323e: 00                                        ; local decl count
000323f: fd                                        ; prefix
0003240: 02                                        ; v128.const
0003241: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003251: fd                                        ; prefix
0003252: 9501                                      ; f32x4.abs
0003254: 1a                                        ; drop
0003255: 0b                                        ; end
000323d: 18                                        ; FIXUP func body size
; function body 307
0003256: 00                                        ; func body size (guess)
0003257: 00                                        ; local decl count
0003258: fd                                        ; prefix
0003259: 02                                        ; v128.const
000325a: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000326a: fd                                        ; prefix
000326b: 9601                                      ; f32x4.neg
000326d: 1a                                        ; drop
000326e: 0b                                        ; end
0003256: 18                                        ; FIXUP func body size
; function body 308
000326f: 00                                        ; func body size (guess)
0003270: 00                                        ; local decl count
0003271: fd                                        ; prefix
0003272: 02                                        ; v128.const
0003273: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003283: fd                                        ; prefix
0003284: 9701                                      ; f32x4.sqrt
0003286: 1a                                        ; drop
0003287: 0b                                        ; end
000326f: 18                                        ; FIXUP func body size
; function body 309
0003288: 00                                        ; func body size (guess)
0003289: 00                                        ; local decl count
000328a: fd                                        ; prefix
000328b: 02                                        ; v128.const
000328c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000329c: fd                                        ; prefix
000329d: 02                                        ; v128.const
000329e: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00032ae: fd                                        ; prefix
00032af: 9a01                                      ; f32x4.add
00032b1: 1a                                        ; drop
00032b2: 0b                                        ; end
0003288: 2a                                        ; FIXUP func body size
; function body 310
00032b3: 00                                        ; func body size (guess)
00032b4: 00                                        ; local decl count
00032b5: fd                                        ; prefix
00032b6: 02                                        ; v128.const
00032b7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032c7: fd                                        ; prefix
00032c8: 02                                        ; v128.const
00032c9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00032d9: fd                                        ; prefix
00032da: 9b01                                      ; f32x4.sub
00032dc: 1a                                        ; drop
00032dd: 0b                                        ; end
00032b3: 2a                                        ; FIXUP func body size
; function body 311
00032de: 00                                        ; func body size (guess)
00032df: 00                                        ; local decl count
00032e0: fd                                        ; prefix
00032e1: 02                                        ; v128.const
00032e2: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032f2: fd                                        ; prefix
00032f3: 02                                        ; v128.const
00032f4: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003304: fd                                        ; prefix
0003305: 9c01                                      ; f32x4.mul
0003307: 1a                                        ; drop
0003308: 0b                                        ; end
00032de: 2a                                        ; FIXUP func body size
; function body 312
0003309: 00                                        ; func body size (guess)
000330a: 00                                        ; local decl count
000330b: fd                                        ; prefix
000330c: 02                                        ; v128.const
000330d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000331d: fd                                        ; prefix
000331e: 02                                        ; v128.const
000331f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000332f: fd                                        ; prefix
0003330: 9d01                                      ; f32x4.div
0003332: 1a                                        ; drop
0003333: 0b                                        ; end
0003309: 2a                                        ; FIXUP func body size
; function body 313
0003334: 00                                        ; func body size (guess)
0003335: 00                                        ; local decl count
0003336: fd                                        ; prefix
0003337: 02                                        ; v128.const
0003338: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003348: fd                                        ; prefix
0003349: 02                                        ; v128.const
000334a: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000335a: fd                                        ; prefix
000335b: 9e01                                      ; f32x4.min
000335d: 1a                                        ; drop
000335e: 0b                                        ; end
0003334: 2a                                        ; FIXUP func body size
; function body 314
000335f: 00                                        ; func body size (guess)
0003360: 00                                        ; local decl count
0003361: fd                                        ; prefix
0003362: 02                                        ; v128.const
0003363: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003373: fd                                        ; prefix
0003374: 02                                        ; v128.const
0003375: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003385: fd                                        ; prefix
0003386: 9f01                                      ; f32x4.max
0003388: 1a                                        ; drop
0003389: 0b                                        ; end
000335f: 2a                                        ; FIXUP func body size
; function body 315
000338a: 00                                        ; func body size (guess)
000338b: 00                                        ; local decl count
000338c: fd                                        ; prefix
000338d: 02                                        ; v128.const
000338e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000339e: fd                                        ; prefix
000339f: a001                                      ; f64x2.abs
00033a1: 1a                                        ; drop
00033a2: 0b                                        ; end
000338a: 18                                        ; FIXUP func body size
; function body 316
00033a3: 00                                        ; func body size (guess)
00033a4: 00                                        ; local decl count
00033a5: fd                                        ; prefix
00033a6: 02                                        ; v128.const
00033a7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033b7: fd                                        ; prefix
00033b8: a101                                      ; f64x2.neg
00033ba: 1a                                        ; drop
00033bb: 0b                                        ; end
00033a3: 18                                        ; FIXUP func body size
; function body 317
00033bc: 00                                        ; func body size (guess)
00033bd: 00                                        ; local decl count
00033be: fd                                        ; prefix
00033bf: 02                                        ; v128.const
00033c0: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033d0: fd                                        ; prefix
00033d1: a201                                      ; f64x2.sqrt
00033d3: 1a                                        ; drop
00033d4: 0b                                        ; end
00033bc: 18                                        ; FIXUP func body size
; function body 318
00033d5: 00                                        ; func body size (guess)
00033d6: 00                                        ; local decl count
00033d7: fd                                        ; prefix
00033d8: 02                                        ; v128.const
00033d9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033e9: fd                                        ; prefix
00033ea: 02                                        ; v128.const
00033eb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00033fb: fd                                        ; prefix
00033fc: a501                                      ; f64x2.add
00033fe: 1a                                        ; drop
00033ff: 0b                                        ; end
00033d5: 2a                                        ; FIXUP func body size
; function body 319
0003400: 00                                        ; func body size (guess)
0003401: 00                                        ; local decl count
0003402: fd                                        ; prefix
0003403: 02                                        ; v128.const
0003404: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003414: fd                                        ; prefix
0003415: 02                                        ; v128.const
0003416: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003426: fd                                        ; prefix
0003427: a601                                      ; f64x2.sub
0003429: 1a                                        ; drop
000342a: 0b                                        ; end
0003400: 2a                                        ; FIXUP func body size
; function body 320
000342b: 00                                        ; func body size (guess)
000342c: 00                                        ; local decl count
000342d: fd                                        ; prefix
000342e: 02                                        ; v128.const
000342f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000343f: fd                                        ; prefix
0003440: 02                                        ; v128.const
0003441: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003451: fd                                        ; prefix
0003452: a701                                      ; f64x2.mul
0003454: 1a                                        ; drop
0003455: 0b                                        ; end
000342b: 2a                                        ; FIXUP func body size
; function body 321
0003456: 00                                        ; func body size (guess)
0003457: 00                                        ; local decl count
0003458: fd                                        ; prefix
0003459: 02                                        ; v128.const
000345a: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000346a: fd                                        ; prefix
000346b: 02                                        ; v128.const
000346c: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000347c: fd                                        ; prefix
000347d: a801                                      ; f64x2.div
000347f: 1a                                        ; drop
0003480: 0b                                        ; end
0003456: 2a                                        ; FIXUP func body size
; function body 322
0003481: 00                                        ; func body size (guess)
0003482: 00                                        ; local decl count
0003483: fd                                        ; prefix
0003484: 02                                        ; v128.const
0003485: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003495: fd                                        ; prefix
0003496: 02                                        ; v128.const
0003497: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00034a7: fd                                        ; prefix
00034a8: a901                                      ; f64x2.min
00034aa: 1a                                        ; drop
00034ab: 0b                                        ; end
0003481: 2a                                        ; FIXUP func body size
; function body 323
00034ac: 00                                        ; func body size (guess)
00034ad: 00                                        ; local decl count
00034ae: fd                                        ; prefix
00034af: 02                                        ; v128.const
00034b0: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00034c0: fd                                        ; prefix
00034c1: 02                                        ; v128.const
00034c2: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00034d2: fd                                        ; prefix
00034d3: aa01                                      ; f64x2.max
00034d5: 1a                                        ; drop
00034d6: 0b                                        ; end
00034ac: 2a                                        ; FIXUP func body size
; function body 324
00034d7: 00                                        ; func body size (guess)
00034d8: 00                                        ; local decl count
00034d9: fd                                        ; prefix
00034da: 02                                        ; v128.const
00034db: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00034eb: fd                                        ; prefix
00034ec: ab01                                      ; i32x4.trunc_sat_f32x4_s
00034ee: 1a                                        ; drop
00034ef: 0b                                        ; end
00034d7: 18                                        ; FIXUP func body size
; function body 325
00034f0: 00                                        ; func body size (guess)
00034f1: 00                                        ; local decl count
00034f2: fd                                        ; prefix
00034f3: 02                                        ; v128.const
00034f4: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003504: fd                                        ; prefix
0003505: ac01                                      ; i32x4.trunc_sat_f32x4_u
0003507: 1a                                        ; drop
0003508: 0b                                        ; end
00034f0: 18                                        ; FIXUP func body size
; function body 326
0003509: 00                                        ; func body size (guess)
000350a: 00                                        ; local decl count
000350b: fd                                        ; prefix
000350c: 02                                        ; v128.const
000350d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000351d: fd                                        ; prefix
000351e: ad01                                      ; i64x2.trunc_sat_f64x2_s
0003520: 1a                                        ; drop
0003521: 0b                                        ; end
0003509: 18                                        ; FIXUP func body size
; function body 327
0003522: 00                                        ; func body size (guess)
0003523: 00                                        ; local decl count
0003524: fd                                        ; prefix
0003525: 02                                        ; v128.const
0003526: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003536: fd                                        ; prefix
0003537: ae01                                      ; i64x2.trunc_sat_f64x2_u
0003539: 1a                                        ; drop
000353a: 0b                                        ; end
0003522: 18                                        ; FIXUP func body size
; function body 328
000353b: 00                                        ; func body size (guess)
000353c: 00                                        ; local decl count
000353d: fd                                        ; prefix
000353e: 02                                        ; v128.const
000353f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000354f: fd                                        ; prefix
0003550: af01                                      ; f32x4.convert_i32x4_s
0003552: 1a                                        ; drop
0003553: 0b                                        ; end
000353b: 18                                        ; FIXUP func body size
; function body 329
0003554: 00                                        ; func body size (guess)
0003555: 00                                        ; local decl count
0003556: fd                                        ; prefix
0003557: 02                                        ; v128.const
0003558: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003568: fd                                        ; prefix
0003569: b001                                      ; f32x4.convert_i32x4_u
000356b: 1a                                        ; drop
000356c: 0b                                        ; end
0003554: 18                                        ; FIXUP func body size
; function body 330
000356d: 00                                        ; func body size (guess)
000356e: 00                                        ; local decl count
000356f: fd                                        ; prefix
0003570: 02                                        ; v128.const
0003571: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003581: fd                                        ; prefix
0003582: b101                                      ; f64x2.convert_i64x2_s
0003584: 1a                                        ; drop
0003585: 0b                                        ; end
000356d: 18                                        ; FIXUP func body size
; function body 331
0003586: 00                                        ; func body size (guess)
0003587: 00                                        ; local decl count
0003588: fd                                        ; prefix
0003589: 02                                        ; v128.const
000358a: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000359a: fd                                        ; prefix
000359b: b201                                      ; f64x2.convert_i64x2_u
000359d: 1a                                        ; drop
000359e: 0b                                        ; end
0003586: 18                                        ; FIXUP func body size
; function body 332
000359f: 00                                        ; func body size (guess)
00035a0: 00                                        ; local decl count
00035a1: fd                                        ; prefix
00035a2: 02                                        ; v128.const
00035a3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00035b3: fd                                        ; prefix
00035b4: 02                                        ; v128.const
00035b5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00035c5: fd                                        ; prefix
00035c6: c001                                      ; v8x16.swizzle
00035c8: 1a                                        ; drop
00035c9: 0b                                        ; end
000359f: 2a                                        ; FIXUP func body size
; function body 333
00035ca: 00                                        ; func body size (guess)
00035cb: 00                                        ; local decl count
00035cc: fd                                        ; prefix
00035cd: 02                                        ; v128.const
00035ce: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00035de: fd                                        ; prefix
00035df: 02                                        ; v128.const
00035e0: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00035f0: fd                                        ; prefix
00035f1: c101                                      ; v8x16.shuffle
00035f3: 0101 0101 0101 0101 0101 0101 0101 0101   ; Simd Lane[16] literal
0003603: 1a                                        ; drop
0003604: 0b                                        ; end
00035ca: 3a                                        ; FIXUP func body size
; function body 334
0003605: 00                                        ; func body size (guess)
0003606: 00                                        ; local decl count
0003607: 41                                        ; i32.const
0003608: 01                                        ; i32 literal
0003609: fd                                        ; prefix
000360a: c201                                      ; i8x16.load_splat
000360c: 00                                        ; alignment
000360d: 00                                        ; load offset
000360e: 1a                                        ; drop
000360f: 0b                                        ; end
0003605: 0a                                        ; FIXUP func body size
; function body 335
0003610: 00                                        ; func body size (guess)
0003611: 00                                        ; local decl count
0003612: 41                                        ; i32.const
0003613: 01                                        ; i32 literal
0003614: fd                                        ; prefix
0003615: c301                                      ; i16x8.load_splat
0003617: 01                                        ; alignment
0003618: 00                                        ; load offset
0003619: 1a                                        ; drop
000361a: 0b                                        ; end
0003610: 0a                                        ; FIXUP func body size
; function body 336
000361b: 00                                        ; func body size (guess)
000361c: 00                                        ; local decl count
000361d: 41                                        ; i32.const
000361e: 01                                        ; i32 literal
000361f: fd                                        ; prefix
0003620: c401                                      ; i32x4.load_splat
0003622: 02                                        ; alignment
0003623: 00                                        ; load offset
0003624: 1a                                        ; drop
0003625: 0b                                        ; end
000361b: 0a                                        ; FIXUP func body size
; function body 337
0003626: 00                                        ; func body size (guess)
0003627: 00                                        ; local decl count
0003628: 41                                        ; i32.const
0003629: 01                                        ; i32 literal
000362a: fd                                        ; prefix
000362b: c501                                      ; i64x2.load_splat
000362d: 03                                        ; alignment
000362e: 00                                        ; load offset
000362f: 1a                                        ; drop
0003630: 0b                                        ; end
0003626: 0a                                        ; FIXUP func body size
; function body 338
0003631: 00                                        ; func body size (guess)
0003632: 00                                        ; local decl count
0003633: 41                                        ; i32.const
0003634: 01                                        ; i32 literal
0003635: 41                                        ; i32.const
0003636: 02                                        ; i32 literal
0003637: fe                                        ; prefix
0003638: 00                                        ; atomic.notify
0003639: 02                                        ; alignment
000363a: 03                                        ; memory offset
000363b: 1a                                        ; drop
000363c: 0b                                        ; end
0003631: 0b                                        ; FIXUP func body size
; function body 339
000363d: 00                                        ; func body size (guess)
000363e: 00                                        ; local decl count
000363f: 41                                        ; i32.const
0003640: 01                                        ; i32 literal
0003641: 41                                        ; i32.const
0003642: 02                                        ; i32 literal
0003643: 42                                        ; i64.const
0003644: 03                                        ; i64 literal
0003645: fe                                        ; prefix
0003646: 01                                        ; i32.atomic.wait
0003647: 02                                        ; alignment
0003648: 03                                        ; memory offset
0003649: 1a                                        ; drop
000364a: 0b                                        ; end
000363d: 0d                                        ; FIXUP func body size
; function body 340
000364b: 00                                        ; func body size (guess)
000364c: 00                                        ; local decl count
000364d: 41                                        ; i32.const
000364e: 01                                        ; i32 literal
000364f: 42                                        ; i64.const
0003650: 02                                        ; i64 literal
0003651: 42                                        ; i64.const
0003652: 03                                        ; i64 literal
0003653: fe                                        ; prefix
0003654: 02                                        ; i64.atomic.wait
0003655: 03                                        ; alignment
0003656: 03                                        ; memory offset
0003657: 1a                                        ; drop
0003658: 0b                                        ; end
000364b: 0d                                        ; FIXUP func body size
; function body 341
0003659: 00                                        ; func body size (guess)
000365a: 00                                        ; local decl count
000365b: 41                                        ; i32.const
000365c: 01                                        ; i32 literal
000365d: fe                                        ; prefix
000365e: 10                                        ; i32.atomic.load
000365f: 02                                        ; alignment
0003660: 03                                        ; memory offset
0003661: 1a                                        ; drop
0003662: 0b                                        ; end
0003659: 09                                        ; FIXUP func body size
; function body 342
0003663: 00                                        ; func body size (guess)
0003664: 00                                        ; local decl count
0003665: 41                                        ; i32.const
0003666: 01                                        ; i32 literal
0003667: fe                                        ; prefix
0003668: 11                                        ; i64.atomic.load
0003669: 03                                        ; alignment
000366a: 07                                        ; memory offset
000366b: 1a                                        ; drop
000366c: 0b                                        ; end
0003663: 09                                        ; FIXUP func body size
; function body 343
000366d: 00                                        ; func body size (guess)
000366e: 00                                        ; local decl count
000366f: 41                                        ; i32.const
0003670: 01                                        ; i32 literal
0003671: fe                                        ; prefix
0003672: 12                                        ; i32.atomic.load8_u
0003673: 00                                        ; alignment
0003674: 03                                        ; memory offset
0003675: 1a                                        ; drop
0003676: 0b                                        ; end
000366d: 09                                        ; FIXUP func body size
; function body 344
0003677: 00                                        ; func body size (guess)
0003678: 00                                        ; local decl count
0003679: 41                                        ; i32.const
000367a: 01                                        ; i32 literal
000367b: fe                                        ; prefix
000367c: 13                                        ; i32.atomic.load16_u
000367d: 01                                        ; alignment
000367e: 03                                        ; memory offset
000367f: 1a                                        ; drop
0003680: 0b                                        ; end
0003677: 09                                        ; FIXUP func body size
; function body 345
0003681: 00                                        ; func body size (guess)
0003682: 00                                        ; local decl count
0003683: 41                                        ; i32.const
0003684: 01                                        ; i32 literal
0003685: fe                                        ; prefix
0003686: 14                                        ; i64.atomic.load8_u
0003687: 00                                        ; alignment
0003688: 03                                        ; memory offset
0003689: 1a                                        ; drop
000368a: 0b                                        ; end
0003681: 09                                        ; FIXUP func body size
; function body 346
000368b: 00                                        ; func body size (guess)
000368c: 00                                        ; local decl count
000368d: 41                                        ; i32.const
000368e: 01                                        ; i32 literal
000368f: fe                                        ; prefix
0003690: 15                                        ; i64.atomic.load16_u
0003691: 01                                        ; alignment
0003692: 03                                        ; memory offset
0003693: 1a                                        ; drop
0003694: 0b                                        ; end
000368b: 09                                        ; FIXUP func body size
; function body 347
0003695: 00                                        ; func body size (guess)
0003696: 00                                        ; local decl count
0003697: 41                                        ; i32.const
0003698: 01                                        ; i32 literal
0003699: fe                                        ; prefix
000369a: 16                                        ; i64.atomic.load32_u
000369b: 02                                        ; alignment
000369c: 03                                        ; memory offset
000369d: 1a                                        ; drop
000369e: 0b                                        ; end
0003695: 09                                        ; FIXUP func body size
; function body 348
000369f: 00                                        ; func body size (guess)
00036a0: 00                                        ; local decl count
00036a1: 41                                        ; i32.const
00036a2: 01                                        ; i32 literal
00036a3: 41                                        ; i32.const
00036a4: 02                                        ; i32 literal
00036a5: fe                                        ; prefix
00036a6: 17                                        ; i32.atomic.store
00036a7: 02                                        ; alignment
00036a8: 03                                        ; memory offset
00036a9: 0b                                        ; end
000369f: 0a                                        ; FIXUP func body size
; function body 349
00036aa: 00                                        ; func body size (guess)
00036ab: 00                                        ; local decl count
00036ac: 41                                        ; i32.const
00036ad: 01                                        ; i32 literal
00036ae: 42                                        ; i64.const
00036af: 02                                        ; i64 literal
00036b0: fe                                        ; prefix
00036b1: 18                                        ; i64.atomic.store
00036b2: 03                                        ; alignment
00036b3: 07                                        ; memory offset
00036b4: 0b                                        ; end
00036aa: 0a                                        ; FIXUP func body size
; function body 350
00036b5: 00                                        ; func body size (guess)
00036b6: 00                                        ; local decl count
00036b7: 41                                        ; i32.const
00036b8: 01                                        ; i32 literal
00036b9: 41                                        ; i32.const
00036ba: 02                                        ; i32 literal
00036bb: fe                                        ; prefix
00036bc: 19                                        ; i32.atomic.store8
00036bd: 00                                        ; alignment
00036be: 03                                        ; memory offset
00036bf: 0b                                        ; end
00036b5: 0a                                        ; FIXUP func body size
; function body 351
00036c0: 00                                        ; func body size (guess)
00036c1: 00                                        ; local decl count
00036c2: 41                                        ; i32.const
00036c3: 01                                        ; i32 literal
00036c4: 41                                        ; i32.const
00036c5: 02                                        ; i32 literal
00036c6: fe                                        ; prefix
00036c7: 1a                                        ; i32.atomic.store16
00036c8: 01                                        ; alignment
00036c9: 03                                        ; memory offset
00036ca: 0b                                        ; end
00036c0: 0a                                        ; FIXUP func body size
; function body 352
00036cb: 00                                        ; func body size (guess)
00036cc: 00                                        ; local decl count
00036cd: 41                                        ; i32.const
00036ce: 01                                        ; i32 literal
00036cf: 42                                        ; i64.const
00036d0: 02                                        ; i64 literal
00036d1: fe                                        ; prefix
00036d2: 1b                                        ; i64.atomic.store8
00036d3: 00                                        ; alignment
00036d4: 03                                        ; memory offset
00036d5: 0b                                        ; end
00036cb: 0a                                        ; FIXUP func body size
; function body 353
00036d6: 00                                        ; func body size (guess)
00036d7: 00                                        ; local decl count
00036d8: 41                                        ; i32.const
00036d9: 01                                        ; i32 literal
00036da: 42                                        ; i64.const
00036db: 02                                        ; i64 literal
00036dc: fe                                        ; prefix
00036dd: 1c                                        ; i64.atomic.store16
00036de: 01                                        ; alignment
00036df: 03                                        ; memory offset
00036e0: 0b                                        ; end
00036d6: 0a                                        ; FIXUP func body size
; function body 354
00036e1: 00                                        ; func body size (guess)
00036e2: 00                                        ; local decl count
00036e3: 41                                        ; i32.const
00036e4: 01                                        ; i32 literal
00036e5: 42                                        ; i64.const
00036e6: 02                                        ; i64 literal
00036e7: fe                                        ; prefix
00036e8: 1d                                        ; i64.atomic.store32
00036e9: 02                                        ; alignment
00036ea: 03                                        ; memory offset
00036eb: 0b                                        ; end
00036e1: 0a                                        ; FIXUP func body size
; function body 355
00036ec: 00                                        ; func body size (guess)
00036ed: 00                                        ; local decl count
00036ee: 41                                        ; i32.const
00036ef: 01                                        ; i32 literal
00036f0: 41                                        ; i32.const
00036f1: 02                                        ; i32 literal
00036f2: fe                                        ; prefix
00036f3: 1e                                        ; i32.atomic.rmw.add
00036f4: 02                                        ; alignment
00036f5: 03                                        ; memory offset
00036f6: 1a                                        ; drop
00036f7: 0b                                        ; end
00036ec: 0b                                        ; FIXUP func body size
; function body 356
00036f8: 00                                        ; func body size (guess)
00036f9: 00                                        ; local decl count
00036fa: 41                                        ; i32.const
00036fb: 01                                        ; i32 literal
00036fc: 42                                        ; i64.const
00036fd: 02                                        ; i64 literal
00036fe: fe                                        ; prefix
00036ff: 1f                                        ; i64.atomic.rmw.add
0003700: 03                                        ; alignment
0003701: 07                                        ; memory offset
0003702: 1a                                        ; drop
0003703: 0b                                        ; end
00036f8: 0b                                        ; FIXUP func body size
; function body 357
0003704: 00                                        ; func body size (guess)
0003705: 00                                        ; local decl count
0003706: 41                                        ; i32.const
0003707: 01                                        ; i32 literal
0003708: 41                                        ; i32.const
0003709: 02                                        ; i32 literal
000370a: fe                                        ; prefix
000370b: 20                                        ; i32.atomic.rmw8.add_u
000370c: 00                                        ; alignment
000370d: 03                                        ; memory offset
000370e: 1a                                        ; drop
000370f: 0b                                        ; end
0003704: 0b                                        ; FIXUP func body size
; function body 358
0003710: 00                                        ; func body size (guess)
0003711: 00                                        ; local decl count
0003712: 41                                        ; i32.const
0003713: 01                                        ; i32 literal
0003714: 41                                        ; i32.const
0003715: 02                                        ; i32 literal
0003716: fe                                        ; prefix
0003717: 21                                        ; i32.atomic.rmw16.add_u
0003718: 01                                        ; alignment
0003719: 03                                        ; memory offset
000371a: 1a                                        ; drop
000371b: 0b                                        ; end
0003710: 0b                                        ; FIXUP func body size
; function body 359
000371c: 00                                        ; func body size (guess)
000371d: 00                                        ; local decl count
000371e: 41                                        ; i32.const
000371f: 01                                        ; i32 literal
0003720: 42                                        ; i64.const
0003721: 02                                        ; i64 literal
0003722: fe                                        ; prefix
0003723: 22                                        ; i64.atomic.rmw8.add_u
0003724: 00                                        ; alignment
0003725: 03                                        ; memory offset
0003726: 1a                                        ; drop
0003727: 0b                                        ; end
000371c: 0b                                        ; FIXUP func body size
; function body 360
0003728: 00                                        ; func body size (guess)
0003729: 00                                        ; local decl count
000372a: 41                                        ; i32.const
000372b: 01                                        ; i32 literal
000372c: 42                                        ; i64.const
000372d: 02                                        ; i64 literal
000372e: fe                                        ; prefix
000372f: 23                                        ; i64.atomic.rmw16.add_u
0003730: 01                                        ; alignment
0003731: 03                                        ; memory offset
0003732: 1a                                        ; drop
0003733: 0b                                        ; end
0003728: 0b                                        ; FIXUP func body size
; function body 361
0003734: 00                                        ; func body size (guess)
0003735: 00                                        ; local decl count
0003736: 41                                        ; i32.const
0003737: 01                                        ; i32 literal
0003738: 42                                        ; i64.const
0003739: 02                                        ; i64 literal
000373a: fe                                        ; prefix
000373b: 24                                        ; i64.atomic.rmw32.add_u
000373c: 02                                        ; alignment
000373d: 03                                        ; memory offset
000373e: 1a                                        ; drop
000373f: 0b                                        ; end
0003734: 0b                                        ; FIXUP func body size
; function body 362
0003740: 00                                        ; func body size (guess)
0003741: 00                                        ; local decl count
0003742: 41                                        ; i32.const
0003743: 01                                        ; i32 literal
0003744: 41                                        ; i32.const
0003745: 02                                        ; i32 literal
0003746: fe                                        ; prefix
0003747: 25                                        ; i32.atomic.rmw.sub
0003748: 02                                        ; alignment
0003749: 03                                        ; memory offset
000374a: 1a                                        ; drop
000374b: 0b                                        ; end
0003740: 0b                                        ; FIXUP func body size
; function body 363
000374c: 00                                        ; func body size (guess)
000374d: 00                                        ; local decl count
000374e: 41                                        ; i32.const
000374f: 01                                        ; i32 literal
0003750: 42                                        ; i64.const
0003751: 02                                        ; i64 literal
0003752: fe                                        ; prefix
0003753: 26                                        ; i64.atomic.rmw.sub
0003754: 03                                        ; alignment
0003755: 07                                        ; memory offset
0003756: 1a                                        ; drop
0003757: 0b                                        ; end
000374c: 0b                                        ; FIXUP func body size
; function body 364
0003758: 00                                        ; func body size (guess)
0003759: 00                                        ; local decl count
000375a: 41                                        ; i32.const
000375b: 01                                        ; i32 literal
000375c: 41                                        ; i32.const
000375d: 02                                        ; i32 literal
000375e: fe                                        ; prefix
000375f: 27                                        ; i32.atomic.rmw8.sub_u
0003760: 00                                        ; alignment
0003761: 03                                        ; memory offset
0003762: 1a                                        ; drop
0003763: 0b                                        ; end
0003758: 0b                                        ; FIXUP func body size
; function body 365
0003764: 00                                        ; func body size (guess)
0003765: 00                                        ; local decl count
0003766: 41                                        ; i32.const
0003767: 01                                        ; i32 literal
0003768: 41                                        ; i32.const
0003769: 02                                        ; i32 literal
000376a: fe                                        ; prefix
000376b: 28                                        ; i32.atomic.rmw16.sub_u
000376c: 01                                        ; alignment
000376d: 03                                        ; memory offset
000376e: 1a                                        ; drop
000376f: 0b                                        ; end
0003764: 0b                                        ; FIXUP func body size
; function body 366
0003770: 00                                        ; func body size (guess)
0003771: 00                                        ; local decl count
0003772: 41                                        ; i32.const
0003773: 01                                        ; i32 literal
0003774: 42                                        ; i64.const
0003775: 02                                        ; i64 literal
0003776: fe                                        ; prefix
0003777: 29                                        ; i64.atomic.rmw8.sub_u
0003778: 00                                        ; alignment
0003779: 03                                        ; memory offset
000377a: 1a                                        ; drop
000377b: 0b                                        ; end
0003770: 0b                                        ; FIXUP func body size
; function body 367
000377c: 00                                        ; func body size (guess)
000377d: 00                                        ; local decl count
000377e: 41                                        ; i32.const
000377f: 01                                        ; i32 literal
0003780: 42                                        ; i64.const
0003781: 02                                        ; i64 literal
0003782: fe                                        ; prefix
0003783: 2a                                        ; i64.atomic.rmw16.sub_u
0003784: 01                                        ; alignment
0003785: 03                                        ; memory offset
0003786: 1a                                        ; drop
0003787: 0b                                        ; end
000377c: 0b                                        ; FIXUP func body size
; function body 368
0003788: 00                                        ; func body size (guess)
0003789: 00                                        ; local decl count
000378a: 41                                        ; i32.const
000378b: 01                                        ; i32 literal
000378c: 42                                        ; i64.const
000378d: 02                                        ; i64 literal
000378e: fe                                        ; prefix
000378f: 2b                                        ; i64.atomic.rmw32.sub_u
0003790: 02                                        ; alignment
0003791: 03                                        ; memory offset
0003792: 1a                                        ; drop
0003793: 0b                                        ; end
0003788: 0b                                        ; FIXUP func body size
; function body 369
0003794: 00                                        ; func body size (guess)
0003795: 00                                        ; local decl count
0003796: 41                                        ; i32.const
0003797: 01                                        ; i32 literal
0003798: 41                                        ; i32.const
0003799: 02                                        ; i32 literal
000379a: fe                                        ; prefix
000379b: 2c                                        ; i32.atomic.rmw.and
000379c: 02                                        ; alignment
000379d: 03                                        ; memory offset
000379e: 1a                                        ; drop
000379f: 0b                                        ; end
0003794: 0b                                        ; FIXUP func body size
; function body 370
00037a0: 00                                        ; func body size (guess)
00037a1: 00                                        ; local decl count
00037a2: 41                                        ; i32.const
00037a3: 01                                        ; i32 literal
00037a4: 42                                        ; i64.const
00037a5: 02                                        ; i64 literal
00037a6: fe                                        ; prefix
00037a7: 2d                                        ; i64.atomic.rmw.and
00037a8: 03                                        ; alignment
00037a9: 07                                        ; memory offset
00037aa: 1a                                        ; drop
00037ab: 0b                                        ; end
00037a0: 0b                                        ; FIXUP func body size
; function body 371
00037ac: 00                                        ; func body size (guess)
00037ad: 00                                        ; local decl count
00037ae: 41                                        ; i32.const
00037af: 01                                        ; i32 literal
00037b0: 41                                        ; i32.const
00037b1: 02                                        ; i32 literal
00037b2: fe                                        ; prefix
00037b3: 2e                                        ; i32.atomic.rmw8.and_u
00037b4: 00                                        ; alignment
00037b5: 03                                        ; memory offset
00037b6: 1a                                        ; drop
00037b7: 0b                                        ; end
00037ac: 0b                                        ; FIXUP func body size
; function body 372
00037b8: 00                                        ; func body size (guess)
00037b9: 00                                        ; local decl count
00037ba: 41                                        ; i32.const
00037bb: 01                                        ; i32 literal
00037bc: 41                                        ; i32.const
00037bd: 02                                        ; i32 literal
00037be: fe                                        ; prefix
00037bf: 2f                                        ; i32.atomic.rmw16.and_u
00037c0: 01                                        ; alignment
00037c1: 03                                        ; memory offset
00037c2: 1a                                        ; drop
00037c3: 0b                                        ; end
00037b8: 0b                                        ; FIXUP func body size
; function body 373
00037c4: 00                                        ; func body size (guess)
00037c5: 00                                        ; local decl count
00037c6: 41                                        ; i32.const
00037c7: 01                                        ; i32 literal
00037c8: 42                                        ; i64.const
00037c9: 02                                        ; i64 literal
00037ca: fe                                        ; prefix
00037cb: 30                                        ; i64.atomic.rmw8.and_u
00037cc: 00                                        ; alignment
00037cd: 03                                        ; memory offset
00037ce: 1a                                        ; drop
00037cf: 0b                                        ; end
00037c4: 0b                                        ; FIXUP func body size
; function body 374
00037d0: 00                                        ; func body size (guess)
00037d1: 00                                        ; local decl count
00037d2: 41                                        ; i32.const
00037d3: 01                                        ; i32 literal
00037d4: 42                                        ; i64.const
00037d5: 02                                        ; i64 literal
00037d6: fe                                        ; prefix
00037d7: 31                                        ; i64.atomic.rmw16.and_u
00037d8: 01                                        ; alignment
00037d9: 03                                        ; memory offset
00037da: 1a                                        ; drop
00037db: 0b                                        ; end
00037d0: 0b                                        ; FIXUP func body size
; function body 375
00037dc: 00                                        ; func body size (guess)
00037dd: 00                                        ; local decl count
00037de: 41                                        ; i32.const
00037df: 01                                        ; i32 literal
00037e0: 42                                        ; i64.const
00037e1: 02                                        ; i64 literal
00037e2: fe                                        ; prefix
00037e3: 32                                        ; i64.atomic.rmw32.and_u
00037e4: 02                                        ; alignment
00037e5: 03                                        ; memory offset
00037e6: 1a                                        ; drop
00037e7: 0b                                        ; end
00037dc: 0b                                        ; FIXUP func body size
; function body 376
00037e8: 00                                        ; func body size (guess)
00037e9: 00                                        ; local decl count
00037ea: 41                                        ; i32.const
00037eb: 01                                        ; i32 literal
00037ec: 41                                        ; i32.const
00037ed: 02                                        ; i32 literal
00037ee: fe                                        ; prefix
00037ef: 33                                        ; i32.atomic.rmw.or
00037f0: 02                                        ; alignment
00037f1: 03                                        ; memory offset
00037f2: 1a                                        ; drop
00037f3: 0b                                        ; end
00037e8: 0b                                        ; FIXUP func body size
; function body 377
00037f4: 00                                        ; func body size (guess)
00037f5: 00                                        ; local decl count
00037f6: 41                                        ; i32.const
00037f7: 01                                        ; i32 literal
00037f8: 42                                        ; i64.const
00037f9: 02                                        ; i64 literal
00037fa: fe                                        ; prefix
00037fb: 34                                        ; i64.atomic.rmw.or
00037fc: 03                                        ; alignment
00037fd: 07                                        ; memory offset
00037fe: 1a                                        ; drop
00037ff: 0b                                        ; end
00037f4: 0b                                        ; FIXUP func body size
; function body 378
0003800: 00                                        ; func body size (guess)
0003801: 00                                        ; local decl count
0003802: 41                                        ; i32.const
0003803: 01                                        ; i32 literal
0003804: 41                                        ; i32.const
0003805: 02                                        ; i32 literal
0003806: fe                                        ; prefix
0003807: 35                                        ; i32.atomic.rmw8.or_u
0003808: 00                                        ; alignment
0003809: 03                                        ; memory offset
000380a: 1a                                        ; drop
000380b: 0b                                        ; end
0003800: 0b                                        ; FIXUP func body size
; function body 379
000380c: 00                                        ; func body size (guess)
000380d: 00                                        ; local decl count
000380e: 41                                        ; i32.const
000380f: 01                                        ; i32 literal
0003810: 41                                        ; i32.const
0003811: 02                                        ; i32 literal
0003812: fe                                        ; prefix
0003813: 36                                        ; i32.atomic.rmw16.or_u
0003814: 01                                        ; alignment
0003815: 03                                        ; memory offset
0003816: 1a                                        ; drop
0003817: 0b                                        ; end
000380c: 0b                                        ; FIXUP func body size
; function body 380
0003818: 00                                        ; func body size (guess)
0003819: 00                                        ; local decl count
000381a: 41                                        ; i32.const
000381b: 01                                        ; i32 literal
000381c: 42                                        ; i64.const
000381d: 02                                        ; i64 literal
000381e: fe                                        ; prefix
000381f: 37                                        ; i64.atomic.rmw8.or_u
0003820: 00                                        ; alignment
0003821: 03                                        ; memory offset
0003822: 1a                                        ; drop
0003823: 0b                                        ; end
0003818: 0b                                        ; FIXUP func body size
; function body 381
0003824: 00                                        ; func body size (guess)
0003825: 00                                        ; local decl count
0003826: 41                                        ; i32.const
0003827: 01                                        ; i32 literal
0003828: 42                                        ; i64.const
0003829: 02                                        ; i64 literal
000382a: fe                                        ; prefix
000382b: 38                                        ; i64.atomic.rmw16.or_u
000382c: 01                                        ; alignment
000382d: 03                                        ; memory offset
000382e: 1a                                        ; drop
000382f: 0b                                        ; end
0003824: 0b                                        ; FIXUP func body size
; function body 382
0003830: 00                                        ; func body size (guess)
0003831: 00                                        ; local decl count
0003832: 41                                        ; i32.const
0003833: 01                                        ; i32 literal
0003834: 42                                        ; i64.const
0003835: 02                                        ; i64 literal
0003836: fe                                        ; prefix
0003837: 39                                        ; i64.atomic.rmw32.or_u
0003838: 02                                        ; alignment
0003839: 03                                        ; memory offset
000383a: 1a                                        ; drop
000383b: 0b                                        ; end
0003830: 0b                                        ; FIXUP func body size
; function body 383
000383c: 00                                        ; func body size (guess)
000383d: 00                                        ; local decl count
000383e: 41                                        ; i32.const
000383f: 01                                        ; i32 literal
0003840: 41                                        ; i32.const
0003841: 02                                        ; i32 literal
0003842: fe                                        ; prefix
0003843: 3a                                        ; i32.atomic.rmw.xor
0003844: 02                                        ; alignment
0003845: 03                                        ; memory offset
0003846: 1a                                        ; drop
0003847: 0b                                        ; end
000383c: 0b                                        ; FIXUP func body size
; function body 384
0003848: 00                                        ; func body size (guess)
0003849: 00                                        ; local decl count
000384a: 41                                        ; i32.const
000384b: 01                                        ; i32 literal
000384c: 42                                        ; i64.const
000384d: 02                                        ; i64 literal
000384e: fe                                        ; prefix
000384f: 3b                                        ; i64.atomic.rmw.xor
0003850: 03                                        ; alignment
0003851: 07                                        ; memory offset
0003852: 1a                                        ; drop
0003853: 0b                                        ; end
0003848: 0b                                        ; FIXUP func body size
; function body 385
0003854: 00                                        ; func body size (guess)
0003855: 00                                        ; local decl count
0003856: 41                                        ; i32.const
0003857: 01                                        ; i32 literal
0003858: 41                                        ; i32.const
0003859: 02                                        ; i32 literal
000385a: fe                                        ; prefix
000385b: 3c                                        ; i32.atomic.rmw8.xor_u
000385c: 00                                        ; alignment
000385d: 03                                        ; memory offset
000385e: 1a                                        ; drop
000385f: 0b                                        ; end
0003854: 0b                                        ; FIXUP func body size
; function body 386
0003860: 00                                        ; func body size (guess)
0003861: 00                                        ; local decl count
0003862: 41                                        ; i32.const
0003863: 01                                        ; i32 literal
0003864: 41                                        ; i32.const
0003865: 02                                        ; i32 literal
0003866: fe                                        ; prefix
0003867: 3d                                        ; i32.atomic.rmw16.xor_u
0003868: 01                                        ; alignment
0003869: 03                                        ; memory offset
000386a: 1a                                        ; drop
000386b: 0b                                        ; end
0003860: 0b                                        ; FIXUP func body size
; function body 387
000386c: 00                                        ; func body size (guess)
000386d: 00                                        ; local decl count
000386e: 41                                        ; i32.const
000386f: 01                                        ; i32 literal
0003870: 42                                        ; i64.const
0003871: 02                                        ; i64 literal
0003872: fe                                        ; prefix
0003873: 3e                                        ; i64.atomic.rmw8.xor_u
0003874: 00                                        ; alignment
0003875: 03                                        ; memory offset
0003876: 1a                                        ; drop
0003877: 0b                                        ; end
000386c: 0b                                        ; FIXUP func body size
; function body 388
0003878: 00                                        ; func body size (guess)
0003879: 00                                        ; local decl count
000387a: 41                                        ; i32.const
000387b: 01                                        ; i32 literal
000387c: 42                                        ; i64.const
000387d: 02                                        ; i64 literal
000387e: fe                                        ; prefix
000387f: 3f                                        ; i64.atomic.rmw16.xor_u
0003880: 01                                        ; alignment
0003881: 03                                        ; memory offset
0003882: 1a                                        ; drop
0003883: 0b                                        ; end
0003878: 0b                                        ; FIXUP func body size
; function body 389
0003884: 00                                        ; func body size (guess)
0003885: 00                                        ; local decl count
0003886: 41                                        ; i32.const
0003887: 01                                        ; i32 literal
0003888: 42                                        ; i64.const
0003889: 02                                        ; i64 literal
000388a: fe                                        ; prefix
000388b: 40                                        ; i64.atomic.rmw32.xor_u
000388c: 02                                        ; alignment
000388d: 03                                        ; memory offset
000388e: 1a                                        ; drop
000388f: 0b                                        ; end
0003884: 0b                                        ; FIXUP func body size
; function body 390
0003890: 00                                        ; func body size (guess)
0003891: 00                                        ; local decl count
0003892: 41                                        ; i32.const
0003893: 01                                        ; i32 literal
0003894: 41                                        ; i32.const
0003895: 02                                        ; i32 literal
0003896: fe                                        ; prefix
0003897: 41                                        ; i32.atomic.rmw.xchg
0003898: 02                                        ; alignment
0003899: 03                                        ; memory offset
000389a: 1a                                        ; drop
000389b: 0b                                        ; end
0003890: 0b                                        ; FIXUP func body size
; function body 391
000389c: 00                                        ; func body size (guess)
000389d: 00                                        ; local decl count
000389e: 41                                        ; i32.const
000389f: 01                                        ; i32 literal
00038a0: 42                                        ; i64.const
00038a1: 02                                        ; i64 literal
00038a2: fe                                        ; prefix
00038a3: 42                                        ; i64.atomic.rmw.xchg
00038a4: 03                                        ; alignment
00038a5: 07                                        ; memory offset
00038a6: 1a                                        ; drop
00038a7: 0b                                        ; end
000389c: 0b                                        ; FIXUP func body size
; function body 392
00038a8: 00                                        ; func body size (guess)
00038a9: 00                                        ; local decl count
00038aa: 41                                        ; i32.const
00038ab: 01                                        ; i32 literal
00038ac: 41                                        ; i32.const
00038ad: 02                                        ; i32 literal
00038ae: fe                                        ; prefix
00038af: 43                                        ; i32.atomic.rmw8.xchg_u
00038b0: 00                                        ; alignment
00038b1: 03                                        ; memory offset
00038b2: 1a                                        ; drop
00038b3: 0b                                        ; end
00038a8: 0b                                        ; FIXUP func body size
; function body 393
00038b4: 00                                        ; func body size (guess)
00038b5: 00                                        ; local decl count
00038b6: 41                                        ; i32.const
00038b7: 01                                        ; i32 literal
00038b8: 41                                        ; i32.const
00038b9: 02                                        ; i32 literal
00038ba: fe                                        ; prefix
00038bb: 44                                        ; i32.atomic.rmw16.xchg_u
00038bc: 01                                        ; alignment
00038bd: 03                                        ; memory offset
00038be: 1a                                        ; drop
00038bf: 0b                                        ; end
00038b4: 0b                                        ; FIXUP func body size
; function body 394
00038c0: 00                                        ; func body size (guess)
00038c1: 00                                        ; local decl count
00038c2: 41                                        ; i32.const
00038c3: 01                                        ; i32 literal
00038c4: 42                                        ; i64.const
00038c5: 02                                        ; i64 literal
00038c6: fe                                        ; prefix
00038c7: 45                                        ; i64.atomic.rmw8.xchg_u
00038c8: 00                                        ; alignment
00038c9: 03                                        ; memory offset
00038ca: 1a                                        ; drop
00038cb: 0b                                        ; end
00038c0: 0b                                        ; FIXUP func body size
; function body 395
00038cc: 00                                        ; func body size (guess)
00038cd: 00                                        ; local decl count
00038ce: 41                                        ; i32.const
00038cf: 01                                        ; i32 literal
00038d0: 42                                        ; i64.const
00038d1: 02                                        ; i64 literal
00038d2: fe                                        ; prefix
00038d3: 46                                        ; i64.atomic.rmw16.xchg_u
00038d4: 01                                        ; alignment
00038d5: 03                                        ; memory offset
00038d6: 1a                                        ; drop
00038d7: 0b                                        ; end
00038cc: 0b                                        ; FIXUP func body size
; function body 396
00038d8: 00                                        ; func body size (guess)
00038d9: 00                                        ; local decl count
00038da: 41                                        ; i32.const
00038db: 01                                        ; i32 literal
00038dc: 42                                        ; i64.const
00038dd: 02                                        ; i64 literal
00038de: fe                                        ; prefix
00038df: 47                                        ; i64.atomic.rmw32.xchg_u
00038e0: 02                                        ; alignment
00038e1: 03                                        ; memory offset
00038e2: 1a                                        ; drop
00038e3: 0b                                        ; end
00038d8: 0b                                        ; FIXUP func body size
; function body 397
00038e4: 00                                        ; func body size (guess)
00038e5: 00                                        ; local decl count
00038e6: 41                                        ; i32.const
00038e7: 01                                        ; i32 literal
00038e8: 41                                        ; i32.const
00038e9: 02                                        ; i32 literal
00038ea: 41                                        ; i32.const
00038eb: 03                                        ; i32 literal
00038ec: fe                                        ; prefix
00038ed: 48                                        ; i32.atomic.rmw.cmpxchg
00038ee: 02                                        ; alignment
00038ef: 03                                        ; memory offset
00038f0: 1a                                        ; drop
00038f1: 0b                                        ; end
00038e4: 0d                                        ; FIXUP func body size
; function body 398
00038f2: 00                                        ; func body size (guess)
00038f3: 00                                        ; local decl count
00038f4: 41                                        ; i32.const
00038f5: 01                                        ; i32 literal
00038f6: 42                                        ; i64.const
00038f7: 02                                        ; i64 literal
00038f8: 42                                        ; i64.const
00038f9: 03                                        ; i64 literal
00038fa: fe                                        ; prefix
00038fb: 49                                        ; i64.atomic.rmw.cmpxchg
00038fc: 03                                        ; alignment
00038fd: 07                                        ; memory offset
00038fe: 1a                                        ; drop
00038ff: 0b                                        ; end
00038f2: 0d                                        ; FIXUP func body size
; function body 399
0003900: 00                                        ; func body size (guess)
0003901: 00                                        ; local decl count
0003902: 41                                        ; i32.const
0003903: 01                                        ; i32 literal
0003904: 41                                        ; i32.const
0003905: 02                                        ; i32 literal
0003906: 41                                        ; i32.const
0003907: 03                                        ; i32 literal
0003908: fe                                        ; prefix
0003909: 4a                                        ; i32.atomic.rmw8.cmpxchg_u
000390a: 00                                        ; alignment
000390b: 03                                        ; memory offset
000390c: 1a                                        ; drop
000390d: 0b                                        ; end
0003900: 0d                                        ; FIXUP func body size
; function body 400
000390e: 00                                        ; func body size (guess)
000390f: 00                                        ; local decl count
0003910: 41                                        ; i32.const
0003911: 01                                        ; i32 literal
0003912: 41                                        ; i32.const
0003913: 02                                        ; i32 literal
0003914: 41                                        ; i32.const
0003915: 03                                        ; i32 literal
0003916: fe                                        ; prefix
0003917: 4b                                        ; i32.atomic.rmw16.cmpxchg_u
0003918: 01                                        ; alignment
0003919: 03                                        ; memory offset
000391a: 1a                                        ; drop
000391b: 0b                                        ; end
000390e: 0d                                        ; FIXUP func body size
; function body 401
000391c: 00                                        ; func body size (guess)
000391d: 00                                        ; local decl count
000391e: 41                                        ; i32.const
000391f: 01                                        ; i32 literal
0003920: 42                                        ; i64.const
0003921: 02                                        ; i64 literal
0003922: 42                                        ; i64.const
0003923: 03                                        ; i64 literal
0003924: fe                                        ; prefix
0003925: 4c                                        ; i64.atomic.rmw8.cmpxchg_u
0003926: 00                                        ; alignment
0003927: 03                                        ; memory offset
0003928: 1a                                        ; drop
0003929: 0b                                        ; end
000391c: 0d                                        ; FIXUP func body size
; function body 402
000392a: 00                                        ; func body size (guess)
000392b: 00                                        ; local decl count
000392c: 41                                        ; i32.const
000392d: 01                                        ; i32 literal
000392e: 42                                        ; i64.const
000392f: 02                                        ; i64 literal
0003930: 42                                        ; i64.const
0003931: 03                                        ; i64 literal
0003932: fe                                        ; prefix
0003933: 4d                                        ; i64.atomic.rmw16.cmpxchg_u
0003934: 01                                        ; alignment
0003935: 03                                        ; memory offset
0003936: 1a                                        ; drop
0003937: 0b                                        ; end
000392a: 0d                                        ; FIXUP func body size
; function body 403
0003938: 00                                        ; func body size (guess)
0003939: 00                                        ; local decl count
000393a: 41                                        ; i32.const
000393b: 01                                        ; i32 literal
000393c: 42                                        ; i64.const
000393d: 02                                        ; i64 literal
000393e: 42                                        ; i64.const
000393f: 03                                        ; i64 literal
0003940: fe                                        ; prefix
0003941: 4e                                        ; i64.atomic.rmw32.cmpxchg_u
0003942: 02                                        ; alignment
0003943: 03                                        ; memory offset
0003944: 1a                                        ; drop
0003945: 0b                                        ; end
0003938: 0d                                        ; FIXUP func body size
; move data: [1b27, 3946) -> [1b28, 3947)
0001b26: 9f3c                                      ; FIXUP section size
; section "Data" (11)
0003947: 0b                                        ; section code
0003948: 00                                        ; section size (guess)
0003949: 01                                        ; num data segments
; data segment header 0
000394a: 01                                      
000394b: 00                                        ; data segment size
; data segment data 0
0003948: 03                                        ; FIXUP section size
BeginModule(version: 1)
  BeginTypeSection(8)
    OnTypeCount(2)
    OnType(index: 0, params: [], results: [])
    OnType(index: 1, params: [i32], results: [])
  EndTypeSection
  BeginImportSection(14)
    OnImportCount(1)
    OnImport(index: 0, kind: func, module: "host", field: "print")
    OnImportFunc(import_index: 0, func_index: 0, sig_index: 1)
  EndImportSection
  BeginFunctionSection(406)
    OnFunctionCount(404)
    OnFunction(index: 1, sig_index: 0)
    OnFunction(index: 2, sig_index: 0)
    OnFunction(index: 3, sig_index: 0)
    OnFunction(index: 4, sig_index: 0)
    OnFunction(index: 5, sig_index: 0)
    OnFunction(index: 6, sig_index: 0)
    OnFunction(index: 7, sig_index: 0)
    OnFunction(index: 8, sig_index: 0)
    OnFunction(index: 9, sig_index: 0)
    OnFunction(index: 10, sig_index: 0)
    OnFunction(index: 11, sig_index: 0)
    OnFunction(index: 12, sig_index: 0)
    OnFunction(index: 13, sig_index: 0)
    OnFunction(index: 14, sig_index: 0)
    OnFunction(index: 15, sig_index: 0)
    OnFunction(index: 16, sig_index: 0)
    OnFunction(index: 17, sig_index: 0)
    OnFunction(index: 18, sig_index: 0)
    OnFunction(index: 19, sig_index: 0)
    OnFunction(index: 20, sig_index: 0)
    OnFunction(index: 21, sig_index: 0)
    OnFunction(index: 22, sig_index: 0)
    OnFunction(index: 23, sig_index: 0)
    OnFunction(index: 24, sig_index: 0)
    OnFunction(index: 25, sig_index: 0)
    OnFunction(index: 26, sig_index: 0)
    OnFunction(index: 27, sig_index: 0)
    OnFunction(index: 28, sig_index: 0)
    OnFunction(index: 29, sig_index: 0)
    OnFunction(index: 30, sig_index: 0)
    OnFunction(index: 31, sig_index: 0)
    OnFunction(index: 32, sig_index: 0)
    OnFunction(index: 33, sig_index: 0)
    OnFunction(index: 34, sig_index: 0)
    OnFunction(index: 35, sig_index: 0)
    OnFunction(index: 36, sig_index: 0)
    OnFunction(index: 37, sig_index: 0)
    OnFunction(index: 38, sig_index: 0)
    OnFunction(index: 39, sig_index: 0)
    OnFunction(index: 40, sig_index: 0)
    OnFunction(index: 41, sig_index: 0)
    OnFunction(index: 42, sig_index: 0)
    OnFunction(index: 43, sig_index: 0)
    OnFunction(index: 44, sig_index: 0)
    OnFunction(index: 45, sig_index: 0)
    OnFunction(index: 46, sig_index: 0)
    OnFunction(index: 47, sig_index: 0)
    OnFunction(index: 48, sig_index: 0)
    OnFunction(index: 49, sig_index: 0)
    OnFunction(index: 50, sig_index: 0)
    OnFunction(index: 51, sig_index: 0)
    OnFunction(index: 52, sig_index: 0)
    OnFunction(index: 53, sig_index: 0)
    OnFunction(index: 54, sig_index: 0)
    OnFunction(index: 55, sig_index: 0)
    OnFunction(index: 56, sig_index: 0)
    OnFunction(index: 57, sig_index: 0)
    OnFunction(index: 58, sig_index: 0)
    OnFunction(index: 59, sig_index: 0)
    OnFunction(index: 60, sig_index: 0)
    OnFunction(index: 61, sig_index: 0)
    OnFunction(index: 62, sig_index: 0)
    OnFunction(index: 63, sig_index: 0)
    OnFunction(index: 64, sig_index: 0)
    OnFunction(index: 65, sig_index: 0)
    OnFunction(index: 66, sig_index: 0)
    OnFunction(index: 67, sig_index: 0)
    OnFunction(index: 68, sig_index: 0)
    OnFunction(index: 69, sig_index: 0)
    OnFunction(index: 70, sig_index: 0)
    OnFunction(index: 71, sig_index: 0)
    OnFunction(index: 72, sig_index: 0)
    OnFunction(index: 73, sig_index: 0)
    OnFunction(index: 74, sig_index: 0)
    OnFunction(index: 75, sig_index: 0)
    OnFunction(index: 76, sig_index: 0)
    OnFunction(index: 77, sig_index: 0)
    OnFunction(index: 78, sig_index: 0)
    OnFunction(index: 79, sig_index: 0)
    OnFunction(index: 80, sig_index: 0)
    OnFunction(index: 81, sig_index: 0)
    OnFunction(index: 82, sig_index: 0)
    OnFunction(index: 83, sig_index: 0)
    OnFunction(index: 84, sig_index: 0)
    OnFunction(index: 85, sig_index: 0)
    OnFunction(index: 86, sig_index: 0)
    OnFunction(index: 87, sig_index: 0)
    OnFunction(index: 88, sig_index: 0)
    OnFunction(index: 89, sig_index: 0)
    OnFunction(index: 90, sig_index: 0)
    OnFunction(index: 91, sig_index: 0)
    OnFunction(index: 92, sig_index: 0)
    OnFunction(index: 93, sig_index: 0)
    OnFunction(index: 94, sig_index: 0)
    OnFunction(index: 95, sig_index: 0)
    OnFunction(index: 96, sig_index: 0)
    OnFunction(index: 97, sig_index: 0)
    OnFunction(index: 98, sig_index: 0)
    OnFunction(index: 99, sig_index: 0)
    OnFunction(index: 100, sig_index: 0)
    OnFunction(index: 101, sig_index: 0)
    OnFunction(index: 102, sig_index: 0)
    OnFunction(index: 103, sig_index: 0)
    OnFunction(index: 104, sig_index: 0)
    OnFunction(index: 105, sig_index: 0)
    OnFunction(index: 106, sig_index: 0)
    OnFunction(index: 107, sig_index: 0)
    OnFunction(index: 108, sig_index: 0)
    OnFunction(index: 109, sig_index: 0)
    OnFunction(index: 110, sig_index: 0)
    OnFunction(index: 111, sig_index: 0)
    OnFunction(index: 112, sig_index: 0)
    OnFunction(index: 113, sig_index: 0)
    OnFunction(index: 114, sig_index: 0)
    OnFunction(index: 115, sig_index: 0)
    OnFunction(index: 116, sig_index: 0)
    OnFunction(index: 117, sig_index: 0)
    OnFunction(index: 118, sig_index: 0)
    OnFunction(index: 119, sig_index: 0)
    OnFunction(index: 120, sig_index: 0)
    OnFunction(index: 121, sig_index: 0)
    OnFunction(index: 122, sig_index: 0)
    OnFunction(index: 123, sig_index: 0)
    OnFunction(index: 124, sig_index: 0)
    OnFunction(index: 125, sig_index: 0)
    OnFunction(index: 126, sig_index: 0)
    OnFunction(index: 127, sig_index: 0)
    OnFunction(index: 128, sig_index: 0)
    OnFunction(index: 129, sig_index: 0)
    OnFunction(index: 130, sig_index: 0)
    OnFunction(index: 131, sig_index: 0)
    OnFunction(index: 132, sig_index: 0)
    OnFunction(index: 133, sig_index: 0)
    OnFunction(index: 134, sig_index: 0)
    OnFunction(index: 135, sig_index: 0)
    OnFunction(index: 136, sig_index: 0)
    OnFunction(index: 137, sig_index: 0)
    OnFunction(index: 138, sig_index: 0)
    OnFunction(index: 139, sig_index: 0)
    OnFunction(index: 140, sig_index: 0)
    OnFunction(index: 141, sig_index: 0)
    OnFunction(index: 142, sig_index: 0)
    OnFunction(index: 143, sig_index: 0)
    OnFunction(index: 144, sig_index: 0)
    OnFunction(index: 145, sig_index: 0)
    OnFunction(index: 146, sig_index: 0)
    OnFunction(index: 147, sig_index: 0)
    OnFunction(index: 148, sig_index: 0)
    OnFunction(index: 149, sig_index: 0)
    OnFunction(index: 150, sig_index: 0)
    OnFunction(index: 151, sig_index: 0)
    OnFunction(index: 152, sig_index: 0)
    OnFunction(index: 153, sig_index: 0)
    OnFunction(index: 154, sig_index: 0)
    OnFunction(index: 155, sig_index: 0)
    OnFunction(index: 156, sig_index: 0)
    OnFunction(index: 157, sig_index: 0)
    OnFunction(index: 158, sig_index: 0)
    OnFunction(index: 159, sig_index: 0)
    OnFunction(index: 160, sig_index: 0)
    OnFunction(index: 161, sig_index: 0)
    OnFunction(index: 162, sig_index: 0)
    OnFunction(index: 163, sig_index: 0)
    OnFunction(index: 164, sig_index: 0)
    OnFunction(index: 165, sig_index: 0)
    OnFunction(index: 166, sig_index: 0)
    OnFunction(index: 167, sig_index: 0)
    OnFunction(index: 168, sig_index: 0)
    OnFunction(index: 169, sig_index: 0)
    OnFunction(index: 170, sig_index: 0)
    OnFunction(index: 171, sig_index: 0)
    OnFunction(index: 172, sig_index: 0)
    OnFunction(index: 173, sig_index: 0)
    OnFunction(index: 174, sig_index: 0)
    OnFunction(index: 175, sig_index: 0)
    OnFunction(index: 176, sig_index: 0)
    OnFunction(index: 177, sig_index: 0)
    OnFunction(index: 178, sig_index: 0)
    OnFunction(index: 179, sig_index: 0)
    OnFunction(index: 180, sig_index: 0)
    OnFunction(index: 181, sig_index: 0)
    OnFunction(index: 182, sig_index: 0)
    OnFunction(index: 183, sig_index: 0)
    OnFunction(index: 184, sig_index: 0)
    OnFunction(index: 185, sig_index: 0)
    OnFunction(index: 186, sig_index: 0)
    OnFunction(index: 187, sig_index: 0)
    OnFunction(index: 188, sig_index: 0)
    OnFunction(index: 189, sig_index: 0)
    OnFunction(index: 190, sig_index: 0)
    OnFunction(index: 191, sig_index: 0)
    OnFunction(index: 192, sig_index: 0)
    OnFunction(index: 193, sig_index: 0)
    OnFunction(index: 194, sig_index: 0)
    OnFunction(index: 195, sig_index: 0)
    OnFunction(index: 196, sig_index: 0)
    OnFunction(index: 197, sig_index: 0)
    OnFunction(index: 198, sig_index: 0)
    OnFunction(index: 199, sig_index: 0)
    OnFunction(index: 200, sig_index: 0)
    OnFunction(index: 201, sig_index: 0)
    OnFunction(index: 202, sig_index: 0)
    OnFunction(index: 203, sig_index: 0)
    OnFunction(index: 204, sig_index: 0)
    OnFunction(index: 205, sig_index: 0)
    OnFunction(index: 206, sig_index: 0)
    OnFunction(index: 207, sig_index: 0)
    OnFunction(index: 208, sig_index: 0)
    OnFunction(index: 209, sig_index: 0)
    OnFunction(index: 210, sig_index: 0)
    OnFunction(index: 211, sig_index: 0)
    OnFunction(index: 212, sig_index: 0)
    OnFunction(index: 213, sig_index: 0)
    OnFunction(index: 214, sig_index: 0)
    OnFunction(index: 215, sig_index: 0)
    OnFunction(index: 216, sig_index: 0)
    OnFunction(index: 217, sig_index: 0)
    OnFunction(index: 218, sig_index: 0)
    OnFunction(index: 219, sig_index: 0)
    OnFunction(index: 220, sig_index: 0)
    OnFunction(index: 221, sig_index: 0)
    OnFunction(index: 222, sig_index: 0)
    OnFunction(index: 223, sig_index: 0)
    OnFunction(index: 224, sig_index: 0)
    OnFunction(index: 225, sig_index: 0)
    OnFunction(index: 226, sig_index: 0)
    OnFunction(index: 227, sig_index: 0)
    OnFunction(index: 228, sig_index: 0)
    OnFunction(index: 229, sig_index: 0)
    OnFunction(index: 230, sig_index: 0)
    OnFunction(index: 231, sig_index: 0)
    OnFunction(index: 232, sig_index: 0)
    OnFunction(index: 233, sig_index: 0)
    OnFunction(index: 234, sig_index: 0)
    OnFunction(index: 235, sig_index: 0)
    OnFunction(index: 236, sig_index: 0)
    OnFunction(index: 237, sig_index: 0)
    OnFunction(index: 238, sig_index: 0)
    OnFunction(index: 239, sig_index: 0)
    OnFunction(index: 240, sig_index: 0)
    OnFunction(index: 241, sig_index: 0)
    OnFunction(index: 242, sig_index: 0)
    OnFunction(index: 243, sig_index: 0)
    OnFunction(index: 244, sig_index: 0)
    OnFunction(index: 245, sig_index: 0)
    OnFunction(index: 246, sig_index: 0)
    OnFunction(index: 247, sig_index: 0)
    OnFunction(index: 248, sig_index: 0)
    OnFunction(index: 249, sig_index: 0)
    OnFunction(index: 250, sig_index: 0)
    OnFunction(index: 251, sig_index: 0)
    OnFunction(index: 252, sig_index: 0)
    OnFunction(index: 253, sig_index: 0)
    OnFunction(index: 254, sig_index: 0)
    OnFunction(index: 255, sig_index: 0)
    OnFunction(index: 256, sig_index: 0)
    OnFunction(index: 257, sig_index: 0)
    OnFunction(index: 258, sig_index: 0)
    OnFunction(index: 259, sig_index: 0)
    OnFunction(index: 260, sig_index: 0)
    OnFunction(index: 261, sig_index: 0)
    OnFunction(index: 262, sig_index: 0)
    OnFunction(index: 263, sig_index: 0)
    OnFunction(index: 264, sig_index: 0)
    OnFunction(index: 265, sig_index: 0)
    OnFunction(index: 266, sig_index: 0)
    OnFunction(index: 267, sig_index: 0)
    OnFunction(index: 268, sig_index: 0)
    OnFunction(index: 269, sig_index: 0)
    OnFunction(index: 270, sig_index: 0)
    OnFunction(index: 271, sig_index: 0)
    OnFunction(index: 272, sig_index: 0)
    OnFunction(index: 273, sig_index: 0)
    OnFunction(index: 274, sig_index: 0)
    OnFunction(index: 275, sig_index: 0)
    OnFunction(index: 276, sig_index: 0)
    OnFunction(index: 277, sig_index: 0)
    OnFunction(index: 278, sig_index: 0)
    OnFunction(index: 279, sig_index: 0)
    OnFunction(index: 280, sig_index: 0)
    OnFunction(index: 281, sig_index: 0)
    OnFunction(index: 282, sig_index: 0)
    OnFunction(index: 283, sig_index: 0)
    OnFunction(index: 284, sig_index: 0)
    OnFunction(index: 285, sig_index: 0)
    OnFunction(index: 286, sig_index: 0)
    OnFunction(index: 287, sig_index: 0)
    OnFunction(index: 288, sig_index: 0)
    OnFunction(index: 289, sig_index: 0)
    OnFunction(index: 290, sig_index: 0)
    OnFunction(index: 291, sig_index: 0)
    OnFunction(index: 292, sig_index: 0)
    OnFunction(index: 293, sig_index: 0)
    OnFunction(index: 294, sig_index: 0)
    OnFunction(index: 295, sig_index: 0)
    OnFunction(index: 296, sig_index: 0)
    OnFunction(index: 297, sig_index: 0)
    OnFunction(index: 298, sig_index: 0)
    OnFunction(index: 299, sig_index: 0)
    OnFunction(index: 300, sig_index: 0)
    OnFunction(index: 301, sig_index: 0)
    OnFunction(index: 302, sig_index: 0)
    OnFunction(index: 303, sig_index: 0)
    OnFunction(index: 304, sig_index: 0)
    OnFunction(index: 305, sig_index: 0)
    OnFunction(index: 306, sig_index: 0)
    OnFunction(index: 307, sig_index: 0)
    OnFunction(index: 308, sig_index: 0)
    OnFunction(index: 309, sig_index: 0)
    OnFunction(index: 310, sig_index: 0)
    OnFunction(index: 311, sig_index: 0)
    OnFunction(index: 312, sig_index: 0)
    OnFunction(index: 313, sig_index: 0)
    OnFunction(index: 314, sig_index: 0)
    OnFunction(index: 315, sig_index: 0)
    OnFunction(index: 316, sig_index: 0)
    OnFunction(index: 317, sig_index: 0)
    OnFunction(index: 318, sig_index: 0)
    OnFunction(index: 319, sig_index: 0)
    OnFunction(index: 320, sig_index: 0)
    OnFunction(index: 321, sig_index: 0)
    OnFunction(index: 322, sig_index: 0)
    OnFunction(index: 323, sig_index: 0)
    OnFunction(index: 324, sig_index: 0)
    OnFunction(index: 325, sig_index: 0)
    OnFunction(index: 326, sig_index: 0)
    OnFunction(index: 327, sig_index: 0)
    OnFunction(index: 328, sig_index: 0)
    OnFunction(index: 329, sig_index: 0)
    OnFunction(index: 330, sig_index: 0)
    OnFunction(index: 331, sig_index: 0)
    OnFunction(index: 332, sig_index: 0)
    OnFunction(index: 333, sig_index: 0)
    OnFunction(index: 334, sig_index: 0)
    OnFunction(index: 335, sig_index: 0)
    OnFunction(index: 336, sig_index: 0)
    OnFunction(index: 337, sig_index: 0)
    OnFunction(index: 338, sig_index: 0)
    OnFunction(index: 339, sig_index: 0)
    OnFunction(index: 340, sig_index: 0)
    OnFunction(index: 341, sig_index: 0)
    OnFunction(index: 342, sig_index: 0)
    OnFunction(index: 343, sig_index: 0)
    OnFunction(index: 344, sig_index: 0)
    OnFunction(index: 345, sig_index: 0)
    OnFunction(index: 346, sig_index: 0)
    OnFunction(index: 347, sig_index: 0)
    OnFunction(index: 348, sig_index: 0)
    OnFunction(index: 349, sig_index: 0)
    OnFunction(index: 350, sig_index: 0)
    OnFunction(index: 351, sig_index: 0)
    OnFunction(index: 352, sig_index: 0)
    OnFunction(index: 353, sig_index: 0)
    OnFunction(index: 354, sig_index: 0)
    OnFunction(index: 355, sig_index: 0)
    OnFunction(index: 356, sig_index: 0)
    OnFunction(index: 357, sig_index: 0)
    OnFunction(index: 358, sig_index: 0)
    OnFunction(index: 359, sig_index: 0)
    OnFunction(index: 360, sig_index: 0)
    OnFunction(index: 361, sig_index: 0)
    OnFunction(index: 362, sig_index: 0)
    OnFunction(index: 363, sig_index: 0)
    OnFunction(index: 364, sig_index: 0)
    OnFunction(index: 365, sig_index: 0)
    OnFunction(index: 366, sig_index: 0)
    OnFunction(index: 367, sig_index: 0)
    OnFunction(index: 368, sig_index: 0)
    OnFunction(index: 369, sig_index: 0)
    OnFunction(index: 370, sig_index: 0)
    OnFunction(index: 371, sig_index: 0)
    OnFunction(index: 372, sig_index: 0)
    OnFunction(index: 373, sig_index: 0)
    OnFunction(index: 374, sig_index: 0)
    OnFunction(index: 375, sig_index: 0)
    OnFunction(index: 376, sig_index: 0)
    OnFunction(index: 377, sig_index: 0)
    OnFunction(index: 378, sig_index: 0)
    OnFunction(index: 379, sig_index: 0)
    OnFunction(index: 380, sig_index: 0)
    OnFunction(index: 381, sig_index: 0)
    OnFunction(index: 382, sig_index: 0)
    OnFunction(index: 383, sig_index: 0)
    OnFunction(index: 384, sig_index: 0)
    OnFunction(index: 385, sig_index: 0)
    OnFunction(index: 386, sig_index: 0)
    OnFunction(index: 387, sig_index: 0)
    OnFunction(index: 388, sig_index: 0)
    OnFunction(index: 389, sig_index: 0)
    OnFunction(index: 390, sig_index: 0)
    OnFunction(index: 391, sig_index: 0)
    OnFunction(index: 392, sig_index: 0)
    OnFunction(index: 393, sig_index: 0)
    OnFunction(index: 394, sig_index: 0)
    OnFunction(index: 395, sig_index: 0)
    OnFunction(index: 396, sig_index: 0)
    OnFunction(index: 397, sig_index: 0)
    OnFunction(index: 398, sig_index: 0)
    OnFunction(index: 399, sig_index: 0)
    OnFunction(index: 400, sig_index: 0)
    OnFunction(index: 401, sig_index: 0)
    OnFunction(index: 402, sig_index: 0)
    OnFunction(index: 403, sig_index: 0)
    OnFunction(index: 404, sig_index: 0)
  EndFunctionSection
  BeginTableSection(5)
    OnTableCount(1)
    OnTable(index: 0, elem_type: funcref, initial: 2, max: 2)
  EndTableSection
  BeginMemorySection(4)
    OnMemoryCount(1)
    OnMemory(index: 0, initial: 1, max: 1)
  EndMemorySection
  BeginGlobalSection(6)
    OnGlobalCount(1)
    BeginGlobal(index: 0, type: i32, mutable: true)
    BeginGlobalInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndGlobalInitExpr(0)
    EndGlobal(0)
  EndGlobalSection
  BeginExportSection(6466)
    OnExportCount(403)
    OnExport(index: 0, kind: func, item_index: 2, name: "unreachable")
    OnExport(index: 1, kind: func, item_index: 3, name: "br")
    OnExport(index: 2, kind: func, item_index: 4, name: "br_table")
    OnExport(index: 3, kind: func, item_index: 5, name: "return")
    OnExport(index: 4, kind: func, item_index: 6, name: "call")
    OnExport(index: 5, kind: func, item_index: 7, name: "call_indirect")
    OnExport(index: 6, kind: func, item_index: 8, name: "return_call")
    OnExport(index: 7, kind: func, item_index: 9, name: "return_call_indirect")
    OnExport(index: 8, kind: func, item_index: 10, name: "drop")
    OnExport(index: 9, kind: func, item_index: 11, name: "select")
    OnExport(index: 10, kind: func, item_index: 12, name: "get_local")
    OnExport(index: 11, kind: func, item_index: 13, name: "set_local")
    OnExport(index: 12, kind: func, item_index: 14, name: "tee_local")
    OnExport(index: 13, kind: func, item_index: 15, name: "get_global")
    OnExport(index: 14, kind: func, item_index: 16, name: "set_global")
    OnExport(index: 15, kind: func, item_index: 17, name: "i32.load")
    OnExport(index: 16, kind: func, item_index: 18, name: "i64.load")
    OnExport(index: 17, kind: func, item_index: 19, name: "f32.load")
    OnExport(index: 18, kind: func, item_index: 20, name: "f64.load")
    OnExport(index: 19, kind: func, item_index: 21, name: "i32.load8_s")
    OnExport(index: 20, kind: func, item_index: 22, name: "i32.load8_u")
    OnExport(index: 21, kind: func, item_index: 23, name: "i32.load16_s")
    OnExport(index: 22, kind: func, item_index: 24, name: "i32.load16_u")
    OnExport(index: 23, kind: func, item_index: 25, name: "i64.load8_s")
    OnExport(index: 24, kind: func, item_index: 26, name: "i64.load8_u")
    OnExport(index: 25, kind: func, item_index: 27, name: "i64.load16_s")
    OnExport(index: 26, kind: func, item_index: 28, name: "i64.load16_u")
    OnExport(index: 27, kind: func, item_index: 29, name: "i64.load32_s")
    OnExport(index: 28, kind: func, item_index: 30, name: "i64.load32_u")
    OnExport(index: 29, kind: func, item_index: 31, name: "i32.store")
    OnExport(index: 30, kind: func, item_index: 32, name: "i64.store")
    OnExport(index: 31, kind: func, item_index: 33, name: "f32.store")
    OnExport(index: 32, kind: func, item_index: 34, name: "f64.store")
    OnExport(index: 33, kind: func, item_index: 35, name: "i32.store8")
    OnExport(index: 34, kind: func, item_index: 36, name: "i32.store16")
    OnExport(index: 35, kind: func, item_index: 37, name: "i64.store8")
    OnExport(index: 36, kind: func, item_index: 38, name: "i64.store16")
    OnExport(index: 37, kind: func, item_index: 39, name: "i64.store32")
    OnExport(index: 38, kind: func, item_index: 40, name: "current_memory")
    OnExport(index: 39, kind: func, item_index: 41, name: "grow_memory")
    OnExport(index: 40, kind: func, item_index: 42, name: "i32.const")
    OnExport(index: 41, kind: func, item_index: 43, name: "i64.const")
    OnExport(index: 42, kind: func, item_index: 44, name: "f32.const")
    OnExport(index: 43, kind: func, item_index: 45, name: "f64.const")
    OnExport(index: 44, kind: func, item_index: 46, name: "i32.eqz")
    OnExport(index: 45, kind: func, item_index: 47, name: "i32.eq")
    OnExport(index: 46, kind: func, item_index: 48, name: "i32.ne")
    OnExport(index: 47, kind: func, item_index: 49, name: "i32.lt_s")
    OnExport(index: 48, kind: func, item_index: 50, name: "i32.lt_u")
    OnExport(index: 49, kind: func, item_index: 51, name: "i32.gt_s")
    OnExport(index: 50, kind: func, item_index: 52, name: "i32.gt_u")
    OnExport(index: 51, kind: func, item_index: 53, name: "i32.le_s")
    OnExport(index: 52, kind: func, item_index: 54, name: "i32.le_u")
    OnExport(index: 53, kind: func, item_index: 55, name: "i32.ge_s")
    OnExport(index: 54, kind: func, item_index: 56, name: "i32.ge_u")
    OnExport(index: 55, kind: func, item_index: 57, name: "i64.eqz")
    OnExport(index: 56, kind: func, item_index: 58, name: "i64.eq")
    OnExport(index: 57, kind: func, item_index: 59, name: "i64.ne")
    OnExport(index: 58, kind: func, item_index: 60, name: "i64.lt_s")
    OnExport(index: 59, kind: func, item_index: 61, name: "i64.lt_u")
    OnExport(index: 60, kind: func, item_index: 62, name: "i64.gt_s")
    OnExport(index: 61, kind: func, item_index: 63, name: "i64.gt_u")
    OnExport(index: 62, kind: func, item_index: 64, name: "i64.le_s")
    OnExport(index: 63, kind: func, item_index: 65, name: "i64.le_u")
    OnExport(index: 64, kind: func, item_index: 66, name: "i64.ge_s")
    OnExport(index: 65, kind: func, item_index: 67, name: "i64.ge_u")
    OnExport(index: 66, kind: func, item_index: 68, name: "f32.eq")
    OnExport(index: 67, kind: func, item_index: 69, name: "f32.ne")
    OnExport(index: 68, kind: func, item_index: 70, name: "f32.lt")
    OnExport(index: 69, kind: func, item_index: 71, name: "f32.gt")
    OnExport(index: 70, kind: func, item_index: 72, name: "f32.le")
    OnExport(index: 71, kind: func, item_index: 73, name: "f32.ge")
    OnExport(index: 72, kind: func, item_index: 74, name: "f64.eq")
    OnExport(index: 73, kind: func, item_index: 75, name: "f64.ne")
    OnExport(index: 74, kind: func, item_index: 76, name: "f64.lt")
    OnExport(index: 75, kind: func, item_index: 77, name: "f64.gt")
    OnExport(index: 76, kind: func, item_index: 78, name: "f64.le")
    OnExport(index: 77, kind: func, item_index: 79, name: "f64.ge")
    OnExport(index: 78, kind: func, item_index: 80, name: "i32.clz")
    OnExport(index: 79, kind: func, item_index: 81, name: "i32.ctz")
    OnExport(index: 80, kind: func, item_index: 82, name: "i32.popcnt")
    OnExport(index: 81, kind: func, item_index: 83, name: "i32.add")
    OnExport(index: 82, kind: func, item_index: 84, name: "i32.sub")
    OnExport(index: 83, kind: func, item_index: 85, name: "i32.mul")
    OnExport(index: 84, kind: func, item_index: 86, name: "i32.div_s")
    OnExport(index: 85, kind: func, item_index: 87, name: "i32.div_u")
    OnExport(index: 86, kind: func, item_index: 88, name: "i32.rem_s")
    OnExport(index: 87, kind: func, item_index: 89, name: "i32.rem_u")
    OnExport(index: 88, kind: func, item_index: 90, name: "i32.and")
    OnExport(index: 89, kind: func, item_index: 91, name: "i32.or")
    OnExport(index: 90, kind: func, item_index: 92, name: "i32.xor")
    OnExport(index: 91, kind: func, item_index: 93, name: "i32.shl")
    OnExport(index: 92, kind: func, item_index: 94, name: "i32.shr_s")
    OnExport(index: 93, kind: func, item_index: 95, name: "i32.shr_u")
    OnExport(index: 94, kind: func, item_index: 96, name: "i32.rotl")
    OnExport(index: 95, kind: func, item_index: 97, name: "i32.rotr")
    OnExport(index: 96, kind: func, item_index: 98, name: "i64.clz")
    OnExport(index: 97, kind: func, item_index: 99, name: "i64.ctz")
    OnExport(index: 98, kind: func, item_index: 100, name: "i64.popcnt")
    OnExport(index: 99, kind: func, item_index: 101, name: "i64.add")
    OnExport(index: 100, kind: func, item_index: 102, name: "i64.sub")
    OnExport(index: 101, kind: func, item_index: 103, name: "i64.mul")
    OnExport(index: 102, kind: func, item_index: 104, name: "i64.div_s")
    OnExport(index: 103, kind: func, item_index: 105, name: "i64.div_u")
    OnExport(index: 104, kind: func, item_index: 106, name: "i64.rem_s")
    OnExport(index: 105, kind: func, item_index: 107, name: "i64.rem_u")
    OnExport(index: 106, kind: func, item_index: 108, name: "i64.and")
    OnExport(index: 107, kind: func, item_index: 109, name: "i64.or")
    OnExport(index: 108, kind: func, item_index: 110, name: "i64.xor")
    OnExport(index: 109, kind: func, item_index: 111, name: "i64.shl")
    OnExport(index: 110, kind: func, item_index: 112, name: "i64.shr_s")
    OnExport(index: 111, kind: func, item_index: 113, name: "i64.shr_u")
    OnExport(index: 112, kind: func, item_index: 114, name: "i64.rotl")
    OnExport(index: 113, kind: func, item_index: 115, name: "i64.rotr")
    OnExport(index: 114, kind: func, item_index: 116, name: "f32.abs")
    OnExport(index: 115, kind: func, item_index: 117, name: "f32.neg")
    OnExport(index: 116, kind: func, item_index: 118, name: "f32.ceil")
    OnExport(index: 117, kind: func, item_index: 119, name: "f32.floor")
    OnExport(index: 118, kind: func, item_index: 120, name: "f32.trunc")
    OnExport(index: 119, kind: func, item_index: 121, name: "f32.nearest")
    OnExport(index: 120, kind: func, item_index: 122, name: "f32.sqrt")
    OnExport(index: 121, kind: func, item_index: 123, name: "f32.add")
    OnExport(index: 122, kind: func, item_index: 124, name: "f32.sub")
    OnExport(index: 123, kind: func, item_index: 125, name: "f32.mul")
    OnExport(index: 124, kind: func, item_index: 126, name: "f32.div")
    OnExport(index: 125, kind: func, item_index: 127, name: "f32.min")
    OnExport(index: 126, kind: func, item_index: 128, name: "f32.max")
    OnExport(index: 127, kind: func, item_index: 129, name: "f32.copysign")
    OnExport(index: 128, kind: func, item_index: 130, name: "f64.abs")
    OnExport(index: 129, kind: func, item_index: 131, name: "f64.neg")
    OnExport(index: 130, kind: func, item_index: 132, name: "f64.ceil")
    OnExport(index: 131, kind: func, item_index: 133, name: "f64.floor")
    OnExport(index: 132, kind: func, item_index: 134, name: "f64.trunc")
    OnExport(index: 133, kind: func, item_index: 135, name: "f64.nearest")
    OnExport(index: 134, kind: func, item_index: 136, name: "f64.sqrt")
    OnExport(index: 135, kind: func, item_index: 137, name: "f64.add")
    OnExport(index: 136, kind: func, item_index: 138, name: "f64.sub")
    OnExport(index: 137, kind: func, item_index: 139, name: "f64.mul")
    OnExport(index: 138, kind: func, item_index: 140, name: "f64.div")
    OnExport(index: 139, kind: func, item_index: 141, name: "f64.min")
    OnExport(index: 140, kind: func, item_index: 142, name: "f64.max")
    OnExport(index: 141, kind: func, item_index: 143, name: "f64.copysign")
    OnExport(index: 142, kind: func, item_index: 144, name: "i32.wrap/i64")
    OnExport(index: 143, kind: func, item_index: 145, name: "i32.trunc_s/f32")
    OnExport(index: 144, kind: func, item_index: 146, name: "i32.trunc_u/f32")
    OnExport(index: 145, kind: func, item_index: 147, name: "i32.trunc_s/f64")
    OnExport(index: 146, kind: func, item_index: 148, name: "i32.trunc_u/f64")
    OnExport(index: 147, kind: func, item_index: 149, name: "i64.extend_s/i32")
    OnExport(index: 148, kind: func, item_index: 150, name: "i64.extend_u/i32")
    OnExport(index: 149, kind: func, item_index: 151, name: "i64.trunc_s/f32")
    OnExport(index: 150, kind: func, item_index: 152, name: "i64.trunc_u/f32")
    OnExport(index: 151, kind: func, item_index: 153, name: "i64.trunc_s/f64")
    OnExport(index: 152, kind: func, item_index: 154, name: "i64.trunc_u/f64")
    OnExport(index: 153, kind: func, item_index: 155, name: "f32.convert_s/i32")
    OnExport(index: 154, kind: func, item_index: 156, name: "f32.convert_u/i32")
    OnExport(index: 155, kind: func, item_index: 157, name: "f32.convert_s/i64")
    OnExport(index: 156, kind: func, item_index: 158, name: "f32.convert_u/i64")
    OnExport(index: 157, kind: func, item_index: 159, name: "f32.demote/f64")
    OnExport(index: 158, kind: func, item_index: 160, name: "f64.convert_s/i32")
    OnExport(index: 159, kind: func, item_index: 161, name: "f64.convert_u/i32")
    OnExport(index: 160, kind: func, item_index: 162, name: "f64.convert_s/i64")
    OnExport(index: 161, kind: func, item_index: 163, name: "f64.convert_u/i64")
    OnExport(index: 162, kind: func, item_index: 164, name: "f64.promote/f32")
    OnExport(index: 163, kind: func, item_index: 165, name: "i32.reinterpret/f32")
    OnExport(index: 164, kind: func, item_index: 166, name: "f32.reinterpret/i32")
    OnExport(index: 165, kind: func, item_index: 167, name: "i64.reinterpret/f64")
    OnExport(index: 166, kind: func, item_index: 168, name: "f64.reinterpret/i64")
    OnExport(index: 167, kind: func, item_index: 169, name: "i32.extend8_s")
    OnExport(index: 168, kind: func, item_index: 170, name: "i32.extend16_s")
    OnExport(index: 169, kind: func, item_index: 171, name: "i64.extend8_s")
    OnExport(index: 170, kind: func, item_index: 172, name: "i64.extend16_s")
    OnExport(index: 171, kind: func, item_index: 173, name: "i64.extend32_s")
    OnExport(index: 172, kind: func, item_index: 174, name: "alloca")
    OnExport(index: 173, kind: func, item_index: 175, name: "br_unless")
    OnExport(index: 174, kind: func, item_index: 176, name: "call_host")
    OnExport(index: 175, kind: func, item_index: 177, name: "data")
    OnExport(index: 176, kind: func, item_index: 178, name: "drop_keep")
    OnExport(index: 177, kind: func, item_index: 179, name: "i32.trunc_s:sat/f32")
    OnExport(index: 178, kind: func, item_index: 180, name: "i32.trunc_u:sat/f32")
    OnExport(index: 179, kind: func, item_index: 181, name: "i32.trunc_s:sat/f64")
    OnExport(index: 180, kind: func, item_index: 182, name: "i32.trunc_u:sat/f64")
    OnExport(index: 181, kind: func, item_index: 183, name: "i64.trunc_s:sat/f32")
    OnExport(index: 182, kind: func, item_index: 184, name: "i64.trunc_u:sat/f32")
    OnExport(index: 183, kind: func, item_index: 185, name: "i64.trunc_s:sat/f64")
    OnExport(index: 184, kind: func, item_index: 186, name: "i64.trunc_u:sat/f64")
    OnExport(index: 185, kind: func, item_index: 187, name: "memory.init")
    OnExport(index: 186, kind: func, item_index: 188, name: "data.drop")
    OnExport(index: 187, kind: func, item_index: 189, name: "memory.copy")
    OnExport(index: 188, kind: func, item_index: 190, name: "memory.fill")
    OnExport(index: 189, kind: func, item_index: 191, name: "table.init")
    OnExport(index: 190, kind: func, item_index: 192, name: "elem.drop")
    OnExport(index: 191, kind: func, item_index: 193, name: "table.copy")
    OnExport(index: 192, kind: func, item_index: 194, name: "v128.load")
    OnExport(index: 193, kind: func, item_index: 195, name: "v128.store")
    OnExport(index: 194, kind: func, item_index: 196, name: "v128.const")
    OnExport(index: 195, kind: func, item_index: 197, name: "i8x16.splat")
    OnExport(index: 196, kind: func, item_index: 198, name: "i8x16.extract_lane_s")
    OnExport(index: 197, kind: func, item_index: 199, name: "i8x16.extract_lane_u")
    OnExport(index: 198, kind: func, item_index: 200, name: "i8x16.replace_lane")
    OnExport(index: 199, kind: func, item_index: 201, name: "i16x8.splat")
    OnExport(index: 200, kind: func, item_index: 202, name: "i16x8.extract_lane_s")
    OnExport(index: 201, kind: func, item_index: 203, name: "i16x8.extract_lane_u")
    OnExport(index: 202, kind: func, item_index: 204, name: "i16x8.replace_lane")
    OnExport(index: 203, kind: func, item_index: 205, name: "i32x4.splat")
    OnExport(index: 204, kind: func, item_index: 206, name: "i32x4.extract_lane")
    OnExport(index: 205, kind: func, item_index: 207, name: "i32x4.replace_lane")
    OnExport(index: 206, kind: func, item_index: 208, name: "i64x2.splat")
    OnExport(index: 207, kind: func, item_index: 209, name: "i64x2.extract_lane")
    OnExport(index: 208, kind: func, item_index: 210, name: "i64x2.replace_lane")
    OnExport(index: 209, kind: func, item_index: 211, name: "f32x4.splat")
    OnExport(index: 210, kind: func, item_index: 212, name: "f32x4.extract_lane")
    OnExport(index: 211, kind: func, item_index: 213, name: "f32x4.replace_lane")
    OnExport(index: 212, kind: func, item_index: 214, name: "f64x2.splat")
    OnExport(index: 213, kind: func, item_index: 215, name: "f64x2.extract_lane")
    OnExport(index: 214, kind: func, item_index: 216, name: "f64x2.replace_lane")
    OnExport(index: 215, kind: func, item_index: 217, name: "i8x16.eq")
    OnExport(index: 216, kind: func, item_index: 218, name: "i8x16.ne")
    OnExport(index: 217, kind: func, item_index: 219, name: "i8x16.lt_s")
    OnExport(index: 218, kind: func, item_index: 220, name: "i8x16.lt_u")
    OnExport(index: 219, kind: func, item_index: 221, name: "i8x16.gt_s")
    OnExport(index: 220, kind: func, item_index: 222, name: "i8x16.gt_u")
    OnExport(index: 221, kind: func, item_index: 223, name: "i8x16.le_s")
    OnExport(index: 222, kind: func, item_index: 224, name: "i8x16.le_u")
    OnExport(index: 223, kind: func, item_index: 225, name: "i8x16.ge_s")
    OnExport(index: 224, kind: func, item_index: 226, name: "i8x16.ge_u")
    OnExport(index: 225, kind: func, item_index: 227, name: "i16x8.eq")
    OnExport(index: 226, kind: func, item_index: 228, name: "i16x8.ne")
    OnExport(index: 227, kind: func, item_index: 229, name: "i16x8.lt_s")
    OnExport(index: 228, kind: func, item_index: 230, name: "i16x8.lt_u")
    OnExport(index: 229, kind: func, item_index: 231, name: "i16x8.gt_s")
    OnExport(index: 230, kind: func, item_index: 232, name: "i16x8.gt_u")
    OnExport(index: 231, kind: func, item_index: 233, name: "i16x8.le_s")
    OnExport(index: 232, kind: func, item_index: 234, name: "i16x8.le_u")
    OnExport(index: 233, kind: func, item_index: 235, name: "i16x8.ge_s")
    OnExport(index: 234, kind: func, item_index: 236, name: "i16x8.ge_u")
    OnExport(index: 235, kind: func, item_index: 237, name: "i32x4.eq")
    OnExport(index: 236, kind: func, item_index: 238, name: "i32x4.ne")
    OnExport(index: 237, kind: func, item_index: 239, name: "i32x4.lt_s")
    OnExport(index: 238, kind: func, item_index: 240, name: "i32x4.lt_u")
    OnExport(index: 239, kind: func, item_index: 241, name: "i32x4.gt_s")
    OnExport(index: 240, kind: func, item_index: 242, name: "i32x4.gt_u")
    OnExport(index: 241, kind: func, item_index: 243, name: "i32x4.le_s")
    OnExport(index: 242, kind: func, item_index: 244, name: "i32x4.le_u")
    OnExport(index: 243, kind: func, item_index: 245, name: "i32x4.ge_s")
    OnExport(index: 244, kind: func, item_index: 246, name: "i32x4.ge_u")
    OnExport(index: 245, kind: func, item_index: 247, name: "f32x4.eq")
    OnExport(index: 246, kind: func, item_index: 248, name: "f32x4.ne")
    OnExport(index: 247, kind: func, item_index: 249, name: "f32x4.lt")
    OnExport(index: 248, kind: func, item_index: 250, name: "f32x4.gt")
    OnExport(index: 249, kind: func, item_index: 251, name: "f32x4.le")
    OnExport(index: 250, kind: func, item_index: 252, name: "f32x4.ge")
    OnExport(index: 251, kind: func, item_index: 253, name: "f64x2.eq")
    OnExport(index: 252, kind: func, item_index: 254, name: "f64x2.ne")
    OnExport(index: 253, kind: func, item_index: 255, name: "f64x2.lt")
    OnExport(index: 254, kind: func, item_index: 256, name: "f64x2.gt")
    OnExport(index: 255, kind: func, item_index: 257, name: "f64x2.le")
    OnExport(index: 256, kind: func, item_index: 258, name: "f64x2.ge")
    OnExport(index: 257, kind: func, item_index: 259, name: "v128.not")
    OnExport(index: 258, kind: func, item_index: 260, name: "v128.and")
    OnExport(index: 259, kind: func, item_index: 261, name: "v128.or")
    OnExport(index: 260, kind: func, item_index: 262, name: "v128.xor")
    OnExport(index: 261, kind: func, item_index: 263, name: "v128.bitselect")
    OnExport(index: 262, kind: func, item_index: 264, name: "i8x16.neg")
    OnExport(index: 263, kind: func, item_index: 265, name: "i8x16.any_true")
    OnExport(index: 264, kind: func, item_index: 266, name: "i8x16.all_true")
    OnExport(index: 265, kind: func, item_index: 267, name: "i8x16.shl")
    OnExport(index: 266, kind: func, item_index: 268, name: "i8x16.shr_s")
    OnExport(index: 267, kind: func, item_index: 269, name: "i8x16.shr_u")
    OnExport(index: 268, kind: func, item_index: 270, name: "i8x16.add")
    OnExport(index: 269, kind: func, item_index: 271, name: "i8x16.add_saturate_s")
    OnExport(index: 270, kind: func, item_index: 272, name: "i8x16.add_saturate_u")
    OnExport(index: 271, kind: func, item_index: 273, name: "i8x16.sub")
    OnExport(index: 272, kind: func, item_index: 274, name: "i8x16.sub_saturate_s")
    OnExport(index: 273, kind: func, item_index: 275, name: "i8x16.sub_saturate_u")
    OnExport(index: 274, kind: func, item_index: 276, name: "i8x16.mul")
    OnExport(index: 275, kind: func, item_index: 277, name: "i16x8.neg")
    OnExport(index: 276, kind: func, item_index: 278, name: "i16x8.any_true")
    OnExport(index: 277, kind: func, item_index: 279, name: "i16x8.all_true")
    OnExport(index: 278, kind: func, item_index: 280, name: "i16x8.shl")
    OnExport(index: 279, kind: func, item_index: 281, name: "i16x8.shr_s")
    OnExport(index: 280, kind: func, item_index: 282, name: "i16x8.shr_u")
    OnExport(index: 281, kind: func, item_index: 283, name: "i16x8.add")
    OnExport(index: 282, kind: func, item_index: 284, name: "i16x8.add_saturate_s")
    OnExport(index: 283, kind: func, item_index: 285, name: "i16x8.add_saturate_u")
    OnExport(index: 284, kind: func, item_index: 286, name: "i16x8.sub")
    OnExport(index: 285, kind: func, item_index: 287, name: "i16x8.sub_saturate_s")
    OnExport(index: 286, kind: func, item_index: 288, name: "i16x8.sub_saturate_u")
    OnExport(index: 287, kind: func, item_index: 289, name: "i16x8.mul")
    OnExport(index: 288, kind: func, item_index: 290, name: "i32x4.neg")
    OnExport(index: 289, kind: func, item_index: 291, name: "i32x4.any_true")
    OnExport(index: 290, kind: func, item_index: 292, name: "i32x4.all_true")
    OnExport(index: 291, kind: func, item_index: 293, name: "i32x4.shl")
    OnExport(index: 292, kind: func, item_index: 294, name: "i32x4.shr_s")
    OnExport(index: 293, kind: func, item_index: 295, name: "i32x4.shr_u")
    OnExport(index: 294, kind: func, item_index: 296, name: "i32x4.add")
    OnExport(index: 295, kind: func, item_index: 297, name: "i32x4.sub")
    OnExport(index: 296, kind: func, item_index: 298, name: "i32x4.mul")
    OnExport(index: 297, kind: func, item_index: 299, name: "i64x2.neg")
    OnExport(index: 298, kind: func, item_index: 300, name: "i64x2.any_true")
    OnExport(index: 299, kind: func, item_index: 301, name: "i64x2.all_true")
    OnExport(index: 300, kind: func, item_index: 302, name: "i64x2.shl")
    OnExport(index: 301, kind: func, item_index: 303, name: "i64x2.shr_s")
    OnExport(index: 302, kind: func, item_index: 304, name: "i64x2.shr_u")
    OnExport(index: 303, kind: func, item_index: 305, name: "i64x2.add")
    OnExport(index: 304, kind: func, item_index: 306, name: "i64x2.sub")
    OnExport(index: 305, kind: func, item_index: 307, name: "f32x4.abs")
    OnExport(index: 306, kind: func, item_index: 308, name: "f32x4.neg")
    OnExport(index: 307, kind: func, item_index: 309, name: "f32x4.sqrt")
    OnExport(index: 308, kind: func, item_index: 310, name: "f32x4.add")
    OnExport(index: 309, kind: func, item_index: 311, name: "f32x4.sub")
    OnExport(index: 310, kind: func, item_index: 312, name: "f32x4.mul")
    OnExport(index: 311, kind: func, item_index: 313, name: "f32x4.div")
    OnExport(index: 312, kind: func, item_index: 314, name: "f32x4.min")
    OnExport(index: 313, kind: func, item_index: 315, name: "f32x4.max")
    OnExport(index: 314, kind: func, item_index: 316, name: "f64x2.abs")
    OnExport(index: 315, kind: func, item_index: 317, name: "f64x2.neg")
    OnExport(index: 316, kind: func, item_index: 318, name: "f64x2.sqrt")
    OnExport(index: 317, kind: func, item_index: 319, name: "f64x2.add")
    OnExport(index: 318, kind: func, item_index: 320, name: "f64x2.sub")
    OnExport(index: 319, kind: func, item_index: 321, name: "f64x2.mul")
    OnExport(index: 320, kind: func, item_index: 322, name: "f64x2.div")
    OnExport(index: 321, kind: func, item_index: 323, name: "f64x2.min")
    OnExport(index: 322, kind: func, item_index: 324, name: "f64x2.max")
    OnExport(index: 323, kind: func, item_index: 325, name: "i32x4.trunc_sat_f32x4_s")
    OnExport(index: 324, kind: func, item_index: 326, name: "i32x4.trunc_sat_f32x4_u")
    OnExport(index: 325, kind: func, item_index: 327, name: "i64x2.trunc_sat_f64x2_s")
    OnExport(index: 326, kind: func, item_index: 328, name: "i64x2.trunc_sat_f64x2_u")
    OnExport(index: 327, kind: func, item_index: 329, name: "f32x4.convert_i32x4_s")
    OnExport(index: 328, kind: func, item_index: 330, name: "f32x4.convert_i32x4_u")
    OnExport(index: 329, kind: func, item_index: 331, name: "f64x2.convert_i64x2_s")
    OnExport(index: 330, kind: func, item_index: 332, name: "f64x2.convert_i64x2_u")
    OnExport(index: 331, kind: func, item_index: 333, name: "v8x16.swizzle")
    OnExport(index: 332, kind: func, item_index: 334, name: "v8x16.shuffle")
    OnExport(index: 333, kind: func, item_index: 335, name: "i8x16.load_splat")
    OnExport(index: 334, kind: func, item_index: 336, name: "i16x8.load_splat")
    OnExport(index: 335, kind: func, item_index: 337, name: "i32x4.load_splat")
    OnExport(index: 336, kind: func, item_index: 338, name: "i64x2.load_splat")
    OnExport(index: 337, kind: func, item_index: 339, name: "atomic.notify")
    OnExport(index: 338, kind: func, item_index: 340, name: "i32.atomic.wait")
    OnExport(index: 339, kind: func, item_index: 341, name: "i64.atomic.wait")
    OnExport(index: 340, kind: func, item_index: 342, name: "i32.atomic.load")
    OnExport(index: 341, kind: func, item_index: 343, name: "i64.atomic.load")
    OnExport(index: 342, kind: func, item_index: 344, name: "i32.atomic.load8_u")
    OnExport(index: 343, kind: func, item_index: 345, name: "i32.atomic.load16_u")
    OnExport(index: 344, kind: func, item_index: 346, name: "i64.atomic.load8_u")
    OnExport(index: 345, kind: func, item_index: 347, name: "i64.atomic.load16_u")
    OnExport(index: 346, kind: func, item_index: 348, name: "i64.atomic.load32_u")
    OnExport(index: 347, kind: func, item_index: 349, name: "i32.atomic.store")
    OnExport(index: 348, kind: func, item_index: 350, name: "i64.atomic.store")
    OnExport(index: 349, kind: func, item_index: 351, name: "i32.atomic.store8")
    OnExport(index: 350, kind: func, item_index: 352, name: "i32.atomic.store16")
    OnExport(index: 351, kind: func, item_index: 353, name: "i64.atomic.store8")
    OnExport(index: 352, kind: func, item_index: 354, name: "i64.atomic.store16")
    OnExport(index: 353, kind: func, item_index: 355, name: "i64.atomic.store32")
    OnExport(index: 354, kind: func, item_index: 356, name: "i32.atomic.rmw.add")
    OnExport(index: 355, kind: func, item_index: 357, name: "i64.atomic.rmw.add")
    OnExport(index: 356, kind: func, item_index: 358, name: "i32.atomic.rmw8.add_u")
    OnExport(index: 357, kind: func, item_index: 359, name: "i32.atomic.rmw16.add_u")
    OnExport(index: 358, kind: func, item_index: 360, name: "i64.atomic.rmw8.add_u")
    OnExport(index: 359, kind: func, item_index: 361, name: "i64.atomic.rmw16.add_u")
    OnExport(index: 360, kind: func, item_index: 362, name: "i64.atomic.rmw32.add_u")
    OnExport(index: 361, kind: func, item_index: 363, name: "i32.atomic.rmw.sub")
    OnExport(index: 362, kind: func, item_index: 364, name: "i64.atomic.rmw.sub")
    OnExport(index: 363, kind: func, item_index: 365, name: "i32.atomic.rmw8.sub_u")
    OnExport(index: 364, kind: func, item_index: 366, name: "i32.atomic.rmw16.sub_u")
    OnExport(index: 365, kind: func, item_index: 367, name: "i64.atomic.rmw8.sub_u")
    OnExport(index: 366, kind: func, item_index: 368, name: "i64.atomic.rmw16.sub_u")
    OnExport(index: 367, kind: func, item_index: 369, name: "i64.atomic.rmw32.sub_u")
    OnExport(index: 368, kind: func, item_index: 370, name: "i32.atomic.rmw.and")
    OnExport(index: 369, kind: func, item_index: 371, name: "i64.atomic.rmw.and")
    OnExport(index: 370, kind: func, item_index: 372, name: "i32.atomic.rmw8.and_u")
    OnExport(index: 371, kind: func, item_index: 373, name: "i32.atomic.rmw16.and_u")
    OnExport(index: 372, kind: func, item_index: 374, name: "i64.atomic.rmw8.and_u")
    OnExport(index: 373, kind: func, item_index: 375, name: "i64.atomic.rmw16.and_u")
    OnExport(index: 374, kind: func, item_index: 376, name: "i64.atomic.rmw32.and_u")
    OnExport(index: 375, kind: func, item_index: 377, name: "i32.atomic.rmw.or")
    OnExport(index: 376, kind: func, item_index: 378, name: "i64.atomic.rmw.or")
    OnExport(index: 377, kind: func, item_index: 379, name: "i32.atomic.rmw8.or_u")
    OnExport(index: 378, kind: func, item_index: 380, name: "i32.atomic.rmw16.or_u")
    OnExport(index: 379, kind: func, item_index: 381, name: "i64.atomic.rmw8.or_u")
    OnExport(index: 380, kind: func, item_index: 382, name: "i64.atomic.rmw16.or_u")
    OnExport(index: 381, kind: func, item_index: 383, name: "i64.atomic.rmw32.or_u")
    OnExport(index: 382, kind: func, item_index: 384, name: "i32.atomic.rmw.xor")
    OnExport(index: 383, kind: func, item_index: 385, name: "i64.atomic.rmw.xor")
    OnExport(index: 384, kind: func, item_index: 386, name: "i32.atomic.rmw8.xor_u")
    OnExport(index: 385, kind: func, item_index: 387, name: "i32.atomic.rmw16.xor_u")
    OnExport(index: 386, kind: func, item_index: 388, name: "i64.atomic.rmw8.xor_u")
    OnExport(index: 387, kind: func, item_index: 389, name: "i64.atomic.rmw16.xor_u")
    OnExport(index: 388, kind: func, item_index: 390, name: "i64.atomic.rmw32.xor_u")
    OnExport(index: 389, kind: func, item_index: 391, name: "i32.atomic.rmw.xchg")
    OnExport(index: 390, kind: func, item_index: 392, name: "i64.atomic.rmw.xchg")
    OnExport(index: 391, kind: func, item_index: 393, name: "i32.atomic.rmw8.xchg_u")
    OnExport(index: 392, kind: func, item_index: 394, name: "i32.atomic.rmw16.xchg_u")
    OnExport(index: 393, kind: func, item_index: 395, name: "i64.atomic.rmw8.xchg_u")
    OnExport(index: 394, kind: func, item_index: 396, name: "i64.atomic.rmw16.xchg_u")
    OnExport(index: 395, kind: func, item_index: 397, name: "i64.atomic.rmw32.xchg_u")
    OnExport(index: 396, kind: func, item_index: 398, name: "i32.atomic.rmw.cmpxchg")
    OnExport(index: 397, kind: func, item_index: 399, name: "i64.atomic.rmw.cmpxchg")
    OnExport(index: 398, kind: func, item_index: 400, name: "i32.atomic.rmw8.cmpxchg_u")
    OnExport(index: 399, kind: func, item_index: 401, name: "i32.atomic.rmw16.cmpxchg_u")
    OnExport(index: 400, kind: func, item_index: 402, name: "i64.atomic.rmw8.cmpxchg_u")
    OnExport(index: 401, kind: func, item_index: 403, name: "i64.atomic.rmw16.cmpxchg_u")
    OnExport(index: 402, kind: func, item_index: 404, name: "i64.atomic.rmw32.cmpxchg_u")
  EndExportSection
  BeginElemSection(11)
    OnElemSegmentCount(2)
    BeginElemSegment(index: 0, table_index: 0, flags: 0, elem_type: funcref)
    BeginElemSegmentInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndElemSegmentInitExpr(0)
    OnElemSegmentElemExprCount(index: 0, count: 2)
    OnElemSegmentElemExpr_RefFunc(index: 0, func_index: 1)
    OnElemSegmentElemExpr_RefFunc(index: 0, func_index: 1)
    EndElemSegment(0)
    BeginElemSegment(index: 1, table_index: 0, flags: 1, elem_type: funcref)
    OnElemSegmentElemExprCount(index: 1, count: 0)
    EndElemSegment(1)
  EndElemSection
  BeginDataCountSection(1)
    OnDataCount(1)
  EndDataCountSection
  BeginCodeSection(7711)
    OnFunctionBodyCount(404)
    BeginFunctionBody(1, size:2)
    OnLocalDeclCount(0)
    EndFunctionBody(1)
    BeginFunctionBody(2, size:3)
    OnLocalDeclCount(0)
    OnUnreachableExpr
    EndFunctionBody(2)
    BeginFunctionBody(3, size:4)
    OnLocalDeclCount(0)
    OnBrExpr(depth: 0)
    EndFunctionBody(3)
    BeginFunctionBody(4, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(4)
    BeginFunctionBody(5, size:3)
    OnLocalDeclCount(0)
    OnReturnExpr
    EndFunctionBody(5)
    BeginFunctionBody(6, size:4)
    OnLocalDeclCount(0)
    OnCallExpr(func_index: 1)
    EndFunctionBody(6)
    BeginFunctionBody(7, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallIndirectExpr(sig_index: 0, table_index: 0)
    EndFunctionBody(7)
    BeginFunctionBody(8, size:4)
    OnLocalDeclCount(0)
    OnReturnCallExpr(func_index: 1)
    EndFunctionBody(8)
    BeginFunctionBody(9, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnReturnCallIndirectExpr(sig_index: 0, table_index: 0)
    EndFunctionBody(9)
    BeginFunctionBody(10, size:5)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(10)
    BeginFunctionBody(11, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnSelectExpr
    OnDropExpr
    EndFunctionBody(11)
    BeginFunctionBody(12, size:7)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnLocalGetExpr(index: 0)
    OnDropExpr
    EndFunctionBody(12)
    BeginFunctionBody(13, size:8)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnLocalSetExpr(index: 0)
    EndFunctionBody(13)
    BeginFunctionBody(14, size:9)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnLocalTeeExpr(index: 0)
    OnDropExpr
    EndFunctionBody(14)
    BeginFunctionBody(15, size:5)
    OnLocalDeclCount(0)
    OnGlobalGetExpr(index: 0)
    OnDropExpr
    EndFunctionBody(15)
    BeginFunctionBody(16, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnGlobalSetExpr(index: 0)
    EndFunctionBody(16)
    BeginFunctionBody(17, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load" (40), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(17)
    BeginFunctionBody(18, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load" (41), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(18)
    BeginFunctionBody(19, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f32.load" (42), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(19)
    BeginFunctionBody(20, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f64.load" (43), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(20)
    BeginFunctionBody(21, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_s" (44), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(21)
    BeginFunctionBody(22, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_u" (45), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(22)
    BeginFunctionBody(23, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_s" (46), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(23)
    BeginFunctionBody(24, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_u" (47), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(24)
    BeginFunctionBody(25, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_s" (48), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(25)
    BeginFunctionBody(26, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_u" (49), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(26)
    BeginFunctionBody(27, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_s" (50), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(27)
    BeginFunctionBody(28, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_u" (51), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(28)
    BeginFunctionBody(29, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_s" (52), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(29)
    BeginFunctionBody(30, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_u" (53), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(30)
    BeginFunctionBody(31, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store" (54), align log2: 2, offset: 2)
    EndFunctionBody(31)
    BeginFunctionBody(32, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store" (55), align log2: 3, offset: 2)
    EndFunctionBody(32)
    BeginFunctionBody(33, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF32ConstExpr(2 (0x0440000000))
    OnStoreExpr(opcode: "f32.store" (56), align log2: 2, offset: 2)
    EndFunctionBody(33)
    BeginFunctionBody(34, size:16)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnStoreExpr(opcode: "f64.store" (57), align log2: 3, offset: 2)
    EndFunctionBody(34)
    BeginFunctionBody(35, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store8" (58), align log2: 0, offset: 2)
    EndFunctionBody(35)
    BeginFunctionBody(36, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store16" (59), align log2: 1, offset: 2)
    EndFunctionBody(36)
    BeginFunctionBody(37, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store8" (60), align log2: 0, offset: 2)
    EndFunctionBody(37)
    BeginFunctionBody(38, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store16" (61), align log2: 1, offset: 2)
    EndFunctionBody(38)
    BeginFunctionBody(39, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store32" (62), align log2: 2, offset: 2)
    EndFunctionBody(39)
    BeginFunctionBody(40, size:5)
    OnLocalDeclCount(0)
    OnMemorySizeExpr
    OnDropExpr
    EndFunctionBody(40)
    BeginFunctionBody(41, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnMemoryGrowExpr
    OnDropExpr
    EndFunctionBody(41)
    BeginFunctionBody(42, size:5)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(42)
    BeginFunctionBody(43, size:5)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(43)
    BeginFunctionBody(44, size:8)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnDropExpr
    EndFunctionBody(44)
    BeginFunctionBody(45, size:12)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnDropExpr
    EndFunctionBody(45)
    BeginFunctionBody(46, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i32.eqz" (69))
    OnDropExpr
    EndFunctionBody(46)
    BeginFunctionBody(47, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.eq" (70))
    OnDropExpr
    EndFunctionBody(47)
    BeginFunctionBody(48, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ne" (71))
    OnDropExpr
    EndFunctionBody(48)
    BeginFunctionBody(49, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_s" (72))
    OnDropExpr
    EndFunctionBody(49)
    BeginFunctionBody(50, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_u" (73))
    OnDropExpr
    EndFunctionBody(50)
    BeginFunctionBody(51, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_s" (74))
    OnDropExpr
    EndFunctionBody(51)
    BeginFunctionBody(52, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_u" (75))
    OnDropExpr
    EndFunctionBody(52)
    BeginFunctionBody(53, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_s" (76))
    OnDropExpr
    EndFunctionBody(53)
    BeginFunctionBody(54, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_u" (77))
    OnDropExpr
    EndFunctionBody(54)
    BeginFunctionBody(55, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_s" (78))
    OnDropExpr
    EndFunctionBody(55)
    BeginFunctionBody(56, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_u" (79))
    OnDropExpr
    EndFunctionBody(56)
    BeginFunctionBody(57, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i64.eqz" (80))
    OnDropExpr
    EndFunctionBody(57)
    BeginFunctionBody(58, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.eq" (81))
    OnDropExpr
    EndFunctionBody(58)
    BeginFunctionBody(59, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ne" (82))
    OnDropExpr
    EndFunctionBody(59)
    BeginFunctionBody(60, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_s" (83))
    OnDropExpr
    EndFunctionBody(60)
    BeginFunctionBody(61, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_u" (84))
    OnDropExpr
    EndFunctionBody(61)
    BeginFunctionBody(62, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_s" (85))
    OnDropExpr
    EndFunctionBody(62)
    BeginFunctionBody(63, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_u" (86))
    OnDropExpr
    EndFunctionBody(63)
    BeginFunctionBody(64, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_s" (87))
    OnDropExpr
    EndFunctionBody(64)
    BeginFunctionBody(65, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_u" (88))
    OnDropExpr
    EndFunctionBody(65)
    BeginFunctionBody(66, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_s" (89))
    OnDropExpr
    EndFunctionBody(66)
    BeginFunctionBody(67, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_u" (90))
    OnDropExpr
    EndFunctionBody(67)
    BeginFunctionBody(68, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.eq" (91))
    OnDropExpr
    EndFunctionBody(68)
    BeginFunctionBody(69, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ne" (92))
    OnDropExpr
    EndFunctionBody(69)
    BeginFunctionBody(70, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.lt" (93))
    OnDropExpr
    EndFunctionBody(70)
    BeginFunctionBody(71, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.gt" (94))
    OnDropExpr
    EndFunctionBody(71)
    BeginFunctionBody(72, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.le" (95))
    OnDropExpr
    EndFunctionBody(72)
    BeginFunctionBody(73, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ge" (96))
    OnDropExpr
    EndFunctionBody(73)
    BeginFunctionBody(74, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.eq" (97))
    OnDropExpr
    EndFunctionBody(74)
    BeginFunctionBody(75, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ne" (98))
    OnDropExpr
    EndFunctionBody(75)
    BeginFunctionBody(76, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.lt" (99))
    OnDropExpr
    EndFunctionBody(76)
    BeginFunctionBody(77, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.gt" (100))
    OnDropExpr
    EndFunctionBody(77)
    BeginFunctionBody(78, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.le" (101))
    OnDropExpr
    EndFunctionBody(78)
    BeginFunctionBody(79, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ge" (102))
    OnDropExpr
    EndFunctionBody(79)
    BeginFunctionBody(80, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.clz" (103))
    OnDropExpr
    EndFunctionBody(80)
    BeginFunctionBody(81, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.ctz" (104))
    OnDropExpr
    EndFunctionBody(81)
    BeginFunctionBody(82, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.popcnt" (105))
    OnDropExpr
    EndFunctionBody(82)
    BeginFunctionBody(83, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.add" (106))
    OnDropExpr
    EndFunctionBody(83)
    BeginFunctionBody(84, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.sub" (107))
    OnDropExpr
    EndFunctionBody(84)
    BeginFunctionBody(85, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.mul" (108))
    OnDropExpr
    EndFunctionBody(85)
    BeginFunctionBody(86, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_s" (109))
    OnDropExpr
    EndFunctionBody(86)
    BeginFunctionBody(87, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_u" (110))
    OnDropExpr
    EndFunctionBody(87)
    BeginFunctionBody(88, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_s" (111))
    OnDropExpr
    EndFunctionBody(88)
    BeginFunctionBody(89, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_u" (112))
    OnDropExpr
    EndFunctionBody(89)
    BeginFunctionBody(90, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.and" (113))
    OnDropExpr
    EndFunctionBody(90)
    BeginFunctionBody(91, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.or" (114))
    OnDropExpr
    EndFunctionBody(91)
    BeginFunctionBody(92, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.xor" (115))
    OnDropExpr
    EndFunctionBody(92)
    BeginFunctionBody(93, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shl" (116))
    OnDropExpr
    EndFunctionBody(93)
    BeginFunctionBody(94, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_s" (117))
    OnDropExpr
    EndFunctionBody(94)
    BeginFunctionBody(95, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_u" (118))
    OnDropExpr
    EndFunctionBody(95)
    BeginFunctionBody(96, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotl" (119))
    OnDropExpr
    EndFunctionBody(96)
    BeginFunctionBody(97, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotr" (120))
    OnDropExpr
    EndFunctionBody(97)
    BeginFunctionBody(98, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.clz" (121))
    OnDropExpr
    EndFunctionBody(98)
    BeginFunctionBody(99, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.ctz" (122))
    OnDropExpr
    EndFunctionBody(99)
    BeginFunctionBody(100, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.popcnt" (123))
    OnDropExpr
    EndFunctionBody(100)
    BeginFunctionBody(101, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.add" (124))
    OnDropExpr
    EndFunctionBody(101)
    BeginFunctionBody(102, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.sub" (125))
    OnDropExpr
    EndFunctionBody(102)
    BeginFunctionBody(103, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.mul" (126))
    OnDropExpr
    EndFunctionBody(103)
    BeginFunctionBody(104, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_s" (127))
    OnDropExpr
    EndFunctionBody(104)
    BeginFunctionBody(105, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_u" (128))
    OnDropExpr
    EndFunctionBody(105)
    BeginFunctionBody(106, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_s" (129))
    OnDropExpr
    EndFunctionBody(106)
    BeginFunctionBody(107, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_u" (130))
    OnDropExpr
    EndFunctionBody(107)
    BeginFunctionBody(108, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.and" (131))
    OnDropExpr
    EndFunctionBody(108)
    BeginFunctionBody(109, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.or" (132))
    OnDropExpr
    EndFunctionBody(109)
    BeginFunctionBody(110, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.xor" (133))
    OnDropExpr
    EndFunctionBody(110)
    BeginFunctionBody(111, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shl" (134))
    OnDropExpr
    EndFunctionBody(111)
    BeginFunctionBody(112, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_s" (135))
    OnDropExpr
    EndFunctionBody(112)
    BeginFunctionBody(113, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_u" (136))
    OnDropExpr
    EndFunctionBody(113)
    BeginFunctionBody(114, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotl" (137))
    OnDropExpr
    EndFunctionBody(114)
    BeginFunctionBody(115, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotr" (138))
    OnDropExpr
    EndFunctionBody(115)
    BeginFunctionBody(116, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.abs" (139))
    OnDropExpr
    EndFunctionBody(116)
    BeginFunctionBody(117, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.neg" (140))
    OnDropExpr
    EndFunctionBody(117)
    BeginFunctionBody(118, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.ceil" (141))
    OnDropExpr
    EndFunctionBody(118)
    BeginFunctionBody(119, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.floor" (142))
    OnDropExpr
    EndFunctionBody(119)
    BeginFunctionBody(120, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.trunc" (143))
    OnDropExpr
    EndFunctionBody(120)
    BeginFunctionBody(121, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.nearest" (144))
    OnDropExpr
    EndFunctionBody(121)
    BeginFunctionBody(122, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.sqrt" (145))
    OnDropExpr
    EndFunctionBody(122)
    BeginFunctionBody(123, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.add" (146))
    OnDropExpr
    EndFunctionBody(123)
    BeginFunctionBody(124, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.sub" (147))
    OnDropExpr
    EndFunctionBody(124)
    BeginFunctionBody(125, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.mul" (148))
    OnDropExpr
    EndFunctionBody(125)
    BeginFunctionBody(126, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.div" (149))
    OnDropExpr
    EndFunctionBody(126)
    BeginFunctionBody(127, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.min" (150))
    OnDropExpr
    EndFunctionBody(127)
    BeginFunctionBody(128, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.max" (151))
    OnDropExpr
    EndFunctionBody(128)
    BeginFunctionBody(129, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.copysign" (152))
    OnDropExpr
    EndFunctionBody(129)
    BeginFunctionBody(130, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.abs" (153))
    OnDropExpr
    EndFunctionBody(130)
    BeginFunctionBody(131, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.neg" (154))
    OnDropExpr
    EndFunctionBody(131)
    BeginFunctionBody(132, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.ceil" (155))
    OnDropExpr
    EndFunctionBody(132)
    BeginFunctionBody(133, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.floor" (156))
    OnDropExpr
    EndFunctionBody(133)
    BeginFunctionBody(134, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.trunc" (157))
    OnDropExpr
    EndFunctionBody(134)
    BeginFunctionBody(135, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.nearest" (158))
    OnDropExpr
    EndFunctionBody(135)
    BeginFunctionBody(136, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.sqrt" (159))
    OnDropExpr
    EndFunctionBody(136)
    BeginFunctionBody(137, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.add" (160))
    OnDropExpr
    EndFunctionBody(137)
    BeginFunctionBody(138, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.sub" (161))
    OnDropExpr
    EndFunctionBody(138)
    BeginFunctionBody(139, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.mul" (162))
    OnDropExpr
    EndFunctionBody(139)
    BeginFunctionBody(140, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.div" (163))
    OnDropExpr
    EndFunctionBody(140)
    BeginFunctionBody(141, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.min" (164))
    OnDropExpr
    EndFunctionBody(141)
    BeginFunctionBody(142, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.max" (165))
    OnDropExpr
    EndFunctionBody(142)
    BeginFunctionBody(143, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.copysign" (166))
    OnDropExpr
    EndFunctionBody(143)
    BeginFunctionBody(144, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i32.wrap_i64" (167))
    OnDropExpr
    EndFunctionBody(144)
    BeginFunctionBody(145, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_f32_s" (168))
    OnDropExpr
    EndFunctionBody(145)
    BeginFunctionBody(146, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_f32_u" (169))
    OnDropExpr
    EndFunctionBody(146)
    BeginFunctionBody(147, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_f64_s" (170))
    OnDropExpr
    EndFunctionBody(147)
    BeginFunctionBody(148, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_f64_u" (171))
    OnDropExpr
    EndFunctionBody(148)
    BeginFunctionBody(149, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_i32_s" (172))
    OnDropExpr
    EndFunctionBody(149)
    BeginFunctionBody(150, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_i32_u" (173))
    OnDropExpr
    EndFunctionBody(150)
    BeginFunctionBody(151, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_f32_s" (174))
    OnDropExpr
    EndFunctionBody(151)
    BeginFunctionBody(152, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_f32_u" (175))
    OnDropExpr
    EndFunctionBody(152)
    BeginFunctionBody(153, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_f64_s" (176))
    OnDropExpr
    EndFunctionBody(153)
    BeginFunctionBody(154, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_f64_u" (177))
    OnDropExpr
    EndFunctionBody(154)
    BeginFunctionBody(155, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i32_s" (178))
    OnDropExpr
    EndFunctionBody(155)
    BeginFunctionBody(156, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i32_u" (179))
    OnDropExpr
    EndFunctionBody(156)
    BeginFunctionBody(157, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i64_s" (180))
    OnDropExpr
    EndFunctionBody(157)
    BeginFunctionBody(158, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i64_u" (181))
    OnDropExpr
    EndFunctionBody(158)
    BeginFunctionBody(159, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("f32.demote_f64" (182))
    OnDropExpr
    EndFunctionBody(159)
    BeginFunctionBody(160, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i32_s" (183))
    OnDropExpr
    EndFunctionBody(160)
    BeginFunctionBody(161, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i32_u" (184))
    OnDropExpr
    EndFunctionBody(161)
    BeginFunctionBody(162, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i64_s" (185))
    OnDropExpr
    EndFunctionBody(162)
    BeginFunctionBody(163, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i64_u" (186))
    OnDropExpr
    EndFunctionBody(163)
    BeginFunctionBody(164, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("f64.promote_f32" (187))
    OnDropExpr
    EndFunctionBody(164)
    BeginFunctionBody(165, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.reinterpret_i32" (190))
    OnDropExpr
    EndFunctionBody(165)
    BeginFunctionBody(166, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.reinterpret_f32" (188))
    OnDropExpr
    EndFunctionBody(166)
    BeginFunctionBody(167, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.reinterpret_i64" (191))
    OnDropExpr
    EndFunctionBody(167)
    BeginFunctionBody(168, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.reinterpret_f64" (189))
    OnDropExpr
    EndFunctionBody(168)
    BeginFunctionBody(169, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend8_s" (192))
    OnDropExpr
    EndFunctionBody(169)
    BeginFunctionBody(170, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend16_s" (193))
    OnDropExpr
    EndFunctionBody(170)
    BeginFunctionBody(171, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend8_s" (194))
    OnDropExpr
    EndFunctionBody(171)
    BeginFunctionBody(172, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend16_s" (195))
    OnDropExpr
    EndFunctionBody(172)
    BeginFunctionBody(173, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend32_s" (196))
    OnDropExpr
    EndFunctionBody(173)
    BeginFunctionBody(174, size:4)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    EndFunctionBody(174)
    BeginFunctionBody(175, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrIfExpr(depth: 0)
    EndFunctionBody(175)
    BeginFunctionBody(176, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallExpr(func_index: 0)
    EndFunctionBody(176)
    BeginFunctionBody(177, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(177)
    BeginFunctionBody(178, size:12)
    OnLocalDeclCount(0)
    OnBlockExpr(sig: i32)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBrExpr(depth: 0)
    OnEndExpr
    OnDropExpr
    EndFunctionBody(178)
    BeginFunctionBody(179, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_sat_f32_s" (0))
    OnDropExpr
    EndFunctionBody(179)
    BeginFunctionBody(180, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_sat_f32_u" (1))
    OnDropExpr
    EndFunctionBody(180)
    BeginFunctionBody(181, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_sat_f64_s" (2))
    OnDropExpr
    EndFunctionBody(181)
    BeginFunctionBody(182, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_sat_f64_u" (3))
    OnDropExpr
    EndFunctionBody(182)
    BeginFunctionBody(183, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_sat_f32_s" (4))
    OnDropExpr
    EndFunctionBody(183)
    BeginFunctionBody(184, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_sat_f32_u" (5))
    OnDropExpr
    EndFunctionBody(184)
    BeginFunctionBody(185, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_sat_f64_s" (6))
    OnDropExpr
    EndFunctionBody(185)
    BeginFunctionBody(186, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_sat_f64_u" (7))
    OnDropExpr
    EndFunctionBody(186)
    BeginFunctionBody(187, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnMemoryInitExpr(0)
    EndFunctionBody(187)
    BeginFunctionBody(188, size:5)
    OnLocalDeclCount(0)
    OnDataDropExpr(0)
    EndFunctionBody(188)
    BeginFunctionBody(189, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnMemoryCopyExpr
    EndFunctionBody(189)
    BeginFunctionBody(190, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnMemoryFillExpr
    EndFunctionBody(190)
    BeginFunctionBody(191, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnTableInitExpr(segment_index: 0, table_index: 0)
    EndFunctionBody(191)
    BeginFunctionBody(192, size:5)
    OnLocalDeclCount(0)
    OnElemDropExpr(0)
    EndFunctionBody(192)
    BeginFunctionBody(193, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnTableCopyExpr(dst_index: 0, src_index: 0)
    EndFunctionBody(193)
    BeginFunctionBody(194, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "v128.load" (0), align log2: 4, offset: 3)
    OnDropExpr
    EndFunctionBody(194)
    BeginFunctionBody(195, size:26)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnStoreExpr(opcode: "v128.store" (1), align log2: 4, offset: 3)
    EndFunctionBody(195)
    BeginFunctionBody(196, size:21)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnDropExpr
    EndFunctionBody(196)
    BeginFunctionBody(197, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i8x16.splat" (4))
    OnDropExpr
    EndFunctionBody(197)
    BeginFunctionBody(198, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(198)
    BeginFunctionBody(199, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(199)
    BeginFunctionBody(200, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(200)
    BeginFunctionBody(201, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i16x8.splat" (8))
    OnDropExpr
    EndFunctionBody(201)
    BeginFunctionBody(202, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(202)
    BeginFunctionBody(203, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(203)
    BeginFunctionBody(204, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(204)
    BeginFunctionBody(205, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32x4.splat" (12))
    OnDropExpr
    EndFunctionBody(205)
    BeginFunctionBody(206, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(206)
    BeginFunctionBody(207, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(207)
    BeginFunctionBody(208, size:7)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64x2.splat" (15))
    OnDropExpr
    EndFunctionBody(208)
    BeginFunctionBody(209, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(209)
    BeginFunctionBody(210, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI64ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(210)
    BeginFunctionBody(211, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32x4.splat" (18))
    OnDropExpr
    EndFunctionBody(211)
    BeginFunctionBody(212, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(212)
    BeginFunctionBody(213, size:29)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF32ConstExpr(0 (0x040))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(213)
    BeginFunctionBody(214, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64x2.splat" (21))
    OnDropExpr
    EndFunctionBody(214)
    BeginFunctionBody(215, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(215)
    BeginFunctionBody(216, size:33)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF64ConstExpr(0 (0x080))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(216)
    BeginFunctionBody(217, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.eq" (24))
    OnDropExpr
    EndFunctionBody(217)
    BeginFunctionBody(218, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ne" (25))
    OnDropExpr
    EndFunctionBody(218)
    BeginFunctionBody(219, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_s" (26))
    OnDropExpr
    EndFunctionBody(219)
    BeginFunctionBody(220, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_u" (27))
    OnDropExpr
    EndFunctionBody(220)
    BeginFunctionBody(221, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_s" (28))
    OnDropExpr
    EndFunctionBody(221)
    BeginFunctionBody(222, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_u" (29))
    OnDropExpr
    EndFunctionBody(222)
    BeginFunctionBody(223, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_s" (30))
    OnDropExpr
    EndFunctionBody(223)
    BeginFunctionBody(224, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_u" (31))
    OnDropExpr
    EndFunctionBody(224)
    BeginFunctionBody(225, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_s" (32))
    OnDropExpr
    EndFunctionBody(225)
    BeginFunctionBody(226, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_u" (33))
    OnDropExpr
    EndFunctionBody(226)
    BeginFunctionBody(227, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.eq" (34))
    OnDropExpr
    EndFunctionBody(227)
    BeginFunctionBody(228, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ne" (35))
    OnDropExpr
    EndFunctionBody(228)
    BeginFunctionBody(229, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_s" (36))
    OnDropExpr
    EndFunctionBody(229)
    BeginFunctionBody(230, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_u" (37))
    OnDropExpr
    EndFunctionBody(230)
    BeginFunctionBody(231, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_s" (38))
    OnDropExpr
    EndFunctionBody(231)
    BeginFunctionBody(232, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_u" (39))
    OnDropExpr
    EndFunctionBody(232)
    BeginFunctionBody(233, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_s" (40))
    OnDropExpr
    EndFunctionBody(233)
    BeginFunctionBody(234, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_u" (41))
    OnDropExpr
    EndFunctionBody(234)
    BeginFunctionBody(235, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_s" (42))
    OnDropExpr
    EndFunctionBody(235)
    BeginFunctionBody(236, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_u" (43))
    OnDropExpr
    EndFunctionBody(236)
    BeginFunctionBody(237, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.eq" (44))
    OnDropExpr
    EndFunctionBody(237)
    BeginFunctionBody(238, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ne" (45))
    OnDropExpr
    EndFunctionBody(238)
    BeginFunctionBody(239, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_s" (46))
    OnDropExpr
    EndFunctionBody(239)
    BeginFunctionBody(240, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_u" (47))
    OnDropExpr
    EndFunctionBody(240)
    BeginFunctionBody(241, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_s" (48))
    OnDropExpr
    EndFunctionBody(241)
    BeginFunctionBody(242, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_u" (49))
    OnDropExpr
    EndFunctionBody(242)
    BeginFunctionBody(243, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_s" (50))
    OnDropExpr
    EndFunctionBody(243)
    BeginFunctionBody(244, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_u" (51))
    OnDropExpr
    EndFunctionBody(244)
    BeginFunctionBody(245, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_s" (52))
    OnDropExpr
    EndFunctionBody(245)
    BeginFunctionBody(246, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_u" (53))
    OnDropExpr
    EndFunctionBody(246)
    BeginFunctionBody(247, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.eq" (64))
    OnDropExpr
    EndFunctionBody(247)
    BeginFunctionBody(248, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ne" (65))
    OnDropExpr
    EndFunctionBody(248)
    BeginFunctionBody(249, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.lt" (66))
    OnDropExpr
    EndFunctionBody(249)
    BeginFunctionBody(250, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.gt" (67))
    OnDropExpr
    EndFunctionBody(250)
    BeginFunctionBody(251, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.le" (68))
    OnDropExpr
    EndFunctionBody(251)
    BeginFunctionBody(252, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ge" (69))
    OnDropExpr
    EndFunctionBody(252)
    BeginFunctionBody(253, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.eq" (70))
    OnDropExpr
    EndFunctionBody(253)
    BeginFunctionBody(254, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ne" (71))
    OnDropExpr
    EndFunctionBody(254)
    BeginFunctionBody(255, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.lt" (72))
    OnDropExpr
    EndFunctionBody(255)
    BeginFunctionBody(256, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.gt" (73))
    OnDropExpr
    EndFunctionBody(256)
    BeginFunctionBody(257, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.le" (74))
    OnDropExpr
    EndFunctionBody(257)
    BeginFunctionBody(258, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ge" (75))
    OnDropExpr
    EndFunctionBody(258)
    BeginFunctionBody(259, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("v128.not" (76))
    OnDropExpr
    EndFunctionBody(259)
    BeginFunctionBody(260, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.and" (77))
    OnDropExpr
    EndFunctionBody(260)
    BeginFunctionBody(261, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.or" (78))
    OnDropExpr
    EndFunctionBody(261)
    BeginFunctionBody(262, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.xor" (79))
    OnDropExpr
    EndFunctionBody(262)
    BeginFunctionBody(263, size:59)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnV128ConstExpr(0x00000003 0x00000003 0x00000003 0x00000003)
    OnTernaryExpr("v128.bitselect" (80))
    OnDropExpr
    EndFunctionBody(263)
    BeginFunctionBody(264, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.neg" (81))
    OnDropExpr
    EndFunctionBody(264)
    BeginFunctionBody(265, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.any_true" (82))
    OnDropExpr
    EndFunctionBody(265)
    BeginFunctionBody(266, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.all_true" (83))
    OnDropExpr
    EndFunctionBody(266)
    BeginFunctionBody(267, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shl" (84))
    OnDropExpr
    EndFunctionBody(267)
    BeginFunctionBody(268, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_s" (85))
    OnDropExpr
    EndFunctionBody(268)
    BeginFunctionBody(269, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_u" (86))
    OnDropExpr
    EndFunctionBody(269)
    BeginFunctionBody(270, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add" (87))
    OnDropExpr
    EndFunctionBody(270)
    BeginFunctionBody(271, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_s" (88))
    OnDropExpr
    EndFunctionBody(271)
    BeginFunctionBody(272, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_u" (89))
    OnDropExpr
    EndFunctionBody(272)
    BeginFunctionBody(273, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub" (90))
    OnDropExpr
    EndFunctionBody(273)
    BeginFunctionBody(274, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_s" (91))
    OnDropExpr
    EndFunctionBody(274)
    BeginFunctionBody(275, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_u" (92))
    OnDropExpr
    EndFunctionBody(275)
    BeginFunctionBody(276, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.mul" (93))
    OnDropExpr
    EndFunctionBody(276)
    BeginFunctionBody(277, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.neg" (98))
    OnDropExpr
    EndFunctionBody(277)
    BeginFunctionBody(278, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.any_true" (99))
    OnDropExpr
    EndFunctionBody(278)
    BeginFunctionBody(279, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.all_true" (100))
    OnDropExpr
    EndFunctionBody(279)
    BeginFunctionBody(280, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shl" (101))
    OnDropExpr
    EndFunctionBody(280)
    BeginFunctionBody(281, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_s" (102))
    OnDropExpr
    EndFunctionBody(281)
    BeginFunctionBody(282, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_u" (103))
    OnDropExpr
    EndFunctionBody(282)
    BeginFunctionBody(283, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add" (104))
    OnDropExpr
    EndFunctionBody(283)
    BeginFunctionBody(284, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_s" (105))
    OnDropExpr
    EndFunctionBody(284)
    BeginFunctionBody(285, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_u" (106))
    OnDropExpr
    EndFunctionBody(285)
    BeginFunctionBody(286, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub" (107))
    OnDropExpr
    EndFunctionBody(286)
    BeginFunctionBody(287, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_s" (108))
    OnDropExpr
    EndFunctionBody(287)
    BeginFunctionBody(288, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_u" (109))
    OnDropExpr
    EndFunctionBody(288)
    BeginFunctionBody(289, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.mul" (110))
    OnDropExpr
    EndFunctionBody(289)
    BeginFunctionBody(290, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.neg" (115))
    OnDropExpr
    EndFunctionBody(290)
    BeginFunctionBody(291, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.any_true" (116))
    OnDropExpr
    EndFunctionBody(291)
    BeginFunctionBody(292, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.all_true" (117))
    OnDropExpr
    EndFunctionBody(292)
    BeginFunctionBody(293, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shl" (118))
    OnDropExpr
    EndFunctionBody(293)
    BeginFunctionBody(294, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_s" (119))
    OnDropExpr
    EndFunctionBody(294)
    BeginFunctionBody(295, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_u" (120))
    OnDropExpr
    EndFunctionBody(295)
    BeginFunctionBody(296, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.add" (121))
    OnDropExpr
    EndFunctionBody(296)
    BeginFunctionBody(297, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.sub" (124))
    OnDropExpr
    EndFunctionBody(297)
    BeginFunctionBody(298, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.mul" (127))
    OnDropExpr
    EndFunctionBody(298)
    BeginFunctionBody(299, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.neg" (132))
    OnDropExpr
    EndFunctionBody(299)
    BeginFunctionBody(300, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.any_true" (133))
    OnDropExpr
    EndFunctionBody(300)
    BeginFunctionBody(301, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.all_true" (134))
    OnDropExpr
    EndFunctionBody(301)
    BeginFunctionBody(302, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shl" (135))
    OnDropExpr
    EndFunctionBody(302)
    BeginFunctionBody(303, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_s" (136))
    OnDropExpr
    EndFunctionBody(303)
    BeginFunctionBody(304, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_u" (137))
    OnDropExpr
    EndFunctionBody(304)
    BeginFunctionBody(305, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.add" (138))
    OnDropExpr
    EndFunctionBody(305)
    BeginFunctionBody(306, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.sub" (141))
    OnDropExpr
    EndFunctionBody(306)
    BeginFunctionBody(307, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.abs" (149))
    OnDropExpr
    EndFunctionBody(307)
    BeginFunctionBody(308, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.neg" (150))
    OnDropExpr
    EndFunctionBody(308)
    BeginFunctionBody(309, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.sqrt" (151))
    OnDropExpr
    EndFunctionBody(309)
    BeginFunctionBody(310, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.add" (154))
    OnDropExpr
    EndFunctionBody(310)
    BeginFunctionBody(311, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.sub" (155))
    OnDropExpr
    EndFunctionBody(311)
    BeginFunctionBody(312, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.mul" (156))
    OnDropExpr
    EndFunctionBody(312)
    BeginFunctionBody(313, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.div" (157))
    OnDropExpr
    EndFunctionBody(313)
    BeginFunctionBody(314, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.min" (158))
    OnDropExpr
    EndFunctionBody(314)
    BeginFunctionBody(315, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.max" (159))
    OnDropExpr
    EndFunctionBody(315)
    BeginFunctionBody(316, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.abs" (160))
    OnDropExpr
    EndFunctionBody(316)
    BeginFunctionBody(317, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.neg" (161))
    OnDropExpr
    EndFunctionBody(317)
    BeginFunctionBody(318, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.sqrt" (162))
    OnDropExpr
    EndFunctionBody(318)
    BeginFunctionBody(319, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.add" (165))
    OnDropExpr
    EndFunctionBody(319)
    BeginFunctionBody(320, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.sub" (166))
    OnDropExpr
    EndFunctionBody(320)
    BeginFunctionBody(321, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.mul" (167))
    OnDropExpr
    EndFunctionBody(321)
    BeginFunctionBody(322, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.div" (168))
    OnDropExpr
    EndFunctionBody(322)
    BeginFunctionBody(323, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.min" (169))
    OnDropExpr
    EndFunctionBody(323)
    BeginFunctionBody(324, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.max" (170))
    OnDropExpr
    EndFunctionBody(324)
    BeginFunctionBody(325, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_sat_f32x4_s" (171))
    OnDropExpr
    EndFunctionBody(325)
    BeginFunctionBody(326, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_sat_f32x4_u" (172))
    OnDropExpr
    EndFunctionBody(326)
    BeginFunctionBody(327, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_sat_f64x2_s" (173))
    OnDropExpr
    EndFunctionBody(327)
    BeginFunctionBody(328, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_sat_f64x2_u" (174))
    OnDropExpr
    EndFunctionBody(328)
    BeginFunctionBody(329, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_i32x4_s" (175))
    OnDropExpr
    EndFunctionBody(329)
    BeginFunctionBody(330, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_i32x4_u" (176))
    OnDropExpr
    EndFunctionBody(330)
    BeginFunctionBody(331, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_i64x2_s" (177))
    OnDropExpr
    EndFunctionBody(331)
    BeginFunctionBody(332, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_i64x2_u" (178))
    OnDropExpr
    EndFunctionBody(332)
    BeginFunctionBody(333, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v8x16.swizzle" (192))
    OnDropExpr
    EndFunctionBody(333)
    BeginFunctionBody(334, size:58)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnSimdShuffleOpExpr (lane: 0x01010101 01010101 01010101 01010101)
    OnDropExpr
    EndFunctionBody(334)
    BeginFunctionBody(335, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadSplatExpr(opcode: "i8x16.load_splat" (194), align log2: 0, offset: 0)
    OnDropExpr
    EndFunctionBody(335)
    BeginFunctionBody(336, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadSplatExpr(opcode: "i16x8.load_splat" (195), align log2: 1, offset: 0)
    OnDropExpr
    EndFunctionBody(336)
    BeginFunctionBody(337, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadSplatExpr(opcode: "i32x4.load_splat" (196), align log2: 2, offset: 0)
    OnDropExpr
    EndFunctionBody(337)
    BeginFunctionBody(338, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadSplatExpr(opcode: "i64x2.load_splat" (197), align log2: 3, offset: 0)
    OnDropExpr
    EndFunctionBody(338)
    BeginFunctionBody(339, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicNotifyExpr(opcode: "atomic.notify" (0), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(339)
    BeginFunctionBody(340, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i32.atomic.wait" (1), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(340)
    BeginFunctionBody(341, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i64.atomic.wait" (2), align log2: 3, offset: 3)
    OnDropExpr
    EndFunctionBody(341)
    BeginFunctionBody(342, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load" (16), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(342)
    BeginFunctionBody(343, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load" (17), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(343)
    BeginFunctionBody(344, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load8_u" (18), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(344)
    BeginFunctionBody(345, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load16_u" (19), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(345)
    BeginFunctionBody(346, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load8_u" (20), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(346)
    BeginFunctionBody(347, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load16_u" (21), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(347)
    BeginFunctionBody(348, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load32_u" (22), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(348)
    BeginFunctionBody(349, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store" (23), align log2: 2, offset: 3)
    EndFunctionBody(349)
    BeginFunctionBody(350, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store" (24), align log2: 3, offset: 7)
    EndFunctionBody(350)
    BeginFunctionBody(351, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store8" (25), align log2: 0, offset: 3)
    EndFunctionBody(351)
    BeginFunctionBody(352, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store16" (26), align log2: 1, offset: 3)
    EndFunctionBody(352)
    BeginFunctionBody(353, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store8" (27), align log2: 0, offset: 3)
    EndFunctionBody(353)
    BeginFunctionBody(354, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store16" (28), align log2: 1, offset: 3)
    EndFunctionBody(354)
    BeginFunctionBody(355, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store32" (29), align log2: 2, offset: 3)
    EndFunctionBody(355)
    BeginFunctionBody(356, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.add" (30), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(356)
    BeginFunctionBody(357, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.add" (31), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(357)
    BeginFunctionBody(358, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.add_u" (32), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(358)
    BeginFunctionBody(359, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.add_u" (33), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(359)
    BeginFunctionBody(360, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.add_u" (34), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(360)
    BeginFunctionBody(361, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.add_u" (35), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(361)
    BeginFunctionBody(362, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.add_u" (36), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(362)
    BeginFunctionBody(363, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.sub" (37), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(363)
    BeginFunctionBody(364, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.sub" (38), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(364)
    BeginFunctionBody(365, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.sub_u" (39), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(365)
    BeginFunctionBody(366, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.sub_u" (40), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(366)
    BeginFunctionBody(367, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.sub_u" (41), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(367)
    BeginFunctionBody(368, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.sub_u" (42), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(368)
    BeginFunctionBody(369, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.sub_u" (43), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(369)
    BeginFunctionBody(370, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.and" (44), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(370)
    BeginFunctionBody(371, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.and" (45), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(371)
    BeginFunctionBody(372, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.and_u" (46), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(372)
    BeginFunctionBody(373, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.and_u" (47), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(373)
    BeginFunctionBody(374, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.and_u" (48), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(374)
    BeginFunctionBody(375, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.and_u" (49), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(375)
    BeginFunctionBody(376, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.and_u" (50), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(376)
    BeginFunctionBody(377, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.or" (51), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(377)
    BeginFunctionBody(378, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.or" (52), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(378)
    BeginFunctionBody(379, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.or_u" (53), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(379)
    BeginFunctionBody(380, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.or_u" (54), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(380)
    BeginFunctionBody(381, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.or_u" (55), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(381)
    BeginFunctionBody(382, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.or_u" (56), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(382)
    BeginFunctionBody(383, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.or_u" (57), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(383)
    BeginFunctionBody(384, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xor" (58), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(384)
    BeginFunctionBody(385, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xor" (59), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(385)
    BeginFunctionBody(386, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.xor_u" (60), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(386)
    BeginFunctionBody(387, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.xor_u" (61), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(387)
    BeginFunctionBody(388, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.xor_u" (62), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(388)
    BeginFunctionBody(389, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.xor_u" (63), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(389)
    BeginFunctionBody(390, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.xor_u" (64), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(390)
    BeginFunctionBody(391, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xchg" (65), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(391)
    BeginFunctionBody(392, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xchg" (66), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(392)
    BeginFunctionBody(393, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.xchg_u" (67), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(393)
    BeginFunctionBody(394, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.xchg_u" (68), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(394)
    BeginFunctionBody(395, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.xchg_u" (69), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(395)
    BeginFunctionBody(396, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.xchg_u" (70), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(396)
    BeginFunctionBody(397, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.xchg_u" (71), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(397)
    BeginFunctionBody(398, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw.cmpxchg" (72), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(398)
    BeginFunctionBody(399, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw.cmpxchg" (73), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(399)
    BeginFunctionBody(400, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw8.cmpxchg_u" (74), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(400)
    BeginFunctionBody(401, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw16.cmpxchg_u" (75), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(401)
    BeginFunctionBody(402, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw8.cmpxchg_u" (76), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(402)
    BeginFunctionBody(403, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw16.cmpxchg_u" (77), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(403)
    BeginFunctionBody(404, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw32.cmpxchg_u" (78), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(404)
  EndCodeSection
  BeginDataSection(3)
    OnDataSegmentCount(1)
    BeginDataSegment(index: 0, memory_index: 0, flags: 1)
    OnDataSegmentData(index:0, size:0)
    EndDataSegment(0)
  EndDataSection
EndModule
   0| return
   4| unreachable
   8| return
  12| br @20
  20| return
  24| i32.const 1
  32| br_table %[-1], $#0, table:$52
  44| data $12
  52|   entry 0: offset: 64 drop: 0 keep: 0
  64| return
  68| return
  72| return
  76| call @0
  84| return
  88| i32.const 1
  96| call_indirect $0:0, %[-1]
 108| return
 112| return_call @0
 120| return
 124| i32.const 1
 132| return_call_indirect $0:0, %[-1]
 144| return
 148| i32.const 1
 156| drop
 160| return
 164| i32.const 1
 172| i32.const 2
 180| i32.const 3
 188| select %[-3], %[-2], %[-1]
 192| drop
 196| return
 200| alloca $1
 208| local.get $1
 216| drop
 220| drop
 224| return
 228| alloca $1
 236| i32.const 1
 244| local.set $1, %[-1]
 252| drop
 256| return
 260| alloca $1
 268| i32.const 1
 276| local.tee $2, %[-1]
 284| drop
 288| drop
 292| return
 296| global.get $0
 304| drop
 308| return
 312| i32.const 1
 320| global.set $0, %[-1]
 328| return
 332| i32.const 1
 340| i32.load $0:%[-1]+$2
 352| drop
 356| return
 360| i32.const 1
 368| i64.load $0:%[-1]+$2
 380| drop
 384| return
 388| i32.const 1
 396| f32.load $0:%[-1]+$2
 408| drop
 412| return
 416| i32.const 1
 424| f64.load $0:%[-1]+$2
 436| drop
 440| return
 444| i32.const 1
 452| i32.load8_s $0:%[-1]+$2
 464| drop
 468| return
 472| i32.const 1
 480| i32.load8_u $0:%[-1]+$2
 492| drop
 496| return
 500| i32.const 1
 508| i32.load16_s $0:%[-1]+$2
 520| drop
 524| return
 528| i32.const 1
 536| i32.load16_u $0:%[-1]+$2
 548| drop
 552| return
 556| i32.const 1
 564| i64.load8_s $0:%[-1]+$2
 576| drop
 580| return
 584| i32.const 1
 592| i64.load8_u $0:%[-1]+$2
 604| drop
 608| return
 612| i32.const 1
 620| i64.load16_s $0:%[-1]+$2
 632| drop
 636| return
 640| i32.const 1
 648| i64.load16_u $0:%[-1]+$2
 660| drop
 664| return
 668| i32.const 1
 676| i64.load32_s $0:%[-1]+$2
 688| drop
 692| return
 696| i32.const 1
 704| i64.load32_u $0:%[-1]+$2
 716| drop
 720| return
 724| i32.const 1
 732| i32.const 2
 740| i32.store $0:%[-2]+$2, %[-1]
 752| return
 756| i32.const 1
 764| i64.const 2
 776| i64.store $0:%[-2]+$2, %[-1]
 788| return
 792| i32.const 1
 800| f32.const 2
 808| f32.store $0:%[-2]+$2, %[-1]
 820| return
 824| i32.const 1
 832| f64.const 2
 844| f64.store $0:%[-2]+$2, %[-1]
 856| return
 860| i32.const 1
 868| i32.const 2
 876| i32.store8 $0:%[-2]+$2, %[-1]
 888| return
 892| i32.const 1
 900| i32.const 2
 908| i32.store16 $0:%[-2]+$2, %[-1]
 920| return
 924| i32.const 1
 932| i64.const 2
 944| i64.store8 $0:%[-2]+$2, %[-1]
 956| return
 960| i32.const 1
 968| i64.const 2
 980| i64.store16 $0:%[-2]+$2, %[-1]
 992| return
 996| i32.const 1
1004| i64.const 2
1016| i64.store32 $0:%[-2]+$2, %[-1]
1028| return
1032| memory.size $0
1040| drop
1044| return
1048| i32.const 1
1056| memory.grow $0:%[-1]
1064| drop
1068| return
1072| i32.const 1
1080| drop
1084| return
1088| i64.const 1
1100| drop
1104| return
1108| f32.const 1
1116| drop
1120| return
1124| f64.const 1
1136| drop
1140| return
1144| i32.const 1
1152| i32.eqz %[-1]
1156| drop
1160| return
1164| i32.const 1
1172| i32.const 2
1180| i32.eq %[-2], %[-1]
1184| drop
1188| return
1192| i32.const 1
1200| i32.const 2
1208| i32.ne %[-2], %[-1]
1212| drop
1216| return
1220| i32.const 1
1228| i32.const 2
1236| i32.lt_s %[-2], %[-1]
1240| drop
1244| return
1248| i32.const 1
1256| i32.const 2
1264| i32.lt_u %[-2], %[-1]
1268| drop
1272| return
1276| i32.const 1
1284| i32.const 2
1292| i32.gt_s %[-2], %[-1]
1296| drop
1300| return
1304| i32.const 1
1312| i32.const 2
1320| i32.gt_u %[-2], %[-1]
1324| drop
1328| return
1332| i32.const 1
1340| i32.const 2
1348| i32.le_s %[-2], %[-1]
1352| drop
1356| return
1360| i32.const 1
1368| i32.const 2
1376| i32.le_u %[-2], %[-1]
1380| drop
1384| return
1388| i32.const 1
1396| i32.const 2
1404| i32.ge_s %[-2], %[-1]
1408| drop
1412| return
1416| i32.const 1
1424| i32.const 2
1432| i32.ge_u %[-2], %[-1]
1436| drop
1440| return
1444| i64.const 1
1456| i64.eqz %[-1]
1460| drop
1464| return
1468| i64.const 1
1480| i64.const 2
1492| i64.eq %[-2], %[-1]
1496| drop
1500| return
1504| i64.const 1
1516| i64.const 2
1528| i64.ne %[-2], %[-1]
1532| drop
1536| return
1540| i64.const 1
1552| i64.const 2
1564| i64.lt_s %[-2], %[-1]
1568| drop
1572| return
1576| i64.const 1
1588| i64.const 2
1600| i64.lt_u %[-2], %[-1]
1604| drop
1608| return
1612| i64.const 1
1624| i64.const 2
1636| i64.gt_s %[-2], %[-1]
1640| drop
1644| return
1648| i64.const 1
1660| i64.const 2
1672| i64.gt_u %[-2], %[-1]
1676| drop
1680| return
1684| i64.const 1
1696| i64.const 2
1708| i64.le_s %[-2], %[-1]
1712| drop
1716| return
1720| i64.const 1
1732| i64.const 2
1744| i64.le_u %[-2], %[-1]
1748| drop
1752| return
1756| i64.const 1
1768| i64.const 2
1780| i64.ge_s %[-2], %[-1]
1784| drop
1788| return
1792| i64.const 1
1804| i64.const 2
1816| i64.ge_u %[-2], %[-1]
1820| drop
1824| return
1828| f32.const 1
1836| f32.const 2
1844| f32.eq %[-2], %[-1]
1848| drop
1852| return
1856| f32.const 1
1864| f32.const 2
1872| f32.ne %[-2], %[-1]
1876| drop
1880| return
1884| f32.const 1
1892| f32.const 2
1900| f32.lt %[-2], %[-1]
1904| drop
1908| return
1912| f32.const 1
1920| f32.const 2
1928| f32.gt %[-2], %[-1]
1932| drop
1936| return
1940| f32.const 1
1948| f32.const 2
1956| f32.le %[-2], %[-1]
1960| drop
1964| return
1968| f32.const 1
1976| f32.const 2
1984| f32.ge %[-2], %[-1]
1988| drop
1992| return
1996| f64.const 1
2008| f64.const 2
2020| f64.eq %[-2], %[-1]
2024| drop
2028| return
2032| f64.const 1
2044| f64.const 2
2056| f64.ne %[-2], %[-1]
2060| drop
2064| return
2068| f64.const 1
2080| f64.const 2
2092| f64.lt %[-2], %[-1]
2096| drop
2100| return
2104| f64.const 1
2116| f64.const 2
2128| f64.gt %[-2], %[-1]
2132| drop
2136| return
2140| f64.const 1
2152| f64.const 2
2164| f64.le %[-2], %[-1]
2168| drop
2172| return
2176| f64.const 1
2188| f64.const 2
2200| f64.ge %[-2], %[-1]
2204| drop
2208| return
2212| i32.const 1
2220| i32.clz %[-1]
2224| drop
2228| return
2232| i32.const 1
2240| i32.ctz %[-1]
2244| drop
2248| return
2252| i32.const 1
2260| i32.popcnt %[-1]
2264| drop
2268| return
2272| i32.const 1
2280| i32.const 2
2288| i32.add %[-2], %[-1]
2292| drop
2296| return
2300| i32.const 1
2308| i32.const 2
2316| i32.sub %[-2], %[-1]
2320| drop
2324| return
2328| i32.const 1
2336| i32.const 2
2344| i32.mul %[-2], %[-1]
2348| drop
2352| return
2356| i32.const 1
2364| i32.const 2
2372| i32.div_s %[-2], %[-1]
2376| drop
2380| return
2384| i32.const 1
2392| i32.const 2
2400| i32.div_u %[-2], %[-1]
2404| drop
2408| return
2412| i32.const 1
2420| i32.const 2
2428| i32.rem_s %[-2], %[-1]
2432| drop
2436| return
2440| i32.const 1
2448| i32.const 2
2456| i32.rem_u %[-2], %[-1]
2460| drop
2464| return
2468| i32.const 1
2476| i32.const 2
2484| i32.and %[-2], %[-1]
2488| drop
2492| return
2496| i32.const 1
2504| i32.const 2
2512| i32.or %[-2], %[-1]
2516| drop
2520| return
2524| i32.const 1
2532| i32.const 2
2540| i32.xor %[-2], %[-1]
2544| drop
2548| return
2552| i32.const 1
2560| i32.const 2
2568| i32.shl %[-2], %[-1]
2572| drop
2576| return
2580| i32.const 1
2588| i32.const 2
2596| i32.shr_s %[-2], %[-1]
2600| drop
2604| return
2608| i32.const 1
2616| i32.const 2
2624| i32.shr_u %[-2], %[-1]
2628| drop
2632| return
2636| i32.const 1
2644| i32.const 2
2652| i32.rotl %[-2], %[-1]
2656| drop
2660| return
2664| i32.const 1
2672| i32.const 2
2680| i32.rotr %[-2], %[-1]
2684| drop
2688| return
2692| i64.const 1
2704| i64.clz %[-1]
2708| drop
2712| return
2716| i64.const 1
2728| i64.ctz %[-1]
2732| drop
2736| return
2740| i64.const 1
2752| i64.popcnt %[-1]
2756| drop
2760| return
2764| i64.const 1
2776| i64.const 2
2788| i64.add %[-2], %[-1]
2792| drop
2796| return
2800| i64.const 1
2812| i64.const 2
2824| i64.sub %[-2], %[-1]
2828| drop
2832| return
2836| i64.const 1
2848| i64.const 2
2860| i64.mul %[-2], %[-1]
2864| drop
2868| return
2872| i64.const 1
2884| i64.const 2
2896| i64.div_s %[-2], %[-1]
2900| drop
2904| return
2908| i64.const 1
2920| i64.const 2
2932| i64.div_u %[-2], %[-1]
2936| drop
2940| return
2944| i64.const 1
2956| i64.const 2
2968| i64.rem_s %[-2], %[-1]
2972| drop
2976| return
2980| i64.const 1
2992| i64.const 2
3004| i64.rem_u %[-2], %[-1]
3008| drop
3012| return
3016| i64.const 1
3028| i64.const 2
3040| i64.and %[-2], %[-1]
3044| drop
3048| return
3052| i64.const 1
3064| i64.const 2
3076| i64.or %[-2], %[-1]
3080| drop
3084| return
3088| i64.const 1
3100| i64.const 2
3112| i64.xor %[-2], %[-1]
3116| drop
3120| return
3124| i64.const 1
3136| i64.const 2
3148| i64.shl %[-2], %[-1]
3152| drop
3156| return
3160| i64.const 1
3172| i64.const 2
3184| i64.shr_s %[-2], %[-1]
3188| drop
3192| return
3196| i64.const 1
3208| i64.const 2
3220| i64.shr_u %[-2], %[-1]
3224| drop
3228| return
3232| i64.const 1
3244| i64.const 2
3256| i64.rotl %[-2], %[-1]
3260| drop
3264| return
3268| i64.const 1
3280| i64.const 2
3292| i64.rotr %[-2], %[-1]
3296| drop
3300| return
3304| f32.const 1
3312| f32.abs %[-1]
3316| drop
3320| return
3324| f32.const 1
3332| f32.neg %[-1]
3336| drop
3340| return
3344| f32.const 1
3352| f32.ceil %[-1]
3356| drop
3360| return
3364| f32.const 1
3372| f32.floor %[-1]
3376| drop
3380| return
3384| f32.const 1
3392| f32.trunc %[-1]
3396| drop
3400| return
3404| f32.const 1
3412| f32.nearest %[-1]
3416| drop
3420| return
3424| f32.const 1
3432| f32.sqrt %[-1]
3436| drop
3440| return
3444| f32.const 1
3452| f32.const 2
3460| f32.add %[-2], %[-1]
3464| drop
3468| return
3472| f32.const 1
3480| f32.const 2
3488| f32.sub %[-2], %[-1]
3492| drop
3496| return
3500| f32.const 1
3508| f32.const 2
3516| f32.mul %[-2], %[-1]
3520| drop
3524| return
3528| f32.const 1
3536| f32.const 2
3544| f32.div %[-2], %[-1]
3548| drop
3552| return
3556| f32.const 1
3564| f32.const 2
3572| f32.min %[-2], %[-1]
3576| drop
3580| return
3584| f32.const 1
3592| f32.const 2
3600| f32.max %[-2], %[-1]
3604| drop
3608| return
3612| f32.const 1
3620| f32.const 2
3628| f32.copysign %[-2], %[-1]
3632| drop
3636| return
3640| f64.const 1
3652| f64.abs %[-1]
3656| drop
3660| return
3664| f64.const 1
3676| f64.neg %[-1]
3680| drop
3684| return
3688| f64.const 1
3700| f64.ceil %[-1]
3704| drop
3708| return
3712| f64.const 1
3724| f64.floor %[-1]
3728| drop
3732| return
3736| f64.const 1
3748| f64.trunc %[-1]
3752| drop
3756| return
3760| f64.const 1
3772| f64.nearest %[-1]
3776| drop
3780| return
3784| f64.const 1
3796| f64.sqrt %[-1]
3800| drop
3804| return
3808| f64.const 1
3820| f64.const 2
3832| f64.add %[-2], %[-1]
3836| drop
3840| return
3844| f64.const 1
3856| f64.const 2
3868| f64.sub %[-2], %[-1]
3872| drop
3876| return
3880| f64.const 1
3892| f64.const 2
3904| f64.mul %[-2], %[-1]
3908| drop
3912| return
3916| f64.const 1
3928| f64.const 2
3940| f64.div %[-2], %[-1]
3944| drop
3948| return
3952| f64.const 1
3964| f64.const 2
3976| f64.min %[-2], %[-1]
3980| drop
3984| return
3988| f64.const 1
4000| f64.const 2
4012| f64.max %[-2], %[-1]
4016| drop
4020| return
4024| f64.const 1
4036| f64.const 2
4048| f64.copysign %[-2], %[-1]
4052| drop
4056| return
4060| i64.const 1
4072| i32.wrap_i64 %[-1]
4076| drop
4080| return
4084| f32.const 1
4092| i32.trunc_f32_s %[-1]
4096| drop
4100| return
4104| f32.const 1
4112| i32.trunc_f32_u %[-1]
4116| drop
4120| return
4124| f64.const 1
4136| i32.trunc_f64_s %[-1]
4140| drop
4144| return
4148| f64.const 1
4160| i32.trunc_f64_u %[-1]
4164| drop
4168| return
4172| i32.const 1
4180| i64.extend_i32_s %[-1]
4184| drop
4188| return
4192| i32.const 1
4200| i64.extend_i32_u %[-1]
4204| drop
4208| return
4212| f32.const 1
4220| i64.trunc_f32_s %[-1]
4224| drop
4228| return
4232| f32.const 1
4240| i64.trunc_f32_u %[-1]
4244| drop
4248| return
4252| f64.const 1
4264| i64.trunc_f64_s %[-1]
4268| drop
4272| return
4276| f64.const 1
4288| i64.trunc_f64_u %[-1]
4292| drop
4296| return
4300| i32.const 1
4308| f32.convert_i32_s %[-1]
4312| drop
4316| return
4320| i32.const 1
4328| f32.convert_i32_u %[-1]
4332| drop
4336| return
4340| i64.const 1
4352| f32.convert_i64_s %[-1]
4356| drop
4360| return
4364| i64.const 1
4376| f32.convert_i64_u %[-1]
4380| drop
4384| return
4388| f64.const 1
4400| f32.demote_f64 %[-1]
4404| drop
4408| return
4412| i32.const 1
4420| f64.convert_i32_s %[-1]
4424| drop
4428| return
4432| i32.const 1
4440| f64.convert_i32_u %[-1]
4444| drop
4448| return
4452| i64.const 1
4464| f64.convert_i64_s %[-1]
4468| drop
4472| return
4476| i64.const 1
4488| f64.convert_i64_u %[-1]
4492| drop
4496| return
4500| f32.const 1
4508| f64.promote_f32 %[-1]
4512| drop
4516| return
4520| i32.const 1
4528| f32.reinterpret_i32 %[-1]
4532| drop
4536| return
4540| f32.const 1
4548| i32.reinterpret_f32 %[-1]
4552| drop
4556| return
4560| i64.const 1
4572| f64.reinterpret_i64 %[-1]
4576| drop
4580| return
4584| f64.const 1
4596| i64.reinterpret_f64 %[-1]
4600| drop
4604| return
4608| i32.const 1
4616| i32.extend8_s %[-1]
4620| drop
4624| return
4628| i32.const 1
4636| i32.extend16_s %[-1]
4640| drop
4644| return
4648| i64.const 1
4660| i64.extend8_s %[-1]
4664| drop
4668| return
4672| i64.const 1
4684| i64.extend16_s %[-1]
4688| drop
4692| return
4696| i64.const 1
4708| i64.extend32_s %[-1]
4712| drop
4716| return
4720| alloca $1
4728| drop
4732| return
4736| i32.const 1
4744| br_unless @4760, %[-1]
4752| br @4760
4760| return
4764| i32.const 1
4772| call_host $0
4780| return
4784| i32.const 1
4792| br_table %[-1], $#0, table:$4812
4804| data $12
4812|   entry 0: offset: 4824 drop: 0 keep: 0
4824| return
4828| i32.const 1
4836| i32.const 2
4844| drop_keep $1 $1
4856| br @4864
4864| drop
4868| return
4872| f32.const 1
4880| i32.trunc_sat_f32_s %[-1]
4884| drop
4888| return
4892| f32.const 1
4900| i32.trunc_sat_f32_u %[-1]
4904| drop
4908| return
4912| f64.const 1
4924| i32.trunc_sat_f64_s %[-1]
4928| drop
4932| return
4936| f64.const 1
4948| i32.trunc_sat_f64_u %[-1]
4952| drop
4956| return
4960| f32.const 1
4968| i64.trunc_sat_f32_s %[-1]
4972| drop
4976| return
4980| f32.const 1
4988| i64.trunc_sat_f32_u %[-1]
4992| drop
4996| return
5000| f64.const 1
5012| i64.trunc_sat_f64_s %[-1]
5016| drop
5020| return
5024| f64.const 1
5036| i64.trunc_sat_f64_u %[-1]
5040| drop
5044| return
5048| i32.const 1
5056| i32.const 2
5064| i32.const 3
5072| memory.init $0, $0, %[-3], %[-2], %[-1]
5084| return
5088| data.drop $0
5096| return
5100| i32.const 1
5108| i32.const 2
5116| i32.const 3
5124| memory.copy $0, %[-3], %[-2], %[-1]
5132| return
5136| i32.const 1
5144| i32.const 2
5152| i32.const 3
5160| memory.fill $0, %[-3], %[-2], %[-1]
5168| return
5172| i32.const 1
5180| i32.const 2
5188| i32.const 3
5196| table.init $0, $0, %[-3], %[-2], %[-1]
5208| return
5212| elem.drop $0
5220| return
5224| i32.const 1
5232| i32.const 2
5240| i32.const 3
5248| table.copy $0, $0, %[-3], %[-2], %[-1]
5260| return
5264| i32.const 1
5272| v128.load $0:%[-1]+$3
5284| drop
5288| return
5292| i32.const 1
5300| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5320| v128.store $0:%[-2]+$3, %[-1]
5332| return
5336| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5356| drop
5360| return
5364| i32.const 1
5372| i8x16.splat %[-1]
5376| drop
5380| return
5384| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5404| i8x16.extract_lane_s %[-1] : (Lane imm: 15)
5409| drop
5413| return
5417| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5437| i8x16.extract_lane_u %[-1] : (Lane imm: 15)
5442| drop
5446| return
5450| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5470| i32.const 0
5478| i8x16.replace_lane %[-1], %[-2] : (Lane imm: 15)
5483| drop
5487| return
5491| i32.const 1
5499| i16x8.splat %[-1]
5503| drop
5507| return
5511| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5531| i16x8.extract_lane_s %[-1] : (Lane imm: 7)
5536| drop
5540| return
5544| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5564| i16x8.extract_lane_u %[-1] : (Lane imm: 7)
5569| drop
5573| return
5577| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5597| i32.const 0
5605| i16x8.replace_lane %[-1], %[-2] : (Lane imm: 7)
5610| drop
5614| return
5618| i32.const 1
5626| i32x4.splat %[-1]
5630| drop
5634| return
5638| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5658| i32x4.extract_lane %[-1] : (Lane imm: 3)
5663| drop
5667| return
5671| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5691| i32.const 0
5699| i32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
5704| drop
5708| return
5712| i64.const 1
5724| i64x2.splat %[-1]
5728| drop
5732| return
5736| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5756| i64x2.extract_lane %[-1] : (Lane imm: 1)
5761| drop
5765| return
5769| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5789| i64.const 0
5801| i64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
5806| drop
5810| return
5814| f32.const 1
5822| f32x4.splat %[-1]
5826| drop
5830| return
5834| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5854| f32x4.extract_lane %[-1] : (Lane imm: 3)
5859| drop
5863| return
5867| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5887| f32.const 0
5895| f32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
5900| drop
5904| return
5908| f64.const 1
5920| f64x2.splat %[-1]
5924| drop
5928| return
5932| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5952| f64x2.extract_lane %[-1] : (Lane imm: 1)
5957| drop
5961| return
5965| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
5985| f64.const 0
5997| f64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
6002| drop
6006| return
6010| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6030| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6050| i8x16.eq %[-2], %[-1]
6054| drop
6058| return
6062| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6082| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6102| i8x16.ne %[-2], %[-1]
6106| drop
6110| return
6114| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6134| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6154| i8x16.lt_s %[-2], %[-1]
6158| drop
6162| return
6166| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6186| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6206| i8x16.lt_u %[-2], %[-1]
6210| drop
6214| return
6218| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6238| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6258| i8x16.gt_s %[-2], %[-1]
6262| drop
6266| return
6270| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6290| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6310| i8x16.gt_u %[-2], %[-1]
6314| drop
6318| return
6322| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6342| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6362| i8x16.le_s %[-2], %[-1]
6366| drop
6370| return
6374| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6394| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6414| i8x16.le_u %[-2], %[-1]
6418| drop
6422| return
6426| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6446| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6466| i8x16.ge_s %[-2], %[-1]
6470| drop
6474| return
6478| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6498| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6518| i8x16.ge_u %[-2], %[-1]
6522| drop
6526| return
6530| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6550| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6570| i16x8.eq %[-2], %[-1]
6574| drop
6578| return
6582| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6602| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6622| i16x8.ne %[-2], %[-1]
6626| drop
6630| return
6634| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6654| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6674| i16x8.lt_s %[-2], %[-1]
6678| drop
6682| return
6686| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6706| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6726| i16x8.lt_u %[-2], %[-1]
6730| drop
6734| return
6738| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6758| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6778| i16x8.gt_s %[-2], %[-1]
6782| drop
6786| return
6790| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6810| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6830| i16x8.gt_u %[-2], %[-1]
6834| drop
6838| return
6842| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6862| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6882| i16x8.le_s %[-2], %[-1]
6886| drop
6890| return
6894| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6914| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6934| i16x8.le_u %[-2], %[-1]
6938| drop
6942| return
6946| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
6966| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
6986| i16x8.ge_s %[-2], %[-1]
6990| drop
6994| return
6998| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7018| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7038| i16x8.ge_u %[-2], %[-1]
7042| drop
7046| return
7050| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7070| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7090| i32x4.eq %[-2], %[-1]
7094| drop
7098| return
7102| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7122| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7142| i32x4.ne %[-2], %[-1]
7146| drop
7150| return
7154| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7174| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7194| i32x4.lt_s %[-2], %[-1]
7198| drop
7202| return
7206| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7226| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7246| i32x4.lt_u %[-2], %[-1]
7250| drop
7254| return
7258| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7278| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7298| i32x4.gt_s %[-2], %[-1]
7302| drop
7306| return
7310| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7330| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7350| i32x4.gt_u %[-2], %[-1]
7354| drop
7358| return
7362| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7382| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7402| i32x4.le_s %[-2], %[-1]
7406| drop
7410| return
7414| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7434| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7454| i32x4.le_u %[-2], %[-1]
7458| drop
7462| return
7466| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7486| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7506| i32x4.ge_s %[-2], %[-1]
7510| drop
7514| return
7518| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7538| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7558| i32x4.ge_u %[-2], %[-1]
7562| drop
7566| return
7570| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7590| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7610| f32x4.eq %[-2], %[-1]
7614| drop
7618| return
7622| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7642| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7662| f32x4.ne %[-2], %[-1]
7666| drop
7670| return
7674| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7694| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7714| f32x4.lt %[-2], %[-1]
7718| drop
7722| return
7726| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7746| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7766| f32x4.gt %[-2], %[-1]
7770| drop
7774| return
7778| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7798| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7818| f32x4.le %[-2], %[-1]
7822| drop
7826| return
7830| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7850| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7870| f32x4.ge %[-2], %[-1]
7874| drop
7878| return
7882| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7902| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7922| f64x2.eq %[-2], %[-1]
7926| drop
7930| return
7934| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
7954| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
7974| f64x2.ne %[-2], %[-1]
7978| drop
7982| return
7986| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8006| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8026| f64x2.lt %[-2], %[-1]
8030| drop
8034| return
8038| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8058| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8078| f64x2.gt %[-2], %[-1]
8082| drop
8086| return
8090| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8110| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8130| f64x2.le %[-2], %[-1]
8134| drop
8138| return
8142| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8162| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8182| f64x2.ge %[-2], %[-1]
8186| drop
8190| return
8194| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8214| v128.not %[-1]
8218| drop
8222| return
8226| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8246| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8266| v128.and %[-2], %[-1]
8270| drop
8274| return
8278| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8298| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8318| v128.or %[-2], %[-1]
8322| drop
8326| return
8330| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8350| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8370| v128.xor %[-2], %[-1]
8374| drop
8378| return
8382| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8402| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8422| v128.const i32x4 0x00000003 0x00000003 0x00000003 0x00000003
8442| v128.bitselect %[-3], %[-2], %[-1]
8446| drop
8450| return
8454| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8474| i8x16.neg %[-1]
8478| drop
8482| return
8486| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8506| i8x16.any_true %[-1]
8510| drop
8514| return
8518| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8538| i8x16.all_true %[-1]
8542| drop
8546| return
8550| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8570| i32.const 0
8578| i8x16.shl %[-2], %[-1]
8582| drop
8586| return
8590| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8610| i32.const 0
8618| i8x16.shr_s %[-2], %[-1]
8622| drop
8626| return
8630| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8650| i32.const 0
8658| i8x16.shr_u %[-2], %[-1]
8662| drop
8666| return
8670| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8690| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8710| i8x16.add %[-2], %[-1]
8714| drop
8718| return
8722| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8742| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8762| i8x16.add_saturate_s %[-2], %[-1]
8766| drop
8770| return
8774| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8794| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8814| i8x16.add_saturate_u %[-2], %[-1]
8818| drop
8822| return
8826| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8846| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8866| i8x16.sub %[-2], %[-1]
8870| drop
8874| return
8878| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8898| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8918| i8x16.sub_saturate_s %[-2], %[-1]
8922| drop
8926| return
8930| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
8950| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
8970| i8x16.sub_saturate_u %[-2], %[-1]
8974| drop
8978| return
8982| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9002| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9022| i8x16.mul %[-2], %[-1]
9026| drop
9030| return
9034| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9054| i16x8.neg %[-1]
9058| drop
9062| return
9066| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9086| i16x8.any_true %[-1]
9090| drop
9094| return
9098| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9118| i16x8.all_true %[-1]
9122| drop
9126| return
9130| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9150| i32.const 0
9158| i16x8.shl %[-2], %[-1]
9162| drop
9166| return
9170| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9190| i32.const 0
9198| i16x8.shr_s %[-2], %[-1]
9202| drop
9206| return
9210| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9230| i32.const 0
9238| i16x8.shr_u %[-2], %[-1]
9242| drop
9246| return
9250| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9270| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9290| i16x8.add %[-2], %[-1]
9294| drop
9298| return
9302| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9322| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9342| i16x8.add_saturate_s %[-2], %[-1]
9346| drop
9350| return
9354| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9374| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9394| i16x8.add_saturate_u %[-2], %[-1]
9398| drop
9402| return
9406| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9426| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9446| i16x8.sub %[-2], %[-1]
9450| drop
9454| return
9458| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9478| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9498| i16x8.sub_saturate_s %[-2], %[-1]
9502| drop
9506| return
9510| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9530| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9550| i16x8.sub_saturate_u %[-2], %[-1]
9554| drop
9558| return
9562| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9582| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9602| i16x8.mul %[-2], %[-1]
9606| drop
9610| return
9614| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9634| i32x4.neg %[-1]
9638| drop
9642| return
9646| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9666| i32x4.any_true %[-1]
9670| drop
9674| return
9678| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9698| i32x4.all_true %[-1]
9702| drop
9706| return
9710| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9730| i32.const 0
9738| i32x4.shl %[-2], %[-1]
9742| drop
9746| return
9750| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9770| i32.const 0
9778| i32x4.shr_s %[-2], %[-1]
9782| drop
9786| return
9790| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9810| i32.const 0
9818| i32x4.shr_u %[-2], %[-1]
9822| drop
9826| return
9830| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9850| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9870| i32x4.add %[-2], %[-1]
9874| drop
9878| return
9882| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9902| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9922| i32x4.sub %[-2], %[-1]
9926| drop
9930| return
9934| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
9954| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
9974| i32x4.mul %[-2], %[-1]
9978| drop
9982| return
9986| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10006| i64x2.neg %[-1]
10010| drop
10014| return
10018| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10038| i64x2.any_true %[-1]
10042| drop
10046| return
10050| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10070| i64x2.all_true %[-1]
10074| drop
10078| return
10082| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10102| i32.const 0
10110| i64x2.shl %[-2], %[-1]
10114| drop
10118| return
10122| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10142| i32.const 0
10150| i64x2.shr_s %[-2], %[-1]
10154| drop
10158| return
10162| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10182| i32.const 0
10190| i64x2.shr_u %[-2], %[-1]
10194| drop
10198| return
10202| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10222| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10242| i64x2.add %[-2], %[-1]
10246| drop
10250| return
10254| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10274| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10294| i64x2.sub %[-2], %[-1]
10298| drop
10302| return
10306| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10326| f32x4.abs %[-1]
10330| drop
10334| return
10338| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10358| f32x4.neg %[-1]
10362| drop
10366| return
10370| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10390| f32x4.sqrt %[-1]
10394| drop
10398| return
10402| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10422| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10442| f32x4.add %[-2], %[-1]
10446| drop
10450| return
10454| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10474| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10494| f32x4.sub %[-2], %[-1]
10498| drop
10502| return
10506| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10526| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10546| f32x4.mul %[-2], %[-1]
10550| drop
10554| return
10558| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10578| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10598| f32x4.div %[-2], %[-1]
10602| drop
10606| return
10610| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10630| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10650| f32x4.min %[-2], %[-1]
10654| drop
10658| return
10662| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10682| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10702| f32x4.max %[-2], %[-1]
10706| drop
10710| return
10714| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10734| f64x2.abs %[-1]
10738| drop
10742| return
10746| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10766| f64x2.neg %[-1]
10770| drop
10774| return
10778| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10798| f64x2.sqrt %[-1]
10802| drop
10806| return
10810| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10830| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10850| f64x2.add %[-2], %[-1]
10854| drop
10858| return
10862| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10882| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10902| f64x2.sub %[-2], %[-1]
10906| drop
10910| return
10914| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10934| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
10954| f64x2.mul %[-2], %[-1]
10958| drop
10962| return
10966| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
10986| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11006| f64x2.div %[-2], %[-1]
11010| drop
11014| return
11018| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11038| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11058| f64x2.min %[-2], %[-1]
11062| drop
11066| return
11070| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11090| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11110| f64x2.max %[-2], %[-1]
11114| drop
11118| return
11122| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11142| i32x4.trunc_sat_f32x4_s %[-1]
11146| drop
11150| return
11154| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11174| i32x4.trunc_sat_f32x4_u %[-1]
11178| drop
11182| return
11186| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11206| i64x2.trunc_sat_f64x2_s %[-1]
11210| drop
11214| return
11218| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11238| i64x2.trunc_sat_f64x2_u %[-1]
11242| drop
11246| return
11250| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11270| f32x4.convert_i32x4_s %[-1]
11274| drop
11278| return
11282| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11302| f32x4.convert_i32x4_u %[-1]
11306| drop
11310| return
11314| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11334| f64x2.convert_i64x2_s %[-1]
11338| drop
11342| return
11346| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11366| f64x2.convert_i64x2_u %[-1]
11370| drop
11374| return
11378| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11398| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11418| v8x16.swizzle %[-2], %[-1]
11422| drop
11426| return
11430| v128.const i32x4 0x00000001 0x00000001 0x00000001 0x00000001
11450| v128.const i32x4 0x00000002 0x00000002 0x00000002 0x00000002
11470| v8x16.shuffle %[-2], %[-1] : (Lane imm: $0x01010101 0x01010101 0x01010101 0x01010101 )
11490| drop
11494| return
11498| i32.const 1
11506| i8x16.load_splat $0:%[-1]+$0
11518| drop
11522| return
11526| i32.const 1
11534| i16x8.load_splat $0:%[-1]+$0
11546| drop
11550| return
11554| i32.const 1
11562| i32x4.load_splat $0:%[-1]+$0
11574| drop
11578| return
11582| i32.const 1
11590| i64x2.load_splat $0:%[-1]+$0
11602| drop
11606| return
11610| i32.const 1
11618| i32.const 2
11626| atomic.notify $0:%[-2]+$3, %[-1]
11638| drop
11642| return
11646| i32.const 1
11654| i32.const 2
11662| i64.const 3
11674| i32.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
11686| drop
11690| return
11694| i32.const 1
11702| i64.const 2
11714| i64.const 3
11726| i64.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
11738| drop
11742| return
11746| i32.const 1
11754| i32.atomic.load $0:%[-1]+$3
11766| drop
11770| return
11774| i32.const 1
11782| i64.atomic.load $0:%[-1]+$7
11794| drop
11798| return
11802| i32.const 1
11810| i32.atomic.load8_u $0:%[-1]+$3
11822| drop
11826| return
11830| i32.const 1
11838| i32.atomic.load16_u $0:%[-1]+$3
11850| drop
11854| return
11858| i32.const 1
11866| i64.atomic.load8_u $0:%[-1]+$3
11878| drop
11882| return
11886| i32.const 1
11894| i64.atomic.load16_u $0:%[-1]+$3
11906| drop
11910| return
11914| i32.const 1
11922| i64.atomic.load32_u $0:%[-1]+$3
11934| drop
11938| return
11942| i32.const 1
11950| i32.const 2
11958| i32.atomic.store $0:%[-2]+$3, %[-1]
11970| return
11974| i32.const 1
11982| i64.const 2
11994| i64.atomic.store $0:%[-2]+$7, %[-1]
12006| return
12010| i32.const 1
12018| i32.const 2
12026| i32.atomic.store8 $0:%[-2]+$3, %[-1]
12038| return
12042| i32.const 1
12050| i32.const 2
12058| i32.atomic.store16 $0:%[-2]+$3, %[-1]
12070| return
12074| i32.const 1
12082| i64.const 2
12094| i64.atomic.store8 $0:%[-2]+$3, %[-1]
12106| return
12110| i32.const 1
12118| i64.const 2
12130| i64.atomic.store16 $0:%[-2]+$3, %[-1]
12142| return
12146| i32.const 1
12154| i64.const 2
12166| i64.atomic.store32 $0:%[-2]+$3, %[-1]
12178| return
12182| i32.const 1
12190| i32.const 2
12198| i32.atomic.rmw.add $0:%[-2]+$3, %[-1]
12210| drop
12214| return
12218| i32.const 1
12226| i64.const 2
12238| i64.atomic.rmw.add $0:%[-2]+$7, %[-1]
12250| drop
12254| return
12258| i32.const 1
12266| i32.const 2
12274| i32.atomic.rmw8.add_u $0:%[-2]+$3, %[-1]
12286| drop
12290| return
12294| i32.const 1
12302| i32.const 2
12310| i32.atomic.rmw16.add_u $0:%[-2]+$3, %[-1]
12322| drop
12326| return
12330| i32.const 1
12338| i64.const 2
12350| i64.atomic.rmw8.add_u $0:%[-2]+$3, %[-1]
12362| drop
12366| return
12370| i32.const 1
12378| i64.const 2
12390| i64.atomic.rmw16.add_u $0:%[-2]+$3, %[-1]
12402| drop
12406| return
12410| i32.const 1
12418| i64.const 2
12430| i64.atomic.rmw32.add_u $0:%[-2]+$3, %[-1]
12442| drop
12446| return
12450| i32.const 1
12458| i32.const 2
12466| i32.atomic.rmw.sub $0:%[-2]+$3, %[-1]
12478| drop
12482| return
12486| i32.const 1
12494| i64.const 2
12506| i64.atomic.rmw.sub $0:%[-2]+$7, %[-1]
12518| drop
12522| return
12526| i32.const 1
12534| i32.const 2
12542| i32.atomic.rmw8.sub_u $0:%[-2]+$3, %[-1]
12554| drop
12558| return
12562| i32.const 1
12570| i32.const 2
12578| i32.atomic.rmw16.sub_u $0:%[-2]+$3, %[-1]
12590| drop
12594| return
12598| i32.const 1
12606| i64.const 2
12618| i64.atomic.rmw8.sub_u $0:%[-2]+$3, %[-1]
12630| drop
12634| return
12638| i32.const 1
12646| i64.const 2
12658| i64.atomic.rmw16.sub_u $0:%[-2]+$3, %[-1]
12670| drop
12674| return
12678| i32.const 1
12686| i64.const 2
12698| i64.atomic.rmw32.sub_u $0:%[-2]+$3, %[-1]
12710| drop
12714| return
12718| i32.const 1
12726| i32.const 2
12734| i32.atomic.rmw.and $0:%[-2]+$3, %[-1]
12746| drop
12750| return
12754| i32.const 1
12762| i64.const 2
12774| i64.atomic.rmw.and $0:%[-2]+$7, %[-1]
12786| drop
12790| return
12794| i32.const 1
12802| i32.const 2
12810| i32.atomic.rmw8.and_u $0:%[-2]+$3, %[-1]
12822| drop
12826| return
12830| i32.const 1
12838| i32.const 2
12846| i32.atomic.rmw16.and_u $0:%[-2]+$3, %[-1]
12858| drop
12862| return
12866| i32.const 1
12874| i64.const 2
12886| i64.atomic.rmw8.and_u $0:%[-2]+$3, %[-1]
12898| drop
12902| return
12906| i32.const 1
12914| i64.const 2
12926| i64.atomic.rmw16.and_u $0:%[-2]+$3, %[-1]
12938| drop
12942| return
12946| i32.const 1
12954| i64.const 2
12966| i64.atomic.rmw32.and_u $0:%[-2]+$3, %[-1]
12978| drop
12982| return
12986| i32.const 1
12994| i32.const 2
13002| i32.atomic.rmw.or $0:%[-2]+$3, %[-1]
13014| drop
13018| return
13022| i32.const 1
13030| i64.const 2
13042| i64.atomic.rmw.or $0:%[-2]+$7, %[-1]
13054| drop
13058| return
13062| i32.const 1
13070| i32.const 2
13078| i32.atomic.rmw8.or_u $0:%[-2]+$3, %[-1]
13090| drop
13094| return
13098| i32.const 1
13106| i32.const 2
13114| i32.atomic.rmw16.or_u $0:%[-2]+$3, %[-1]
13126| drop
13130| return
13134| i32.const 1
13142| i64.const 2
13154| i64.atomic.rmw8.or_u $0:%[-2]+$3, %[-1]
13166| drop
13170| return
13174| i32.const 1
13182| i64.const 2
13194| i64.atomic.rmw16.or_u $0:%[-2]+$3, %[-1]
13206| drop
13210| return
13214| i32.const 1
13222| i64.const 2
13234| i64.atomic.rmw32.or_u $0:%[-2]+$3, %[-1]
13246| drop
13250| return
13254| i32.const 1
13262| i32.const 2
13270| i32.atomic.rmw.xor $0:%[-2]+$3, %[-1]
13282| drop
13286| return
13290| i32.const 1
13298| i64.const 2
13310| i64.atomic.rmw.xor $0:%[-2]+$7, %[-1]
13322| drop
13326| return
13330| i32.const 1
13338| i32.const 2
13346| i32.atomic.rmw8.xor_u $0:%[-2]+$3, %[-1]
13358| drop
13362| return
13366| i32.const 1
13374| i32.const 2
13382| i32.atomic.rmw16.xor_u $0:%[-2]+$3, %[-1]
13394| drop
13398| return
13402| i32.const 1
13410| i64.const 2
13422| i64.atomic.rmw8.xor_u $0:%[-2]+$3, %[-1]
13434| drop
13438| return
13442| i32.const 1
13450| i64.const 2
13462| i64.atomic.rmw16.xor_u $0:%[-2]+$3, %[-1]
13474| drop
13478| return
13482| i32.const 1
13490| i64.const 2
13502| i64.atomic.rmw32.xor_u $0:%[-2]+$3, %[-1]
13514| drop
13518| return
13522| i32.const 1
13530| i32.const 2
13538| i32.atomic.rmw.xchg $0:%[-2]+$3, %[-1]
13550| drop
13554| return
13558| i32.const 1
13566| i64.const 2
13578| i64.atomic.rmw.xchg $0:%[-2]+$7, %[-1]
13590| drop
13594| return
13598| i32.const 1
13606| i32.const 2
13614| i32.atomic.rmw8.xchg_u $0:%[-2]+$3, %[-1]
13626| drop
13630| return
13634| i32.const 1
13642| i32.const 2
13650| i32.atomic.rmw16.xchg_u $0:%[-2]+$3, %[-1]
13662| drop
13666| return
13670| i32.const 1
13678| i64.const 2
13690| i64.atomic.rmw8.xchg_u $0:%[-2]+$3, %[-1]
13702| drop
13706| return
13710| i32.const 1
13718| i64.const 2
13730| i64.atomic.rmw16.xchg_u $0:%[-2]+$3, %[-1]
13742| drop
13746| return
13750| i32.const 1
13758| i64.const 2
13770| i64.atomic.rmw32.xchg_u $0:%[-2]+$3, %[-1]
13782| drop
13786| return
13790| i32.const 1
13798| i32.const 2
13806| i32.const 3
13814| i32.atomic.rmw.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
13826| drop
13830| return
13834| i32.const 1
13842| i64.const 2
13854| i64.const 3
13866| i64.atomic.rmw.cmpxchg $0:%[-3]+$7, %[-2], %[-1]
13878| drop
13882| return
13886| i32.const 1
13894| i32.const 2
13902| i32.const 3
13910| i32.atomic.rmw8.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13922| drop
13926| return
13930| i32.const 1
13938| i32.const 2
13946| i32.const 3
13954| i32.atomic.rmw16.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13966| drop
13970| return
13974| i32.const 1
13982| i64.const 2
13994| i64.const 3
14006| i64.atomic.rmw8.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
14018| drop
14022| return
14026| i32.const 1
14034| i64.const 2
14046| i64.const 3
14058| i64.atomic.rmw16.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
14070| drop
14074| return
14078| i32.const 1
14086| i64.const 2
14098| i64.const 3
14110| i64.atomic.rmw32.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
14122| drop
14126| return
unreachable() => error: unreachable executed
br() =>
br_table() =>
return() =>
call() =>
call_indirect() =>
return_call() =>
return_call_indirect() =>
drop() =>
select() =>
get_local() =>
set_local() =>
tee_local() =>
get_global() =>
set_global() =>
i32.load() =>
i64.load() =>
f32.load() =>
f64.load() =>
i32.load8_s() =>
i32.load8_u() =>
i32.load16_s() =>
i32.load16_u() =>
i64.load8_s() =>
i64.load8_u() =>
i64.load16_s() =>
i64.load16_u() =>
i64.load32_s() =>
i64.load32_u() =>
i32.store() =>
i64.store() =>
f32.store() =>
f64.store() =>
i32.store8() =>
i32.store16() =>
i64.store8() =>
i64.store16() =>
i64.store32() =>
current_memory() =>
grow_memory() =>
i32.const() =>
i64.const() =>
f32.const() =>
f64.const() =>
i32.eqz() =>
i32.eq() =>
i32.ne() =>
i32.lt_s() =>
i32.lt_u() =>
i32.gt_s() =>
i32.gt_u() =>
i32.le_s() =>
i32.le_u() =>
i32.ge_s() =>
i32.ge_u() =>
i64.eqz() =>
i64.eq() =>
i64.ne() =>
i64.lt_s() =>
i64.lt_u() =>
i64.gt_s() =>
i64.gt_u() =>
i64.le_s() =>
i64.le_u() =>
i64.ge_s() =>
i64.ge_u() =>
f32.eq() =>
f32.ne() =>
f32.lt() =>
f32.gt() =>
f32.le() =>
f32.ge() =>
f64.eq() =>
f64.ne() =>
f64.lt() =>
f64.gt() =>
f64.le() =>
f64.ge() =>
i32.clz() =>
i32.ctz() =>
i32.popcnt() =>
i32.add() =>
i32.sub() =>
i32.mul() =>
i32.div_s() =>
i32.div_u() =>
i32.rem_s() =>
i32.rem_u() =>
i32.and() =>
i32.or() =>
i32.xor() =>
i32.shl() =>
i32.shr_s() =>
i32.shr_u() =>
i32.rotl() =>
i32.rotr() =>
i64.clz() =>
i64.ctz() =>
i64.popcnt() =>
i64.add() =>
i64.sub() =>
i64.mul() =>
i64.div_s() =>
i64.div_u() =>
i64.rem_s() =>
i64.rem_u() =>
i64.and() =>
i64.or() =>
i64.xor() =>
i64.shl() =>
i64.shr_s() =>
i64.shr_u() =>
i64.rotl() =>
i64.rotr() =>
f32.abs() =>
f32.neg() =>
f32.ceil() =>
f32.floor() =>
f32.trunc() =>
f32.nearest() =>
f32.sqrt() =>
f32.add() =>
f32.sub() =>
f32.mul() =>
f32.div() =>
f32.min() =>
f32.max() =>
f32.copysign() =>
f64.abs() =>
f64.neg() =>
f64.ceil() =>
f64.floor() =>
f64.trunc() =>
f64.nearest() =>
f64.sqrt() =>
f64.add() =>
f64.sub() =>
f64.mul() =>
f64.div() =>
f64.min() =>
f64.max() =>
f64.copysign() =>
i32.wrap/i64() =>
i32.trunc_s/f32() =>
i32.trunc_u/f32() =>
i32.trunc_s/f64() =>
i32.trunc_u/f64() =>
i64.extend_s/i32() =>
i64.extend_u/i32() =>
i64.trunc_s/f32() =>
i64.trunc_u/f32() =>
i64.trunc_s/f64() =>
i64.trunc_u/f64() =>
f32.convert_s/i32() =>
f32.convert_u/i32() =>
f32.convert_s/i64() =>
f32.convert_u/i64() =>
f32.demote/f64() =>
f64.convert_s/i32() =>
f64.convert_u/i32() =>
f64.convert_s/i64() =>
f64.convert_u/i64() =>
f64.promote/f32() =>
i32.reinterpret/f32() =>
f32.reinterpret/i32() =>
i64.reinterpret/f64() =>
f64.reinterpret/i64() =>
i32.extend8_s() =>
i32.extend16_s() =>
i64.extend8_s() =>
i64.extend16_s() =>
i64.extend32_s() =>
alloca() =>
br_unless() =>
called host host.print(i32:1) =>
call_host() =>
data() =>
drop_keep() =>
i32.trunc_s:sat/f32() =>
i32.trunc_u:sat/f32() =>
i32.trunc_s:sat/f64() =>
i32.trunc_u:sat/f64() =>
i64.trunc_s:sat/f32() =>
i64.trunc_u:sat/f32() =>
i64.trunc_s:sat/f64() =>
i64.trunc_u:sat/f64() =>
memory.init() => error: out of bounds memory access
data.drop() =>
memory.copy() =>
memory.fill() =>
table.init() => error: element segment dropped
elem.drop() => error: element segment dropped
table.copy() => error: out of bounds table access: table.copy out of bounds
v128.load() =>
v128.store() =>
v128.const() =>
i8x16.splat() =>
i8x16.extract_lane_s() =>
i8x16.extract_lane_u() =>
i8x16.replace_lane() =>
i16x8.splat() =>
i16x8.extract_lane_s() =>
i16x8.extract_lane_u() =>
i16x8.replace_lane() =>
i32x4.splat() =>
i32x4.extract_lane() =>
i32x4.replace_lane() =>
i64x2.splat() =>
i64x2.extract_lane() =>
i64x2.replace_lane() =>
f32x4.splat() =>
f32x4.extract_lane() =>
f32x4.replace_lane() =>
f64x2.splat() =>
f64x2.extract_lane() =>
f64x2.replace_lane() =>
i8x16.eq() =>
i8x16.ne() =>
i8x16.lt_s() =>
i8x16.lt_u() =>
i8x16.gt_s() =>
i8x16.gt_u() =>
i8x16.le_s() =>
i8x16.le_u() =>
i8x16.ge_s() =>
i8x16.ge_u() =>
i16x8.eq() =>
i16x8.ne() =>
i16x8.lt_s() =>
i16x8.lt_u() =>
i16x8.gt_s() =>
i16x8.gt_u() =>
i16x8.le_s() =>
i16x8.le_u() =>
i16x8.ge_s() =>
i16x8.ge_u() =>
i32x4.eq() =>
i32x4.ne() =>
i32x4.lt_s() =>
i32x4.lt_u() =>
i32x4.gt_s() =>
i32x4.gt_u() =>
i32x4.le_s() =>
i32x4.le_u() =>
i32x4.ge_s() =>
i32x4.ge_u() =>
f32x4.eq() =>
f32x4.ne() =>
f32x4.lt() =>
f32x4.gt() =>
f32x4.le() =>
f32x4.ge() =>
f64x2.eq() =>
f64x2.ne() =>
f64x2.lt() =>
f64x2.gt() =>
f64x2.le() =>
f64x2.ge() =>
v128.not() =>
v128.and() =>
v128.or() =>
v128.xor() =>
v128.bitselect() =>
i8x16.neg() =>
i8x16.any_true() =>
i8x16.all_true() =>
i8x16.shl() =>
i8x16.shr_s() =>
i8x16.shr_u() =>
i8x16.add() =>
i8x16.add_saturate_s() =>
i8x16.add_saturate_u() =>
i8x16.sub() =>
i8x16.sub_saturate_s() =>
i8x16.sub_saturate_u() =>
i8x16.mul() =>
i16x8.neg() =>
i16x8.any_true() =>
i16x8.all_true() =>
i16x8.shl() =>
i16x8.shr_s() =>
i16x8.shr_u() =>
i16x8.add() =>
i16x8.add_saturate_s() =>
i16x8.add_saturate_u() =>
i16x8.sub() =>
i16x8.sub_saturate_s() =>
i16x8.sub_saturate_u() =>
i16x8.mul() =>
i32x4.neg() =>
i32x4.any_true() =>
i32x4.all_true() =>
i32x4.shl() =>
i32x4.shr_s() =>
i32x4.shr_u() =>
i32x4.add() =>
i32x4.sub() =>
i32x4.mul() =>
i64x2.neg() =>
i64x2.any_true() =>
i64x2.all_true() =>
i64x2.shl() =>
i64x2.shr_s() =>
i64x2.shr_u() =>
i64x2.add() =>
i64x2.sub() =>
f32x4.abs() =>
f32x4.neg() =>
f32x4.sqrt() =>
f32x4.add() =>
f32x4.sub() =>
f32x4.mul() =>
f32x4.div() =>
f32x4.min() =>
f32x4.max() =>
f64x2.abs() =>
f64x2.neg() =>
f64x2.sqrt() =>
f64x2.add() =>
f64x2.sub() =>
f64x2.mul() =>
f64x2.div() =>
f64x2.min() =>
f64x2.max() =>
i32x4.trunc_sat_f32x4_s() =>
i32x4.trunc_sat_f32x4_u() =>
i64x2.trunc_sat_f64x2_s() =>
i64x2.trunc_sat_f64x2_u() =>
f32x4.convert_i32x4_s() =>
f32x4.convert_i32x4_u() =>
f64x2.convert_i64x2_s() =>
f64x2.convert_i64x2_u() =>
v8x16.swizzle() =>
v8x16.shuffle() =>
i8x16.load_splat() =>
i16x8.load_splat() =>
i32x4.load_splat() =>
i64x2.load_splat() =>
atomic.notify() => error: unreachable executed
i32.atomic.wait() => error: unreachable executed
i64.atomic.wait() => error: unreachable executed
i32.atomic.load() =>
i64.atomic.load() =>
i32.atomic.load8_u() =>
i32.atomic.load16_u() =>
i64.atomic.load8_u() =>
i64.atomic.load16_u() =>
i64.atomic.load32_u() =>
i32.atomic.store() =>
i64.atomic.store() =>
i32.atomic.store8() =>
i32.atomic.store16() =>
i64.atomic.store8() =>
i64.atomic.store16() =>
i64.atomic.store32() =>
i32.atomic.rmw.add() =>
i64.atomic.rmw.add() =>
i32.atomic.rmw8.add_u() =>
i32.atomic.rmw16.add_u() =>
i64.atomic.rmw8.add_u() =>
i64.atomic.rmw16.add_u() =>
i64.atomic.rmw32.add_u() =>
i32.atomic.rmw.sub() =>
i64.atomic.rmw.sub() =>
i32.atomic.rmw8.sub_u() =>
i32.atomic.rmw16.sub_u() =>
i64.atomic.rmw8.sub_u() =>
i64.atomic.rmw16.sub_u() =>
i64.atomic.rmw32.sub_u() =>
i32.atomic.rmw.and() =>
i64.atomic.rmw.and() =>
i32.atomic.rmw8.and_u() =>
i32.atomic.rmw16.and_u() =>
i64.atomic.rmw8.and_u() =>
i64.atomic.rmw16.and_u() =>
i64.atomic.rmw32.and_u() =>
i32.atomic.rmw.or() =>
i64.atomic.rmw.or() =>
i32.atomic.rmw8.or_u() =>
i32.atomic.rmw16.or_u() =>
i64.atomic.rmw8.or_u() =>
i64.atomic.rmw16.or_u() =>
i64.atomic.rmw32.or_u() =>
i32.atomic.rmw.xor() =>
i64.atomic.rmw.xor() =>
i32.atomic.rmw8.xor_u() =>
i32.atomic.rmw16.xor_u() =>
i64.atomic.rmw8.xor_u() =>
i64.atomic.rmw16.xor_u() =>
i64.atomic.rmw32.xor_u() =>
i32.atomic.rmw.xchg() =>
i64.atomic.rmw.xchg() =>
i32.atomic.rmw8.xchg_u() =>
i32.atomic.rmw16.xchg_u() =>
i64.atomic.rmw8.xchg_u() =>
i64.atomic.rmw16.xchg_u() =>
i64.atomic.rmw32.xchg_u() =>
i32.atomic.rmw.cmpxchg() =>
i64.atomic.rmw.cmpxchg() =>
i32.atomic.rmw8.cmpxchg_u() =>
i32.atomic.rmw16.cmpxchg_u() =>
i64.atomic.rmw8.cmpxchg_u() =>
i64.atomic.rmw16.cmpxchg_u() =>
i64.atomic.rmw32.cmpxchg_u() =>
;;; STDOUT ;;)

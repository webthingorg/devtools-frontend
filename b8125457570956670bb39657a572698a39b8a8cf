{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d58a8d4f_5ce9791a",
        "filename": "front_end/models/trace/Processor.test.ts",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T00:24:25Z",
      "side": 1,
      "message": "I couldn\u0027t figure out how to save this test in a reasonable way, because the concept of a trace that causes this audit to error (by like, having crappy network trace events that somehow have no data?) is not actually possible ... but I guess I could modify the `file` event array to find that some trace event and mangle it horridly ... (except, rawEvents returns a readonly array because it caches the data loaded from disk)\n\nDoes CDT have a mocking library usable by unit tests? May make this easier to write.\n\nOr, we can delete the test.",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53c7400f_76216397",
        "filename": "front_end/models/trace/Processor.test.ts",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-07-09T14:06:46Z",
      "side": 1,
      "message": "I think this test is useful to ensure that we don\u0027t brick everything if an insight throws any error. I think the easiest approach would be to create an \"invalid trace\" fixture that is manually modified to brick the insights.",
      "parentUuid": "d58a8d4f_5ce9791a",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0cae1b_9c5d5b06",
        "filename": "front_end/models/trace/Processor.test.ts",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T18:57:29Z",
      "side": 1,
      "message": "This doesn\u0027t work either, because the failure is within the handlers (.parse), so insights never run.\n\nOur options here are to use a mocking library to mimic an Error being thrown in the right part of the implementation (or set some global that amounts to `__testingInsightsWillError`), or to compromise on the exposed API (aka be able to call #parse here, then mangle the traceParsedData, then run #computeInsights - which obviously means these can\u0027t be private anymore).\n\nDoes CDT have a mocking library for unit tests?",
      "parentUuid": "53c7400f_76216397",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70fc0271_58dd4f57",
        "filename": "front_end/models/trace/Processor.test.ts",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-07-09T20:38:31Z",
      "side": 1,
      "message": "\u003e Does CDT have a mocking library for unit tests?\n\n`sinon` is the mocking library I\u0027ve used, but that probably isn\u0027t helpful because it can\u0027t mock module exports. I\u0027m fine leaving the test disabled for now.",
      "parentUuid": "7d0cae1b_9c5d5b06",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64f677c7_5fb152ff",
        "filename": "front_end/models/trace/Processor.test.ts",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-07-10T09:15:34Z",
      "side": 1,
      "message": "maybe we can use sinon\u0027s `callsFake` to mock `#getEnabledInsightRunners` and return a throwing runner there. I think would need to make it non-private, but that should be fine since there are no references to the object\u0027s props, it could even be static",
      "parentUuid": "70fc0271_58dd4f57",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "862d99f4_28592652",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T00:24:25Z",
      "side": 1,
      "message": "I don\u0027t understand the motivation for the type here being so generic. One result of that is code here being difficult to write soundly if expecting to use certain handler results.\n\nCan we perform a refactor as described in this comment?",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfdb44bb_be9ed5a7",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-07-09T14:06:46Z",
      "side": 1,
      "message": "The motivation for the current state of `TraceInsightData` was so TS knows what handler data. This way the insights don\u0027t have to perform their own dependency check. Maybe that\u0027s unavoidable at this point and possibly simpler than the current state of insight deps so I think it\u0027s fine.\n\nThat being said, I remember us wanting to just pass the full set of trace parsed data everywhere. I think it would be a larger refactor because this file still expects to work with subsets everywhere.",
      "parentUuid": "862d99f4_28592652",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0728cbf4_b6d04a8a",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-07-09T19:44:27Z",
      "side": 1,
      "message": "Yeah i think Jack or Andres will have to chime in here. The current conditionality of the traceParsedData type  is certainly not very portable.",
      "parentUuid": "dfdb44bb_be9ed5a7",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83d476f2_b9908316",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-07-10T09:15:34Z",
      "side": 1,
      "message": "I guess we could make the properties of `Insights.Types.LanternContext` optional and use TS to filled them out based on the dependencies passed on `EnabledModelHandlers` (similar to `Insights.Types.TraceInsightData`, but I\u0027m unsure it\u0027s worth the added complexity)...\n\nIn any case I\u0027m unsure we need the type template at all. We needed this during the migration from the old engine when only some handlers where run to prevent paying the cost of those that were unused, but now that the migration is done, I think there are no cases where we only run some handlers. It seems there aren\u0027t any clear plans for doing so in the future either, so it\u0027s mostly technical debt now. I think we can just drop `EnabledHandlerDataWithMeta\u003cEnabledHandlers\u003e` and use `TraceParseData` everywhere.\n\n\n @jacktfranklin@chromium.org wdyt?",
      "parentUuid": "0728cbf4_b6d04a8a",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d8f85f2_66af5d2c",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-07-09T19:44:27Z",
      "side": 1,
      "message": "extract to const to fit with fcp/lcp/tti?",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abd04533_1b164446",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T20:08:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d8f85f2_66af5d2c",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51797a3f_7a0c4080",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T00:24:25Z",
      "side": 1,
      "message": "Is there a preferred way to log an error?",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b5b680f_40650cd2",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T01:08:49Z",
      "side": 1,
      "message": "`setMiniMapBounds` uses console.error so I guess this is allowed.\n\nThough this should become console.error(e.message), or maybe be removed entirely - it would log an error message for pretty much every existing test that uses a trace fixture.",
      "parentUuid": "51797a3f_7a0c4080",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64e6533e_94811f75",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-07-09T19:44:27Z",
      "side": 1,
      "message": "There has been cleanup efforts before to remove logs that happen during unit tests. So yeah pretty sure we don\u0027t want this logging like this.",
      "parentUuid": "8b5b680f_40650cd2",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6384220c_faf64ffa",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T20:08:23Z",
      "side": 1,
      "message": "I added an explicit allowance for the two error messages that are triggered for old traces, but lets log anything else.",
      "parentUuid": "64e6533e_94811f75",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "907afe0d_d8aff3b7",
        "filename": "front_end/models/trace/insights/RenderBlocking.test.ts",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T00:24:25Z",
      "side": 1,
      "message": "I\u0027d like to send a CL that refactors all the insight tests to use the Trace Processor directly (skimmed down to just the handlers it needs, I guess) -\n\n1) easier to write test code\n2) tests are more useful when using public interface",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b43eeadf_0e1e37b1",
        "filename": "front_end/models/trace/insights/RenderBlocking.ts",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-07-09T19:44:27Z",
      "side": 1,
      "message": "enum for this type instead? (not const enum because ugh)\nno strong feelings",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16521df4_75a8cbbf",
        "filename": "front_end/models/trace/insights/RenderBlocking.ts",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T20:08:23Z",
      "side": 1,
      "message": "node.type is already a union of string literals, and that provides enough type correctness and even IDE autocompletion to not warrant introducing an enum IMO",
      "parentUuid": "b43eeadf_0e1e37b1",
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebc2e84d_fae1be6b",
        "filename": "front_end/models/trace/insights/RenderBlocking.ts",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-07-09T19:44:27Z",
      "side": 1,
      "message": "i feel like the current split between computeSavings and estimateSavingsWithGraphs isn\u0027t very meaningful.  smushing all 80 lines into 1 fn is one alternative... seems kinda better than passing deferredIds to a new fn.\n\nor maybe there\u0027s another way to split up lines 58-134?",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 24
      },
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fb1cca7_bdac0a85",
        "filename": "front_end/models/trace/insights/RenderBlocking.ts",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-07-09T20:08:23Z",
      "side": 1,
      "message": "I can inline this method, but I think it\u0027s less readable. I don\u0027t have another approach for splitting this up.",
      "parentUuid": "ebc2e84d_fae1be6b",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 24
      },
      "revId": "b8125457570956670bb39657a572698a39b8a8cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
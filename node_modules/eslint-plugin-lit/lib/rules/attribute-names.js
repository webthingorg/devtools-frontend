"use strict";
/**
 * @fileoverview Enforces attribute naming conventions
 * @author James Garbutt <https://github.com/43081j>
 */
const util_1 = require("../util");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Enforces attribute naming conventions',
            recommended: true,
            url: 'https://github.com/43081j/eslint-plugin-lit/blob/master/docs/rules/attribute-names.md'
        },
        schema: [],
        messages: {
            casedAttribute: 'Attributes are case-insensitive and therefore should be ' +
                'defined in lower case',
            casedPropertyWithoutAttribute: 'Property has non-lowercase casing but no attribute. It should ' +
                'instead have an explicit `attribute` set to the lower case ' +
                'name (usually snake-case)'
        }
    },
    create(context) {
        return {
            ClassDeclaration: (node) => {
                var _a;
                if ((0, util_1.isLitClass)(node)) {
                    const propertyMap = (0, util_1.getPropertyMap)(node);
                    for (const [prop, propConfig] of propertyMap.entries()) {
                        if (!propConfig.attribute || propConfig.state) {
                            continue;
                        }
                        if (!propConfig.attributeName) {
                            if (prop.toLowerCase() !== prop) {
                                context.report({
                                    node: propConfig.key,
                                    messageId: 'casedPropertyWithoutAttribute'
                                });
                            }
                        }
                        else {
                            if (propConfig.attributeName.toLowerCase() !==
                                propConfig.attributeName) {
                                context.report({
                                    node: (_a = propConfig.expr) !== null && _a !== void 0 ? _a : propConfig.key,
                                    messageId: 'casedAttribute'
                                });
                            }
                        }
                    }
                }
            }
        };
    }
};
module.exports = rule;

import KeywordCxt from "./compile/context";

export { SchemaCxt, SchemaObjCxt } from "./compile";
export { _, Code, CodeGen, CodeGenOptions , Name, nil, str, stringify} from "./compile/codegen";
export { CodeOptions, ErrorsTextOptions , InstanceOptions, Logger, Options, Plugin} from "./core";
export { AnySchema, AnySchemaObject, AsyncFormatDefinition, AsyncSchema, AsyncValidateFunction, CodeKeywordDefinition, ErrorNoParams, ErrorObject, Format, FormatDefinition, FuncKeywordDefinition, JTDParser, KeywordDefinition, KeywordErrorDefinition, MacroKeywordDefinition, Schema, SchemaObject, ValidateFunction, Vocabulary, } from "./types";
export { KeywordCxt };

import type { AnySchemaObject, SchemaObject, JTDParser } from "./types";
import type { JTDSchemaType, JTDDataType } from "./types/jtd-schema";
export { JTDSchemaType, JTDDataType };
import AjvCore, { CurrentOptions } from "./core";
export declare type JTDOptions = CurrentOptions & {
    strictTypes?: never;
    strictTuples?: never;
    allowMatchingProperties?: never;
    allowUnionTypes?: never;
    validateFormats?: never;
    $data?: never;
    verbose?: never;
    $comment?: never;
    formats?: never;
    loadSchema?: never;
    useDefaults?: never;
    coerceTypes?: never;
    next?: never;
    unevaluated?: never;
    dynamicRef?: never;
    meta?: boolean;
    defaultMeta?: never;
    inlineRefs?: boolean;
    loopRequired?: never;
    multipleOfPrecision?: never;
    ajvErrors?: boolean;
};
export default class Ajv extends AjvCore {
    constructor(opts?: JTDOptions);
    _addVocabularies(): void;
    _addDefaultMetaSchema(): void;
    defaultMeta(): string | AnySchemaObject | undefined;
    compileSerializer<T = unknown>(schema: SchemaObject): (data: T) => string;
    compileSerializer<T = unknown>(schema: JTDSchemaType<T>): (data: T) => string;
    compileParser<T = unknown>(schema: SchemaObject): JTDParser<T>;
    compileParser<T = unknown>(schema: JTDSchemaType<T>): JTDParser<T>;
    private _compileSerializer;
    private _compileParser;
}

{
  "comments": [
    {
      "key": {
        "uuid": "e3d58b98_cf896eef",
        "filename": "front_end/bindings/CSSWorkspaceBinding.js",
        "patchSetId": 12
      },
      "lineNbr": 191,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T11:52:05Z",
      "side": 1,
      "message": "This event listener cannot be removed again (to do that, one would have to pass the arrow function here to the function that removes the listener).\n\nWould it be cleaner to have the equivalent of the arrow function as a method? Would it make sense to not have _styleSheetAdded async (but use promise.then?)\n\nIn any case: Why don\u0027t we need to remove this listener?",
      "range": {
        "startLine": 189,
        "startChar": 9,
        "endLine": 191,
        "endChar": 11
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca55583b_bd066c40",
        "filename": "front_end/bindings/CSSWorkspaceBinding.js",
        "patchSetId": 12
      },
      "lineNbr": 191,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-03-16T12:29:00Z",
      "side": 1,
      "message": "We are removing the event listeners.\n\ncssModel.addEventListener(...) returns an object that contains various information (besides this arrow function we create her). The result of both handlers becomes the {_eventListeners} array that is then used to clean up once the CSSModel is disposed.",
      "parentUuid": "e3d58b98_cf896eef",
      "range": {
        "startLine": 189,
        "startChar": 9,
        "endLine": 191,
        "endChar": 11
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97009c0e_8e1927ce",
        "filename": "front_end/bindings/CSSWorkspaceBinding.js",
        "patchSetId": 12
      },
      "lineNbr": 191,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T12:49:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca55583b_bd066c40",
      "range": {
        "startLine": 189,
        "startChar": 9,
        "endLine": 191,
        "endChar": 11
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "deeed468_84de7bf1",
        "filename": "front_end/bindings/DebuggerWorkspaceBinding.js",
        "patchSetId": 12
      },
      "lineNbr": 557,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T11:52:05Z",
      "side": 1,
      "message": "Is this defensive programming or are there actual cases of dispose being called before the locationsPromise resolved?\n\nIf the latter is the case: Is it a problem that there is an already disposed object that where _locations isn\u0027t null?",
      "range": {
        "startLine": 557,
        "startChar": 4,
        "endLine": 557,
        "endChar": 26
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db76583f_c4b37020",
        "filename": "front_end/bindings/DebuggerWorkspaceBinding.js",
        "patchSetId": 12
      },
      "lineNbr": 557,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-03-16T12:29:00Z",
      "side": 1,
      "message": "Yes, this is indeed a case where the LiveLocation is so short lived that it gets disposed before the locations actually resolve.\n\nThis shouldn\u0027t be a problem though. {super.dispose()} severs the connection to the update delegate (by setting) it to null. So if there is one last update still pending, it becomes aa no-op and after that we trust the caller to not use this LiveLocation further after calling dispose on it.",
      "parentUuid": "deeed468_84de7bf1",
      "range": {
        "startLine": 557,
        "startChar": 4,
        "endLine": 557,
        "endChar": 26
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43f5d5c4_3f75ba09",
        "filename": "front_end/bindings/DebuggerWorkspaceBinding.js",
        "patchSetId": 12
      },
      "lineNbr": 557,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T12:49:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db76583f_c4b37020",
      "range": {
        "startLine": 557,
        "startChar": 4,
        "endLine": 557,
        "endChar": 26
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d2611c1_57678086",
        "filename": "front_end/bindings/LiveLocation.js",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T11:52:05Z",
      "side": 1,
      "message": "Why is this necessary? It looks like this gets set in the constructor. May update be called after dispose? \n\nIn any case, case please add @type annotation to the _updateDelegate field to indicate nullability.",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8409d324_62467ceb",
        "filename": "front_end/bindings/LiveLocation.js",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-03-16T12:29:00Z",
      "side": 1,
      "message": "Yes, as updates happen now asynchronously I imagine that we put the update on the micro task queue but before it runs we already dispose of the live location. Disposing of a live location is the only possibility that the delegate is null here. Not calling the delegate is probably the right thing to do as the update delegate and the owner of this LiveLocation are usually the same entity.\n\nDone (for the nullability)",
      "parentUuid": "5d2611c1_57678086",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0572399_eaeec29b",
        "filename": "front_end/bindings/LiveLocation.js",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T12:49:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8409d324_62467ceb",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bed4bebe_e781bde9",
        "filename": "front_end/test_runner/TestRunner.js",
        "patchSetId": 12
      },
      "lineNbr": 1436,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T11:52:05Z",
      "side": 1,
      "message": "Just for my understanding: What if a LiveLocation triggers another update? I.e. why is it enough to wait for all the currently outstanding promises / why don\u0027t we have to wait until no more updates are triggered. Or is this not happening / not important?",
      "range": {
        "startLine": 1436,
        "startChar": 22,
        "endLine": 1436,
        "endChar": 55
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e00bb53_72600dcb",
        "filename": "front_end/test_runner/TestRunner.js",
        "patchSetId": 12
      },
      "lineNbr": 1436,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-03-16T12:29:00Z",
      "side": 1,
      "message": "AFAICT LiveLocation#update does not trigger additional updates. Everything that can trigger live location updates (e.g. loading scripts/source maps or setting breakpoints) is done before this helper is actually called, so only waiting for pending updates is fine in all the web tests I observed.\n\nIt might be necessary (for deflaking) that this helper also includes updates that pile on after we trigger the wait, similar to how {LiveLocation#update} is scheduled. Although I\u0027d prefer to add that in a separate CL as scheduling code gets tricky quickly and requires a thorough review.",
      "parentUuid": "bed4bebe_e781bde9",
      "range": {
        "startLine": 1436,
        "startChar": 22,
        "endLine": 1436,
        "endChar": 55
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bd38fe2_9e0a4860",
        "filename": "front_end/test_runner/TestRunner.js",
        "patchSetId": 12
      },
      "lineNbr": 1436,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-16T12:49:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9e00bb53_72600dcb",
      "range": {
        "startLine": 1436,
        "startChar": 22,
        "endLine": 1436,
        "endChar": 55
      },
      "revId": "e27cb0ad83683903a012b884a3f98cdfd1e5c0fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
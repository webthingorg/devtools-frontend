{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d618517c_fa697358",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-23T15:09:26Z",
      "side": 1,
      "message": "Putting this up early for feedback to see if I\u0027m on the right track, down to meet if not.",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9e0277f_636a453e",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T19:50:21Z",
      "side": 1,
      "message": "fwiw in LH we also have a 10% savings check ...\n\nbut ... I\u0027m honestly not sure that is a good idea. Less bytes on the network \u003d\u003d always a good idea, gzip overhead is dwarfed by network bandwidth and packet loss.\n\nso +1 decision to not include. I\u0027m gonna kill it in LH too.",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a61c718_136f0028",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T20:58:50Z",
      "side": 1,
      "message": "kinda decided to keep this % threshold in LH, ref https://github.com/GoogleChrome/lighthouse/pull/16165\n\nfor purposes of this CL, since we lack actual gzip savings, I think an explicit allowlist of mimetypes to consider handles this issue.",
      "parentUuid": "c9e0277f_636a453e",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e98f9b1e_c730f28a",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T19:50:21Z",
      "side": 1,
      "message": "responseHeaders is not an optional property, so I\u0027d expect this to always be true. Is that not the case?",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5397bd6_85c79aeb",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-26T16:53:37Z",
      "side": 1,
      "message": "Whoops, you\u0027re right. Fixed.",
      "parentUuid": "e98f9b1e_c730f28a",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b09243ac_b2024ed6",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-23T15:09:26Z",
      "side": 1,
      "message": "Not sure if this is the correct value to use.",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1175d51_b8466bc5",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T19:50:21Z",
      "side": 1,
      "message": "decodedBodyLength is the size of the resource, after decompression (if any). I think this can just be request.args.data.decodedBodyLength\n\nencodedDataLength is the size over the network, which can be higher than decodedBodyLength even if there is no compression due to it counting the size of headers/anything else in the HTTP response packet. For the purpose of estimating the would-be compressed size of the underlying resource it\u0027s irrelevant.\n\nI\u0027m realizing this information would be more useful if added as doc comments to the fields in SyntheticNetworkRequest :)",
      "parentUuid": "b09243ac_b2024ed6",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea4b92bb_3dcfbbe8",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-26T16:53:37Z",
      "side": 1,
      "message": "Changed to just `decodedBodyLength`, and added comments to the fields in `SyntheticNetworkRequest` (feel free to tweak wording there).",
      "parentUuid": "c1175d51_b8466bc5",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b03d4985_9cfca447",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T19:50:21Z",
      "side": 1,
      "message": "can you add the source of these numbers (it\u0027s in the comment from LH estimateCompressedContentSize)",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c32df8a_1197efc0",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-26T16:53:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b03d4985_9cfca447",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00fff1c7_57e1260a",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T20:19:13Z",
      "side": 1,
      "message": "I think without doing the actual gzip, as we do in LH, we have to ignore the default case. We don\u0027t want to suggest gzip on an image resource, for example - they are typically already compressed. That 10% threshold is how LH was excluding such cases.\n\nBut we can add a few more mime types here. like html/json/xml. and they can use the 0.5 fallback (unless you want to try and derive better estimates).\n\nShould also consider common alternatives to these mimetypes - like application/json",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c52a49df_13e0eb2b",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T20:21:40Z",
      "side": 1,
      "message": "(please ignore the last sentence above, I mean to delete that line and so it doesn\u0027t make sense).\n\nHere\u0027s a list of mimetypes that _should_ be compressed: https://letstalkaboutwebperf.com/en/gzip-brotli-server-config/",
      "parentUuid": "00fff1c7_57e1260a",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37ac6050_0df7258b",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-26T16:53:37Z",
      "side": 1,
      "message": "Got it, I added all the MIME types from the link with the 0.5 fallback, and a comment to that link. Also updated the default (anything not allowlisted) to be 0.",
      "parentUuid": "c52a49df_13e0eb2b",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c61b108_80cceae9",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-23T15:09:26Z",
      "side": 1,
      "message": "Open to hearing if/how we need to use Lantern here to estimate savings, or if this is sufficient.",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62623514_8e80ca0e",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T19:50:21Z",
      "side": 1,
      "message": "1- I\u0027d reframe this as \"uncompressedResponseBytes\", which is more explanatory than \"compressionBytes\" (even if still slightly off, because we are excluding resources that are under a threshold ...)\n\n2- We should have a metricSavings here (from Lantern), as I believe it\u0027s the planned way for us to apply a sorting to the insights we show to the user. This can be done in another CL tho.",
      "parentUuid": "4c61b108_80cceae9",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7af7a1e9_ea3d19fc",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-26T16:53:37Z",
      "side": 1,
      "message": "Updated to `uncompressedResponseBytes`, leaving Lantern `metricSavings` for another CL.",
      "parentUuid": "62623514_8e80ca0e",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6da0a403_4a0a09ca",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-23T19:55:06Z",
      "side": 1,
      "message": "For the insight UI in the perf panel, we\u0027ll need to display a list of resources that should have been compressed (incl. the estimated byte savings). That can be a done w/ just a Map of SynthNetworkRecord -\u003e estimated savings.",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "669a3e25_d41278f6",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 3517468
      },
      "writtenOn": "2024-08-26T16:53:37Z",
      "side": 1,
      "message": "IIUC no changes needed here, but this is something to do for the insight card?",
      "parentUuid": "6da0a403_4a0a09ca",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "250ee7f2_51a178b1",
        "filename": "front_end/models/trace/insights/DocumentLatency.ts",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-08-26T17:22:22Z",
      "side": 1,
      "message": "The map of network record (synthetic network trace) to savings needs to be in the insight - the component card shouldn\u0027t do much of any logic itself. The idea is that Lighthouse should be able to reuse this information if it wanted to (though in this case...without a real gzip estimate that would not happen).",
      "parentUuid": "669a3e25_d41278f6",
      "revId": "8668ede422146f3d467091ab28d420314ddee163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
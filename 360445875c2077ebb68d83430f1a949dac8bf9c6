{
  "comments": [
    {
      "key": {
        "uuid": "4a7aa838_2e4cca77",
        "filename": "front_end/issues/IssuesPane.js",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "Nit: Please use proper typographic quotes (go/punctuation-standards). In this case, we should use the curly apostrophe (â€™) instead of a straight apostrophe (\u0027).",
      "range": {
        "startLine": 488,
        "startChar": 122,
        "endLine": 488,
        "endChar": 123
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "babcc1c0_d4c07410",
        "filename": "front_end/issues/IssuesPane.js",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "typo: embedded",
      "range": {
        "startLine": 488,
        "startChar": 17,
        "endLine": 488,
        "endChar": 24
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e65d3cc_ffe33526",
        "filename": "front_end/issues/IssuesPane.js",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Outdated.",
      "parentUuid": "4a7aa838_2e4cca77",
      "range": {
        "startLine": 488,
        "startChar": 122,
        "endLine": 488,
        "endChar": 123
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "032420b8_19aa7324",
        "filename": "front_end/issues/IssuesPane.js",
        "patchSetId": 5
      },
      "lineNbr": 488,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "babcc1c0_d4c07410",
      "range": {
        "startLine": 488,
        "startChar": 17,
        "endLine": 488,
        "endChar": 24
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17c54619_7d8da34d",
        "filename": "front_end/issues/IssuesPane.js",
        "patchSetId": 5
      },
      "lineNbr": 489,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "typo: embedding",
      "range": {
        "startLine": 489,
        "startChar": 11,
        "endLine": 489,
        "endChar": 19
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f9e08f5_2ca6e68b",
        "filename": "front_end/issues/IssuesPane.js",
        "patchSetId": 5
      },
      "lineNbr": 489,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17c54619_7d8da34d",
      "range": {
        "startLine": 489,
        "startChar": 11,
        "endLine": 489,
        "endChar": 19
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2188af4a_eeba1c50",
        "filename": "front_end/issues/issuesPane.css",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "nit: single quotes for consistency with e.g. line 103",
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3a63fa6_4214cdbd",
        "filename": "front_end/issues/issuesPane.css",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2188af4a_eeba1c50",
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a449fd00_3ec26ab4",
        "filename": "front_end/network/RequestHeadersView.js",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "In general, prefer textContent over innerText, because the innerText getter can trigger layout. (In this case we\u0027re using the setter so it doesn\u0027t matter too much, but \"always prefer textContent\" is easier to remember.)",
      "range": {
        "startLine": 166,
        "startChar": 13,
        "endLine": 166,
        "endChar": 22
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "732bd359_0f986f62",
        "filename": "front_end/network/RequestHeadersView.js",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a449fd00_3ec26ab4",
      "range": {
        "startLine": 166,
        "startChar": 13,
        "endLine": 166,
        "endChar": 22
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "331ee9de_f21a3a33",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "nix",
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb1876d5_1cf651b3",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Outdated.",
      "parentUuid": "331ee9de_f21a3a33",
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e454fc70_8c7407f6",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "is this a typo for _toCamelCase?",
      "range": {
        "startLine": 42,
        "startChar": 54,
        "endLine": 42,
        "endChar": 65
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e20fdfb5_ceead888",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e454fc70_8c7407f6",
      "range": {
        "startLine": 42,
        "startChar": 54,
        "endLine": 42,
        "endChar": 65
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90efcdc2_b73dafe5",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "typo: _toCamelCase",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 72,
        "endChar": 13
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0b0dd12_21d45aee",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90efcdc2_b73dafe5",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 72,
        "endChar": 13
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e82dc32_9b7b9fd7",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "Since this is only used for HTTP headers (right?), we can be more specific than `.` and use `\\p{ASCII}`, `[a-zA-Z]` (only ASCII letters), or \\p{Lowercase_Letter} (only lowercase letters, but this matches some non-ASCII ones). What do you think?",
      "range": {
        "startLine": 73,
        "startChar": 34,
        "endLine": 73,
        "endChar": 39
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "373cc1a6_52003588",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "We can avoid the need to do match.substr(1) by using a lookbehind assertion for `-`.",
      "range": {
        "startLine": 73,
        "startChar": 35,
        "endLine": 73,
        "endChar": 36
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "484e4550_fbfd243c",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "Then the - would not be replaced.",
      "parentUuid": "373cc1a6_52003588",
      "range": {
        "startLine": 73,
        "startChar": 35,
        "endLine": 73,
        "endChar": 36
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11b73ca8_77c60ad4",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "It is used for enum values of the CDP protocol, which may be assumed to be ASCII, adopted the \\p{ASCII} and the /u.",
      "parentUuid": "6e82dc32_9b7b9fd7",
      "range": {
        "startLine": 73,
        "startChar": 34,
        "endLine": 73,
        "endChar": 39
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caba5855_4b024a7e",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T14:01:52Z",
      "side": 1,
      "message": "I see, duh! My bad.",
      "parentUuid": "484e4550_fbfd243c",
      "range": {
        "startLine": 73,
        "startChar": 35,
        "endLine": 73,
        "endChar": 36
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c68fe617_b747e459",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T14:01:52Z",
      "side": 1,
      "message": "In that case we could even go with just `[a-z]`. (We don\u0027t need [A-Z] since it\u0027s already uppercased, and we don\u0027t need any non-letter ASCII symbols, and we don\u0027t need any ASCII symbols.)",
      "parentUuid": "11b73ca8_77c60ad4",
      "range": {
        "startLine": 73,
        "startChar": 34,
        "endLine": 73,
        "endChar": 39
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30de054c_b16070df",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T14:03:56Z",
      "side": 1,
      "message": "(The main thing I wanted to show is that you don\u0027t need two regular expressions, which still applies.)",
      "parentUuid": "c68fe617_b747e459",
      "range": {
        "startLine": 73,
        "startChar": 34,
        "endLine": 73,
        "endChar": 39
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "324e93ff_9d664dbb",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T14:10:04Z",
      "side": 1,
      "message": "Let\u0027s better be safe and also translate abc-Abc to abcAbc (i.e. matching upper case here). Thanks for your input!",
      "parentUuid": "c68fe617_b747e459",
      "range": {
        "startLine": 73,
        "startChar": 34,
        "endLine": 73,
        "endChar": 39
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f9246a9_674258c7",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T14:14:35Z",
      "side": 1,
      "message": "I see what you mean about removing the hyphens even in such a case. I was thinking of something else though: \n\n    toCamelCase(\u0027abc--def\u0027);\n    // -\u003e \u0027Abc-def\u0027\n\n...because `-` is itself ASCII. Not sure what output you\u0027d want in this case. This is definitely an edge case and it might not even really matter.",
      "parentUuid": "324e93ff_9d664dbb",
      "range": {
        "startLine": 73,
        "startChar": 34,
        "endLine": 73,
        "endChar": 39
      },
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03029e31_491dd888",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T12:37:28Z",
      "side": 1,
      "message": "How about this?\n\n    const first \u003d string.charAt(0).toUpperCase();\n    const rest \u003d string.slice(1)\n        .replace(/(?\u003c\u003d-)\\p{ASCII}/gu, symbol \u003d\u003e symbol.toUpperCase());\n    return `${first}${rest}`;",
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd5fe5e2_6952a6f6",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-03-25T13:57:39Z",
      "side": 1,
      "message": "This has two problems: it assumes the string is non-empty, and it leaves the dashes - in the string.",
      "parentUuid": "03029e31_491dd888",
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2d82aad_eae9d38a",
        "filename": "front_end/sdk/IssuesModel.js",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-25T14:01:52Z",
      "side": 1,
      "message": "Ah, of course, you want to remove the dashes; my bad! I don\u0027t see how it fails for empty strings though.",
      "parentUuid": "bd5fe5e2_6952a6f6",
      "revId": "360445875c2077ebb68d83430f1a949dac8bf9c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
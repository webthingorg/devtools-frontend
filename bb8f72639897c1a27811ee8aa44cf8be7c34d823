{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9c3c989d_113671b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2023-08-29T09:31:42Z",
      "side": 1,
      "message": "Thanks a lot for adding another useful change!\nWith the unit tests I added after your previous changes, this should be easy to test as well. Could you please look into adding a test (or updating an existing one to cover the new functionality)?",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3618cf53_432d6bc0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1387248
      },
      "writtenOn": "2023-08-29T16:04:42Z",
      "side": 1,
      "message": "I\u0027ll try. ;)",
      "parentUuid": "9c3c989d_113671b1",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "baee20c0_98011d6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1387248
      },
      "writtenOn": "2023-08-29T20:26:13Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "3618cf53_432d6bc0",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed9306f6_04071331",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2023-08-30T10:31:34Z",
      "side": 1,
      "message": "Nice, thanks!",
      "parentUuid": "baee20c0_98011d6b",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdf43fee_97dee8fb",
        "filename": "front_end/panels/application/AppManifestView.ts",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2023-08-29T09:31:42Z",
      "side": 1,
      "message": "We tend to not use objects as maps, but JS Map data structures instead:\nconst screenshotAspectRation \u003d new Map\u003cstring, number\u003e();",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49e7da1d_a10b5688",
        "filename": "front_end/panels/application/AppManifestView.ts",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 1387248
      },
      "writtenOn": "2023-08-29T16:04:42Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "fdf43fee_97dee8fb",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3ca08b4_296ec1c4",
        "filename": "front_end/panels/application/AppManifestView.ts",
        "patchSetId": 1
      },
      "lineNbr": 1221,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2023-08-29T09:31:42Z",
      "side": 1,
      "message": "When comparing these numbers, could we run into cases where ratios which should be equal, are considered unequal due to numerical imprecision?",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ce89dfe_32dc3caa",
        "filename": "front_end/panels/application/AppManifestView.ts",
        "patchSetId": 1
      },
      "lineNbr": 1221,
      "author": {
        "id": 1387248
      },
      "writtenOn": "2023-08-29T16:04:42Z",
      "side": 1,
      "message": "That\u0027s the first thing I thought of, by the way. :) But I was thinking more about the opposite case. Could two unequal fractions turn out to be equal due to loss of precision when converting to numbers? I checked a few examples and they all works.\n\n```js\nconst a \u003d 1000/1001 // returns 0.999000999000999\nconst b \u003d 3000/3003 // returns 0.999000999000999\na \u003d\u003d\u003d b // returns 3\n```\n\nMy assumption is that actually equal fractions will lose accuracy when converted to numbers equally.\n\nDo you have an example where this doesn\u0027t work?\n\nIt looks like the problem you\u0027re talking about is different:\n\n```js\n1 / 98 * 98 // returns 0.9999999999999999\n```\n\nAlso please keep in mind that there are other constraints on the dimensions:\n\n* Width and height are integers in pixels.\n* Width and height must be at least 320px and at most 3840px.\n* The maximum dimension can\u0027t be more than 2.3 times as long as the minimum dimension.\n\nDo you have any ideas how to solve this problem in a different way without importing third-party libraries like `math.js` or `fraction.js` to the DevTools codebase?",
      "parentUuid": "c3ca08b4_296ec1c4",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc5d638e_c52addd9",
        "filename": "front_end/panels/application/AppManifestView.ts",
        "patchSetId": 1
      },
      "lineNbr": 1221,
      "author": {
        "id": 1387248
      },
      "writtenOn": "2023-08-29T16:09:14Z",
      "side": 1,
      "message": "Typo:\n\n```js\na \u003d\u003d\u003d b // returns true\n```",
      "parentUuid": "8ce89dfe_32dc3caa",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a3fe0a6_4f9ed89f",
        "filename": "front_end/panels/application/AppManifestView.ts",
        "patchSetId": 1
      },
      "lineNbr": 1221,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2023-08-30T10:31:34Z",
      "side": 1,
      "message": "Adding a library seems overkill, since this is just an edge case we\u0027re not even sure whether we\u0027d actually encounter.\n\nI think this could be handled in the following way: instead of exact comparison `const isEqual \u003d a \u003d\u003d\u003d b`, you could do something like `const isAtLeastAlmostEqual \u003d Math.abs(a - b) \u003c 0.000000000001`. This would still be true in cases of numerical imprecision.\n\nBut it would not turn unequal fractions into equal ones: say a/b and c/d differ only very slightly. a/b\u003dad/bd and c/d\u003dcb/bd. b and d are \u003c\u003d 3840, therefore bd \u003c\u003d 3840^2\u003d14,745,600. So the difference between a/b and c/d must be at least 1/14,745,600 which is a lot bigger than the 0.000000000001.\n\nWDYT?",
      "parentUuid": "bc5d638e_c52addd9",
      "revId": "bb8f72639897c1a27811ee8aa44cf8be7c34d823",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
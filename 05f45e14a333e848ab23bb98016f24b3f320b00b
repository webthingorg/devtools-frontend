{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0a9f2132_4860ef52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-06-02T11:51:26Z",
      "side": 1,
      "message": "Could you PTAL, Erg√ºn? Thanks!",
      "revId": "05f45e14a333e848ab23bb98016f24b3f320b00b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "911ff3d8_7612429c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-06-05T08:33:01Z",
      "side": 1,
      "message": "Can you elaborate on:\n* Why is the issue happening in the first place?\n* How does this change fix it?\n\nI\u0027m a bit lost trying to understand the fix. I\u0027ve tried it and it fixes in my local machine but I\u0027m not sure if we can make sure that if it doesn\u0027t break any other behavior. WDYT?",
      "revId": "05f45e14a333e848ab23bb98016f24b3f320b00b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41ea3971_44601a1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1554938
      },
      "writtenOn": "2023-06-05T18:17:14Z",
      "side": 1,
      "message": "- Why is the issue happening in the first place?\n\nEach time a websocket message comes in, we update the network viewport to re-render with a new timestamp inside the update call. The default is to focus on the selected cell regardless of whether the user is actively somewhere else like in the console.\n\n- How does this change fix it?\n\nWe only limit focus to when the user is actively scrolling the network log view.",
      "parentUuid": "911ff3d8_7612429c",
      "revId": "05f45e14a333e848ab23bb98016f24b3f320b00b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6ec77c6_a632fd20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-06-06T09:25:37Z",
      "side": 1,
      "message": "Understood, thanks for the explanation! It seems like this approach still might cause distracting focus jumps:\n* Make sure that there are enough requests in the requests list that makes the list scrollable.\n* Focus on one of the requests, then focus on the console\n* Scroll the request list\n\nObserve that the console loses the focus and the previously focused element in the list receives focus.\n\nThis is also a regression and this behavior doesn\u0027t happen in stable (which I think is a better experience).\n\nI have a hunch that managing the focus on the re-renders manually might cause some unintended behavior as well.\n\nWhy was the reason we\u0027ve added the manual focus managing([1]) in the first place?\n\nSee the regression videos here: https://crbug.com/1393596#c13 and https://crbug.com/1393596#c14\n\n[1]: https://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/front_end/ui/legacy/components/data_grid/ViewportDataGrid.ts;l\u003d217?q\u003dviewportdatagrid.ts",
      "parentUuid": "41ea3971_44601a1d",
      "revId": "05f45e14a333e848ab23bb98016f24b3f320b00b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63f0add2_ffb68e68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-06-06T11:23:20Z",
      "side": 1,
      "message": "It seems like the initial change might have caused a bug cascade that we\u0027re trying to patch in different ways. I wonder if it makes sense to revert it back and try to find a solution that addresses all the issues from the start.\n\nHere is the cascade, as far as I see:\n* Initial bug: crbug.com/1394518\n* fix: crrev.com/c/4064235\n* causing another bug: crbug.com/1405151\n* fix: crrev.com/c/4178572\n* causing another bug: crbug.com/1418274\n* fix: crrev.com/c/4497069\n* causing another bug: crbug.com/1449881\n* (wip) fix: crrev.com/c/4581815\n* (will) cause another bug: crrev.com/c/4581815/comments/911ff3d8_7612429c\n\nWDYT?",
      "parentUuid": "d6ec77c6_a632fd20",
      "revId": "05f45e14a333e848ab23bb98016f24b3f320b00b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbe224a4_666e652c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1554938
      },
      "writtenOn": "2023-06-07T18:34:57Z",
      "side": 1,
      "message": "Thanks for the catch! I\u0027m fine with reverting it all back and finding a solution that addresses all the issues from the start. However, I do think something would eventually give because the network log grid wasn\u0027t initially written to handle focusing on descendent cells \u0026 rows in the grid. Before the initial bug fix (which sets the tabIndex attribute) to allow the cells be picked up via the voice access tool), no descendent of the dataGrid was intended to be focusable. The platform assumed that the focused element was always the focusable ancestor of the clicked row/cell item which was the datagrid element. \n\nWith this, the entire original architecture was based on the premise that the DataGrid element was what should be focused and that none of its descendants can be focused. I think this premise is now false with the tabindex set on the grid cell.",
      "parentUuid": "63f0add2_ffb68e68",
      "revId": "05f45e14a333e848ab23bb98016f24b3f320b00b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "16e52b48_62c369f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2022-01-06T07:58:07Z",
      "side": 1,
      "message": "Do you allow me to introduce this kind of change to have smaller diff between local and HEAD before getting formal approval to support esbuild?",
      "revId": "d96a1141da6dfe2e83bb826a6ff356dc944efa40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b13a286_9186a1d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2022-01-06T11:27:25Z",
      "side": 1,
      "message": "Thanks for the CL! A couple of thoughts:\n\n1. The protocol definitions are generated with `scripts/protocol_typescript/protocol_dts_generator.ts` based on the CDP definition. Therefore, we would have to update the script if we want to make changes to this file\n2. The file is not supposed to be shipping in DevTools. Since it contains types only, we want to make sure it is opaque in the build system and removed during TypeScript compilation. This is also the reason we need to use `const enum`s, as they are removed during compilation. We historically had runtime enums, which was brittle and we ran into numerous problems there.\n3. The ESLint import rule ensures consistent bundling with Rollup. Therefore, if the rule flags an import (which it would now), it most likely is an actual problem that requires resolving (rather than disabling). In this case, I think that\u0027s mostly due to the way the `protocol.ts` file is written. Afaik, if you remove the `export namespace Protocol` altogether (such that all `export` statements become toplevel), it should work as expected with the current imports.\n\nOverall, I am not thrilled to change this file to a `.ts` file, given that it should be opaque and is intended to be only relevant for compilation. That\u0027s typically what `.d.ts` files are for, to denote and ensure they remain opaque. That said, if this ultimately unblocks ESBuild, I suppose we could make an exemption for this particular file.",
      "revId": "d96a1141da6dfe2e83bb826a6ff356dc944efa40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6006bbed_6296a283",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2022-01-06T11:29:17Z",
      "side": 1,
      "message": "If you are okay with keeping this change in a separate CL (for easier reviewing), then let\u0027s go for that. I am less keen on landing this if we don\u0027t yet know if ESBuild will work for us, but I also want to keep things easy while we try to figure that out. Hopefully, with the pointers in the previous comment, we can reduce this CL size by avoiding having to change all imports and only change `protocol.ts`.",
      "parentUuid": "16e52b48_62c369f9",
      "revId": "d96a1141da6dfe2e83bb826a6ff356dc944efa40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5dd0299_ef7e557c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2022-01-07T04:33:35Z",
      "side": 1,
      "message": "Thank you for the comments.\n\n\n\u003e 2. The file is not supposed to be shipping in DevTools. Since it contains types only, we want to make sure it is opaque in the build system and removed during TypeScript compilation. This is also the reason we need to use `const enum`s, as they are removed during compilation. We historically had runtime enums, which was brittle and we ran into numerous problems there.\n\nEven if we changed to use protocol.ts, imports for protocol.js are removed in typescript build. And you don\u0027t need to ship protocol.js assuming that esbuild won\u0027t be used for official build.\n\n\n\u003e 3. The ESLint import rule ensures consistent bundling with Rollup. Therefore, if the rule flags an import (which it would now), it most likely is an actual problem that requires resolving (rather than disabling). In this case, I think that\u0027s mostly due to the way the `protocol.ts` file is written. Afaik, if you remove the `export namespace Protocol` altogether (such that all `export` statements become toplevel), it should work as expected with the current imports.\n\nWhen I trid that, I got error like\n```\n  Uncaught TypeError: Cannot add property Accessibility, object is not extensible\n  at front_end/core/protocol_client/InspectorBackend.ts:153:23 \u003c- out/Default/gen/front_end/core/protocol_client/InspectorBackend.js:89:30\n```\nin unittest.\n\nBut I found it can be fixed by changing alias in InspectorBackend.ts. Thanks.\n\n\n\u003e \n\u003e Overall, I am not thrilled to change this file to a `.ts` file, given that it should be opaque and is intended to be only relevant for compilation. That\u0027s typically what `.d.ts` files are for, to denote and ensure they remain opaque. That said, if this ultimately unblocks ESBuild, I suppose we could make an exemption for this particular file.\n\nCurrently, ESBuild doesn\u0027t replace const enum, so I think changing protocol.d.ts is inevitable. If we want to keep current protocol.d.ts, another idea is to extract const enums to separate ts file like protocolEnums.ts and replace current enum usage with that.",
      "parentUuid": "0b13a286_9186a1d2",
      "revId": "d96a1141da6dfe2e83bb826a6ff356dc944efa40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83721fb7_af4efe88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2022-01-07T12:46:55Z",
      "side": 1,
      "message": "\u003e Even if we changed to use protocol.ts, imports for protocol.js are removed in typescript build. And you don\u0027t need to ship protocol.js assuming that esbuild won\u0027t be used for official build.\n\nIf I understand correctly, this means that in the ESBuild version of our build matrix, the file will remain and it will contain all enums, yet they are made non-const? Or said differently: how is ESBuild using the enums, given that they are not available on runtime? As far as I know, any reference such as `Protocol.Accessibility.AXValueType.Boolean` will throw as the object doesn\u0027t exist in the global scope. But if ESBuild leaves behind the `protocol.js` with enum definitions, then that might work.\n\nSo with the introduction of ESBuild, our build matrix would look as follows:\n1. DevTools standalone debug build\n2. DevTools standalone release build\n3. Chromium release build\n4. Chromium release build + ESBuild\n\nIn this case, `is_official_build` bots should use 3 and devs should use 4, right? Given that there is a runtime difference between 3 and 4 (with the way we handle const enums), we probably want a new CQ bot to cover 4 as well.\n\nI don\u0027t think we want to support ESBuild + `is_debug`, as that will break bundling with these enums, so maybe we should make these mutually exclusive, WDYT?",
      "parentUuid": "a5dd0299_ef7e557c",
      "revId": "d96a1141da6dfe2e83bb826a6ff356dc944efa40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
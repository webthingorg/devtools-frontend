{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a9f5d5e6_33c4b281",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-01-16T10:18:27Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cbff0f0_7235abbb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-16T15:13:57Z",
      "side": 1,
      "message": "I\u0027ve found a case and wanted to ask if we can do something about it :)",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9478b7ec_e06105d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-01-16T22:03:01Z",
      "side": 1,
      "message": "I\u0027m now having second thoughts about doing things this way. I feel like there would still be some corner cases that we haven\u0027t thought of, and generaly I\u0027m not quite aligned with this feature anyways. Trying to scoop out parser-rejected invalid properties sounds hacky to me. Even without the nesting support, there\u0027re ways to break it, e.g.\n```\n  .content-box {\n    box-sizing: content-box;\n    background-color: red;\n    wrong property: value; /* some comment */ another property: value;\n  }\n```\nbecause our range calculation is also not robust.\n\nI am now thinking about disallowing invalid characters from being entered in property name and values, and NOT parsing unused texts. The reason we parse unused texts is mainly because of this issue: https://bugs.chromium.org/p/chromium/issues/detail?id\u003d813435, and this issue can be fixed by disallowing invalid characters (actually entering space will automatically bring you from property name to property value input).\n\nLet\u0027s discuss this more tomorrow. Nevertheless I\u0027ve uploaded another patch to fix the case you found.",
      "parentUuid": "1cbff0f0_7235abbb",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "187fde82_38853aa7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-17T19:58:42Z",
      "side": 1,
      "message": "It seems like range calculation is indeed not correct, i.e. I\u0027m adding below as an inline stylesheet in an HTML:\n```\n  body {\n    color: red;\n    \u0026 p { color: blue; }\n    backgr.ound-color: blue;\n  }\n```\nand correctly seeing `color: red;` and `backgr.ound-color: blue` in the Styles pane for `body` element. However, when I edit the `backgr.ound-color` to be `background-color` the style text becomes:\n```\n  body {\n    color: red;\n    \u0026\n    p { color: blue; }\n;\n    background-color: blue;\n  }\n```\n\nThough this is higly likely that it is not related to this CL so the improved version for nesting LGTM and we can think what to do here in the future :)",
      "parentUuid": "9478b7ec_e06105d4",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b4df2c4_32e71049",
        "filename": "front_end/core/sdk/CSSStyleDeclaration.ts",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-16T15:13:57Z",
      "side": 1,
      "message": "I guess the case for `\u0026 p { color: red; }` fails because we\u0027re going line by line and after skipping blocks for this line we have `context.nestedBlocks \u003d 0` since we first see it start and finish.\n\nIt only shows as `\u0026 p` AFAIU because `validContent `only contains the first part since that is the only part that has nestedBlocks \u003d\u003d\u003d 0.\n\nSince we\u0027re going line by line and parse a line if all of its contents are valid (citation needed :grimacing:), maybe we can add a check on the `validContent` length to be the same as the line length for that case. (Though I\u0027m not sure)",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "949fe45b_ceced40b",
        "filename": "front_end/core/sdk/CSSStyleDeclaration.ts",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-01-16T17:32:49Z",
      "side": 1,
      "message": "Good catch! The general logic here is that we skip the whole line whenever we encounter the starting of a nested block. However the current code doesn\u0027t take into account whether the nested block is closed or not. I think there are more than this case that needs to be covered:\n\n1. `\u0026 p { color: red; }\\n`: we need to skip this whole line;\n2. `\u0026 p { color: red; } something-wrong: red; ...` we need to skip the block but *maybe* we continue parsing the rest.\n\nI think a solution that works for both cases is to invalidate what\u0027s currently pushed onto the `validContent` when we encounter a starting `{`. This would ensure that we:\n1. invalidate `\u0026 p ` when we see the first `{`;\n2. still keep `something-wrong; red` after the block is closed.\n\nHowever, this won\u0027t work for the case where we have another block after `something-wrong: red`, but I\u0027d rather over-kill at this point because we don\u0027t want to get into this parsing game too deeply. After all this is just a best-effort.\n\nAnother option, which I\u0027d like to explore later, is to use CodeMirror\u0027s parser to parse this. I\u0027ve not used CodeMirror before, so I don\u0027t want to invest too much into that direction right now.",
      "parentUuid": "7b4df2c4_32e71049",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c9ca538_95b0f7df",
        "filename": "front_end/core/sdk/CSSStyleDeclaration.ts",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-17T19:58:42Z",
      "side": 1,
      "message": "Sounds and looks good to me! :)",
      "parentUuid": "949fe45b_ceced40b",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78ed38ff_97f0e810",
        "filename": "front_end/core/sdk/CSSStyleDeclaration.ts",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-16T15:13:57Z",
      "side": 1,
      "message": "Don\u0027t know if it is important or if it can change behavior but wanted to ask, why did we remove `!context.inComment` check here?",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6faedb2e_c05fed80",
        "filename": "front_end/core/sdk/CSSStyleDeclaration.ts",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-01-16T17:32:49Z",
      "side": 1,
      "message": "I think it doesn\u0027t matter. The original code only goes into that conditional branch when it\u0027s NOT already in a comment block AND next token is `/*`. Removing the first condition would in theory relax the condition, which has two consequences:\n1. now regardless of if we\u0027re in a comment block or not, when we see `/*`, we turn the comment flag to true. I think this is still correct, since comment blocks cannot nest.\n2. we now skip other/later conditional branches that would have been checked previously when we are already in a comment block. This also doesn\u0027t matter because if we\u0027re already in a comment block, we won\u0027t go into the last branch, and we won\u0027t go into the second branch either because the next token is not `*/`.\n\nOverall I think the new code simplifies the logic a little bit and short-circuits some unnecessary thinking for the later branches, which is why I modified the code.",
      "parentUuid": "78ed38ff_97f0e810",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc022af2_4e504ee4",
        "filename": "front_end/core/sdk/CSSStyleDeclaration.ts",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-17T19:58:42Z",
      "side": 1,
      "message": "Thanks for the explanation! :)",
      "parentUuid": "6faedb2e_c05fed80",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c6f06a7_43c6b98e",
        "filename": "test/unittests/front_end/core/sdk/CSSStyleDeclaration_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 216,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-16T15:13:57Z",
      "side": 1,
      "message": "I have tried with this case and something is shown in the panel:\n```\nbody {\n    \u0026 p { color: red; }\n    background-color: blue;\n}\n```\nis it intended or should we cover this too?",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5945ea1_63dab985",
        "filename": "test/unittests/front_end/core/sdk/CSSStyleDeclaration_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 216,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-01-16T17:32:49Z",
      "side": 1,
      "message": "It\u0027s not intended to show `\u0026 p`. I explained what I\u0027ll do in the first comment, and I\u0027ll also update the test case here to cover this.",
      "parentUuid": "2c6f06a7_43c6b98e",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "148c2374_0bacf4f5",
        "filename": "test/unittests/front_end/core/sdk/CSSStyleDeclaration_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 216,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-01-17T19:58:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f5945ea1_63dab985",
      "revId": "120baa08ea0f53320126d0177a0485f669aaa63f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
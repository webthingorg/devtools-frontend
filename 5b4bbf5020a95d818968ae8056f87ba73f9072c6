{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1562f2e0_48da17b3",
        "filename": "front_end/models/persistence/NetworkPersistenceManager.ts",
        "patchSetId": 12
      },
      "lineNbr": 413,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-02-10T09:45:40Z",
      "side": 1,
      "message": "Having function returning something it computes, but also changing members a side-effects makes it hard to reason about its behavior. \n\nHow about returning both here and then having something like\n\n  const {headerPatterns, headerOverridesMap} \u003d await \n      this.generateHeaderPatterns(uiSourceCode);\n  this.#headerOverridesMap \u003d headerOverridesMap;\n  patterns \u003d new Set([...patterns, ...headerPatterns]);\n\nin #innerUpdateInterceptionPatterns?",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 413,
        "endChar": 66
      },
      "revId": "5b4bbf5020a95d818968ae8056f87ba73f9072c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebc3048b_cd795f0b",
        "filename": "front_end/models/persistence/NetworkPersistenceManager.ts",
        "patchSetId": 12
      },
      "lineNbr": 542,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-02-10T09:45:40Z",
      "side": 1,
      "message": "I think Helper is a very unhelpful name. What does this function do? What belongs to it vs belongs elsewhere?\n\nHow about something like maybeMergeHeadersForPathSegment?",
      "range": {
        "startLine": 542,
        "startChar": 0,
        "endLine": 542,
        "endChar": 107
      },
      "revId": "5b4bbf5020a95d818968ae8056f87ba73f9072c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94183de5_3a21fd15",
        "filename": "front_end/models/persistence/NetworkPersistenceManager.ts",
        "patchSetId": 12
      },
      "lineNbr": 544,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-02-10T09:45:40Z",
      "side": 1,
      "message": "How about\n\n  const headerOverrides \u003d this.#headerOverridesMap.get(path) || []; \n\nto reduce nesting?",
      "range": {
        "startLine": 544,
        "startChar": 0,
        "endLine": 544,
        "endChar": 63
      },
      "revId": "5b4bbf5020a95d818968ae8056f87ba73f9072c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae9f69b9_5c3b64cd",
        "filename": "front_end/models/persistence/NetworkPersistenceManager.ts",
        "patchSetId": 12
      },
      "lineNbr": 689,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-02-10T09:45:40Z",
      "side": 1,
      "message": "You could save some repetition by returning header and tail here, i.e.:\nAt both call sites you first check for a match and then remove the index. \nHow about having a function like\n\nextractDirectoryIndex(pattern) {\n  const lastSlash \u003d pattern.lastIndexOf(\u0027/\u0027);\n  const tail \u003d pattern.slice(lastSlash);\n  const regex \u003d new RegExp(\u0027^\u0027 + escapeRegex(tail) + \u0027$\u0027);\n  if (regex.test(\u0027index.html\u0027) || ...) {\n    return {head: pattern.substring(0, lastSlash), tail};\n  }\n  return {head: pattern};\n}",
      "range": {
        "startLine": 689,
        "startChar": 0,
        "endLine": 689,
        "endChar": 60
      },
      "revId": "5b4bbf5020a95d818968ae8056f87ba73f9072c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "6e94282f_1e614ba4",
        "filename": "test/e2e/sources/wasm-dwarf-plugin.ts",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-03-09T16:55:52Z",
      "side": 1,
      "message": "This e2etest is piercing into DevTools internals, which makes it brittle and prone to subsequent refactorings. Could you explain to me why the mock plugin is required?\n\nFrom a user perspective, in which scenario would they use the mockplugin (or the behavior that is being mocked)? I am wondering if we can have a user workflow here that would allow us to test this behavior, while not relying on DevTools internal implementation details.",
      "range": {
        "startLine": 51,
        "startChar": 25,
        "endLine": 51,
        "endChar": 69
      },
      "revId": "4c58b68662b8137debbc83e90b011eca5b3f5f19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be926dd7_4b892eb0",
        "filename": "test/e2e/sources/wasm-dwarf-plugin.ts",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-03-10T11:18:34Z",
      "side": 1,
      "message": "The behavior being mocked is used under the hood by the debugger. Without a mock plugin we\u0027d have to use a real one, which requires spinning up the out-of-process C++/DWARF symbol server.",
      "parentUuid": "6e94282f_1e614ba4",
      "range": {
        "startLine": 51,
        "startChar": 25,
        "endLine": 51,
        "endChar": 69
      },
      "revId": "4c58b68662b8137debbc83e90b011eca5b3f5f19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6987f959_804b42ea",
        "filename": "test/e2e/sources/wasm-dwarf-plugin.ts",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-03-10T11:39:49Z",
      "side": 1,
      "message": "Can we spin up a service that would return only the information listed here? Since we already have the hosted_mode server and the `e2e/resources`, can we return data there? The `.rawresponse` pattern might be appropriate here.\n\nLet me know if that is possible ðŸ˜Š",
      "parentUuid": "be926dd7_4b892eb0",
      "range": {
        "startLine": 51,
        "startChar": 25,
        "endLine": 51,
        "endChar": 69
      },
      "revId": "4c58b68662b8137debbc83e90b011eca5b3f5f19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff5933d8_222390c8",
        "filename": "test/e2e/sources/wasm-dwarf-plugin.ts",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-03-10T12:03:33Z",
      "side": 1,
      "message": "Technically speaking: Sure. The service implements a small JSON RPC protocol.\n\nThat being said, I prefer the mock solution. The two caveats of mocking are a) that I need to depend on DevTools internals a little bit, and b) it\u0027s not really end-to-end.\n\nI\u0027m fine with b). We don\u0027t have an integration testing framework, and until we do abusing e2e is the best I can do. Once we do, we definitely should move this test over! Potentially, while writing new tests, we should keep track of tests that _should_ be integration tests!\n\na) is a bit ugly, granted. I have to resort to that because there\u0027s no way to control the plugins through the UI (but maybe there should?). Nevertheless the locality of the test implementation is way more important than depending a little bit on DevTools internals. Particularly, since we\u0027ve already started to blur the lines again, with e.g. the \u0027source-tree-file-added\u0027 event, I think that\u0027s fine.",
      "parentUuid": "6987f959_804b42ea",
      "range": {
        "startLine": 51,
        "startChar": 25,
        "endLine": 51,
        "endChar": 69
      },
      "revId": "4c58b68662b8137debbc83e90b011eca5b3f5f19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24acda23_3b5d5c8c",
        "filename": "test/e2e/sources/wasm-dwarf-plugin.ts",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-03-10T17:22:56Z",
      "side": 1,
      "message": "I am mostly worried that any kind of refactoring or architectural change is going to cause this e2e-test to fail, without a really good reason.\n\nI suppose we can wave this through, but please document this test appropriately that this is not the correct level to test it, but we are doing it as there is not alternative. Can you file a tracking bug for that?\n\nP.S. Letting the user add plugins seems like a worthwhile idea.",
      "parentUuid": "ff5933d8_222390c8",
      "range": {
        "startLine": 51,
        "startChar": 25,
        "endLine": 51,
        "endChar": 69
      },
      "revId": "4c58b68662b8137debbc83e90b011eca5b3f5f19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c642da7f_d07b0341",
        "filename": "test/e2e/sources/wasm-dwarf-plugin.ts",
        "patchSetId": 9
      },
      "lineNbr": 91,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-03-09T16:55:52Z",
      "side": 1,
      "message": "Rather than obtaining the files by DOM structure, I think the pattern used in `e2e/sources/can-show-files-after-loading.ts` is more robust to future refactorings. E.g. attach an event listener to window and listen for the `source-tree-file-added` event.\n\nThe relevant helpers are in `e2e/helpers/sources-helpers.ts`. Could you try these out?",
      "range": {
        "startLine": 91,
        "startChar": 10,
        "endLine": 91,
        "endChar": 27
      },
      "revId": "4c58b68662b8137debbc83e90b011eca5b3f5f19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
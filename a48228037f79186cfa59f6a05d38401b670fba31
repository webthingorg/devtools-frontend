{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "828055dc_4bb7794c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-06-09T10:48:05Z",
      "side": 1,
      "message": "I am excited for this, nice! ðŸŽ‰\n\nTo unblock this CL, we need to keep the following in mind:\n\n1. To make it all compile with DevTools, the following invariants apply:\n  a. Every file that is import *by* DevTools code requires `.d.ts` files. With third_party code, we either write that ourselves or use the already provided declarations. For example, `third_party/acorn` ships its own, but `third_party/acorn-loose` does not.\n  b. If the sources are pre-built (e.g. not build as part of DevTools), then we require the `-tsconfig.json` files. Otherwise, TypeScript doesn\u0027t know where to look up files and starts to show the errors that you are encountering. As an example, see the `third_party/codemirror/codemirror-tsconfig.json` file\n  c. If you do want to bundle on the DevTools side (that should \"just\" work), we typically define a separate entrypoint for that. For example, you can see that `third_party/codemirror/codemirror.ts` is written by us, but the files in `package/` are supplied by NPM. We do the same for Acorn. In other words, you create an entrypoint (which has the same name as the folder it is in) and we bundle all source code in there.\n2. Additionally (as you already found out), we handle imports in a specific way. Any file that has the same name as its folder is presumed external for bundling. Therefore, if `panels/lighthouse` imports `third_party/lighthouse/report/dom/dom.js`, it assumes it is external, whereas `third_party/lighthouse/report/dom.js` is not.\n\nAll in all, I would recommend doing the following:\n1. Bundle on the DevTools side similar to what we do with CodeMirror and Acorn. E.g. we `devtools_pre_built` the files in `package/`, but we run our own bundler on the `.ts` entrypoint.\n2. All relevant entrypoints are placed in distinct folders. E.g. `dom.js` in `dom/`, `report-renderer` into `report/renderer/renderer.js`\n3. Note that we also have to do the same for the LightHouse worker. We are still importing the `lighthouse-dt-bundle.js` there: https://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/front_end/entrypoints/lighthouse_worker/lighthouse_worker.js;l\u003d6;drc\u003d1051671d8998111d1b3624eaeef5511f071262b6 We will need a separate entrypoint target for that as well.\n4. For any file that is consumed by DevTools, have the following in place:\n  a. A \".d.ts` file containing its type declarations. FYI you should be able to turn on `declaration: true` in a TSC project for `.js` files and `tsc` will generate the relevant `.d.ts` files\n  b. The file must be listed in a `-tsconfig.json`\n  c. The file must be copied with `devtools_pre_built`\n\nFor point 4, if that turns out to be cumbersome, you could bundle on the LightHouse side. Then you only need to write a `.d.ts` for each individual file that is imported by DevTools.\n\nUp to this point, we have not really had a consistent story with regards to importing third_party code, as each package was different. That\u0027s why we also don\u0027t have any real documentation on that (sorry!). Now that we are slowly settling on the \"write the entrypoint on the DevTools side and keep the rest in `package/`\", I think we should prefer that approach here as well. Then we can slowly standardize on that model.\n\nLet me know if you are running into further issues. If so, if you could supply the relevant `.d.ts` files, I should be able to figure out the building on the DevTools side.\n\nThank you so much for working on this!",
      "revId": "a48228037f79186cfa59f6a05d38401b670fba31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8729fa7a_29d199b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2021-06-22T22:42:03Z",
      "side": 1,
      "message": "Thanks for the pointers! I\u0027ve got it working now.\n\nLast thing, I\u0027m trying to keep the \"Save as HTML\" feature, which relies on a bundled report code to be made available via `EXPORTED_CACHED_RESOURCES_ONLY_FOR_LIGHTHOUSE`. In module.json I tried to reference the generated \"standalone.js\" report entry file, but I only get the source standalone.js. I tried to reference `../../../gen/front_end/third_party/lighthouse/report/standalone.js` but that didn\u0027t work.\n\nIn other words, I want the output of `front_end/third_party/lighthouse/report:bundle` to be added to `front_end/panels/lighthouse/module.json` resources.\n\nAny reasonable way to accomplish this? If not, we\u0027ll just remove this feature.",
      "parentUuid": "828055dc_4bb7794c",
      "revId": "a48228037f79186cfa59f6a05d38401b670fba31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30c1c298_93902046",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-06-23T13:35:34Z",
      "side": 1,
      "message": "Okay, I had to do a couple more rounds of cleanups in the build system, but now it should be working.\n\nThe \"save as HTML\" feature is also working again. To do so, we load the `report-assets/report-generator.js` in the Lighthouse panel, but we don\u0027t load report.js. Then, `report-assets/report.js` is in the `module.json` file so that the generator can fetch it.\n\nAdditionally, in `third_party/lighthouse/report` we now have a `report.js` that is imported by `panels/lighthouse` and used directly. I think that we should only export the code here and we should delete all other code. E.g. the `__initLighthouseReport__` For now, I had to comment this out, as we don\u0027t want this code to run, since we are running it as part of the panel and not in a standalone context.\n\nIdeally we make report-generator also a proper ES module, but we can do that later.\n\nI think everything works now, so we can tidy this up. To make reviewing easier, can we separate the steps into several CLs?\n\n1. A CL that checks in all relevant code for `third_party/lighthouse/report/`. The files are copied using `devtools_pre_built` (as it is now) and we consume these in `panels/lighthouse`\n2. A CL that uses all the new code appropriately.\n\nI don\u0027t think we need to make a lot of changes, so I think we can simply split this CL up into two and get it ready to go.\n\nThanks again for doing this Connor!",
      "parentUuid": "8729fa7a_29d199b7",
      "revId": "a48228037f79186cfa59f6a05d38401b670fba31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54aed14c_c7a9f2d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2021-06-23T19:05:30Z",
      "side": 1,
      "message": "we are getting rid of report.js, which was how we bundled Lighthouse report code previously, and instead we will import esmodules and use those directly. We could continue importing this build artifact (before we were simply concating web-friendly JS, but now we could rollup the esmodule files to a web bundle), but it\u0027d be nice if we didn\u0027t have to do that.\n\nIs there a way to use the _generated result_ of `front_end/third_party/lighthouse/report:bundle` as a runtime asset?\n\n\u003e re: report/report.js, __initLighthouseReport__\n\nThe file (was standlone.js, you renamed report.ts) is meant to be the entry point to the bundled report file and used in report-generator (just for Save as HTML), while the esmodules could be used directly",
      "parentUuid": "30c1c298_93902046",
      "revId": "a48228037f79186cfa59f6a05d38401b670fba31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
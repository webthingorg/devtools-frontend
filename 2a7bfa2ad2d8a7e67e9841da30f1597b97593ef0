{
  "comments": [
    {
      "key": {
        "uuid": "14289080_6b9e3946",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-09-28T08:56:41Z",
      "side": 1,
      "message": "PTAL - there are pros and cons to this solution so let me know if you want to have a chat about it. There may be other solutions I haven\u0027t thought of but this one works quite nicely...",
      "revId": "2a7bfa2ad2d8a7e67e9841da30f1597b97593ef0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40585f19_69f22681",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-09-28T10:33:57Z",
      "side": 1,
      "message": "I am on the fence for this one. While this option makes sense for custom elements, there are plenty of other instances in the codebase where imports are only added for types. Therefore, I am hesitant to preserve all imports, given the effect on the wider codebase.\n\nLooking at the options of this compiler option, would \"error\" be a better value? That would make the behavior explicit and requires the author to make a choice. For most cases, the `import type` would be the appropriate solution. However, for custom elements, a side-effect import would be required. Letting `tsc` explicitly fail should hopefully prevent unintended side-effect imports.\n\nIn general, the pattern with custom elements is to side-effect import: `import \u0027./NodeText.js\u0027`. I am not a fan of this pattern, but it is what we have today. Paul and I originally filed this issue in the HTML repository: https://github.com/whatwg/html/issues/4944\n\nTherefore, I propose to set this compiler option to \"error\" and use side-effect imports. It would be good to voice our feedback once again to the relevant standard groups to ask them to figure out a nicer solution. WDYT?",
      "revId": "2a7bfa2ad2d8a7e67e9841da30f1597b97593ef0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6f95000_45b8292f",
        "filename": "third_party/typescript/ts_library.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-09-28T10:33:57Z",
      "side": 1,
      "message": "Nit: If you set a compiler option in `tsconfig.base.json`, then the `tsconfig` here already uses the value. Therefore, it is not necessary to duplicate. Coincidentally, I was cleaning this up in https://chromium-review.googlesource.com/c/devtools/devtools-frontend/+/2431511",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "2a7bfa2ad2d8a7e67e9841da30f1597b97593ef0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
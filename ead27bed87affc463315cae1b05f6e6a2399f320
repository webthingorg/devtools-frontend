{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a80cdee2_c7b4ac99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-04-23T10:12:54Z",
      "side": 1,
      "message": "ptal",
      "revId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ca1bd36_2cf257f9",
        "filename": "front_end/models/trace/handlers/ImagePaintingHandler.ts",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-04-23T13:57:37Z",
      "side": 1,
      "message": "can we safely assume events will be handled in ts order? I ask because in some places we sort the events between handling and processing",
      "range": {
        "startLine": 78,
        "startChar": 10,
        "endLine": 78,
        "endChar": 24
      },
      "revId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dba4e46_d5ba08b9",
        "filename": "front_end/models/trace/handlers/ImagePaintingHandler.ts",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-04-23T16:08:08Z",
      "side": 1,
      "message": "Hmm good point. In TimelineModel there is no sorting; I think because we rely on the fact that events happened before each other and the relationship between them means that we can safely assume the ordering is correct.\n\nI will keep an eye on this and if this causes any bugs ðŸ˜Š",
      "parentUuid": "5ca1bd36_2cf257f9",
      "range": {
        "startLine": 78,
        "startChar": 10,
        "endLine": 78,
        "endChar": 24
      },
      "revId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea74e26_949b3eec",
        "filename": "front_end/models/trace/handlers/ImagePaintingHandler.ts",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-04-23T13:57:37Z",
      "side": 1,
      "message": "question: can `DrawLazyPixelRef` and `DecodeLazyPixelRef` events with the same key belong to different threads?\n\nIf not and IIUC we could do approach 2 if and only if we could do approach 1 (if a `PaintImage` belongs in the same thread as a `DecodeLazyPixel`, a `DrawLazyPixel` and a `DecodeImage`, then a `PaintImage` belongs in the same thread `DecodeImage` [and we would have taken the first approach]).\n\nif so then it\u0027s all good ðŸ˜Ž",
      "range": {
        "startLine": 94,
        "startChar": 13,
        "endLine": 96,
        "endChar": 22
      },
      "revId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af5b826d_d4715dc2",
        "filename": "front_end/models/trace/handlers/ImagePaintingHandler.ts",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-04-23T16:08:08Z",
      "side": 1,
      "message": "Yes they can - I double checked that against a recent trace and they do appear on different threads.",
      "parentUuid": "dea74e26_949b3eec",
      "range": {
        "startLine": 94,
        "startChar": 13,
        "endLine": 96,
        "endChar": 22
      },
      "revId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ead27bed87affc463315cae1b05f6e6a2399f320",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
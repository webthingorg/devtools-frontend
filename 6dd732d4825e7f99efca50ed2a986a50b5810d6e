{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3e91d5c4_ac66b258",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 4
      },
      "lineNbr": 287,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "Suggest changing this to `nameAsFunction` and an optional property `nameAsObject`.\n\nDocumentation on this is going to specify that transpiled languages should treat this in whatever way makes the most sense for them, but in short: `nameAsFunction` is going to be used in most scenarios that are interesting to DevTools:\n\n - performance timeline unminification\n - call stack in Sources panel\n - call stack in Console panel\n - Coverage tool\n \nThe property `nameAsObject` won\u0027t apply to all functions because the function invocations won\u0027t always just directly produce objects. But, this will generally be used during heap snapshots. So for the following script:\n\n```ts\n// file: foo.ts\n\nclass Foo {  // line 2\n  constructor(x) { this.x \u003d x; }\n  bar() { console.log(\u0027hello world\u0027); }\n}\n// eof @ line 6\n```\n\nI would expect the following set of ranges:\n\n * `\u0027[global code for \"foo.ts\"]\u0027 0:0 - 6:0 (no as-object name)\n * `\u0027class Foo\u0027` 2:0 - 5:1 (this range won\u0027t usually be referenced)\n * `\u0027constructor for class Foo\u0027` / `\u0027class Foo\u0027` 3:17 - 3:32\n * `\u0027Foo.bar\u0027` 4:8 - 4:40\n\nIt\u0027s only particularly relevant for constructor functions, but it\u0027s nice to see `constructor for class Foo` in the timeline vs. `class Foo` in the memory tool.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "706ec044_7e5867eb",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "I know this is how we did it in Edge, but I think instead let\u0027s move this to FunctionDescriptor. More details on the comment about that type.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "986df30e_4440f828",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 4
      },
      "lineNbr": 299,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "I think for now, you should keep it simple and remove the `sourceMap` parameter. I think it would be good for us to be able to leverage the scopes extension generated by pasta-sourcemaps at some point (or can implement SMv4 via an extension), but I think the way that we\u0027ll need to do that will be to pass the full, serialized sourcemap over the boundary. I don\u0027t think that we can do it with this model, because we\u0027re still needing to pass details (`scopes` for example) that are not defined in your interface here.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6ebba64_9fb463d1",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 4
      },
      "lineNbr": 317,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "Nit: I believe other instances do not capitalize \u0027R\u0027 in `unregister`",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f1500ca_06fe41c9",
        "filename": "front_end/models/extensions/ExtensionAPI.ts",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "Simplification from earlier comment: parameters should only include `fileName` and `sourceContent`.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa5b7576_252610c0",
        "filename": "front_end/models/source_map_extensions/ExtensionManager.ts",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "Nit: Since we\u0027re in a class, there\u0027s no need to use arrow syntax to declare these functions. Just use:\n\n```ts\n  findFunctionParserExtensionsForFile(sourceUrl: string): ExtensionPlugin[] {\n```",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "550f5876_5fb10bbc",
        "filename": "front_end/models/source_map_extensions/ExtensionManager.ts",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "This probably doesn\u0027t belong in the ExtensionManager, but rather in the Source Maps Scopes module.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da3ec722_4f30e6ea",
        "filename": "front_end/models/source_map_extensions/ExtensionManager.ts",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "This should be a private function, and probably belongs in the source map scopes module.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0f4a00f_b4c7a6ad",
        "filename": "front_end/models/source_map_scopes/NamesResolver.ts",
        "patchSetId": 4
      },
      "lineNbr": 4,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "If you\u0027re able to import from extension-api here and in BUILD.gn, I don\u0027t quite understand why you need to do the chain-break `await import` below? I wonder if the ExtensionManager you\u0027re introducing can go into one of the other modules.\n\nEdit: Looking at the dependency graph in the various BUILD.gn files, I suspect that this is because models/extensions has a dependency on ui/legacy:bundle. I wonder if it would be possible to factor out dependency on ui/legacy from models/extensions by inverting the order of dependencies. That would be a project for a separate CL, but I think that would be in line with other refactorings that have been going on in this codebase.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "780d05f3_61a9fba5",
        "filename": "front_end/models/source_map_scopes/NamesResolver.ts",
        "patchSetId": 4
      },
      "lineNbr": 768,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "Some thoughts:\n\n1. If the extension-related types NEED to be in the source_map_scopes module, I would move them into a different file\n2. `ExtensionPlugin` doesn\u0027t need to define `getCapabilities()` concurrently with `ExternalExtensionManager` accepting a `findFunctionParserExtensionsForFile(sourceUrl)`. I think the `ExternalExtensionManager` defining the method is the right thing -- it hands back the plugins that can handle that particular file name, and then the plugins can resolve to an empty array or to null.\n3. I\u0027d probably move the function descriptor cache into a separate module as well.",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9aab60b_8380d248",
        "filename": "front_end/models/source_map_scopes/NamesResolver.ts",
        "patchSetId": 4
      },
      "lineNbr": 831,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-09T22:43:31Z",
      "side": 1,
      "message": "You\u0027d be prompted better to do this comment by moving this into another file ;)",
      "revId": "6dd732d4825e7f99efca50ed2a986a50b5810d6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
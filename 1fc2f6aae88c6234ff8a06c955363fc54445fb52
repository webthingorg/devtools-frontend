{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fd231476_20c593e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-27T09:36:29Z",
      "side": 1,
      "message": "Hi Tim!\n\nI\u0027m having difficulties to use the SimpleHistoryManager from the sources bundle.\nI annotated the relevant code below; I don\u0027t really know what\u0027s going wrong here :(.\nAny suggestions would be of great help!",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fee640af_cab74593",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-27T13:24:53Z",
      "side": 1,
      "message": "Hi Jack, hi Alex!\n\nHere\u0027s a CL to allow page navigation and history navigation in the linear\nmemory inspector. As is the CL does not work because of a infrastructure dependency bug that is introduced if the component depends on the sources bundle, which it does because I\u0027m reusing\nthe SimpleHistoryManager for keeping track of the history (which I could reimplement, \nbut I\u0027d rather reuse it if we already have something).\n\nAnyway, the question came up (by Tim who investigated the dependency bug) whether the LinearMemoryInspector should take care of business logic here, i.e. whether\nit should record the history at all. Alex and I had a discussion on the design doc\nabout this:\n\nhttps://docs.google.com/document/u/1/d/1LUOat3Q3pQ08IsnBQLrvL-4zWXSTgIuArb5ig3lEm-Y/edit?usp\u003dsharing\n\nand we agreed that since this component is basically just rendering its subcomponents\nit could contain state. \n\nJack, do you have any opinion on this? ",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d781bfba_50e2d62f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-27T14:27:37Z",
      "side": 1,
      "message": "I think the history could be stored in the LinearMemoryInspector component if the users of the LinearMemoryInspector are not concerned with the history data and there is no need to control it from the outside (it\u0027s always a trade-off, in the extreme case we can store the entire app state in a redux-like store).\n\nI see two alternative ways to implement it:\n- accept an instance of SimpleHistoryManager as a dependency (LinearMemoryInspector can define a history manager interface instead of relying on the specific implementation of the SimpleHistoryManager).\n- send events about history actions to the parent of the LinearMemoryInspector and handle the SimpleHistoryManager at that level (I guess it\u0027s in Sources?).\n\nBtw, I looked into the SimpleHistoryManager implementation and I curious why it needs locking? Can it be simplified? I guess I lack the context about SimpleHistoryManager.",
      "parentUuid": "fee640af_cab74593",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f6b6110_6c02d11c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T07:00:33Z",
      "side": 1,
      "message": "Thanks for outlining the options Alex!\n\nAfter our discussion, I still agree with you that the state can be in the LinearMemoryInspector. Since I implemented a different version before (forwarding the events to the parent, Option 3), it wasn\u0027t very nice imho, since we split up the functionality that is \"kind of\" internal to the linear memory inspector. I guess the user may only be concerned about how many entries it should have, but other than that the user shouldn\u0027t care.\n\nOption 2: accepting an instance sounds also fine to me! (This would however not solve the dependency bug that I ran into if we still use the SimpleHistoryManager as the implementation, since the parent is going to be a LinearMemoryInspectorPane class, which I haven\u0027t pushed yet, and which is also within this directory. The parent will be a drawer that opens at the bottom of DevTools.)\n\nHmm I\u0027m not sure why the SimpleHistoryManager is using locks. For my case conflicting accesses will not happen, but I assume in general you could have async accesses to the history which may mess it up when updating it. We could simplify it, but the lock is actually not a real lock (it doesn\u0027t use any mutexes but only a counter; not sure why), and as is this should not be expensive. But again, we could implement our own history if we want.",
      "parentUuid": "d781bfba_50e2d62f",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "528603ff_aef75212",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-28T07:08:11Z",
      "side": 1,
      "message": "Would it make sense to put LinearMemoryInspectorPane into sources dir?",
      "parentUuid": "2f6b6110_6c02d11c",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1e9e103_ba8a3387",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T07:11:54Z",
      "side": 1,
      "message": "Hmm I\u0027m not entirely sure. In the design doc there were requests to also use it in the network tab for incoming messages, and as such I\u0027d think that it\u0027s better located outside of sources. However, I don\u0027t have a very strong opinion on that. WDYT?",
      "parentUuid": "528603ff_aef75212",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecfeb6fd_bbccb3e7",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-27T09:36:29Z",
      "side": 1,
      "message": "Here\u0027s the import of Sources; as soon as it is used in e.g. line 21 it throws an error:\n\n```\nUncaught Error: Unable to create settings: global and local storage must be provided: Error\n      at Function.instance (front_end/common/Settings.js:76:98 \u003c- out/Default/gen/front_end/common/Settings.js:68:106)\n      at IsolatedFileSystemManager._initExcludePatterSetting (front_end/persistence/IsolatedFileSystemManager.js:305:75 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:270:79)\n      at new IsolatedFileSystemManager (front_end/persistence/IsolatedFileSystemManager.js:79:10 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:63:14)\n      at Function.instance (front_end/persistence/IsolatedFileSystemManager.js:92:43 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:74:49)\n      at front_end/snippets/ScriptSnippetFileSystem.js:259:65 \u003c- out/Default/gen/front_end/snippets/ScriptSnippetFileSystem.js:226:65\n  at front_end/common/Settings.js:76:15 \u003c- out/Default/gen/front_end/common/Settings.js:68:23\n\n  Error: Unable to create settings: global and local storage must be provided: Error\n      at Function.instance (front_end/common/Settings.js:76:98 \u003c- out/Default/gen/front_end/common/Settings.js:68:106)\n      at IsolatedFileSystemManager._initExcludePatterSetting (front_end/persistence/IsolatedFileSystemManager.js:305:75 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:270:79)\n      at new IsolatedFileSystemManager (front_end/persistence/IsolatedFileSystemManager.js:79:10 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:63:14)\n      at Function.instance (front_end/persistence/IsolatedFileSystemManager.js:92:43 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:74:49)\n      at front_end/snippets/ScriptSnippetFileSystem.js:259:65 \u003c- out/Default/gen/front_end/snippets/ScriptSnippetFileSystem.js:226:65\n      at Function.instance (front_end/common/Settings.js:76:15 \u003c- out/Default/gen/front_end/common/Settings.js:68:23)\n      at IsolatedFileSystemManager._initExcludePatterSetting (front_end/persistence/IsolatedFileSystemManager.js:305:75 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:270:79)\n      at new IsolatedFileSystemManager (front_end/persistence/IsolatedFileSystemManager.js:79:10 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:63:14)\n      at Function.instance (front_end/persistence/IsolatedFileSystemManager.js:92:43 \u003c- out/Default/gen/front_end/persistence/IsolatedFileSystemManager.js:74:49)\n      at front_end/snippets/ScriptSnippetFileSystem.js:259:65 \u003c- out/Default/gen/front_end/snippets/ScriptSnippetFileSystem.js:226:65\n```",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07560a4f_ac2ae080",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-10-27T12:22:51Z",
      "side": 1,
      "message": "The problem why this error occurs is that `snippets/` has a side-effect in ScriptSnippetFileSystem.js:259 where it instructs the file system to add a new snippetsfilesystem. E.g. `snippets/` is not self-contained and has side-effect state on load.\n\nI think this error is happening, because the import graph changes when you add this particular import. E.g. the order in which all modules are being loaded changes, which means we are currently relying on a side-effect order loading (probably in `main/`). I think that\u0027s happening in `Main.MainImpl.MainImpl._createAppUI` which creates a `Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding`.\n\nThat said, I am not sure why we have to rely on `sources/` for this component. If I understand correctly, the component should not implement business logic on its own. It should fire an event to fire the navigation event and the user of `linear-memory-inspector` would then implement the functionality. I don\u0027t see a reference to a user of this component yet, is it unused right now?\n\nWould it be possible to refactor this component such that it does not rely on the business logic, but instead let the user of the component handle the navigation history? My assumption is that `sources/` itself will use this component. This would hopefully remove the circular dependency between `sources/` and this component and hopefully resolve the side-effect loading issue that we are currently relying on with `MainImpl`.\n\nIt might also be good to file a CRBug to explain that we are currently relying on `MainImpl` ordering and that `snippets/` performs side-effect tasks upon module loading. `snippets/` should not perform such actions on loading, which would prevent these kind of issues as well.\n\nLet me know if that was useful. If not, feel free to set up a VC and we can pair debug the issue.",
      "parentUuid": "ecfeb6fd_bbccb3e7",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46a49633_ddf8fcd9",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-27T13:24:53Z",
      "side": 1,
      "message": "First off: thanks a lot for taking your time, investigating and writing that response Tim!\n\n* Yes, normally the component should not implement business logic on its own; this was also a discussion point on the design doc:\nhttps://docs.google.com/document/u/1/d/1LUOat3Q3pQ08IsnBQLrvL-4zWXSTgIuArb5ig3lEm-Y/edit?usp\u003dsharing\n\nTLDR (discussion in comment added by Alex): this component is actually only rendering its subcomponents, and the suggestion was to not forward all events of its subcomponents, but instead to handle them within this component. This would guarantee that all the subcomponents are always in *sync*. Initially the design had a delegate that would take care of everything (\u0027the user of the component\u0027).\n\nI\u0027ll add Jack and Alex to the CL too.\n\n* I wouldn\u0027t necessarily need to rely on sources, but I just wanted to reuse the history manager (which we could implement by ourselves if necessary to break any dependencies).\n\n* I\u0027ll create a bug for the dependency issue",
      "parentUuid": "07560a4f_ac2ae080",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7c9a934_2af96c8d",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-27T14:27:37Z",
      "side": 1,
      "message": "I think HistoryEntry is an interface (according to jsdoc definitions). Could AddressHistoryEntry implement the interface without explicitly defining it? I guess even without extending the class, AddressHistoryEntry would still conform to the required interface.",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d171c2c2_4149231d",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T07:00:33Z",
      "side": 1,
      "message": "Oops - Yes, changed to:\n\n```\nclass AddressHistoryEntry implements Sources.SimpleHistoryManager.HistoryEntry {\n```\n\nThanks a lot for catching this!",
      "parentUuid": "b7c9a934_2af96c8d",
      "revId": "1fc2f6aae88c6234ff8a06c955363fc54445fb52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
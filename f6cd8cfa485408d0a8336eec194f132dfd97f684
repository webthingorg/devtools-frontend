{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "84d65e4c_561d7c86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-02-23T06:08:07Z",
      "side": 1,
      "message": "In general lgtm, just some suggestions how we could polish :)",
      "revId": "f6cd8cfa485408d0a8336eec194f132dfd97f684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "329f5785_49ba4207",
        "filename": "front_end/core/sdk/TargetManager.ts",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-02-23T06:08:07Z",
      "side": 1,
      "message": "Shouldn\u0027t `Events[T]` work here?",
      "range": {
        "startLine": 154,
        "startChar": 72,
        "endLine": 154,
        "endChar": 75
      },
      "revId": "f6cd8cfa485408d0a8336eec194f132dfd97f684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df60ebc2_25a84092",
        "filename": "front_end/core/sdk/TargetManager.ts",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-02-23T06:08:07Z",
      "side": 1,
      "message": "I think this method needs some documentation. E.g. i\u0027d explicitly spell out here that passing `null` as the `scopeTarget` prevents any of the scoped observers/listeners to get any events. It took me a minute to figure that out from the code.\n\nI\u0027d also explicitly spell out that observers/modelObservers get removed/added events if they become \"active\" or \"inactive\".\n\nOne more question: Is it intentional that we don\u0027t early return in the case of `scopeTarget \u003d\u003d\u003d this.#scopeTarget`? If this can\u0027t happen, we should add an assertion, and if its intentional then we should document \"why\".",
      "range": {
        "startLine": 339,
        "startChar": 2,
        "endLine": 339,
        "endChar": 16
      },
      "revId": "f6cd8cfa485408d0a8336eec194f132dfd97f684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d71a29de_2cc0baf5",
        "filename": "front_end/core/sdk/TargetManager.ts",
        "patchSetId": 2
      },
      "lineNbr": 409,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-02-23T06:08:07Z",
      "side": 1,
      "message": "nit: maybe `isSDKModelEvent`?",
      "range": {
        "startLine": 409,
        "startChar": 9,
        "endLine": 409,
        "endChar": 16
      },
      "revId": "f6cd8cfa485408d0a8336eec194f132dfd97f684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5c270c7_1055f99b",
        "filename": "test/unittests/front_end/core/sdk/TargetManager_test.ts",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-02-23T06:08:07Z",
      "side": 1,
      "message": "2023",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "f6cd8cfa485408d0a8336eec194f132dfd97f684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62d8b084_d888e24a",
        "filename": "test/unittests/front_end/core/sdk/TargetManager_test.ts",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-02-23T06:08:07Z",
      "side": 1,
      "message": "Pass `{forceNew: true}` here. Otherwise we rely on `describeWithMockConnection` to reset the global instance.",
      "range": {
        "startLine": 20,
        "startChar": 52,
        "endLine": 20,
        "endChar": 60
      },
      "revId": "f6cd8cfa485408d0a8336eec194f132dfd97f684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7518cbfe_2e0c71c0",
        "filename": "test/unittests/front_end/core/sdk/TargetManager_test.ts",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-02-23T06:08:07Z",
      "side": 1,
      "message": "Drive-by comment: I usually prefer testing a single behavior per `it` block. E.g in this case we test 3 behaviors:\n\n  * \"it fires \u0027targetAdded\u0027 for targets created before we start observing\"\n  * \"it fires \u0027targetAdded\u0027 for targets created after we start observing\"\n  * \"it does not fire \u0027targetAdded\u0027 after we stopped observing\"\n\nI\u0027m fine with the tests as-is though, given that it\u0027d be very tedious for the TargetManager.\n\nBut maybe we could be more expressive for a sub-set of the `TargetManager#setScopeTarget`, in particular maybe one test case per transition:\n\n  1) null to non-null scopeTarget\n  2) non-null to different non-null scopeTarget\n  3) non-null to the same non-null scopeTarget\n  4) non-null to null scopeTarget\n  \nAnd check that we receive the appropriate events (maybe only for observer).",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "f6cd8cfa485408d0a8336eec194f132dfd97f684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
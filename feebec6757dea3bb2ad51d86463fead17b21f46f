{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "86a22d4b_7dfa7eeb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-02-27T16:24:04Z",
      "side": 1,
      "message": "PTAL! I am not entirely sure how worthwhile this effort to replace more helpers is going to be; because the main frame logic for OPP exists more in the data layer, whereas for Insights it exists in the UI layer, that means there are extra checks in OPP that we do not do at the data layer in Insights. So I am not sure replacing all the helpers will be valuable. That said, we can still clean up some duplication so I think it is still a positive improvement.",
      "revId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a66a61ee_43d31373",
        "filename": "front_end/models/timeline_model/TimelineModel.ts",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-02-28T10:10:39Z",
      "side": 1,
      "message": "What do you think about adding this logic to the new data layer? I think we would benefit if the UI layer is as \"ignorant\" as possible about the business logic. This way the deprecration of legacy helpers in the future would be easier, since both data layers are equivalent.",
      "range": {
        "startLine": 298,
        "startChar": 19,
        "endLine": 298,
        "endChar": 98
      },
      "revId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30634623_2c0137c8",
        "filename": "front_end/models/timeline_model/TimelineModel.ts",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-02-28T11:01:34Z",
      "side": 1,
      "message": "I am not sure I agree; I do think there is a world in the future where we might want to selectively show or hide metrics based on the frame they were in beyond a simple boolean for them being on the main frame. This was the reason that we created the Insights engine to largely ignore main frame filtering in the initial data layer.\n\nI would much rather we migrate the UI layer over to care about these concerns and make it much closer to the Tracks architecture we had in Insights.\n\nOr, we have helpers like isLCPCandidateEvent that return true or false, and then we have another helper function called isMainThread or similar which does that filtering. I am not sure I want to implicitly filter for main thread in the data layer. WDYT?",
      "parentUuid": "a66a61ee_43d31373",
      "range": {
        "startLine": 298,
        "startChar": 19,
        "endLine": 298,
        "endChar": 98
      },
      "revId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c5b0aa1_a9851fdd",
        "filename": "front_end/models/timeline_model/TimelineModel.ts",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-02-28T13:43:35Z",
      "side": 1,
      "message": "I assumed that lcp particularly is only relevant when it comes from the main frame, in the sense we don\u0027t show lcp for any sub-frame, so the filtering seemed to me to be a \"parsing\" step, which I would favor to locate in the data layer (to prevent the boundary with the UI layer fading like it did with the legacy timelinemodel/flamechart). I guess this assumption is not always valid and things might change in the future. Ultimately the call is yours :).\n\nHaving a `isMainThread` sounds like a good idea to me, or/and maybe something in between like `isMainFrameLCP`.",
      "parentUuid": "30634623_2c0137c8",
      "range": {
        "startLine": 298,
        "startChar": 19,
        "endLine": 298,
        "endChar": 98
      },
      "revId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a74b81f9_b5c0a5ec",
        "filename": "front_end/models/timeline_model/TimelineModel.ts",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-02-28T13:50:10Z",
      "side": 1,
      "message": "Yeah I take your point; I think in the case of LCP it is nearly always going to be main frame only, but for other data that we parse it is not. Therefore, I wonder if it is cleaner for the data layer to never remove any non-main-frame events, rather than have it filter by main frame for some events, but not others.\n\nI would also like to look at how we determine if events are main frame - in Insights, we look for the main frame ID (which the meta handlers parses), but in OPP as we can see we rely on the presence of this data in the event.\n\nI could also see a world where the PageLoadMetrics handler exposes `mainFrameEvents` as a top level key, along with `allEvents` (or something), so that the filtering is done, if you want it to. Perhaps that is clearer?\n\nBut for this CL, that doesn\u0027t impact us, as this helper method is not using any data from the new engine yet.\n\nWDYT?",
      "parentUuid": "2c5b0aa1_a9851fdd",
      "range": {
        "startLine": 298,
        "startChar": 19,
        "endLine": 298,
        "endChar": 98
      },
      "revId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bca4d35_b5304600",
        "filename": "front_end/models/timeline_model/TimelineModel.ts",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-02-28T14:00:28Z",
      "side": 1,
      "message": "sounds good, we can refine the new data layer to handle the importance of the main frames where it matters!",
      "parentUuid": "a74b81f9_b5c0a5ec",
      "range": {
        "startLine": 298,
        "startChar": 19,
        "endLine": 298,
        "endChar": 98
      },
      "revId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "feebec6757dea3bb2ad51d86463fead17b21f46f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
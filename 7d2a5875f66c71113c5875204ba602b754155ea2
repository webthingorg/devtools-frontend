{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "359e1d66_324cb15d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-05-02T14:10:19Z",
      "side": 1,
      "message": "PTAL. I ran perf tests against this change and its parent and didn\u0027t see significant performance changes",
      "revId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0006bfad_189b19d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-05-03T10:25:40Z",
      "side": 1,
      "message": "I\u0027m not sure on this yet... I can see the appeal of being able to mutate, but what I can see is it being a bit of a slippery slope. I know right now we only mutate to add selfTime, but before too long we could end up in a situation where we are mutating more and more and it gets very confusing.\n\nI could picture bugs where suddenly the order of handlers change, and one handler was implicitly relying on the fact that another mutated some events.\n\nI can totally see the upside of being able to mutate.\n\nI wonder if a compromise is keeping the event immutable but adding one key to it, say `traceEngineData: {}` which could hold any additional info...but even then I think I prefer the idea of lookups, especially if we can do it by something more efficient than a large map of events.",
      "revId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45b89ea2_51ee9b14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-05-03T14:22:21Z",
      "side": 1,
      "message": "I see what you mean, we don\u0027t want to mutate event objects arbitrarily. However, I\u0027d argue self duration is almost intrinsic data, almost as timestamp and duration. I think that it makes sense for it to be part of the object itself and avoid passing helpers/data structures around that hold a basic property.\n\nWith our current type definition status we cannot strictly enforce immutability, so we are on the safer side by passing copies after buffering anyway, to keep the source trace format intact.\n\nWe can also start to think about an approach for extending events in the long term, if we feel strongly about removing the synthetic `selfTime` property we can use such approach with it.\n\n\u003eespecially if we can do it by something more efficient than a large map of events.\n\nDo you picture something in specific?",
      "parentUuid": "0006bfad_189b19d4",
      "revId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebbb8947_04b5852b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-05-03T14:32:38Z",
      "side": 1,
      "message": "\u003e With our current type definition status we cannot strictly enforce immutability, so we are on the safer side by passing copies after buffering anyway, to keep the source trace format intact.\n\nWe could though, if we added a bunch of `readonly` to all the keys in say `TraceEventArgs`.\n\nSeparately though, I\u0027m getting a bit confused: TreeHelpers (where the selfTime mutation is happening IIUC) is supposed to only take `SyntheticTraceEntry[]` - the implication of `Synthetic` being that it\u0027s not an actual trace event and won\u0027t impact the data we store on disk. So are we looking at this the wrong way, and that\u0027s the problem?",
      "parentUuid": "45b89ea2_51ee9b14",
      "revId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "397fc357_1d57ad7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-05-03T14:33:54Z",
      "side": 1,
      "message": "I would be much happier if we made sure when we create the synthetic trace entries in the RenderHandler, that we do so by cloning there, so that we can then treat SyntheticTraceEntry as actually synthetic, and modify it as we build up data, whilst leaving the raw events that get stored to disk untouched.",
      "parentUuid": "ebbb8947_04b5852b",
      "revId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d872bd88_262468ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-06-06T10:26:04Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "397fc357_1d57ad7e",
      "revId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "7d2a5875f66c71113c5875204ba602b754155ea2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
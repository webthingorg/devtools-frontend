{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "627054d2_76b682a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2024-03-18T20:27:44Z",
      "side": 1,
      "message": "Hello Simon, would you please review this change? Thanks!",
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03d13357_f52ccdf4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-19T06:47:05Z",
      "side": 1,
      "message": "lgtm with a question",
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40016eec_fc15b026",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2024-03-19T14:36:32Z",
      "side": 1,
      "message": "Thanks for reviewing!",
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e52a792_19ad3496",
        "filename": "front_end/entrypoints/heap_snapshot_worker/HeapSnapshot.ts",
        "patchSetId": 1
      },
      "lineNbr": 2334,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-19T06:47:05Z",
      "side": 1,
      "message": "Drive-by comment: This whole `fieldName` business is very hard to follow. We could improve the situation a bit with TypeScript (as a future follow-up). IIUC then the overall type is something like `keyof HeapSnapshotNode|\u0027!edgeName\u0027|\u0027!edgeDistance\u0027`;\n\nFor `compareEdgeField`, `fieldName` should only be `\u0027!edgeName\u0027|\u0027!edgeDistance\u0027`.\n\nIf we spell this out explicitly then we could also type `getValueForSorting` very strictly, since we could type it as `getValueForSorting(fieldName: \u0027!edgeDistance\u0027)`.\n\nJust an idea. It might make other parts of the code more cumbersome to deal with and actually regress readability, in which case we should refrain from such a refactoring.",
      "range": {
        "startLine": 2334,
        "startChar": 30,
        "endLine": 2334,
        "endChar": 47
      },
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbf93277_f331b200",
        "filename": "front_end/entrypoints/heap_snapshot_worker/HeapSnapshot.ts",
        "patchSetId": 1
      },
      "lineNbr": 2334,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2024-03-19T14:36:32Z",
      "side": 1,
      "message": "Great point, I\u0027ll try that out in a follow-up change.",
      "parentUuid": "9e52a792_19ad3496",
      "range": {
        "startLine": 2334,
        "startChar": 30,
        "endLine": 2334,
        "endChar": 47
      },
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03455fa1_06455525",
        "filename": "front_end/entrypoints/heap_snapshot_worker/HeapSnapshot.ts",
        "patchSetId": 1
      },
      "lineNbr": 2334,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2024-04-01T18:57:51Z",
      "side": 1,
      "message": "I tried this idea today and found it to be pretty cumbersome, unfortunately. The primary problem is that ComparatorConfig is used for three distinct purposes:\n\n1. Sorting nodes in HeapSnapshotNodesProvider. Valid sorting keys here are \u0027name\u0027|\u0027retainedSize\u0027|\u0027distance\u0027|\u0027selfSize\u0027|\u0027id\u0027.\n2. Sorting edges in HeapSnapshotEdgesProvider. The sorting keys here are everything from the nodes above, plus \u0027!edgeName\u0027 and \u0027!edgeDistance\u0027. Both of these providers inherit from HeapSnapshotItemProvider, which contains the comparatorConfig property and exposes the proxy method sortAndRewind, which the UI code can call asynchronously.\n3. Sorting grid nodes on the UI thread, in HeapSnapshotSortableDataGrid.sortingChanged. This method uses various interesting sorting keys such as \u0027addedCount\u0027 which are not guaranteed at compile time to be present in the local variables nodeA and nodeB, but which are indeed present at runtime because those variables are instances of a subclass.",
      "parentUuid": "cbf93277_f331b200",
      "range": {
        "startLine": 2334,
        "startChar": 30,
        "endLine": 2334,
        "endChar": 47
      },
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbbb98b8_6f4a91ec",
        "filename": "front_end/entrypoints/heap_snapshot_worker/HeapSnapshot.ts",
        "patchSetId": 1
      },
      "lineNbr": 2712,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-19T06:47:05Z",
      "side": 1,
      "message": "Just double checking that this delete is intentional here. I must admit that I don\u0027t fully follow the refactoring here. So to make sure I mostly got it:\n\n* Since we now extract a different part of the name (via regex) we don\u0027t need the keyId/nodeId shenanigans from before.\n* We use `!pendingEphemeronEdges.delete` logic to skip the first edge but consider the second one.\n* The code assumes that `match.duplicatedPart` occurs only 2 times, or at least always in pairs?",
      "range": {
        "startLine": 2712,
        "startChar": 37,
        "endLine": 2712,
        "endChar": 43
      },
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "960e2d25_60cb2282",
        "filename": "front_end/entrypoints/heap_snapshot_worker/HeapSnapshot.ts",
        "patchSetId": 1
      },
      "lineNbr": 2712,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2024-03-19T14:36:32Z",
      "side": 1,
      "message": "Yes, that\u0027s right. Thanks for asking! I expect each duplicatedPart to show up exactly twice in a well-formed heap snapshot, so this new implementation seemed a little simpler to me. The duplicatedPart is something like `\"part of key (Array @73573) -\u003e value (CSSStyleSheet @30273) pair in WeakMap (table @64489)\"`, which contains all three IDs involved. One could imagine a graph where the same duplicatedPart shows up four times instead of two, but that would imply that the WeakMap contains two copies of the same (key, value) pair, which should never happen in a Map-style data structure.\n\nRegarding `delete` versus `has`, I think that either would work just fine. I chose `delete` here because I noticed that the variable is named `pendingEphemeronEdges`, and once we\u0027ve found the second matching edge, the edge is no longer \"pending\".",
      "parentUuid": "cbbb98b8_6f4a91ec",
      "range": {
        "startLine": 2712,
        "startChar": 37,
        "endLine": 2712,
        "endChar": 43
      },
      "revId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d716af20674f81287e02c6063f62ce1a8aef354c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
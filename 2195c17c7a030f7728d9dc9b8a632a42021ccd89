{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "edd116d9_6cb04e42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-01-17T13:22:05Z",
      "side": 1,
      "message": "Hi Tim, here\u0027s the code. I have added a comment regarding the part of the code that we talked about.",
      "revId": "2195c17c7a030f7728d9dc9b8a632a42021ccd89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "401238e3_17446b32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2022-01-17T14:52:10Z",
      "side": 1,
      "message": "This CL is fairly large, which makes it difficult for me to reason about the control flow and potential race conditions it might introduce. For example, the `no-floating-promises` already caught some new race conditions that are introduced.\n\nTo ease reviewing, can we split up this CL into smaller chunks? If I understand correctly, I think we can create the following chunks:\n1. Check in BreakpointSyncManager and corresponding unit tests (I think these are missing?)\n2. Introduce the DebuggerStateMachine (in a separate file) with corresponding unit tests\n3. Integration of both SyncManager and state machine in DebuggerModel with corresponding e2e-tests. Here I am assuming that the e2e-tests have to be updated because of the new integration, but I am not sure if that\u0027s true?\n\nLastly, I see a fair few calls to `isReadyToPause` introduced in methods. I am assuming that we have to add these in various asynchronous methods, because it could be that between the scheduled call and its invocation, the debugger was already paused and we should suspend execution of any callbacks? Given that we don\u0027t enforce calling this method, I wonder if we can reuse the statemachine in combination with the state pattern (https://en.wikipedia.org/wiki/State_pattern) to execute code? E.g. something along the lines of\n\n```\nthis.#stateManager.executeWhenPossibleToPause(\u003ccallback here\u003e)\n```\n\nwhere the states of each state manager can handle the callback. Reading the implementation of `isReadyToPause`, that means that only `ReadyToPause` would invoke the callback, but all states would simply ignore it.",
      "revId": "2195c17c7a030f7728d9dc9b8a632a42021ccd89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14bed3fc_b6565205",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-01-18T12:58:38Z",
      "side": 1,
      "message": "I have split them up now (see ancestry): DebuggerStateMachine, BreakpointManager, and then BreakpointSyncManager with everything involved. The two previous CLs are just adding code, without being used though (since we need the third CL for that. I hope this helps.\n\nRegarding testing the BreakpointManager: I think we could try to test the `hasBreakpointsForURL`, but it\u0027s difficult to unit test it, since it involves setting breakpoints on UISourceCodes. It would require a lot of set up and mocks to test this part, it would rather fit in as an e2e (what we currently have). WDYT?\n\nRegarding the state pattern: let\u0027s discuss this on the VC!",
      "parentUuid": "401238e3_17446b32",
      "revId": "2195c17c7a030f7728d9dc9b8a632a42021ccd89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a698ce22_90867dc0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-01-20T07:12:06Z",
      "side": 1,
      "message": "For visibility: Tim has prototyped how it would look like with the state pattern here: https://www.typescriptlang.org/play/?#code/JYOwLgpgTgZghgYwgAgMpjpAkua8nIDeAUMsgPYgA2AngKIAeECArtjAEoRwAmNAKuQAKcFgGcIACgRwqVAEaIA1gC5kkgJTIAvAD5kAN3LAeGtUZMBuUsjhiaIBMggg48qhAAiEeSwDmftDSsgrKapo6+ham5sY81gC+xMQIlGJgyDwQ8CxUYOiYEGoF2LiwiCjaRDYubh7evgFBWoQJADQ2lLSMzGwQWJzcfIIi4lIt7cQJ1ilpGSUQYmqEANpKEDRq6VCgfgC6xRilkOVICTrVZHQAcgCCAEIAMnSeyzZkAHRfWTl5Cx1kSZkVD8W4cfhYa4AcQA+gBVIRvMifb7ZUR-I4QAHIuwOJy1dxeHz+QJQYJyRQIJQtd44gDucGAGTAAAtgGIPpQkJI6AYXGAOQ0SdAAOp2OiuQmmazI5EyCnKTQy5FA5Cqjh0W6eACaMP4AHkYUJbnDUHQkcivh8fuj8pjsWQuvQmKx2FxeAJhKIJOTQlSabKyPK-UolbTVarUAAJOH8CHQmGefUi64WlHWtG5O2FB22eyOZyS+rEppk4OU6mXQNwBlM5Cs9mcxxSXn8wUl0lisSedl1CDS2lBkIVsOyiPYzxYVAPZ6vKvpm1Z-60gnFxqk30VgOB8uKjTKwHY1WQmG3GEAWTodHjULTyCti4xOZsSSSxDANAADigAGqyEwLBc6w0OQMD1l+ECgWgmJiDMCBUHYYjIEKpbnuQWRUFW7LusMXpjJoajyOQ5AeHAIDzsgUAQGALBQORDYcukhTnogbIgBAHxMZAOjaFUABEGparqBpGiaZp8cqSRkDw5CoOQAC21FsX4EQkLKwBgZIACEDEfNhQyeqMPoaNuspUTRdEHmqL42DJcmKQ2IB+AATKptIaeoOlshy+keiM3rjKZyLmbRIBWVJcppCRHFUOQKkAORiApSm7PF+42dJsnJY5fgAMxubKulcRALEIGxHHFU23Qun0Aw4YZAWSBEegUUGUUeB8sUJUlDnKWl4XpYCNRFkS67NBRRWYqV5WcZiHyrqNwpks1+hqTuczIMV-BQGRYhMsAlCoCwCBIP2-YXLpADExXTaAHFgDtIB7WAB0gJIKGkgsHwFFAL1OXCn6DetT3RR8iHQGAkhbY9z2vUdJ0QGdA6DsgAD0qNoNRtjIFQwDyXWMDkFA9YsigYDkBgmF7QAXigUGpHIzCQDwm0IDsn4ZEltFIEh5mMuxLPyDQmQdtAHwo+jyAAIwAAznvcyCE8TVHyRTKAwFAlCQCAPBiG00sy3LCtKxQrLQByKOpE9GT6arkAAGKa7gOsXBwxFgB8HAsOAeMcV7PuKR8ACOLDQDQIg7fJkjxSrauO1rLg8GlyAAD4p8gbsU573svYH-u5xxIdhxHcBR-FdJiP1lsbfJcAMKgbPABzYgAMKsRAqDALTFy23HTvayzAD8BsQAAbMgaiyzLY9WW11uFn2XBiJ+aSVLYtbMt5YOBOAekgEY6wwgtkiELX9eN83bdlR3XcQAkQOFVvVF+OyJwfUEC1LyvT0QEDEWAhoGySQgA\n\nI\u0027m still in favor of not using the state pattern for this particular case, since I think that it wilil be come very verbose. Let me know if you think otherwise, Jaro, Benedikt!",
      "parentUuid": "14bed3fc_b6565205",
      "revId": "2195c17c7a030f7728d9dc9b8a632a42021ccd89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4de9c39_1f97749c",
        "filename": "front_end/models/bindings/BreakpointManager.ts",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2022-01-17T14:52:10Z",
      "side": 1,
      "message": "I am not sure if we can, but would it be possible to avoid suppressing these errors? I fear that suppressing these will silently introduce more promise races.",
      "range": {
        "startLine": 177,
        "startChar": 6,
        "endLine": 177,
        "endChar": 11
      },
      "revId": "2195c17c7a030f7728d9dc9b8a632a42021ccd89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4090a358_707cc67a",
        "filename": "front_end/models/bindings/BreakpointManager.ts",
        "patchSetId": 15
      },
      "lineNbr": 177,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-01-18T12:58:38Z",
      "side": 1,
      "message": "The ESLint rule requires some update to the line since I edit the BreakpointManager, I assume. I added void as this is what we do at the moment. If I leave this untouched, won\u0027t it fail on the bots?",
      "parentUuid": "d4de9c39_1f97749c",
      "range": {
        "startLine": 177,
        "startChar": 6,
        "endLine": 177,
        "endChar": 11
      },
      "revId": "2195c17c7a030f7728d9dc9b8a632a42021ccd89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
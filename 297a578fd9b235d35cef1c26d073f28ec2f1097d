{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ee75e9_d925a7fd",
        "filename": "front_end/panels/sources/ScopeChainSidebarPane.ts",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-07-12T08:24:45Z",
      "side": 1,
      "message": "The only thing I don\u0027t really like about our listener infrastructure is that you don\u0027t get an event for the initial state.\n\nThis works here because the `ScopeChainModel` will fire an event after a micro task tick, but it\u0027s not very explicit.",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 108
      },
      "revId": "297a578fd9b235d35cef1c26d073f28ec2f1097d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a8631b6_72ee60c9",
        "filename": "front_end/panels/sources/ScopeChainSidebarPane.ts",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-07-12T08:38:05Z",
      "side": 1,
      "message": "ScopeChainModel could have a `currentScopeChain` getter. hm but I guess that wouldn\u0027t work once its #update actually starts doing something?",
      "parentUuid": "b3ee75e9_d925a7fd",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 108
      },
      "revId": "297a578fd9b235d35cef1c26d073f28ec2f1097d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f9cb823_2d676476",
        "filename": "front_end/panels/sources/ScopeChainSidebarPane.ts",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-07-12T08:43:11Z",
      "side": 1,
      "message": "Yep, I was considering passing the update listener via constructor, to make it more explicit, but that also feels odd.\n\nI wonder if this problem is so universal that we could make a case for either Signals-like approach or rxjs-like approach. In the end the callframe-specific scope chain is a simple observable.\n\nI\u0027ll land it as-is, but worth pondering some more.",
      "parentUuid": "3a8631b6_72ee60c9",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 108
      },
      "revId": "297a578fd9b235d35cef1c26d073f28ec2f1097d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "297a578fd9b235d35cef1c26d073f28ec2f1097d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "297a578fd9b235d35cef1c26d073f28ec2f1097d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "297a578fd9b235d35cef1c26d073f28ec2f1097d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
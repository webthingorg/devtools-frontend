{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c4bb5b9d_1697c949",
        "filename": "front_end/ui/visual_logging/Debugging.ts",
        "patchSetId": 5
      },
      "lineNbr": 623,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-08-09T12:17:53Z",
      "side": 1,
      "message": "is this used in both unit and e2e tests?\n\nFor e2e tests I have the feeling that it\u0027d be cleaner to do the waiting and comparisons on the test side for a cleaner error message. The setTimeout-ed error check could easily happen _before_ the test timeout, if the test itself sets a longer one.",
      "revId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2bcb2b2_05e8c4d8",
        "filename": "front_end/ui/visual_logging/Debugging.ts",
        "patchSetId": 5
      },
      "lineNbr": 623,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2024-08-09T12:19:47Z",
      "side": 1,
      "message": "This is for the e2e only. The setTimeout-ed error check is meant to happen before the test timeout, so that we get a clean error message. 5s is more then enough to address all the races.",
      "parentUuid": "c4bb5b9d_1697c949",
      "revId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d180295c_60e36cea",
        "filename": "front_end/ui/visual_logging/Debugging.ts",
        "patchSetId": 5
      },
      "lineNbr": 623,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-08-09T12:29:14Z",
      "side": 1,
      "message": "I see, that makes sense! But couldn\u0027t it also happen that the test times out a good bit before that 5s? There would be cases where we wouldn\u0027t get an error message on such a timeout then.\n\nI really like the idea of being able to log extra messages on a timeout. waitForFunction takes already a `description` to log extra state but that\u0027s static, we could have a variant that accepts dynamic state info that\u0027s logged on a timeout?",
      "parentUuid": "d2bcb2b2_05e8c4d8",
      "revId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "127d0e93_38486604",
        "filename": "front_end/ui/visual_logging/Debugging.ts",
        "patchSetId": 5
      },
      "lineNbr": 623,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2024-08-09T12:30:58Z",
      "side": 1,
      "message": "Hmm... how common is that? How about we decrease the timeout to smth like 2s which should also be enough, and care about test timeouts when they actually happen?",
      "parentUuid": "d180295c_60e36cea",
      "revId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf6f7e86_01c79e8d",
        "filename": "front_end/ui/visual_logging/Debugging.ts",
        "patchSetId": 5
      },
      "lineNbr": 623,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-08-09T12:39:49Z",
      "side": 1,
      "message": "not sure how common this is, I remember cases where I wanted to be able to provide extra info. Implemetation is could be relatively simple, I think: We could pass a callback `setDescription` here[0] which when called updates the description of that async scope that was just pushed. waitForFunction can forward the callback into the awaited function.\n\nI don\u0027t want to block you on this, though, if you feel a constant timeout is sufficiently safe and ergonomic then let\u0027s go ahead with it!\n\n[0] https://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/test/shared/async-scope.ts;drc\u003dbafb48fafc3ddf1d069745ee7910b2063d8d0997;l\u003d54",
      "parentUuid": "127d0e93_38486604",
      "revId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "278a22dcbc8bbccb45e080f9500124041c551b48",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
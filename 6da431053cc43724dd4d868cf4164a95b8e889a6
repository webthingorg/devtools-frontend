{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d8ecd02b_7df50b73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-04T14:09:23Z",
      "side": 1,
      "message": "PTAL. What tests do we have to include for UI components? ",
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3f6216c_1647e695",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-08-04T14:48:51Z",
      "side": 1,
      "message": "I think we\u0027d want tests around:\n\n* binding an event listener and making sure it propagates up (e.g devtools-button @click\u003d...)\n* focus styling when the user tabs to the button (via a screenshot test) to ensure that it\u0027s a11y\u0027d for keyboard users (and similarly ensuring I can hit enter to \"click\" the button)\n* a screenshot test for each of the \"variants\" we support (primary, secondary, with icon, etc)\n\nI know we don\u0027t have screenshot tests in this repo yet, but I think they\u0027d be a big help for these very generic, reusable components.\n\nAlso we should probably have Peter and/or Marian review these CLs from a UI perspective.",
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb518b25_bd7eea32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-04T14:54:32Z",
      "side": 1,
      "message": "Yes, screenshots make a lot of sense. Hopefully we will have them here soon. Regarding UI/UX review, it was already reviewed as the part of the feature but I can ask to have a second look.",
      "parentUuid": "c3f6216c_1647e695",
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6d33568_60e03dfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-05T05:56:40Z",
      "side": 1,
      "message": "Added unit tests.",
      "parentUuid": "eb518b25_bd7eea32",
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78416c4e_c51bdc97",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-08-04T14:50:32Z",
      "side": 1,
      "message": "In a previous role we decided on supporting a `variant` prop rather than `primary: true/false` such that it was a bit clearer:\n\n```\n\u003cdevtools-button .variant\u003d{Button.Variant.PRIMARY}\u003e\n```\n\nvs:\n\n```\n\u003cdevtools-button\u003e\n// is this primary or secondary?\n\u003c/devtools-button\u003e\n```\n\nI think I\u0027d be in favour of something similar; it also lets you extend should you want more variants (although often you don\u0027t, rarely it is useful).",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 4
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f486b86a_cfbb05bf",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-05T05:56:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78416c4e_c51bdc97",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 23,
        "endChar": 4
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23c272a0_76b4577c",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-08-04T14:48:51Z",
      "side": 1,
      "message": "I\u0027m on the fence about sticking to our pattern of doing .data\u003d{} for these components; we strayed from this in the performance panel because of how often we\u0027re re-rendering large canvases, so it got very costly, but normally the .data approach should be fine.\n\nOr alternatively I guess this approach ensures high perf components regardless of context, which can\u0027t be a bad thing? However, I\u0027m wary of us having a bunch of components doing it one way, and another bunch doing it the other way.\n\n\nWDYT?",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c90f5362_c0e1f613",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-04T14:54:32Z",
      "side": 1,
      "message": "Yes, that was my thought: we don\u0027t know in what context the component will be used, so the high-performance pattern might be better. To be honest, I like this way much more, it feels very natural to me somehow. It\u0027d be amazing if we could make this pattern type-safe though. I\u0027d be happy to change to .data though if we decide on that for this component.",
      "parentUuid": "23c272a0_76b4577c",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e36feb_cf4b31f9",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-08-04T14:58:55Z",
      "side": 1,
      "message": "Yeah, you do get _some_ type-safety from the `.data-` approach. \n\nIt\u0027s been on our list to explore https://www.npmjs.com/package/lit-analyzer#-no-unknown-attribute-no-unknown-property for this check - or alternatively an ESLint rule that:\n\n* found every call to a custom element\n* checked any `.foo\u003d` calls\n* ensured that the source has a `get foo()`\n\nWouldn\u0027t be the hardest thing in the world to build, I don\u0027t think.",
      "parentUuid": "c90f5362_c0e1f613",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bde4d951_86ec6dde",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-05T09:33:21Z",
      "side": 1,
      "message": "So which approach should we take for this component?",
      "parentUuid": "f5e36feb_cf4b31f9",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87674a6a_042d33de",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-05T13:32:02Z",
      "side": 1,
      "message": "I have tried using the lit-analyzer plugin but it didn\u0027t seem to have been picked up by tsc. Do you know if ESLint can parse content inside template literals (i.e. lit syntax)?",
      "parentUuid": "bde4d951_86ec6dde",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9981b161_da26f424",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-08-05T13:37:07Z",
      "side": 1,
      "message": "I suspect for the very generic components we should probably take this approach despite the type safety issue.\n\nI don\u0027t think ESLint can parse content within template literals, it\u0027ll just parse it as chunks of strings and dynamic content, but we could fairly easily parse data out of those (e.g. look for the `.foo\u003d` string, and then find the value). We\u0027d then have to find its type and figure out if its valid, which might be fairly complex. I\u0027m not familiar enough with TypeScript-ESLint to understand how that works best.",
      "parentUuid": "87674a6a_042d33de",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a94b1a75_44ce11ff",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-05T13:43:35Z",
      "side": 1,
      "message": "Could we also have both APIs in the common components? I.e., .data\u003d to have more type-safety (until we figure out the linter bit for .prop\u003d) and .prop\u003d when more performance is needed?",
      "parentUuid": "9981b161_da26f424",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7530542a_97dbf47c",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-08-05T13:47:19Z",
      "side": 1,
      "message": "Oh yeah nice idea! Let\u0027s do that, and maybe suggest people use .data by default and the other when performance is more important. Then if we figure out the type safety we can remove the .data approach longer term",
      "parentUuid": "a94b1a75_44ce11ff",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5706c77_219e0cb1",
        "filename": "front_end/ui/components/buttons/Button.ts",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-05T13:59:04Z",
      "side": 1,
      "message": "Sg! I have added the data setter now.",
      "parentUuid": "7530542a_97dbf47c",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "022a832b_4802cc86",
        "filename": "front_end/ui/components/docs/button/basic.ts",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-08-04T14:48:51Z",
      "side": 1,
      "message": "nit: append",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbdc26e6_5e97124c",
        "filename": "front_end/ui/components/docs/button/basic.ts",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-05T05:56:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "022a832b_4802cc86",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "6da431053cc43724dd4d868cf4164a95b8e889a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "db793b9c_3d17dd27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-05-02T12:52:17Z",
      "side": 1,
      "message": "I\u0027m a bit reluctant to add unit tests for testing the interaction or rendering. Do you have a suggestion on which tests we can write here?\n\nI feel like only these cases make sense for unit tests:\n* AnimationTimingModel is able to handle both `cubic-bezier()` and linear() functions\n* AnimationTimingUI is able to render both `cubic-bezier()` and `linear()` functions visually (without asserting on how it looks, saying that it renders \"linear-container\" or \"cubic-bezier-container\" depending on the case)\n\nWDYT?",
      "revId": "9df4bbe6b17e0bd387fe5b47ba3f70561692b092",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "861f2483_fef36994",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-05-03T08:33:12Z",
      "side": 1,
      "message": "Sounds good. From what I can tell, we added three public methods for LinearEasingPresentation:\n```\ntimingPointToPosition(point: Point): Position {}\n\npositionToTimingPoint(position: Position): Point {}\n\ndraw(linearEasingModel: CSSLinearEasingModel, svg: Element): void {}\n```\nI think it would also make sense to test these. If you think `timingPointToPosition` and `positionToTimingPoint` are just implementation details and not behaviors, we could also just make them private.",
      "parentUuid": "db793b9c_3d17dd27",
      "revId": "9df4bbe6b17e0bd387fe5b47ba3f70561692b092",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b0834f5_a58590b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-05-03T08:33:12Z",
      "side": 1,
      "message": "still LGTM",
      "revId": "9df4bbe6b17e0bd387fe5b47ba3f70561692b092",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48c07c57_be91c9d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-05-03T09:52:37Z",
      "side": 1,
      "message": "They are implementation details for handling the interactions inside AnimationTimingUI. I\u0027m thinking the public API of the AnimationTimingUI class is two entities:\n* PresetUI for rendering the preset categories (readonly presentation of the easing function)\n* AnimationTimingUI for rendering the main visualization.\n\nThey both use LinearEasingPresentation and BezierUI; readonly one doesn\u0027t add any interactions on top of them whereas AnimationTimingUI handles the drag events for both of them.\n\n`timingPointToPosition` and `positionToTimingPoint` are needed to be able to convert a timing point to a position or a position to a timing point in `AnimationTimingUI` while handling events. Essentially they are kind of related to the implementation details for AnimationTimingUI where we currently don\u0027t test.\n\nSo, if we were to add tests for interactions in AnimationTimingUI; those things would have been tested as well but I\u0027m still a bit reluctant to add interaction tests for this use case. So, I didn\u0027t add any tests for LinearEasingPresentation.\n\nI also didn\u0027t add any tests for PresetUI thinking that its logic is fairly simple. WDYT?",
      "parentUuid": "861f2483_fef36994",
      "revId": "9df4bbe6b17e0bd387fe5b47ba3f70561692b092",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3a5cac9_07ae4836",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-05-03T18:11:47Z",
      "side": 1,
      "message": "SGTM. If timingPointToPosition and positionToTimingPoint are just implementation details, let\u0027s make them private then.",
      "parentUuid": "48c07c57_be91c9d4",
      "revId": "9df4bbe6b17e0bd387fe5b47ba3f70561692b092",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55122e50_f7377ac9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2023-05-04T10:56:00Z",
      "side": 1,
      "message": "They are implementation details for the module (we don\u0027t export those to outside of AnimationTimingUI) but they are needed in the public API of the LinearEasingPresentation because LinearEasingUI needs to be able to convert a position from a `LinearEasingPresentation` to a point in the function.\n\nThis kind of shows that there is a leaky abstraction here though I kind of copied the logic from how BezierUI is created and used before ðŸ˜…\n\nLet\u0027s continue like this and maybe come back to update compositon here altogether.",
      "parentUuid": "f3a5cac9_07ae4836",
      "revId": "9df4bbe6b17e0bd387fe5b47ba3f70561692b092",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1bc761a_4537ee1c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2023-05-04T12:15:39Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "55122e50_f7377ac9",
      "revId": "9df4bbe6b17e0bd387fe5b47ba3f70561692b092",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
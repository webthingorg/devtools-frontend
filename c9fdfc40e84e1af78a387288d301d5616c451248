{
  "comments": [
    {
      "key": {
        "uuid": "bba0dcf6_c83cf6b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-08-10T12:35:25Z",
      "side": 1,
      "message": "There are some things I\u0027d like us to work out prior to this landing, so marking as -1 for now.",
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5756cbe3_b68434a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:32:40Z",
      "side": 1,
      "message": "Address the feedback. Please take another look.",
      "parentUuid": "bba0dcf6_c83cf6b5",
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a65df89_d6bea164",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 30,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-08-10T11:43:24Z",
      "side": 1,
      "message": "I\u0027m not sure if it\u0027s worth doing this in the `connectedCallback` rather than the constructor. @Paul L what do you think?",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 109
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c14911d_85d2bcbc",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 30,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-08-10T12:35:25Z",
      "side": 1,
      "message": "It\u0027s fine to do it here, but we don\u0027t need to check this.shadowRoot if we have an internal shadow property.",
      "parentUuid": "3a65df89_d6bea164",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 109
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66c0cad6_4df1d04d",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 30,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:09:23Z",
      "side": 1,
      "message": "TypeScript complains if there is no check because according the types the shadowRoot might still be undefined. Should I add a `!` when accessing this.shadowRoot to suppress the type check or is there another workaround?",
      "parentUuid": "7c14911d_85d2bcbc",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 109
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "806d8fbb_5aa8c7ae",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 30,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:32:40Z",
      "side": 1,
      "message": "Added the `!`. Not sure how to fix the type. Looks like a bug in built-in types?",
      "parentUuid": "66c0cad6_4df1d04d",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 109
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1f0f967_a989d8fc",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 42,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-08-10T12:35:25Z",
      "side": 1,
      "message": "Why have this if we redirect to render?",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98770d01_1c85c982",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 42,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:09:23Z",
      "side": 1,
      "message": "Inspired by the ElementsBreadcrumbs https://source.chromium.org/chromium/chromium/src/+/master:third_party/devtools-frontend/src/front_end/elements/ElementsBreadcrumbs.ts;l\u003d40;drc\u003d84d986f9a16ac7224e31dc2e7971ed94d60822ef I probably mistakenly thought that it\u0027s a convention we need to follow.",
      "parentUuid": "f1f0f967_a989d8fc",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06f8af59_636b13c3",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 42,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:32:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98770d01_1c85c982",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 42,
        "endChar": 0
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97ecafa8_40fda0a3",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 46,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-08-10T12:35:25Z",
      "side": 1,
      "message": "I feel like we should destructure these at the top for consistency with other components.",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 11
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d52cb6b_010475b9",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 46,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:09:23Z",
      "side": 1,
      "message": "Inspired by the ElementsBreadcrumbs again https://source.chromium.org/chromium/chromium/src/+/master:third_party/devtools-frontend/src/front_end/elements/ElementsBreadcrumbs.ts;l\u003d207;drc\u003d84d986f9a16ac7224e31dc2e7971ed94d60822ef Which style should we follow?",
      "parentUuid": "97ecafa8_40fda0a3",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 11
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c8f1a97_614ff701",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 46,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:32:40Z",
      "side": 1,
      "message": "Destructured LitHtml into html \u0026 render at the top.",
      "parentUuid": "3d52cb6b_010475b9",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 11
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33beeaed_507f72da",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 118,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-08-10T12:35:25Z",
      "side": 1,
      "message": "These are a bit challenging to read. Can you break them down a bit?",
      "range": {
        "startLine": 118,
        "startChar": 4,
        "endLine": 118,
        "endChar": 112
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cf4b2ec_e0ae2b0c",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 118,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:32:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33beeaed_507f72da",
      "range": {
        "startLine": 118,
        "startChar": 4,
        "endLine": 118,
        "endChar": 112
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a68bd53_f1b07cd2",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 137,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-08-10T12:35:25Z",
      "side": 1,
      "message": "I think we should avoid a couple of things here. Firstly, functions returning other functions makes it harder to read because of the indirection. In this case, I\u0027m not sure it\u0027s even necessary as you could take in a setting and cast the event and dispatch the appropriate outer event. Secondly, casting as you\u0027ve had it with \u0026{target: HTMLInputElement} is unusual. We could take event and cast it as a SettingsChangeEvent, defining the interface for that above.",
      "range": {
        "startLine": 125,
        "startChar": 2,
        "endLine": 137,
        "endChar": 3
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a327b66f_389eac71",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 137,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:09:23Z",
      "side": 1,
      "message": "The style for the event handlers is inspired by the ElementsBreadcrumbs https://source.chromium.org/chromium/chromium/src/+/master:third_party/devtools-frontend/src/front_end/elements/ElementsBreadcrumbs.ts;l\u003d167;drc\u003d84d986f9a16ac7224e31dc2e7971ed94d60822ef The reason for it is that it\u0027s invoked in a loop creating a handle for a particular setting. We can also bind in the loop using `.bind`. WDYT? \n\nRelated to the casting: `\u0026{target: HTMLInputElement}` I don\u0027t think it\u0027s casting, it\u0027s an inline type definition but I can move it out to a separate interface to make it cleaner. In general, I think we should avoid any explicit casting, right?",
      "parentUuid": "8a68bd53_f1b07cd2",
      "range": {
        "startLine": 125,
        "startChar": 2,
        "endLine": 137,
        "endChar": 3
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba3e48c9_5914eeff",
        "filename": "front_end/elements/LayoutPane.ts",
        "patchSetId": 23
      },
      "lineNbr": 137,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-08-10T13:32:40Z",
      "side": 1,
      "message": "Implemented it differently. PTAL",
      "parentUuid": "a327b66f_389eac71",
      "range": {
        "startLine": 125,
        "startChar": 2,
        "endLine": 137,
        "endChar": 3
      },
      "revId": "c9fdfc40e84e1af78a387288d301d5616c451248",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "392f85bc_87b9440f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T00:15:09Z",
      "side": 1,
      "message": "PTAL ðŸ˜Š",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e81c640f_559bd2f6",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1143154
      },
      "writtenOn": "2021-01-18T01:50:44Z",
      "side": 1,
      "message": "I think this line will just evaluate to \u0027true\u0027 or \u0027false\u0027 with no other effect, was this included by accident?",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29e53930_98725906",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-01-18T03:22:22Z",
      "side": 1,
      "message": "I see you\u0027re actually setting this.expanded in toggleChildren() anyway, so you can delete this line.",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82d12a42_d731ea52",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T04:31:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29e53930_98725906",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b6cf887_1932ca0e",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T04:31:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e81c640f_559bd2f6",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 33
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a0dd25b_70cea25f",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1143154
      },
      "writtenOn": "2021-01-18T02:08:52Z",
      "side": 1,
      "message": "optional mega nit: consider swapping the true and false branches to help readability.\n\nCurrently this code is\n\n```\nif (!this.expanded) { // if (not true)\n  // expand logic\n} else { // else (true)\n  // collapse logic\n}\n```\n\nI find this a little hard to read as the `if` is a negative, making the false positive\nI think it would be slightly easier if we swap the order around to\n\n```\nif (this.expanded) { // if (true)\n  // collapse logic\n} else { // else (false)\n  // expand logic\n}\n```\n\nFeel free to ignore if you disagree style-wise.",
      "range": {
        "startLine": 41,
        "startChar": 3,
        "endLine": 41,
        "endChar": 25
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d0d000_a7aa96f4",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T04:31:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a0dd25b_70cea25f",
      "range": {
        "startLine": 41,
        "startChar": 3,
        "endLine": 41,
        "endChar": 25
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94535422_0c6bc4e3",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1143154
      },
      "writtenOn": "2021-01-18T02:08:52Z",
      "side": 1,
      "message": "Is this `expanded` class currently used? or is this for future styling?\nIf it is for future styling, do we also want a matching `collapsed` class?\n\nThis doesn\u0027t have to be resolved as part of this change, consider me curious.",
      "range": {
        "startLine": 43,
        "startChar": 26,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c47069c_0b464b11",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-01-18T03:22:22Z",
      "side": 1,
      "message": "Another question for the devtools team: this seems like it should be a reflecting boolean attribute to me (i.e. \u003cdevtools-accesibility-node expanded\u003e instead of \u003cdevtools-accessibility-node class\u003d\"expanded\"\u003e), but setting up the machinery for that is a bit tedious:\n\nhttps://developers.google.com/web/fundamentals/web-components/examples/howto-checkbox (search for \"_upgradeProperty\")\n\nand\n\nhttps://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\nand\n\nhttps://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n\nI don\u0027t see any other custom elements in the devtools codebase using attributes like this (yet?) - is that a deliberate decision?\n\nIf we used that here, we wouldn\u0027t need to synchronise between the expanded property and class here (although we would need the machinery to automatically sync between the expanded property and attribute elsewhere), and this whole method would be a one-liner (just what is currently line 48).",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52f0bbf6_530ab0a6",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T04:31:37Z",
      "side": 1,
      "message": "It is being used at line 175 `:host(.parent.expanded)::before` to change the direction of the arrows. Instead of making a `collapsed` class I have been adding and removing the `expanded` class.",
      "parentUuid": "94535422_0c6bc4e3",
      "range": {
        "startLine": 43,
        "startChar": 26,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "579366c1_a9cf555f",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1143154
      },
      "writtenOn": "2021-01-18T04:53:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52f0bbf6_530ab0a6",
      "range": {
        "startLine": 43,
        "startChar": 26,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fdf020d_221da028",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-01-18T05:02:13Z",
      "side": 1,
      "message": "(Just bubbling this up for the attention of devtools folks who may only see the latest patch set)",
      "parentUuid": "6c47069c_0b464b11",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23a046cf_7695ab76",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T05:31:21Z",
      "side": 1,
      "message": "(also bubbling)",
      "parentUuid": "4fdf020d_221da028",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2a035f0_5b7a1589",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2021-01-18T09:18:44Z",
      "side": 1,
      "message": "I think this can be resolved via the other comment - we should have the state for expanded, but then let LitHtml apply it via LitHtml.Directives.classMap - see here for an example: https://source.chromium.org/chromium/chromium/src/+/master:third_party/devtools-frontend/src/front_end/elements/ElementsBreadcrumbs.ts;l\u003d342?q\u003delementsbread\u0026ss\u003dchromium\n\nIn terms of boolean props, LitHtml does support those via the ?foo\u003d{foo} syntax: https://lit-html.polymer-project.org/guide/template-reference#binding-types\n\nI\u0027m not 100% confident I\u0027ve understood and answered the question fully though so please let me know if I haven\u0027t!",
      "parentUuid": "23a046cf_7695ab76",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b5cc844_16e2d311",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-01-18T22:21:12Z",
      "side": 1,
      "message": "Hmmm I don\u0027t think I quite follow. If you style based on the content attribute, i.e.\n\n :host(:not[expanded]) .children {\n   display: none;\n }\n\n... you don\u0027t need to do anything in javascript at all, other than make sure the content attribute gets set. I don\u0027t understand why you would want to re-render and use ClassMap to copy state from the content attribute to the classList.\n\nCan you explain what you mean by \"top-down data flow\", and give more detail on why it\u0027s better to use `this.render()`?",
      "parentUuid": "a2a035f0_5b7a1589",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ed05577_76879651",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-01-18T22:41:39Z",
      "side": 1,
      "message": "Also, calling this.render() will cause all of the children to be re-rendered, right? They haven\u0027t changed at all, they just need to be shown/hidden.",
      "parentUuid": "2b5cc844_16e2d311",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de9d00c8_62af6647",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-01-19T07:19:35Z",
      "side": 1,
      "message": "By \"top down data flow\", I meant that there should be a single place that is changing DOM (the render function) which is based on the components state (e.g., the expanded attribute). lit-html is expected to figure out what changes have to be made to DOM based on the results of the rendering.\n\n\nJack, do you know if lit-html can be used to update the host element as well? Perhaps, in this case, manual manipulation with DOM is ok.",
      "parentUuid": "4ed05577_76879651",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1f6925b_d08e574e",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1143154
      },
      "writtenOn": "2021-01-18T02:08:52Z",
      "side": 1,
      "message": "Optional mega nit: consider adding a blank newline before this to help readability.\n\nFeel free to ignore this if you disagree style-wise.",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5accee4c_660b8bcd",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T04:31:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1f6925b_d08e574e",
      "range": {
        "startLine": 48,
        "startChar": 4,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e30581a2_26b60d95",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-01-18T03:22:22Z",
      "side": 1,
      "message": "No need for a separate class, instead you can do\n\n :host(:not(.expanded)) .children {\n   display: none;\n }\n\nor if we use an attribute instead of a class, that would be \n\n :host(:not([expanded])) .children {\n   display: none;\n }",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a8c4011_8fba5092",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-18T04:31:37Z",
      "side": 1,
      "message": "Done - woahh css is cool ðŸ˜®",
      "parentUuid": "e30581a2_26b60d95",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2060f4c_62c5c3ad",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-01-18T05:02:13Z",
      "side": 1,
      "message": "It *is* cool!",
      "parentUuid": "0a8c4011_8fba5092",
      "revId": "9f3b9a9f30e366a47fd33f4e58f16e6ff5685db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
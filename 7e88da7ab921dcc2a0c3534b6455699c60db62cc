{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96f0bf07_5b99aa5e",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-18T07:26:55Z",
      "side": 1,
      "message": "Note that this line makes it possible to match several scripts that are on the same line. Your change introduces non-determinism by relying on the insertion order in this._scriptsBySourceURL.get(sourceURL), and will return whichever script became known first to DevTools. The previous implementation was crafted to be deterministic (in the sense that it always picks the first script on a line if no column is specified).",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "651111b9_2e58f6b2",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2021-03-18T08:55:42Z",
      "side": 1,
      "message": "We don\u0027t really support multiple scripts with the same URL and overlapping source ranges. My understanding is that the only case where this isn\u0027t a straight bug is when (mis)using `//# sourceURL` annotations, and for those cases the line offset would match, so the sorting wouldn\u0027t add determinism.",
      "parentUuid": "96f0bf07_5b99aa5e",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1ae47cd_fc777cfd",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-18T09:24:29Z",
      "side": 1,
      "message": "From the issues panel we might get source locations where columnNumber is undefined, and then multiple scripts on the same line (think multiple \u003cscript\u003e tags in an HTML file in one line) trigger the case.",
      "parentUuid": "651111b9_2e58f6b2",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4c81c23_31b6f6fb",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2021-03-18T09:42:22Z",
      "side": 1,
      "message": "That doesn\u0027t sound right, as we will just pick a random \u003cscript\u003e then (even if it\u0027s technically deterministic, for the user experience it\u0027s still just picking an arbitrary one). Why do we lack columnNumbers in the issues panel?",
      "parentUuid": "c1ae47cd_fc777cfd",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eca38c5e_d3c79d8d",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-18T10:27:24Z",
      "side": 1,
      "message": "Because it is coming from here: \nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/bindings/core/v8/source_location.cc;l\u003d53;drc\u003dab27d780a1a1405436c902bec2759669a4e95f57",
      "parentUuid": "e4c81c23_31b6f6fb",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37c1726b_e928ab14",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2021-03-18T10:30:51Z",
      "side": 1,
      "message": "Uhm, yeah, that needs fixing. We\u0027ve already had other places in V8 where we\u0027d assume that looking for line number is enough. But that doesn\u0027t match reality (anymore), especially with modern web dev stack and minification.",
      "parentUuid": "eca38c5e_d3c79d8d",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09a91dc8_abc374c6",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-18T10:52:39Z",
      "side": 1,
      "message": "So until this is fixed, I think it would be better to keep this method deterministic.",
      "parentUuid": "37c1726b_e928ab14",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a98f0099_e9a751d8",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2021-03-18T10:56:58Z",
      "side": 1,
      "message": "Let\u0027s focus on fixing the bug. This has been non-deterministic forever, and even with the `sort` call in there, it\u0027s still non-deterministic, since the order of the calls to `createRawLocationFromURL` and the scriptParsed events is still going to decide which arbitrary script is picked. So this additional logic in here is not sufficient to make this deterministic.",
      "parentUuid": "09a91dc8_abc374c6",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff8b1ab7_30006df8",
        "filename": "front_end/sdk/DebuggerModel.js",
        "patchSetId": 2
      },
      "lineNbr": 969,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-18T11:34:30Z",
      "side": 1,
      "message": "Murphy\u0027s law :)",
      "parentUuid": "a98f0099_e9a751d8",
      "range": {
        "startLine": 969,
        "startChar": 47,
        "endLine": 969,
        "endChar": 111
      },
      "revId": "7e88da7ab921dcc2a0c3534b6455699c60db62cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
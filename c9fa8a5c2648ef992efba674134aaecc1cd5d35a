{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d8057aad_8d7ab5c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-01T12:10:36Z",
      "side": 1,
      "message": "PTAL",
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "768c8c6e_e68b08d8",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-01T14:09:16Z",
      "side": 1,
      "message": "Why is this transformation needed?",
      "range": {
        "startLine": 64,
        "startChar": 10,
        "endLine": 64,
        "endChar": 21
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f354dba7_b449bd0b",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-01T15:11:12Z",
      "side": 1,
      "message": "On disk header overrides are stored in `applyTo.headers` as object properties. In the editor UI we want to be able to insert rows at a specific position and access rows by their index. We therefore want an array instead of the object and need to transform back and forth.\n\nAdded explainer comments in the code.",
      "parentUuid": "768c8c6e_e68b08d8",
      "range": {
        "startLine": 64,
        "startChar": 10,
        "endLine": 64,
        "endChar": 21
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a0ae1f3_39400c09",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-01T15:34:24Z",
      "side": 1,
      "message": "I see. Should we call it smth like headerOverrideArray to reflect this in the code?",
      "parentUuid": "f354dba7_b449bd0b",
      "range": {
        "startLine": 64,
        "startChar": 10,
        "endLine": 64,
        "endChar": 21
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bde082d_b25daae8",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-02T10:24:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a0ae1f3_39400c09",
      "range": {
        "startLine": 64,
        "startChar": 10,
        "endLine": 64,
        "endChar": 21
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3c95ec4_e59a58a7",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-02T11:42:02Z",
      "side": 1,
      "message": "ArrayArray?",
      "parentUuid": "6bde082d_b25daae8",
      "range": {
        "startLine": 64,
        "startChar": 10,
        "endLine": 64,
        "endChar": 21
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e9617a4_b141faa4",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-03T10:07:02Z",
      "side": 1,
      "message": "Supposed to be interpreted as \u0027array of arrays\u0027 vs. \u0027array of objects\u0027. Now changed to `arrayOfHeaderOverrideArrays` and `arrayOfHeaderOverrideObjects`. Naming is hard ðŸ˜Š",
      "parentUuid": "e3c95ec4_e59a58a7",
      "range": {
        "startLine": 64,
        "startChar": 10,
        "endLine": 64,
        "endChar": 21
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50750721_fccc28ad",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 161,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-01T14:09:16Z",
      "side": 1,
      "message": "Inline this var?",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 161,
        "endChar": 34
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17fc41f7_e3b932c9",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 161,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-01T15:11:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50750721_fccc28ad",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 161,
        "endChar": 34
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6b2280_046a30f9",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 200,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-01T14:09:16Z",
      "side": 1,
      "message": "Where are these defined? In a different CL?",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 39
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7525ec5b_e0949c09",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 200,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-01T15:11:12Z",
      "side": 1,
      "message": "Oops, the whole `#onClick()` method is only relevant for the next CL. Removed.",
      "parentUuid": "1d6b2280_046a30f9",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 39
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e530979_bb76fbe3",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-01T14:09:16Z",
      "side": 1,
      "message": "When do we want to preserve caret position after re-rendering?",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6a01ede_08239a45",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-01T15:11:12Z",
      "side": 1,
      "message": "The caret position is set on each re-render as long as an editable element is focused and the cared position is stored (which happens on every keystroke since every keystroke causes a re-render).",
      "parentUuid": "3e530979_bb76fbe3",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "215b24f5_69010d7d",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-01T15:34:24Z",
      "side": 1,
      "message": "Ouch, why do we re-render on every keystroke? This seems very wasteful and potentially buggy.",
      "parentUuid": "b6a01ede_08239a45",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f8a6696_9ce62ebd",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-02T10:24:24Z",
      "side": 1,
      "message": "UISourceCode has the notion of a workingCopy which keeps track of unsaved changes. We want to update the workingCopy on the smallest possible updates, so that features like the following work correctly: \n- visual indicator for a file containing unsaved changes\n- \u0027do you want to close unsaved file?\u0027 dialog when closing file with unsaved changes\n\nMy thinking was that the safest way to keep editor state and workingCopy in sync is via two-way data binding: a change in the editor immediately updates workingCopy, and vice versa a change in the workingCopy is immediately sent to the editor via a re-render. Yes, this does cause a lot of re-renders of the editor, but I did not notice any flickering in my experiments. I believe that frameworks like react employ the same strategy when rendering forms.\n\nAs an alternative, I could try removing the listener to onWorkingCopyChanged which causes the re-render, so that the data only flows in 1 direction from the editor to workingCopy. In a quick experiment I already noticed a problem with this:\n- open editor and generate unsaved changes\n- close editor\n- confirm dialog about closing with unsaved changes (which resets the workingCopy)\n- re-open the editor\nThis still shows the unsaved changes we just discarded, because the editor component is not discarded upon closing it in the UI and therefore does not need to be re-created upon re-opening it in the UI. In addition, the indicator for unsaved changes is missing, because the workingCopy has been reset.",
      "parentUuid": "215b24f5_69010d7d",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52a479a0_76d7362c",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-02T11:42:02Z",
      "side": 1,
      "message": "I don\u0027t think that React recreated DOM on every keystroke. \n\nEven if it is fine on your machine, I expect it might be problematic on low end devices. I\u0027d encourage you to exhaust other options first.\n\nCan\u0027t we just raise a flag when calling setWorkingCopy here and ignore onWorkingCopyChanged events when it is set?",
      "parentUuid": "3f8a6696_9ce62ebd",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6418ac80_5ea0c62c",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2022-03-03T10:07:02Z",
      "side": 1,
      "message": "React does in fact re-render on every keystroke (https://stackoverflow.com/q/46942476). Not sure whether it does any clever vDOM diffing to optimise performance, but the render function is called on every keystroke.\n\nI\u0027ve followed your advice and introduced a flag to prevent re-rendering when the change is caused by user input. The `contenteditable` elements were not correctly updating in a certain case, so I added a workaround for that.",
      "parentUuid": "52a479a0_76d7362c",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41f3bd87_28601d27",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2022-03-03T12:40:03Z",
      "side": 1,
      "message": "We should be careful here with terminology and the difference between executing the render method and recreating DOM:\n\nReact does not _recreate_ DOM on each render, but it does execute its render method to virtually diff the result of its render call with the actual DOM, and make changes as required.\n\nLit-html works similarly in that regard, if you ask it to render with the same state, it will not actually impact the DOM. This is why its (relatively) in-expensive to call render multiple times and why React (and we, using Lit) can take the option to call the render method on each keystroke if we want to, and if we need to.",
      "parentUuid": "6418ac80_5ea0c62c",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b0d2f1_eb10deda",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-03-03T12:57:08Z",
      "side": 1,
      "message": "Yeah, React is using virtual DOM. I didn\u0027t know that Lit also does. If we are not recreating, why does care position get reset?",
      "parentUuid": "41f3bd87_28601d27",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cf74d9b_5bb35e7b",
        "filename": "front_end/panels/sources/components/HeadersView.ts",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2022-03-03T13:07:11Z",
      "side": 1,
      "message": "Apologies, I was misleading: Lit does not use the virtual DOM.\n\nIf the caret position is being reset, that would imply that Lit is determining that the element is being re-created. That may be desired, or it may be a bug. It might be worth trying to create a standalone example to try to demonstrate this. Here with this example notice how you can type in the input and nothing messes up as lit re-renders, because it knows the input element doesn\u0027t need to change.\n\nhttps://lit.dev/docs/components/rendering/#when-templates-render\n\nhttps://lit.dev/playground/#project\u003dW3sibmFtZSI6InNpbXBsZS1ncmVldGluZy50cyIsImNvbnRlbnQiOiJpbXBvcnQge2h0bWwsIGNzcywgcmVuZGVyfSBmcm9tICdsaXQnO1xuaW1wb3J0IHtjdXN0b21FbGVtZW50LCBwcm9wZXJ0eX0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuXG5leHBvcnQgY2xhc3MgU2ltcGxlR3JlZXRpbmcgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvdW50ID0gMDtcbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmNvdW50Kz0xO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9LCAxMDAwKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHJlbmRlcihodG1sYFxuICAgICAgPHA-dGhlIGNvdW50ZXIgaXMgJHt0aGlzLmNvdW50fTwvcD5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIC8-XG4gICAgYCwgdGhpcyk7XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdzaW1wbGUtZ3JlZXRpbmcnLCBTaW1wbGVHcmVldGluZyk7In0seyJuYW1lIjoiaW5kZXguaHRtbCIsImNvbnRlbnQiOiI8IURPQ1RZUEUgaHRtbD5cbjxoZWFkPlxuICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL3NpbXBsZS1ncmVldGluZy5qc1wiPjwvc2NyaXB0PlxuPC9oZWFkPlxuPGJvZHk-XG4gIDxzaW1wbGUtZ3JlZXRpbmcgbmFtZT1cIldvcmxkXCI-PC9zaW1wbGUtZ3JlZXRpbmc-XG48L2JvZHk-XG4ifSx7Im5hbWUiOiJwYWNrYWdlLmpzb24iLCJjb250ZW50Ijoie1xuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJsaXRcIjogXCJeMi4wLjBcIixcbiAgICBcIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiOiBcIl4xLjAuMFwiLFxuICAgIFwibGl0LWVsZW1lbnRcIjogXCJeMy4wLjBcIixcbiAgICBcImxpdC1odG1sXCI6IFwiXjIuMC4wXCJcbiAgfVxufSIsImhpZGRlbiI6dHJ1ZX1d",
      "parentUuid": "d4b0d2f1_eb10deda",
      "range": {
        "startLine": 300,
        "startChar": 0,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "c9fa8a5c2648ef992efba674134aaecc1cd5d35a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "12f0b2a5_3f57987e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-03-14T12:04:37Z",
      "side": 1,
      "message": "PTAL",
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a72bffcc_f887d85a",
        "filename": "front_end/panels/timeline/TimelineFlameChartDataProvider.ts",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-03-14T12:04:37Z",
      "side": 1,
      "message": "setting the timing bounds in `setModel` is the cause of the screenshot update of the timings track, it\u0027s working as intended",
      "range": {
        "startLine": 290,
        "startChar": 9,
        "endLine": 290,
        "endChar": 28
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa37ba25_c7cd2910",
        "filename": "front_end/panels/timeline/TimelineFlameChartDataProvider.ts",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-03-14T12:19:41Z",
      "side": 1,
      "message": "Ack. Is this preferable to setting the bounds in `timelineData` like it was before? And are we happy with the fact that the new engine produces very slightly different timings to the old one?",
      "parentUuid": "a72bffcc_f887d85a",
      "range": {
        "startLine": 290,
        "startChar": 9,
        "endLine": 290,
        "endChar": 28
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bedcd9aa_4ca4d8cc",
        "filename": "front_end/panels/timeline/TimelineFlameChartDataProvider.ts",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-03-14T15:28:19Z",
      "side": 1,
      "message": "this happens because the bounds are now set in the test execution and not because the new engine produces different timings: This code wasn\u0027t reached in the code paths of the test before this change. So I think it\u0027s ok because in production the behavior remains unchanged (the code is still executed).",
      "parentUuid": "fa37ba25_c7cd2910",
      "range": {
        "startLine": 290,
        "startChar": 9,
        "endLine": 290,
        "endChar": 28
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77008ecc_2715c866",
        "filename": "front_end/panels/timeline/TimelineFlameChartDataProvider.ts",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-03-14T15:47:07Z",
      "side": 1,
      "message": "Ah OK, I understand. I agree this is a good change if it makes our tests do more of what happens in prod!",
      "parentUuid": "bedcd9aa_4ca4d8cc",
      "range": {
        "startLine": 290,
        "startChar": 9,
        "endLine": 290,
        "endChar": 28
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04cf6d5d_dfb83000",
        "filename": "front_end/panels/timeline/TimelineFlameChartDataProvider.ts",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-03-14T12:19:41Z",
      "side": 1,
      "message": "to check my understanding, this change moves us from using the legacy model for setting the min max bounds to using the new model, correct? If so, I wonder if this should be a separate CL",
      "range": {
        "startLine": 297,
        "startChar": 0,
        "endLine": 303,
        "endChar": 3
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9cdefff_ce38d071",
        "filename": "front_end/panels/timeline/TimelineFlameChartDataProvider.ts",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-03-14T15:28:19Z",
      "side": 1,
      "message": "Since I had to move this bits of code, I created a new method to group the lines. And because the code requires data we have already in the new engine I took the opportunity to use that instead, but we don\u0027t really need to, we could rewrite the new method to use the legacy data instead.",
      "parentUuid": "04cf6d5d_dfb83000",
      "range": {
        "startLine": 297,
        "startChar": 0,
        "endLine": 303,
        "endChar": 3
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f887d0e9_233bc161",
        "filename": "front_end/panels/timeline/TimelineFlameChartDataProvider.ts",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-03-14T15:47:07Z",
      "side": 1,
      "message": "No I think we should use the new engine! Let\u0027s leave it here, especially if we are happy that it doesn\u0027t change the bounds, which I do not think it does.",
      "parentUuid": "a9cdefff_ce38d071",
      "range": {
        "startLine": 297,
        "startChar": 0,
        "endLine": 303,
        "endChar": 3
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84bb404a_a8a4073d",
        "filename": "front_end/ui/components/docs/performance_panel/track_example.html",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-03-14T12:19:41Z",
      "side": 1,
      "message": "If I read this right this relies on there being timings_track.js in this same folder. Is there any way that we can make this fully generic, e.g. I can pass in a track name and we have all the code required to set up the track without me having to create a new file to do that?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 122
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "857618e1_2dd6c12c",
        "filename": "front_end/ui/components/docs/performance_panel/track_example.html",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-03-14T15:28:19Z",
      "side": 1,
      "message": "Agreed. I created a generic script that corresponds to this template in the next ps.",
      "parentUuid": "84bb404a_a8a4073d",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 122
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2db06480_f67aa9c4",
        "filename": "test/unittests/front_end/helpers/TraceHelpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 194,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-03-14T12:19:41Z",
      "side": 1,
      "message": "nit: maybe worth a JS Doc comment? wdyt?",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 194,
        "endChar": 56
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56c03f32_91b6a5c2",
        "filename": "test/unittests/front_end/helpers/TraceHelpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 194,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-03-14T15:28:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2db06480_f67aa9c4",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 194,
        "endChar": 56
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a9b501e_e9016b75",
        "filename": "test/unittests/front_end/helpers/TraceHelpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 212,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-03-14T12:19:41Z",
      "side": 1,
      "message": "could appendLegacyTrackData make the call to instantiate the timeline data itself, meaning we could keep the instantiateTimelineData method private?",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40e75f11_f9bdf1b6",
        "filename": "test/unittests/front_end/helpers/TraceHelpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 212,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-03-14T15:28:19Z",
      "side": 1,
      "message": "good call! Done.",
      "parentUuid": "9a9b501e_e9016b75",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 212,
        "endChar": 65
      },
      "revId": "b34b85b18fe9c02483bae6c9b88ddf2332f4b886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
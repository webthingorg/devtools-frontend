{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ca737354_720af8ab",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-22T08:04:40Z",
      "side": 1,
      "message": "What does `undefined` mean here? Maybe add it to the comment.",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6d49e3a_f84e3cf7",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-05-22T08:19:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca737354_720af8ab",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f20ad4c_31e33731",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-22T08:04:40Z",
      "side": 1,
      "message": "Why not do the column number incrementation here, too? Then nobody needs to remember that a range\u0027s column is incremental, but line isn\u0027t.",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fdcee84_1d521851",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-05-22T08:19:18Z",
      "side": 1,
      "message": "I proposed something similar for the original scope generator, but in the end we decided that the generators should produce the items \"as-is\" (only VLQ decoded), and the consumer handles the semantics.",
      "parentUuid": "5f20ad4c_31e33731",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fb9fb92_e90422db",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-22T08:23:34Z",
      "side": 1,
      "message": "It does increment the line in line 236, though. For the original scopes that\u0027s done in the consumer. I don\u0027t have super strong opinions on whether incrementing should happen in the decoder or the consumer, but I\u0027d prefer line and column to be treated the same.",
      "parentUuid": "1fdcee84_1d521851",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fd83f36_f212306c",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-05-22T08:28:16Z",
      "side": 1,
      "message": "`line` is kinda special for generated ranges. Basically every `;` in the string represents a new line. For original scopes the line number is VLQ encoded.\n\nThe reasoning here is that generated code normally only has a handful of lines, and we wanna skip encoding unnecessary 0s.\n\nWe can\u0027t really delegate the incrementing to the consumer, as we produce start/end items. We could produce start, end and line items though. But that seems somewhat convoluted?",
      "parentUuid": "2fb9fb92_e90422db",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06c58596_65725b8a",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-22T08:31:01Z",
      "side": 1,
      "message": "Understood, incrementing the lines here makes sense then. how about incrementing the columns as well for consistency?",
      "parentUuid": "9fd83f36_f212306c",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc994591_bd325f8f",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-05-22T08:46:23Z",
      "side": 1,
      "message": "Done. Generated ranges will get a couple more fields (definition, bindings), some of which are calculated relative. Should I calculate them also in the generator or resolve them in the consumer?",
      "parentUuid": "06c58596_65725b8a",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13406532_dc4fcc2f",
        "filename": "front_end/core/sdk/SourceMapScopes.ts",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-22T08:50:11Z",
      "side": 1,
      "message": "I think that would be nice for consistency as well, yes.",
      "parentUuid": "dc994591_bd325f8f",
      "revId": "c52889efd8ef2fdb1df0fff0edb75b939af5948b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e14b5346_5d227b6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "Looks solid to me!\n\nAlso, wdyt of putting `ShadowModel` back to the `InlineEditor`? I feel like `StylePropertyTreeElement` getting convoluted with swatch specific logic too much and if we have the place, it might be better to move swatch specific logic outside.",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "074faa00_18bd89b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-06T17:11:50Z",
      "side": 1,
      "message": "Hard to do that cleanly. ShadowProperty depends on SyntaxNode and RenderingContext, the first one is a just ugly, but the second one introduces an import cycle.",
      "parentUuid": "e14b5346_5d227b6c",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b758a467_8e772dae",
        "filename": "front_end/panels/elements/PropertyParser.test.ts",
        "patchSetId": 6
      },
      "lineNbr": 555,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "I think using fake property `--property` shouldn\u0027t leak to tests or other parts of the code. Can we find a better solution here?\n\nI\u0027d prefer passing fake property name or the regular property name explicit I think:\nmaybe having two functions:\n\n- `tokenizeDeclaration(propertyName, propertyValue)` which would return text with `${propertyName}: ${propertyValue}`\n- `tokenizePropertyValue(propertyValue)` which will hide the fake property name.\n\nWDYT? (I think this is similar to the other comment about renaming to `tokenizeDeclaration`)",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fc15d2f_008a57b3",
        "filename": "front_end/panels/elements/PropertyParser.test.ts",
        "patchSetId": 6
      },
      "lineNbr": 555,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-06T18:21:17Z",
      "side": 1,
      "message": "How about using a real property name if available? See updated CL.\n\nI had considered falling back to just the property value when calling getComputedText for the declaration, but that feels unnecessarily complicated. So far the contract\u0027s been that callers everywhere need to be aware of what type of ast node they\u0027re holding, so when they\u0027re calling getComputedText for the declaration they need to be prepared for the result.",
      "parentUuid": "b758a467_8e772dae",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "020c570e_8feea097",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 409,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "I didn\u0027t see where the `nodeGroups` is used, can you explain why we need it?",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0c1275f_03ae9ed8",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 409,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-06T18:21:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "020c570e_8feea097",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a7e5811_eae9ebb5",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 458,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "Can we add a comment here, what exactly is 2? :)",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b33ce138_a1701fa1",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 458,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-06T18:21:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a7e5811_eae9ebb5",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a2eda7e_e4272099",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 554,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "Do we really need this `declValue` call here as the previous `computedValue.tree` is already a `declaration` with `[\"--property\", \":\", \"color-mix(...)\"]`, so matching the `callArgs` should still match `color-mix\u0027s args; isn\u0027t it?",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cf2e0a7_f3f377e2",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 554,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-06T18:21:17Z",
      "side": 1,
      "message": "yes, the children of `computedValue.tree` are [VariableName, \u0027:\u0027, CallExpression], so we need that extra hop.",
      "parentUuid": "9a2eda7e_e4272099",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d43ce99_d7f2c02e",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 554,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-07T10:13:48Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5cf2e0a7_f3f377e2",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2411746_c845affd",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 902,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "Should we rename this to `tokenizeDeclaration` as it is now returning a tree corresponding to a declaration?\n\nThough... now it feels a bit awkward that it is returning a declaration SyntaxNode with a fake property name.",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f1ca2d8_95b2d33c",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 902,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-06T18:21:17Z",
      "side": 1,
      "message": "I totally agree, the tree walking was a lot nicer before. Do you have a better idea how to make matching the entire declaration work?",
      "parentUuid": "f2411746_c845affd",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd73c49d_7a2f4b75",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 902,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-07T10:13:48Z",
      "side": 1,
      "message": "I wasn\u0027t able to come up with a different way to introduce matching declarations (I was thinking maybe changing the API would help like matching a declaration would go in a different path with a different kind of matcher).\n\nFrom the syntactic/API perspective though, I was thinking something along the lines of this diff: https://paste.googleplex.com/6392585158918144\n\n* Tokenizing a declaration would require a `name`\n* Tokenizing a property value will not accept a `name` and won\u0027t trouble itself with the name.\n\nI thought that would fit better to the ways we\u0027re doing tokenizing. WDYT?",
      "parentUuid": "1f1ca2d8_95b2d33c",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb224a9d_47f04797",
        "filename": "front_end/panels/elements/PropertyParser.ts",
        "patchSetId": 6
      },
      "lineNbr": 902,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-07T10:50:20Z",
      "side": 1,
      "message": "`tokenizePropertyValue` would then also return a declaration SyntaxNode though, is that acceptable?",
      "parentUuid": "dd73c49d_7a2f4b75",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7975cee6_17a9c5a0",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 6
      },
      "lineNbr": 924,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "Why do we need concatting with important here as we expect the `important` node  to already exist in the `shadow` declaration? See the case `box-shadow: 12px 11px 5px 21px 48px red !important`",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acb97e27_0c5c8a1b",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 6
      },
      "lineNbr": 924,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-03-06T18:21:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7975cee6_17a9c5a0",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dc6a8b0_4f12e756",
        "filename": "front_end/panels/elements/StylePropertyTreeElement.ts",
        "patchSetId": 6
      },
      "lineNbr": 932,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-03-06T12:49:59Z",
      "side": 1,
      "message": "Looking forward to seeing the increase here actually, thanks to being able to render shadow swatches with `var()`s now! :)",
      "revId": "e8f459642953069c67c9b2aab8eb49014b2fe572",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
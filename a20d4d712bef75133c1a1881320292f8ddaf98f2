{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3f843c6c_fca45af5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-05-29T05:08:53Z",
      "side": 1,
      "message": "Philip, is this something we want to do? Failing after hooks still hint at problems. The unit tests\u0027 async instrumentation will report any problems in the after hook as well (IIRC).",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85d2d917_142bd1bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-29T07:02:41Z",
      "side": 1,
      "message": "@liviurau@google.com Do you have examples for after-hook failures that aren\u0027t actionable?\n\nI think I agree wis Simon, while I get that such failures aren\u0027t exonorable, there\u0027s still value in reporting to rdb, for instance for luci analysis.",
      "parentUuid": "3f843c6c_fca45af5",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "364710d2_72a0847b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1368735
      },
      "writtenOn": "2024-05-29T07:44:39Z",
      "side": 1,
      "message": "Sure: https://ci.chromium.org/ui/p/devtools-frontend/builders/ci/Stand-alone%20Win/12468/test-results?sortby\u003d\u0026groupby\u003d . \n\nThere is bug in the exoneration procedure that will consider everything to be be fine just because the exoneration run did not fail. This is wrong because need to make sure that we did manage to run the tests that failed and it happened that we actually did not run anything in some case (grep mismatches). \n\nOnce we fix the bug by querying rbd for final test results that \u0027after\u0027 hook will only show as failed. \n\nAs a bit of extra context a hook gets reported to rdb only in case of a failure. \n\nSo an exoneration run will simply not report the hook as passing even if it does.",
      "parentUuid": "85d2d917_142bd1bd",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c11e34d_d5ca1a47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1368735
      },
      "writtenOn": "2024-05-29T07:52:58Z",
      "side": 1,
      "message": "Another note: the exoneration attempt on the above failure runs with a grep for the hook now. That effectively fails to run any tests. Command: \n```\nrdb stream -tag test_type:e2e_tests -coerce-negative-duration \n-exonerate-unexpected-pass -inherit-sources -baseline-id ci:Stand-alone Win \n-- vpython3 -u third_party\\node\\node.py --output out/Release/gen/test/run.js \n--artifacts-dir\u003d${ISOLATED_OUTDIR} --skip-ninja --coverage \n--grep\u003d\"afterAll in \"{root}\"\" test/e2e\n```\nhttps://chromium-swarm.appspot.com/task?d\u003dtrue\u0026id\u003d69d664d1d6aa8310",
      "parentUuid": "364710d2_72a0847b",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "616c76d3_c3ca4bfa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1368735
      },
      "writtenOn": "2024-05-29T07:59:49Z",
      "side": 1,
      "message": "In my opinion the after hooks can be ignored",
      "parentUuid": "7c11e34d_d5ca1a47",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8b601ba_11b9d213",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-29T08:01:35Z",
      "side": 1,
      "message": "Can we maybe find a way to ignore them for exoneration? or possibly fail exoneration in general if no test ran?",
      "parentUuid": "616c76d3_c3ca4bfa",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ac75993_5de5c264",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1368735
      },
      "writtenOn": "2024-05-29T08:05:57Z",
      "side": 1,
      "message": "Sorry for posting a draft above.\nI was thinking that the \u0027after\u0027 hook can be ignored in the context of result reporting. They do not indicate a test failure, but a cleaup failure. The setup definitely needs developer attention but should not block CQ or close the tree on it\u0027s own. Should the cleanup impact the following tests that will still show up as a test failure. \n\nThen it\u0027s the afterAll hook that seems to be quite flaky. And that is not actionable because it\u0027s not clear why it fails and who should own the failure. I do not think I ever seen the afterEach hook failing though...",
      "parentUuid": "616c76d3_c3ca4bfa",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c803994_f62feacc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1368735
      },
      "writtenOn": "2024-05-29T08:08:33Z",
      "side": 1,
      "message": "Sure. I am working on making exoneration more precise and robust. Still I wonder why report the aterAll failure if you eventually ignore it?",
      "parentUuid": "9ac75993_5de5c264",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de2ccccd_d04e2309",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-29T08:11:49Z",
      "side": 1,
      "message": "In the build log you linked above the afterAll hook reports an actual issue, for example.",
      "parentUuid": "3c803994_f62feacc",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f380e95_c7075072",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-05-29T08:23:33Z",
      "side": 1,
      "message": "\u003e Still I wonder why report the aterAll failure if you eventually ignore it?\n\nIn what sense is it being ignored?",
      "parentUuid": "de2ccccd_d04e2309",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68d68dd2_83050fbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1368735
      },
      "writtenOn": "2024-05-31T08:50:12Z",
      "side": 1,
      "message": "My assumptions seem to be wrong here. In my mind the hook is already ignorable if it fails on bots and does not damage anything else (like other tests or leaving hanging tasks). The recipe as it is makes it even easier to ignore by deciding that the hook failure if flaky. This CL was going to make some things easier to deal with on the recipe side. I\u0027ll cope with the complexity seeing that I cannot just not report this hooks failure. You convinced me that we should actually keep the signal. Abandoning the change.",
      "parentUuid": "7f380e95_c7075072",
      "revId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a20d4d712bef75133c1a1881320292f8ddaf98f2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e73a4230_1f4d3bdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-08-31T12:12:59Z",
      "side": 1,
      "message": "PTAL",
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8a5e1db_d4332a6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-08-31T12:22:03Z",
      "side": 1,
      "message": "lgtm with notes, thanks!",
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cc2d4d6_2c08248f",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 194,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-08-31T12:22:03Z",
      "side": 1,
      "message": "the renderer handler returns a map of these threads as part of its data() return - could we check that rather than do the name check here? That would be a little bit cleaner. Otherwise, perhaps we do not need the rasterizer map that is in the renderer handler and can remove it?",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 194,
        "endChar": 71
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2e5edea_7c01c275",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 194,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-08-31T13:03:10Z",
      "side": 1,
      "message": "I\u0027m neutral in that regard since the data is available in the same shape on both cases. Checking for event names is definitely something more in tune with the model domain, but raster threads can be treated generically in the model as we have with other threads, so we might not need to have a separate map for these.\n\nMaybe it would make sense to further group threads in the renderer handler (by process \u0026 thread type)?",
      "parentUuid": "4cc2d4d6_2c08248f",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 194,
        "endChar": 71
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b8ad17a_a111b2f9",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 194,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-08-31T14:23:44Z",
      "side": 1,
      "message": "I do quite like the idea of grouping threads by type in the handler level, but I think for now we can stick with this string approach. Perhaps let\u0027s just leave this be and a future CL (that perhaps I can look at) would gather threadTypeByThreadID as a map that we expose in the handler. That way the knowledge about the string names of the threads lives only in the handler, which IMO feels like a better place for it - but does not seem worth doing now. WDYT?",
      "parentUuid": "a2e5edea_7c01c275",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 194,
        "endChar": 71
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "720bfe58_50862a60",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 194,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-09-01T09:33:12Z",
      "side": 1,
      "message": "SGTM! Thank you!",
      "parentUuid": "2b8ad17a_a111b2f9",
      "range": {
        "startLine": 194,
        "startChar": 0,
        "endLine": 194,
        "endChar": 71
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d181dc55_83e8fe5a",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-08-31T12:22:03Z",
      "side": 1,
      "message": "this is a nit that you can feel free to ignore, but it does not feel like the cleanest API to have to pass this into all appenders even if they are not for a rasterizer thread. But I do not have an immediate suggestion as an alternative. Perhaps it is not worth thinking about too much as we could revisit some of this architecture once the old engine is gone and we are thinking about cleaning up the data providers and the appenders",
      "range": {
        "startLine": 199,
        "startChar": 100,
        "endLine": 199,
        "endChar": 111
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da66520b_59d64ba8",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-08-31T13:03:10Z",
      "side": 1,
      "message": "yeah the underlying issue is something that got me thinking about alternatives for a while. The problem is raster tracks are grouped and are the only grouped tracks. In order to handle their groups, each track needs to know if a group for all raster tracks has been added before, but this info is only available at this point. \n\nI was also thinking about adding a dedicated appender for that, but I thought that would introduce to much duplicate code.\n\nAnother alternative is modifying the flamechartData so that the appender can query it and determine if the group has been added (like adding a non ui facing name). I like this option a bit more. WDYT?",
      "parentUuid": "d181dc55_83e8fe5a",
      "range": {
        "startLine": 199,
        "startChar": 100,
        "endLine": 199,
        "endChar": 111
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e330a59a_580fed8c",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-08-31T14:23:44Z",
      "side": 1,
      "message": "I like the idea of the appender being able to query it; I wonder if we need to do that now or if we can push that back - I think there is probably a project to reflect on our architecture once the old engine is gone and see if we can make incremental improvements. Appenders being able to query existing data might slot into that, or also I think we might want to rearchitecture how we handle grouped tracks - or if we even want them at all.\n\nI will leave it up to you if you think any more is worth doing now, or in a follow-up CL, or if we defer this until later.",
      "parentUuid": "da66520b_59d64ba8",
      "range": {
        "startLine": 199,
        "startChar": 100,
        "endLine": 199,
        "endChar": 111
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8adec559_177168ad",
        "filename": "front_end/panels/timeline/CompatibilityTracksAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-09-01T09:33:12Z",
      "side": 1,
      "message": "I support reflecting back on our architechture once everything is more stable and clear. I suspect we could leverage the grouping architechture by thread type we mentioned before to improve the API here. So I\u0027d say we move on with this and come back.\n\nSince it\u0027s clear we need to improve this particular api, I\u0027ve added a TODO to make sure we fix it.\n\nThanks for sharing your thoughts!!",
      "parentUuid": "e330a59a_580fed8c",
      "range": {
        "startLine": 199,
        "startChar": 100,
        "endLine": 199,
        "endChar": 111
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3601b81_5cd2c67a",
        "filename": "front_end/panels/timeline/ThreadAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 172,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2023-08-31T12:22:03Z",
      "side": 1,
      "message": "do you think rasterIndex might be a better name here? Count implies it is the total amount, but actually IIUC it changes by one for each rasterizer thread",
      "range": {
        "startLine": 172,
        "startChar": 14,
        "endLine": 172,
        "endChar": 25
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39235d6d_6d577278",
        "filename": "front_end/panels/timeline/ThreadAppender.ts",
        "patchSetId": 4
      },
      "lineNbr": 172,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2023-08-31T13:03:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3601b81_5cd2c67a",
      "range": {
        "startLine": 172,
        "startChar": 14,
        "endLine": 172,
        "endChar": 25
      },
      "revId": "b6f615c8a5ed9c069a72000ffa64f17ed22d08f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "d77122e2_4127f072",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1396454
      },
      "writtenOn": "2020-08-07T09:32:14Z",
      "side": 1,
      "message": "Added icons and updated screenshots. The icons are static, if we want to make the dynamic depending on attributes of the opened windows, I propose to do that in a separate CL.",
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1acfb048_60ec4925",
        "filename": "front_end/resources/ApplicationPanelSidebar.js",
        "patchSetId": 15
      },
      "lineNbr": 2212,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-08-07T12:17:40Z",
      "side": 1,
      "message": "Should this reset _treeElementForTargetId as well?",
      "range": {
        "startLine": 2212,
        "startChar": 2,
        "endLine": 2212,
        "endChar": 7
      },
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91d2332c_2ad15ba4",
        "filename": "front_end/resources/ApplicationPanelSidebar.js",
        "patchSetId": 15
      },
      "lineNbr": 2544,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-08-07T11:54:52Z",
      "side": 1,
      "message": "Let\u0027s use mediumicon-frame if the opener is not accessible. It isn\u0027t a perfect icon, but it is a /different/ icon, so it gives a quick overview over which have openers and which ones have not. I think this is important.",
      "range": {
        "startLine": 2543,
        "startChar": 4,
        "endLine": 2544,
        "endChar": 33
      },
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cf0fec9_5e26d9da",
        "filename": "front_end/sdk/OpenedWindowManager.js",
        "patchSetId": 15
      },
      "lineNbr": 19,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-08-07T12:17:40Z",
      "side": 1,
      "message": "So the design seems to be that this mananger doesn\u0027t store the opened windows, is that correct?",
      "range": {
        "startLine": 19,
        "startChar": 13,
        "endLine": 19,
        "endChar": 33
      },
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a134599_fd8781ae",
        "filename": "front_end/sdk/OpenedWindowManager.js",
        "patchSetId": 15
      },
      "lineNbr": 32,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-08-07T12:17:40Z",
      "side": 1,
      "message": "Couldn\u0027t there be multiple targets? Then this will overwrite this._registeredListeners.",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 32,
        "endChar": 13
      },
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a23f5a8f_f004a2e3",
        "filename": "front_end/sdk/OpenedWindowManager.js",
        "patchSetId": 15
      },
      "lineNbr": 41,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-08-07T12:57:50Z",
      "side": 1,
      "message": "If you change this to \n\n childTargetManager.addEventListener(\n          ChildTargetManagerEvents.TargetCreated,\n          this._targetCreated, this)\n\nthen you don\u0027t need _registeredListeners at all.\n\nJust do\n\nremoveEventListener(ChildTargetManagerEvents.TargetCreated, this._targetCreated, this) in the targetRemoved handler.",
      "range": {
        "startLine": 39,
        "startChar": 6,
        "endLine": 41,
        "endChar": 97
      },
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae512cd7_e851753c",
        "filename": "front_end/sdk/OpenedWindowManager.js",
        "patchSetId": 15
      },
      "lineNbr": 78,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-08-07T12:58:20Z",
      "side": 1,
      "message": "These should take the event as argument and do the casting (instead of the arrow function above).",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 30
      },
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b928b48_65c75b2b",
        "filename": "front_end/sdk/OpenedWindowManager.js",
        "patchSetId": 15
      },
      "lineNbr": 79,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-08-07T12:17:40Z",
      "side": 1,
      "message": "What is the significance of this?",
      "range": {
        "startLine": 79,
        "startChar": 37,
        "endLine": 79,
        "endChar": 58
      },
      "revId": "d98a23170b17f3da0e6af43928c6b24bc15d09d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c999dea3_7420d809",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-04-03T15:55:37Z",
      "side": 1,
      "message": "Added a test, needs another +1 :)",
      "revId": "e890736420d29e4dc6be98db837c59e82adca7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5fb1251_df67ea74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1544442
      },
      "writtenOn": "2024-04-04T08:43:00Z",
      "side": 1,
      "message": "After only a quick gloss at the code, I’m not entirely sure if it will cover all cases. By the looks of it, only the the Media Query and `color-scheme: light dark`  are checked?\n\nThe `color-scheme` property can also be set to either `light` or `dark`, on a per-element basis affecting the element itself (and its subtree).\n\nSee this demo for example: https://codepen.io/bramus/pen/LYMqRqV\n\nIs this covered? I don’t immediately see tests for `color-scheme: light` or `color-scheme: dark`",
      "revId": "e890736420d29e4dc6be98db837c59e82adca7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0857144c_bf832538",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-04-04T09:51:40Z",
      "side": 1,
      "message": "Excellent catch, thank you! I misread the MDN entry, looks like. Updated the active scheme computation, do you want to take a look?",
      "parentUuid": "a5fb1251_df67ea74",
      "revId": "e890736420d29e4dc6be98db837c59e82adca7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e945a599_2431ce66",
        "filename": "front_end/core/sdk/CSSModel.test.ts",
        "patchSetId": 8
      },
      "lineNbr": 124,
      "author": {
        "id": 1524702
      },
      "writtenOn": "2024-04-04T07:08:59Z",
      "side": 1,
      "message": "I think it\u0027d be better if we don\u0027t use emulation model to trigger the different color scheme conditions as now this test not only tests `colorScheme` function but also the functionality of emulation model.\n\nI see that we\u0027re using mock connection above; can we use `setMockConnectionResponseHandler` for `Runtime.evaluate` to mock different conditions?",
      "revId": "e890736420d29e4dc6be98db837c59e82adca7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f8d46d9_a4e0cfea",
        "filename": "front_end/core/sdk/CSSModel.test.ts",
        "patchSetId": 8
      },
      "lineNbr": 124,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-04-04T07:16:50Z",
      "side": 1,
      "message": "By mocking the response I get no test coverage at all for the JS snippet we\u0027re executing, which I think is the most brittle part of the CL. That\u0027s why I picked a real connection set up with emulation, so that I could test the actual media query behavior.",
      "parentUuid": "e945a599_2431ce66",
      "revId": "e890736420d29e4dc6be98db837c59e82adca7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7d35e33_68328b2e",
        "filename": "front_end/core/sdk/CSSModel.test.ts",
        "patchSetId": 8
      },
      "lineNbr": 124,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-04-04T09:51:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f8d46d9_a4e0cfea",
      "revId": "e890736420d29e4dc6be98db837c59e82adca7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "d59ad192_4c3e67c5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-03-31T11:04:39Z",
      "side": 1,
      "message": "fyi: you can mark them as `Fixed:` to automatically close them when submitting this CL.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 3
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfd71656_111fe457",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-03-31T14:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d59ad192_4c3e67c5",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 3
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "147fefa2_ea54fd5d",
        "filename": "front_end/bindings/BreakpointManager.js",
        "patchSetId": 1
      },
      "lineNbr": 398,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-31T11:40:15Z",
      "side": 1,
      "message": "Why the change from `isBound` to `bound`? For the name of a boolean-returning function, or even for a getter or plain property, `isBound` seems better. Just curious.\n\nUpdate: Ah, is it for symmetry with `enabled` (which is not `isEnabled`)? Hmm, I\u0027d weakly prefer adding the `is` prefix to both instead of removing it here, but I\u0027ll leave it up to you.",
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d998f17a_d1c2b5fc",
        "filename": "front_end/bindings/BreakpointManager.js",
        "patchSetId": 1
      },
      "lineNbr": 398,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-03-31T12:34:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "147fefa2_ea54fd5d",
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dc0b624_4196e7bc",
        "filename": "front_end/sources/DebuggerPlugin.js",
        "patchSetId": 1
      },
      "lineNbr": 1494,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-03-31T10:38:03Z",
      "side": 1,
      "message": "nit: Could we add comments for these literals?\n\n, /** enabled */ false, /** bound */ true, /** breakpoint */ null",
      "range": {
        "startLine": 1494,
        "startChar": 82,
        "endLine": 1494,
        "endChar": 99
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5133d3b5_78cc8791",
        "filename": "front_end/sources/DebuggerPlugin.js",
        "patchSetId": 1
      },
      "lineNbr": 1494,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-31T11:40:15Z",
      "side": 1,
      "message": "Alternatively, change BreakpointDecoration constructor to accept an object with one property for each argument:\n\n    new BreakpointDecoration({\n      enabled: false,\n      bound: true,\n      breakpoint: null,\n    });",
      "parentUuid": "8dc0b624_4196e7bc",
      "range": {
        "startLine": 1494,
        "startChar": 82,
        "endLine": 1494,
        "endChar": 99
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6997f650_09b5d155",
        "filename": "front_end/sources/DebuggerPlugin.js",
        "patchSetId": 1
      },
      "lineNbr": 1494,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-03-31T12:34:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5133d3b5_78cc8791",
      "range": {
        "startLine": 1494,
        "startChar": 82,
        "endLine": 1494,
        "endChar": 99
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c570eb9a_5ee59489",
        "filename": "front_end/text_editor/cmdevtools.css",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-31T11:40:15Z",
      "side": 1,
      "message": "Drive-by nit: I get that we\u0027re following the in-file convention here, but these should all really be ::before (for which :before is an alias). (I don\u0027t expect you to tackle this as part of this CL if you\u0027d rather not.)",
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed4abd61_88edc8db",
        "filename": "front_end/text_editor/cmdevtools.css",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-03-31T14:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c570eb9a_5ee59489",
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f52dc74c_78209d6b",
        "filename": "test/e2e/helpers/sources-helpers.ts",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-03-31T10:38:03Z",
      "side": 1,
      "message": "nit: I\u0027d extract this into a small helper named {waitForBreakpointsToResolve} or {waitForBreakpointsToBeBound} or similar.\n\nAnd maybe even spell the helper out to make it 100% clear what it does:\n\n  const allBreakpointsCount \u003d document.querySelectorAll(\u0027.cm-breakpoint\u0027).length;\n  const unboundBreakpointsCount \u003d document.querySelectorAll(\u0027.cm-breakpoint-unbound\u0027).length;\n  return allBreakpointsCount \u003e bpCount \u0026\u0026 unboundBreakpointsCount !\u003d\u003d 0;\n\nSide note: The allBreakpointsCount \u003e bpCount condition could turn the {addBreakpointForLine} flaky if we click on a line with an existing breakpoint. Maybe the {addBreakpointForLine} should first check that there are no decorators in {breakpointLineNumber} and fail the test if there already is one.",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 40
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fea6bdc7_7a1d379f",
        "filename": "test/e2e/helpers/sources-helpers.ts",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-31T11:40:15Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "f52dc74c_78209d6b",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 40
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b5d4055_c54a4637",
        "filename": "test/e2e/helpers/sources-helpers.ts",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-03-31T12:34:13Z",
      "side": 1,
      "message": "I don\u0027t think the meaning of the breakpoint count would be intuitive in a stand-alone function as this is currently implemented. If I change this to assume the breakpoint count goes up by one I could have a helper that takes an expected breakpoint count.\n\nThis wouldn\u0027t turn anything \"flaky\". Existing tests don\u0027t use this function to click on a line that already has a breakpoint, and if you tried to write a test that way it wouldn\u0027t ever pass as it is. If we wanted we could change this to a toggle breakpoint function and change the expectation to only test that the number of breakpoints has changed, but I don\u0027t want to change the meaning of this in advance of any test need. (Note that the prior code also fails this way -- if you use this to click on the only breakpoint, it is removed and waitForFunction never succeeds.)",
      "parentUuid": "fea6bdc7_7a1d379f",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 40
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57a52185_43be47ef",
        "filename": "test/e2e/helpers/sources-helpers.ts",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-04-01T04:37:55Z",
      "side": 1,
      "message": "Ack. Flaky was the wrong term to use here. I simply wanted to say that I\u0027d prefer a \"fail fast\" version of {addBreakpointForLine} instead of one that times out.",
      "parentUuid": "1b5d4055_c54a4637",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 40
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d370556_0c7eae7c",
        "filename": "test/e2e/sources/dwarf-cxx-language-plugin.ts",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-03-31T11:40:15Z",
      "side": 1,
      "message": "nit: resolves",
      "range": {
        "startLine": 62,
        "startChar": 6,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa886830_f1b2fb22",
        "filename": "test/e2e/sources/dwarf-cxx-language-plugin.ts",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-03-31T14:00:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d370556_0c7eae7c",
      "range": {
        "startLine": 62,
        "startChar": 6,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "6b976d6d4e4d5f71e8c5ae73cca5892eaba99f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
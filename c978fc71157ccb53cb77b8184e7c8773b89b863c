{
  "comments": [
    {
      "key": {
        "uuid": "d9caebcc_dba0e353",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-07-21T07:03:18Z",
      "side": 1,
      "message": "Looks awesome, thanks!",
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4976f4f8_594e887a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-07-21T08:53:33Z",
      "side": 1,
      "message": "This looks great! One thought about defining types but otherwise LGTM",
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f05a34ef_60b1d3f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-07-21T09:07:50Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e9bfe3e_53f6137d",
        "filename": "front_end/issues/MarkdownView.ts",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-07-21T08:53:33Z",
      "side": 1,
      "message": "I still think we should consider defining a type here. I know tokens can be of many different shapes but you could define these as:\n\n```\ntype Token \u003d ListItemToken | ListToken | ...\n```\n\nWhere each union is an interface.\n\nNot sure on the effort vs reward of doing this; but it feels a bit of a shame to give up nearly all type safety. WDYT?",
      "range": {
        "startLine": 15,
        "startChar": 26,
        "endLine": 15,
        "endChar": 29
      },
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eccb7977_407ed8b8",
        "filename": "front_end/issues/MarkdownView.ts",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-07-21T09:07:50Z",
      "side": 1,
      "message": "I am a bit torn on this point. The only advantage we would get is readability, not really type-checking (I think). Why?\n\n* Marked doesn\u0027t have .d.ts files. We currently provide hand-written ones in //front_end/third_party/marked that simply default to `any`. We would have to scour the marked source code to get the nullability etc. right of all the structures.\n* We can\u0027t use \"instanceof\" since these are normal JS objects. I suspect we would have to check for the \"type\" field, then cast to a union variant. At which point we would rely on the same (probably faulty) assumptions as we currently do, in that we expect AST nodes of some types to have certain fields with a guessed nullability.\n\nGiven that the code utilizing the AST is only a few 10s of LoC, I suggest we punt the decision whether to typify to a follow up CL. Ideally we would \"just\" upstream a patch to \"marked\" that adds proper type information we could then utilize. Wdyt?",
      "parentUuid": "6e9bfe3e_53f6137d",
      "range": {
        "startLine": 15,
        "startChar": 26,
        "endLine": 15,
        "endChar": 29
      },
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "732987af_32b44012",
        "filename": "front_end/issues/MarkdownView.ts",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-07-21T09:31:54Z",
      "side": 1,
      "message": "That reasoning is sound to me - let\u0027s punt :)",
      "parentUuid": "eccb7977_407ed8b8",
      "range": {
        "startLine": 15,
        "startChar": 26,
        "endLine": 15,
        "endChar": 29
      },
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b01b048c_136f26dc",
        "filename": "front_end/issues/MarkdownView.ts",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-07-21T11:57:19Z",
      "side": 1,
      "message": "Out of interest if you type it as an array of objects, does it still pass? I ask because at least specifying it as object is slightly tighter than any.",
      "parentUuid": "732987af_32b44012",
      "range": {
        "startLine": 15,
        "startChar": 26,
        "endLine": 15,
        "endChar": 29
      },
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cfc541b_ce94fdec",
        "filename": "front_end/issues/MarkdownView.ts",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-07-21T12:17:40Z",
      "side": 1,
      "message": "No. If we type it as an Object we also need to type all the fields. I try to get @types/marked to work and then rebase with proper types in this CL.",
      "parentUuid": "b01b048c_136f26dc",
      "range": {
        "startLine": 15,
        "startChar": 26,
        "endLine": 15,
        "endChar": 29
      },
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5beae4b_1c8dda5c",
        "filename": "test/unittests/front_end/issues/MarkdownView_test.ts",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-07-21T07:03:18Z",
      "side": 1,
      "message": "If you store the three phrases in a variable each, and use a plain JavaScript template literal to create markdownString, then you can re-use the phrase variables below for the assertions.",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 62,
        "endChar": 105
      },
      "revId": "c978fc71157ccb53cb77b8184e7c8773b89b863c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
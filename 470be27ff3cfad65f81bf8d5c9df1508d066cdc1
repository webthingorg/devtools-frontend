{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6122e110_1fd95828",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-25T11:48:20Z",
      "side": 1,
      "message": "Almost LGTM, only one concern.",
      "revId": "470be27ff3cfad65f81bf8d5c9df1508d066cdc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dead549_0f7c2aeb",
        "filename": "front_end/issues/IssuesPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-25T11:48:20Z",
      "side": 1,
      "message": "I think it might be possible that this event is fired in short succession (think of two issues being filed quickly after one another), and then we could have two calls for updateIssueView racing (because the first was trying to create the issue and is stuck loading the description in L251).\n\nI would suggest repeating the this.issueViews.get(issue.code()) check before L252, and if an issue has been added for that code, just update it.",
      "range": {
        "startLine": 176,
        "startChar": 59,
        "endLine": 176,
        "endChar": 81
      },
      "revId": "470be27ff3cfad65f81bf8d5c9df1508d066cdc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4856639_938d7942",
        "filename": "front_end/issues/IssuesPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-03-25T12:07:09Z",
      "side": 1,
      "message": "Alternatively, we could make `updateIssueView` re-entrant safe by storing its async promise and schedule updates with something like:\n\n private updatePromise: Promise\u003cvoid\u003e \u003d Promise.resolve();\n\n private scheduleIssueViewUpdate(issue) {\n   this.updatePromise \u003d this.updatePromise.then(() \u003d\u003e this.updateIssueView(issue));\n }\n\nwdyt?",
      "parentUuid": "9dead549_0f7c2aeb",
      "range": {
        "startLine": 176,
        "startChar": 59,
        "endLine": 176,
        "endChar": 81
      },
      "revId": "470be27ff3cfad65f81bf8d5c9df1508d066cdc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3e11d63_91f52587",
        "filename": "front_end/issues/IssuesPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-25T12:08:32Z",
      "side": 1,
      "message": "SGTM, but if we do this, consider using a Throttler.",
      "parentUuid": "d4856639_938d7942",
      "range": {
        "startLine": 176,
        "startChar": 59,
        "endLine": 176,
        "endChar": 81
      },
      "revId": "470be27ff3cfad65f81bf8d5c9df1508d066cdc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecfbe2ad_fabcb656",
        "filename": "front_end/issues/IssuesPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-03-25T12:20:10Z",
      "side": 1,
      "message": "I am not sure that I understand fully, what would be the purpose of the Throttler?\n\n1) In case of a full update, we want to update all aggregated issues in a row as fast as possible. So having a timeout in between updates would lead to jank\n2) IIUC then we can\u0027t really skip any calls to `updateIssueView` as the method takes a specific AggregatedIssue.",
      "parentUuid": "e3e11d63_91f52587",
      "range": {
        "startLine": 176,
        "startChar": 59,
        "endLine": 176,
        "endChar": 81
      },
      "revId": "470be27ff3cfad65f81bf8d5c9df1508d066cdc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b9acef4_a0e0c0af",
        "filename": "front_end/issues/IssuesPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2021-03-25T12:24:18Z",
      "side": 1,
      "message": "We\u0027d have to throttle per AggregatedIssue, yes. I suggested using a Throttler because initially I was assuming that the update would now always take longer, and I wanted to prevent a situation, where we are working through a chain of updates when it would be sufficient to just do one every 100ms or so.\n\nIn fact, however, only the first update needs to load the issue, and all following updates will still be relatively quick, so I\u0027m OK with not using a Throttler in this CL.",
      "parentUuid": "ecfbe2ad_fabcb656",
      "range": {
        "startLine": 176,
        "startChar": 59,
        "endLine": 176,
        "endChar": 81
      },
      "revId": "470be27ff3cfad65f81bf8d5c9df1508d066cdc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5437a7ea_f235abc8",
        "filename": "front_end/issues/IssuesPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-03-25T13:26:43Z",
      "side": 1,
      "message": "Ack, implemented now without a throttler.",
      "parentUuid": "0b9acef4_a0e0c0af",
      "range": {
        "startLine": 176,
        "startChar": 59,
        "endLine": 176,
        "endChar": 81
      },
      "revId": "470be27ff3cfad65f81bf8d5c9df1508d066cdc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
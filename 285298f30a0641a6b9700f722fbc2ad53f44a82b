{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "45d0dc65_ac9b7941",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2021-04-06T15:00:21Z",
      "side": 1,
      "message": "caseq: This removes dependency #1 in https://docs.google.com/document/d/1UzCTrkSJJZGELq3P784DNgFrw8fLsmkxFMtmSUdqUqA/edit#heading\u003dh.7nki9mck5t64, WDYT?",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38f8c55a_bc585ef7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-04-09T04:15:13Z",
      "side": 1,
      "message": "Thanks for the patch! We need some proper front-end owners here, my front-end memories are a bit rusty and I\u0027m not event an owner these days, so +Sigurd and Benedikt.",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2015b4b_671ae998",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1115999
      },
      "writtenOn": "2021-04-09T05:16:12Z",
      "side": 1,
      "message": "Heads up: I don\u0027t think this is going to fly. Both |targetId| and |frameId| are constants - CDP assumes main frame is retained throughout navigations. There is no event that would say \u0027Main frame in this target was swapped\u0027 and introducing one would be a breaking CDP change. The coupling was due to the matching lifetimes of the objects, so it was baked into CDP.\n\nI don\u0027t have a solution for you, just pointing out that the current one is incompatible with CDP. So I guess you need to draw how the new CDP contract would look like and what transition / opt-in into the new mode would look like. +dgozman for ideas.",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1126b582_e60d9785",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2021-04-09T12:40:57Z",
      "side": 1,
      "message": "Thanks Pavel! I\u0027m not sure if you\u0027ve already read this document [1], but a breaking change of some kind is necessary due to MPArch and activation. There\u0027s also a discussion thread in devtools-dev about this. I\u0027m hoping we can stage any such breaking changes behind feature flags (initially prerendering, which will be the main consumer of MPArch that actually does activation). I\u0027d really appreciate your thoughts/ideas on that doc as well.\n\n[1] https://docs.google.com/document/d/1l-SeBl7m8zESdJMJlT4oNVFiJ65bjfPa8RHF_WYFuIQ/edit?pli\u003d1#heading\u003dh.6bhxt8glx2jg",
      "parentUuid": "c2015b4b_671ae998",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b47cb78_3b109e72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1115999
      },
      "writtenOn": "2021-04-09T17:30:41Z",
      "side": 1,
      "message": "A breaking change behind a feature flag would mean that this flag will not be enabled by default, which I don\u0027t think it the plan. I wonder if there is a way to opt into this new behavior, so that CDP does not break. Persistent frame is very core to CDP, we can\u0027t just add a new event - it will simply break the world.\n\nI would encourage you to speak to the CDP owners that maintain target infrastructure - dgozman@ and caseq@. This is not the first challenging problem that we face in this area, so I am sure we work something out to unblock you.",
      "parentUuid": "1126b582_e60d9785",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67345ca4_479c2ee2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2021-04-15T21:18:06Z",
      "side": 1,
      "message": "Andrey/Dmitry, do you have anything to add to this? If having a constant frameId associated to a target is an invariant we cannot break, I might have to try another way to handle activation: probably update the frame token in the activated page\u0027s renderer when it activates, so that the main target always reports the same frameId. This might break some features that rely on a renderer always reporting the same frameId throughout its lifetime (but I guess we can fix them incrementally) and they would only break during activation.",
      "parentUuid": "1b47cb78_3b109e72",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "242aaff6_ce0310a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000379
      },
      "writtenOn": "2021-04-15T21:47:36Z",
      "side": 1,
      "message": "We discussed this offline with Andrey. Some thoughts:\n\n- IIUC, with the proposed changes, in the case of BFCache navigation the main frame gets a new RFH and thus a new frameId? This breaks the invariant that main frame id stays the same, and this is even more fundamental then targetId\u003d\u003dframeId assumption made by clients. I do not think this is ever going to fly.\n\n- Based on the above, there could be two solutions:\n  1. Disable BFCache when DevTools client attaches. Then we can probably enable it over protocol and make specific clients (mostly DevTools frontend) work with whatever changes that requires, like changing main frame id.\n  2. Treat BFCache similarly to cross-process navigation, where we already have two RFHs (old and new) that share the same frameId (equal to FTN\u0027s devtools_frame_token). With BFCache, we\u0027ll get a similar navigation from one RFH to another RFH, and the only difference is that the new RFH is not empty (while it is empty in regular cross-process navigation). We can try reattaching to this new RFH like we do today, and make sure that all domains handle that as expected (e.g. report the new frame tree on attach).\n  Variant 1 seems like more work, but variant 2 has some unknowns around various inspector agents not handling reattach properly.\n\n- For portals and other frame tree reshakes, it seems like a separate event that will inform about frame tree reordering is necessary anyway. Therefore, most clients should be able to handle this case based on the event, and we can try to keep targetId\u003d\u003dframeId invariant. For example, when portal is activated, the client should treat another target as a \"tab\" target, and the old \"tab\" target becomes a \"portal child\". WDYT? Note that clients that do not handle this event will break anyway, and I don\u0027t see a sane way around that. Given that these features are rare, perhaps that\u0027s ok.\n\nAndrey, does that capture our discussion well enough?",
      "parentUuid": "67345ca4_479c2ee2",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d292cc4_0c5b5bc1",
        "filename": "front_end/core/sdk/DOMModel.js",
        "patchSetId": 3
      },
      "lineNbr": 1396,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-04-09T04:15:13Z",
      "side": 1,
      "message": "Why does this have to be async? Considering we\u0027re talking to the same target, I would expect the frame already be reported, is that not the case?",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0d00f02_5ab56b72",
        "filename": "front_end/core/sdk/DOMModel.js",
        "patchSetId": 3
      },
      "lineNbr": 1396,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2021-04-09T12:40:57Z",
      "side": 1,
      "message": "That is not the case, it seems like responses from different domains can race (I had some tests flaking).",
      "parentUuid": "9d292cc4_0c5b5bc1",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88bd93c7_5654ebb8",
        "filename": "front_end/core/sdk/FrameManager.js",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-04-09T04:15:13Z",
      "side": 1,
      "message": "This looks fine to me for test usage, but feels a bit scary for the prod usage, considering it may never resolve if we pass a wrong id, or if the same is gone as a result of some race. Can we avoid exposing it for general use and instead implement within its only client (Node._childDocumentPromiseForTesting) instead, so that it\u0027s not accidentally used in production code? We may also want to convert the latter into a function, considering it\u0027s becoming non-trivial to compute.",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "032ff1c2_a22609b9",
        "filename": "front_end/core/sdk/FrameManager.js",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2021-04-09T12:40:57Z",
      "side": 1,
      "message": "Yeah, the wrong id case is worrisome, and one of the main advantages to adding frameId to TargetInfo (a main frame\u0027s frameId would be available immediately and we wouldn\u0027t have to wait for the Page.getFrameTree roundtrip). But I\u0027ll move this into the file itself.",
      "parentUuid": "88bd93c7_5654ebb8",
      "revId": "285298f30a0641a6b9700f722fbc2ad53f44a82b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
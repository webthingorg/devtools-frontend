{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e14ed8c8_b611f477",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-06T19:48:52Z",
      "side": 1,
      "message": "Hi Paul, here\u0027s the CL for exporting enhanced traces. Could you help me review it when you get a chance? Thank you!",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13ba438b_0ca02868",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-07T01:47:01Z",
      "side": 1,
      "message": "We\u0027re very excited about this feature. :)\n\nDo have some larger thoughts about the workflow",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "450bab32_a59a12dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-07T18:33:06Z",
      "side": 1,
      "message": "Same here :) Very excited to start bringing this feature to chromium!",
      "parentUuid": "13ba438b_0ca02868",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "752915ff_5ab5546d",
        "filename": "front_end/models/trace/types/TraceEvents.ts",
        "patchSetId": 9
      },
      "lineNbr": 1183,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-07T01:47:01Z",
      "side": 1,
      "message": "put the scriptId above these two optional ones... mostly so the silly formatter doesn\u0027t do this. :)",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d60d4c01_804f46f6",
        "filename": "front_end/models/trace/types/TraceEvents.ts",
        "patchSetId": 9
      },
      "lineNbr": 1183,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-17T17:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "752915ff_5ab5546d",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dbac7f5_abffce08",
        "filename": "front_end/models/trace/types/TraceEvents.ts",
        "patchSetId": 9
      },
      "lineNbr": 1189,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-07T01:47:01Z",
      "side": 1,
      "message": "We typically just check whatever minimum we need to safely confirm it\u0027s good.\nIn this case I think its fine to only check the `cat`. We can skip the rest.\n\nBut if you plan on changing these trace events args a bit, then sure.. you could keep the rest.",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08dc7367_13c7b5ab",
        "filename": "front_end/models/trace/types/TraceEvents.ts",
        "patchSetId": 9
      },
      "lineNbr": 1189,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-17T17:31:31Z",
      "side": 1,
      "message": "May change these trace vents args, so will keep these checks for now.",
      "parentUuid": "8dbac7f5_abffce08",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90a85f65_67f7aade",
        "filename": "front_end/panels/timeline/EnhancedTraces.ts",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-07T01:47:01Z",
      "side": 1,
      "message": "Just capturing my current understandingâ€¦  \n\nWe have the new trace events coming from these 3 categories\n\n- `v8-source-rundown`: script metadata\n- `v8-source-rundown-sources`: script sourceText for the same scripts. \n   - (This is captured separately as it\u0027s off by default for reasons shared in https://crrev.com/c/5463910 comments)\n- `target-rundown`: script metadata relevant to the page in blink (frame, etc)\n\nThis data is joinable via scriptId, isolate, v8context, executionContext.\n\n\nUltimately we want to join this data up to form the `Target`, `ExecutionContext` and `Script` arrays that are typed at the bottom of this file.  This class does that resolving/matching work and it\u0027s invoked as the enhanced trace prepped for saving to disk.\n\nUltimately, the .devtools file has this structure: https://gist.github.com/paulirish/c5f84c62f0aa2ce193deaaeb50945b40",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16be9cc1_8207a1fa",
        "filename": "front_end/panels/timeline/EnhancedTraces.ts",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-07T18:33:06Z",
      "side": 1,
      "message": "That\u0027s the correct understanding ðŸ˜Š",
      "parentUuid": "90a85f65_67f7aade",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f12fc84e_cf5cd91b",
        "filename": "front_end/panels/timeline/EnhancedTraces.ts",
        "patchSetId": 9
      },
      "lineNbr": 217,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-07T01:47:01Z",
      "side": 1,
      "message": "I can see why this file format is how it is, as it\u0027s an evolution of the Edge enhanced trace format.\n\nBut, without any explicit goal of backwards compatibility, I don\u0027t think it serves us well to, essentially, partially rehydrate the trace, right before saving.  All the data captured in the targets/executionContexts/scripts is still  within the traceEvents. \n\nThe natural alternative, to me, is to do this work only when we\u0027re *importing* this trace. \nAs we import, we look for the enhancedTrace signals, to know if we load in a new window.  That signal could be in the `metadata` block.  Anyway, after that we\u0027d parse all traceEvents and pull out these details so we can hydrate the rest of the devtools state.\n\nWDYT?",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9debadf_f6b044f2",
        "filename": "front_end/panels/timeline/EnhancedTraces.ts",
        "patchSetId": 9
      },
      "lineNbr": 217,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-06-07T17:32:32Z",
      "side": 1,
      "message": "You\u0027re right about that, and I don\u0027t have a strong desire to have backwards compatibility with what Edge has already produced.\n\nHowever, we have a *strong* desire to support the rehydration mechanism for memory tooling as well. (Consider a Node or CEF application that is slowly leaking memory; after it achieves a total memory consumption of 3gb, the host application can force itself to take a heap snapshot. The Memory tool doesn\u0027t even /try/ to bind memory nodes to source locations when loading a heap snapshot from a file.)\n\nThis has been a game changer for many of our partners looking into why their apps are failing in production. I don\u0027t care about the exact layout; what I want us to be able to do is support rehydration for both the performance and the memory tools.",
      "parentUuid": "f12fc84e_cf5cd91b",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e5cc61f_989bb5be",
        "filename": "front_end/panels/timeline/EnhancedTraces.ts",
        "patchSetId": 9
      },
      "lineNbr": 217,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-07T18:33:06Z",
      "side": 1,
      "message": "Currently the TraceFile looks like\n```\nexport type TraceFile \u003d {\n  traceEvents: readonly TraceEventData[],\n  metadata: MetaData,\n};\n```\n\nPerhaps we could keep the information extractable from traceEvents (target, execution context, script) within traceEvent and do that part of rehydration after we import the trace. When we start adding memory tooling data, which is not extractable from trace event, we could add `memory?: MemoryData` in `TraceFile` so we don\u0027t need to change the export file format entirely. What do y\u0027all think about this?",
      "parentUuid": "a9debadf_f6b044f2",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97eba5c8_0802ae29",
        "filename": "front_end/panels/timeline/EnhancedTraces.ts",
        "patchSetId": 9
      },
      "lineNbr": 217,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-13T22:58:08Z",
      "side": 1,
      "message": "\u003e Perhaps we could keep the information extractable from traceEvents (target, execution context, script) within traceEvent and do that part of rehydration after we import the trace. When we start adding memory tooling data, which is not extractable from trace event, we could add `memory?: MemoryData` in `TraceFile` so we don\u0027t need to change the export file format entirely. What do y\u0027all think about this?\n\nlove it.",
      "parentUuid": "2e5cc61f_989bb5be",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fac159ac_fd424797",
        "filename": "front_end/panels/timeline/EnhancedTraces.ts",
        "patchSetId": 9
      },
      "lineNbr": 217,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-17T17:31:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97eba5c8_0802ae29",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb6ffea_35980030",
        "filename": "front_end/panels/timeline/TimelinePanel.ts",
        "patchSetId": 9
      },
      "lineNbr": 787,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-06-07T01:47:01Z",
      "side": 1,
      "message": "FWIW the sources-rundown-sources are still saved to this file. If the idea of keeping that bit off by default was for PII, I suppose we\u0027ll need to exclude them from the traceEvents array around here..",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c117b9b7_fd1344f4",
        "filename": "front_end/panels/timeline/TimelinePanel.ts",
        "patchSetId": 9
      },
      "lineNbr": 787,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-06-07T17:32:32Z",
      "side": 1,
      "message": "I think the option about the sources being saved here are going to be determined by which categories are enabled for tracing, right Jayson?",
      "parentUuid": "9bb6ffea_35980030",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23b10b39_9a91f18a",
        "filename": "front_end/panels/timeline/TimelinePanel.ts",
        "patchSetId": 9
      },
      "lineNbr": 787,
      "author": {
        "id": 1610537
      },
      "writtenOn": "2024-06-07T18:33:06Z",
      "side": 1,
      "message": "Yes since the source text trace category will only be captured if it\u0027s enabled, it should be fine to keep it in the traceEvents.",
      "parentUuid": "c117b9b7_fd1344f4",
      "revId": "3ae44a0489458d595b69a1b1b0a9c9f3fcf0f71d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
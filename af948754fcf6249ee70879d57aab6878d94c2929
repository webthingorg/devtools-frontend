{
  "comments": [
    {
      "key": {
        "uuid": "fb99bae5_04f095cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-09-30T13:50:45Z",
      "side": 1,
      "message": "PTAL. There should be no changes except of simplification of unit tests and a few minor fixes for issues discovered in the process. The types are not ideal so I hope we can improve the type/code organisation in the future.",
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1020e21a_b215716d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-10-01T09:01:42Z",
      "side": 1,
      "message": "LGTM since this is intended as a direct port of the original code. I like Patrick\u0027s suggestions and would like to see them addressed, but would be fine with that happening in a follow-up CL.",
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b32cf4bb_bd22f49d",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T08:49:08Z",
      "side": 1,
      "message": "How about turning these into getters (get context, get document, get window) so that subclasses have a bit of an nicer API to use. Up to you!",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 143,
        "endChar": 3
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "004ccd84_0aac10ea",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-01T08:58:47Z",
      "side": 1,
      "message": "I think it\u0027s a good point. I will change it.",
      "parentUuid": "b32cf4bb_bd22f49d",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 143,
        "endChar": 3
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ac9168b_df04c8c6",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-10-01T09:00:51Z",
      "side": 1,
      "message": "I like it",
      "parentUuid": "b32cf4bb_bd22f49d",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 143,
        "endChar": 3
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25d033c7_2d3c1e6d",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 143,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T09:03:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "004ccd84_0aac10ea",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 143,
        "endChar": 3
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f569582c_95dfac56",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T08:49:08Z",
      "side": 1,
      "message": "trimEnd normally removes whitespace from the end of a string. I don\u0027t think this is what this function does anymore. It either returns a copy of the string if it\u0027s shorter than maxLength (without triming spaces), or return a substring if it\u0027s too long with an ellipsis, again without triming spaces.\n\ntrimEndWithMaxLength(\u0027                \u0027, 6)\nwould return \u0027      ...\u0027\n\nDon\u0027t we want to remove the whitespaces?",
      "range": {
        "startLine": 178,
        "startChar": 16,
        "endLine": 178,
        "endChar": 23
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26e96e55_89d6bd9c",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-01T08:58:47Z",
      "side": 1,
      "message": "I don\u0027t think I have changed how this function works in the CL. So I don\u0027t actually know what is expected from it. But I\u0027d leave it as is in this CL. I think what was meant by trimEnd here is to make sure strings have max length and end with an ellipsis if it\u0027s longer than needed. We can do it with CSS I believe.",
      "parentUuid": "f569582c_95dfac56",
      "range": {
        "startLine": 178,
        "startChar": 16,
        "endLine": 178,
        "endChar": 23
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c239c18_100e547c",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-10-01T09:00:51Z",
      "side": 1,
      "message": "`ellipsify`",
      "parentUuid": "f569582c_95dfac56",
      "range": {
        "startLine": 178,
        "startChar": 16,
        "endLine": 178,
        "endChar": 23
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11faae91_8d235cdc",
        "filename": "inspector_overlay/common.ts",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T09:03:44Z",
      "side": 1,
      "message": "Oooh, I had missed the fact that we had overloaded the trimEnd method already:\nString.prototype.trimEnd\n\nSo, you\u0027re right, my bad, we were already using a method that did this.\nWeird that it was named trimEnd, because this already exists on Stings, and does not do what our trimEnd does at all.\n\nI\u0027d suggest renaming our new method to clip or something like this.",
      "parentUuid": "26e96e55_89d6bd9c",
      "range": {
        "startLine": 178,
        "startChar": 16,
        "endLine": 178,
        "endChar": 23
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "175e565f_45a4dd4b",
        "filename": "inspector_overlay/tool_highlight_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T08:49:08Z",
      "side": 1,
      "message": "I wonder if we absolutely need to wrap this counter in an object. Couldn\u0027t we just name the class property `gridLayerCounter` and pass this around as a number wherever we need it, and therefore get rid of the GridLabelState interface?",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 49
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "692d27f7_ec1a4647",
        "filename": "inspector_overlay/tool_highlight_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-01T08:58:47Z",
      "side": 1,
      "message": "The gridLayerCounter is modified in downstream helper functions. So if we provide it as a number the helper won\u0027t be able to update it. In general, I\u0027d try to re-write helpers later on so that they don\u0027t modify input arguments.",
      "parentUuid": "175e565f_45a4dd4b",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 49
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "028b098e_f692ba4e",
        "filename": "inspector_overlay/tool_highlight_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T09:03:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "692d27f7_ec1a4647",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 49
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e009bfd8_24491f9e",
        "filename": "inspector_overlay/tool_highlight_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T08:49:08Z",
      "side": 1,
      "message": "Having document as a getter (suggested in another comment) would allow you to do `this.document` here and everywhere else, which would simplify the diff quite a bit actually.",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 72,
        "endChar": 12
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f30af4ac_238b8e84",
        "filename": "inspector_overlay/tool_highlight_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T08:49:08Z",
      "side": 1,
      "message": "nit: maybe move all interfaces at the top of the file (or bottom) instead of having them throughout the code. But up to you.",
      "range": {
        "startLine": 345,
        "startChar": 0,
        "endLine": 345,
        "endChar": 24
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce7dcb30_d8946411",
        "filename": "inspector_overlay/tool_highlight_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-01T08:58:47Z",
      "side": 1,
      "message": "I usually define it next to the place where it is used. But I think now it\u0027s used in multiple places so it can be moved to the top.",
      "parentUuid": "f30af4ac_238b8e84",
      "range": {
        "startLine": 345,
        "startChar": 0,
        "endLine": 345,
        "endChar": 24
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18bb1bf1_3364b71b",
        "filename": "inspector_overlay/tool_source_order_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T08:49:08Z",
      "side": 1,
      "message": "I see several overlay classes doing this.\nThe problem I see here is that everywhere else, we now use `getDocument` to make sure we target the right document. But here we don\u0027t.\nI guess right now there\u0027s only one document ever, so this won\u0027t be a problem, but it\u0027s confusing when reading the code.\nCould we use document everywhere? Or getDocument everywhere?\nIf the latter, then I guess we need to have a constructor function instead of the initialization here.",
      "range": {
        "startLine": 45,
        "startChar": 33,
        "endLine": 45,
        "endChar": 62
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0bd0620_470e49de",
        "filename": "inspector_overlay/tool_source_order_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-01T08:58:47Z",
      "side": 1,
      "message": "So the elements like this are created in setPlatform call. I have done the initialisation this way to satisfy the types that the property is always an element. I could do this in a constructor but it means re-defining the constructor just for this. The other way would be to add ifs whenever sourceOrderContainer is accessed. WDYT?",
      "parentUuid": "18bb1bf1_3364b71b",
      "range": {
        "startLine": 45,
        "startChar": 33,
        "endLine": 45,
        "endChar": 62
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c399f637_49263380",
        "filename": "inspector_overlay/tool_source_order_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1419317
      },
      "writtenOn": "2020-10-01T09:06:37Z",
      "side": 1,
      "message": "Oh ok, isn\u0027t there a way in typescript to define that this will always be an Element then? I mean, without actually having to do document.createElement (which confused me).",
      "parentUuid": "e0bd0620_470e49de",
      "range": {
        "startLine": 45,
        "startChar": 33,
        "endLine": 45,
        "endChar": 62
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7f32a56_9ce51be2",
        "filename": "inspector_overlay/tool_source_order_impl.ts",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-01T09:15:27Z",
      "side": 1,
      "message": "I think there might be a way (but the problem is that the element is not actually always there)",
      "parentUuid": "c399f637_49263380",
      "range": {
        "startLine": 45,
        "startChar": 33,
        "endLine": 45,
        "endChar": 62
      },
      "revId": "af948754fcf6249ee70879d57aab6878d94c2929",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4fc73ee4_9270f678",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-08-13T15:36:37Z",
      "side": 1,
      "message": "Hi Alex and Mathias - this is a relatively small feature request that needed a slightly larger change (in tests) to accommodate the new optional RevealerRegistration API that fits alongside the original. Could you PTAL when you have a chance? Thanks!",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4f9dd40_50c54f19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2024-08-14T07:04:28Z",
      "side": 1,
      "message": "szuend@ could you please chime in on the best way to add revealers for network requests?",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8363433c_86562eb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-08-14T07:29:43Z",
      "side": 1,
      "message": "Please use or extend the existing `UIRequestLocation` revealer.",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf946bd9_71d6c54d",
        "filename": "front_end/core/common/Revealer.ts",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2024-08-14T07:04:28Z",
      "side": 1,
      "message": "do we need to both ways to reveal? I think we should change reveal to accept options instead of adding the second method.",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f561362a_96261649",
        "filename": "front_end/core/common/Revealer.ts",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-08-14T07:29:43Z",
      "side": 1,
      "message": "+1, I did a quick reference search and there are only ~10 call-sites that actually pass the `omitFocus` boolean.\n\nAnd 90% of the `Revealer` implementations either ignore it all-together or just pass it along.",
      "parentUuid": "cf946bd9_71d6c54d",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15f36eb8_d62b4fa7",
        "filename": "front_end/core/common/Revealer.ts",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2024-08-14T07:04:28Z",
      "side": 1,
      "message": "let\u0027s make the RevealableOptions to be a parameter on the Revealer interface:\n\n```\ninterface Revealer\u003cT, RevealOptions extends {omitFocus?: boolean}\u003e {\n\n}\n```",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf269fac_662cee36",
        "filename": "front_end/core/common/Revealer.ts",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-08-14T07:29:43Z",
      "side": 1,
      "message": "as discussed above, lets just do a refactoring and turn `omitFocus` into an optional options bag here and above.",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 189,
        "endChar": 0
      },
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b6fd3cd_961ec9a5",
        "filename": "front_end/panels/timeline/components/NetworkRequestDetails.ts",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2024-08-14T07:04:28Z",
      "side": 1,
      "message": "We do not usually call the Network panel a \u0027tool\u0027. So perhaps we can change it `Reveal in Network panel`?\n\nP.S. there is already \u0027Reveal in Network panel\u0027 functionality so perhaps we do not need a different way?",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dc930f2_236af7fd",
        "filename": "front_end/panels/timeline/components/NetworkRequestDetails.ts",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2024-08-14T07:04:28Z",
      "side": 1,
      "message": "There already seems to be a mechanism to reveal network requests:\n\n```\n          const requestLocation \u003d NetworkForward.UIRequestLocation.UIRequestLocation.tab(\n              request, NetworkForward.UIRequestLocation.UIRequestTabs.HeadersComponent);\n          return Common.Revealer.reveal(requestLocation);\n```\n\nDo we need a different mechanism? (the example above is from front_end/panels/application/components/FrameDetailsView.ts) Is it possible to add an option to the UIRequestLocation location and reveal that instead?",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4750e746_01fc1f46",
        "filename": "front_end/panels/timeline/components/NetworkRequestDetails.ts",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-08-14T07:29:43Z",
      "side": 1,
      "message": "Yeah we already have this functionality. E.g. the issues panel links to network requests and even to different sub tabs when opening a request. You can even specify a header you wanna highlight in the headers tab:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/front_end/panels/network/forward/UIRequestLocation.ts;l\u003d57-85;drc\u003dc3f4bcd0322cd44dc7f54ed7929daa9d6040a837\n\nWe also have a RequestLinkIcon component we use to render such links:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/front_end/ui/components/request_link_icon/RequestLinkIcon.ts;l\u003d60;drc\u003d0fbc2a2af874c8bb911b5438ce46f3daf589d772",
      "parentUuid": "4dc930f2_236af7fd",
      "revId": "00fe3f08471e234c669ff62673ba595ab7284455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
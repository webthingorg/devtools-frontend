{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0558d2b5_773047eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-04-25T16:30:06Z",
      "side": 1,
      "message": "ptal",
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfe83277_e74f046c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-04-25T17:39:15Z",
      "side": 1,
      "message": "LGTM\n\nrelated to this we have https://issues.chromium.org/issues/327213107. A single solution wasn\u0027t clear because some backend call frames are 0 based others 1 based. We didn\u0027t know this was a known fact back in the day :). Now I think we can use the new helper and add support for `InvalidateLayout`/`ScheduleStyleRecalculation`, extracting the numbers in their own base and returning as 0 based. Will do shortly, thanks!",
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c28339c7_de8a3243",
        "filename": "front_end/panels/timeline/TimelineUIUtils.test.ts",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-04-25T17:39:15Z",
      "side": 1,
      "message": "could we extract this into a single declaration we reuse in multiple tests?",
      "range": {
        "startLine": 91,
        "startChar": 15,
        "endLine": 91,
        "endChar": 31
      },
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6e2dcd7_365310a4",
        "filename": "front_end/panels/timeline/TimelineUIUtils.test.ts",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-04-26T10:40:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c28339c7_de8a3243",
      "range": {
        "startLine": 91,
        "startChar": 15,
        "endLine": 91,
        "endChar": 31
      },
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b86ddfa3_7bb76f49",
        "filename": "front_end/panels/timeline/TimelineUIUtils.ts",
        "patchSetId": 1
      },
      "lineNbr": 989,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-04-25T17:39:15Z",
      "side": 1,
      "message": "there\u0027s a different behaviour in the linkifier util for undefined line numbers, do we want to always override it with 0?",
      "range": {
        "startLine": 989,
        "startChar": 33,
        "endLine": 989,
        "endChar": 37
      },
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec28b354_f60d0b51",
        "filename": "front_end/panels/timeline/TimelineUIUtils.ts",
        "patchSetId": 1
      },
      "lineNbr": 989,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-04-26T10:40:25Z",
      "side": 1,
      "message": "These events will have a line number, it\u0027s just the types don\u0027t know that. So I fallback to 0 just to keep TS happy (line number is required). This felt nicer than fighting TS or adding a bunch of really explicit checks.",
      "parentUuid": "b86ddfa3_7bb76f49",
      "range": {
        "startLine": 989,
        "startChar": 33,
        "endLine": 989,
        "endChar": 37
      },
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05bd2c2f_7493bf2c",
        "filename": "front_end/panels/timeline/TimelineUIUtils.ts",
        "patchSetId": 1
      },
      "lineNbr": 2768,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-04-25T20:06:46Z",
      "side": 1,
      "message": "actually, just realized we also have stack trace helpers at [1]. Maybe it makes sense to have all of this together in the same place\n\nhttps://source.chromium.org/chromium/chromium/src/+/1126307f7e340df9dc69c0c74a21c918b3af699f:third_party/devtools-frontend/src/front_end/models/trace/helpers/Trace.ts;l\u003d1",
      "range": {
        "startLine": 2768,
        "startChar": 16,
        "endLine": 2768,
        "endChar": 58
      },
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b40c1e6_366a9e5b",
        "filename": "front_end/panels/timeline/TimelineUIUtils.ts",
        "patchSetId": 1
      },
      "lineNbr": 2768,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-04-26T10:40:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05bd2c2f_7493bf2c",
      "range": {
        "startLine": 2768,
        "startChar": 16,
        "endLine": 2768,
        "endChar": 58
      },
      "revId": "8d99f51690aa7a1183de043bd181a95a9d7316b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "44e7b857_be1684c2",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1370170
      },
      "writtenOn": "2020-05-26T13:54:27Z",
      "side": 1,
      "message": "I\u0027m nitpicking, but I think I\u0027d add a separate\n\n```\nclass UnimplementedError extends Error {\n  constructor() {\n    super(\u0027Not implemented\u0027);\n  }\n}\n```\n\nabove or elsewhere given how common this is.",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3c83c06_f8e82579",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-05-26T14:07:14Z",
      "side": 1,
      "message": "We use this pattern during the typescriptification. It will be removed after. For consistency with the whole codebase, I will keep it like this.",
      "parentUuid": "44e7b857_be1684c2",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e50abe5c_01f7cfe4",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1370170
      },
      "writtenOn": "2020-05-26T13:54:27Z",
      "side": 1,
      "message": "To clarify - if we don\u0027t do something like `|| 0` here, then comparators below produce `NaN` when comparing e.g. `undefined` and `10`. Is this the desired behaviour?",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbf6c25a_220768ac",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-05-26T14:07:14Z",
      "side": 1,
      "message": "Yes and sadly that is desired behavior at this moment in time. I tried to fix it and then lots of tests started failing.",
      "parentUuid": "e50abe5c_01f7cfe4",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d800889_3f690e78",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1370170
      },
      "writtenOn": "2020-05-26T14:14:00Z",
      "side": 1,
      "message": "I see. How about explicit conversion via `sourceLineNumber ?? NaN` (or older-ES equivalent) then? Then values would at least be indeed numbers, comparison results would be preserved and we wouldn\u0027t need to lie about types.",
      "parentUuid": "bbf6c25a_220768ac",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7312feaa_310d8c4c",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-05-26T14:17:36Z",
      "side": 1,
      "message": "I attempted that and it still fails the tests. I think we should do this as a follow-up investigation, as it is not strictly related to the TS work.",
      "parentUuid": "7d800889_3f690e78",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d9654ff_82568feb",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-06-02T14:08:45Z",
      "side": 1,
      "message": "From reading the code, it seems to me that we are triggering a bug if sources is undefined, do you agree? Based on that I\u0027m not sure if an early return isn\u0027t the better option here.",
      "range": {
        "startLine": 482,
        "startChar": 10,
        "endLine": 482,
        "endChar": 51
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64bc4674_757939d1",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-06-03T10:41:06Z",
      "side": 1,
      "message": "I honestly don\u0027t know. We might be, yes, as there is this implicit dependency that the `sources` exist in the map. I was hesitant with an early-return, as we might have other side-effects in this function that we shouldn\u0027t skip.",
      "parentUuid": "6d9654ff_82568feb",
      "range": {
        "startLine": 482,
        "startChar": 10,
        "endLine": 482,
        "endChar": 51
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ab26832_4e6e7334",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-06-02T14:08:45Z",
      "side": 1,
      "message": "Is this logically intended to be undefined? A source map without any sources would be strange, wouldn\u0027t it?",
      "range": {
        "startLine": 485,
        "startChar": 8,
        "endLine": 485,
        "endChar": 18
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "826ff95a_8614a185",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-06-03T10:41:06Z",
      "side": 1,
      "message": "It was the closest I could model to the old behavior, without changing functionality (e.g. throwing, returning, etc...) Do you have a preference to a different solution?",
      "parentUuid": "0ab26832_4e6e7334",
      "range": {
        "startLine": 485,
        "startChar": 8,
        "endLine": 485,
        "endChar": 18
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ad428a8_0f247b67",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 558,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-06-02T14:08:45Z",
      "side": 1,
      "message": "This can be converted into a while loop, then digit can be initialized to TextSourceMap._VLQ_CONTINUATION_MASK and have type number (removing the need for @ts-ignore).",
      "range": {
        "startLine": 558,
        "startChar": 6,
        "endLine": 558,
        "endChar": 18
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49fb8a92_65111d9e",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 558,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-06-03T10:41:06Z",
      "side": 1,
      "message": "I have made several attempts at while-loops and all of my attempts failed tests. After spending quite a lot of time on it, I decided to skip them for now. Do you mind if we punt this to a follow-up CL?",
      "parentUuid": "0ad428a8_0f247b67",
      "range": {
        "startLine": 558,
        "startChar": 6,
        "endLine": 558,
        "endChar": 18
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c306a0cf_0eb51402",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 674,
      "author": {
        "id": 1370170
      },
      "writtenOn": "2020-05-26T13:54:27Z",
      "side": 1,
      "message": "`Runtime.Runtime` - is this intentional?",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bd498ab_2d416018",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 674,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-05-26T14:07:14Z",
      "side": 1,
      "message": "Yes. The first `Runtime` is the filename. The second `Runtime` is the class reference.",
      "parentUuid": "c306a0cf_0eb51402",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d991e2a5_0c6f77c6",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 674,
      "author": {
        "id": 1370170
      },
      "writtenOn": "2020-05-26T14:14:00Z",
      "side": 1,
      "message": "That\u0027s somewhat confusing TBH. Do we plan to make `Runtime` importable as a separate module in future?",
      "parentUuid": "1bd498ab_2d416018",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "417918ef_21932f96",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 674,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-05-26T14:17:36Z",
      "side": 1,
      "message": "No we don\u0027t plan to do so, given that this is the import style for ES modules in DevTools. Yes it is duplicate, but it is what the tools understand and it is consistent throughout the codebase.",
      "parentUuid": "d991e2a5_0c6f77c6",
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4289f3a1_e813c6c4",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 754,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-06-02T14:08:45Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to fix the type of resolve here? I understand it might be difficult because it is an external dependency.",
      "range": {
        "startLine": 754,
        "startChar": 26,
        "endLine": 754,
        "endChar": 33
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "183aa698_869f0b71",
        "filename": "front_end/sdk/SourceMap.js",
        "patchSetId": 2
      },
      "lineNbr": 754,
      "author": {
        "id": 1370170
      },
      "writtenOn": "2020-06-02T14:14:23Z",
      "side": 1,
      "message": "It\u0027s not only external, but also auto-generated; also, `undefined` used by the dependency is actually a better type for noting the absence of value and it is what both JavaScript and TypeScript uses for optional values as well. Unfortunately, Closure Compiler disagrees and uses `null` for `?SomeType` instead.",
      "parentUuid": "4289f3a1_e813c6c4",
      "range": {
        "startLine": 754,
        "startChar": 26,
        "endLine": 754,
        "endChar": 33
      },
      "revId": "492b9e4aaca769088a42681e25ae52fa43ab062f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e5eaa39b_a0768eb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1546253
      },
      "writtenOn": "2022-07-19T08:05:30Z",
      "side": 1,
      "message": "Providing some context for these changes.",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34c22f04_5cb4185f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T09:22:09Z",
      "side": 1,
      "message": "Some notes from our meeting.",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9ca9a3b_4d62b2bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T13:14:58Z",
      "side": 1,
      "message": "A first look, didn\u0027t have time to think about the tests yet, will get back to you tomorrow!",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4105c7cb_51a37a06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-20T07:57:51Z",
      "side": 1,
      "message": "Some more comments, also on testing.\n\nAt this stage, it would be good to have some diagram to see what\u0027s happening in the design doc, something like a sequence diagram (which is also in the linear memory inspector design doc). No need for it to be super pretty, just so that one understands the dependencies here.",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba83aac2_9a625be3",
        "filename": "front_end/panels/sources/ScopeChainSidebarPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 330,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T13:14:58Z",
      "side": 1,
      "message": "nit: `undefined /*address*/`",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fec8cbb3_5d1598a5",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1546253
      },
      "writtenOn": "2022-07-19T08:05:30Z",
      "side": 1,
      "message": "Making static so that we can access this method in LinearMemoryInspectorPane.ts. Maybe we could move it to a utils file along with retrieveObjectSize? Not sure.",
      "range": {
        "startLine": 295,
        "startChar": 2,
        "endLine": 295,
        "endChar": 113
      },
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8c2303d_d8dbe64a",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T09:22:09Z",
      "side": 1,
      "message": "* now we have more dependencies on the linearmemorycontroller from the memoryinspectorpane",
      "parentUuid": "fec8cbb3_5d1598a5",
      "range": {
        "startLine": 295,
        "startChar": 2,
        "endLine": 295,
        "endChar": 113
      },
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e32cf473_bdeef31a",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T13:14:58Z",
      "side": 1,
      "message": "How about always using `obj.inspectableAddress`, and not passing the `memoryAddress`?",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f20afa6a_9845c496",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts",
        "patchSetId": 2
      },
      "lineNbr": 304,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T13:14:58Z",
      "side": 1,
      "message": "Is this also correct for double pointers?",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "407894e3_b1910f18",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts",
        "patchSetId": 2
      },
      "lineNbr": 322,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T09:22:09Z",
      "side": 1,
      "message": "Making things async is not necessarily needed, we can use .then() clause.\n\nFor Kim: double check the use of highlighting and then refreshing thew view",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24cd24c3_71d6b0d4",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorController.ts",
        "patchSetId": 2
      },
      "lineNbr": 322,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T13:14:58Z",
      "side": 1,
      "message": "Ok SGTM regarding how the update highlihgt is requested at the moment. But please add a comment so that people understand why we need to refresh here.\n\nAlso, there\u0027s a refresh button on the memory inspector, we should update the highlightinfo in that case too.",
      "parentUuid": "407894e3_b1910f18",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42848fae_be679c09",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T13:14:58Z",
      "side": 1,
      "message": "I don\u0027t think we should allow undefined for `callframe`. Better catch that outside.",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb744ba_f5733eb6",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-20T07:57:51Z",
      "side": 1,
      "message": "for testing: you can test whether updateHighlightInfo is doing its job: create the pane, and call into updateHighlightInfo. Create a callframe object ({} as ...CallFrame) that has a function `evaluate` and overwrite it.",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14cacebb_00dd9d43",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T09:22:09Z",
      "side": 1,
      "message": "`evaluateExpression` should not be in the view, but rather in the controller",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bcf78f5_52caad3c",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-20T07:57:51Z",
      "side": 1,
      "message": "What do you think about splitting this function up. `evaluateExpression` should, imho, only evaluate the expression and handle the error case. Extracting the highlightInfo should happen outside of it, and since there\u0027s only one callsite of evaluateExpression, you can just add the call to that to where it is used (or alternatively, wrap both functions within a new one).",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e0af8a_ba7d148c",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 206,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T09:22:09Z",
      "side": 1,
      "message": "Add early exits for undefined case",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c2bfe8_4bf1ae19",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 207,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T13:14:58Z",
      "side": 1,
      "message": "Style question, but nit: how about having an early exit for `this.#highlightInfo` too, if it\u0027s not set?",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2a25b78_5f4e04b8",
        "filename": "front_end/ui/components/linear_memory_inspector/LinearMemoryInspectorPane.ts",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2022-07-19T09:22:09Z",
      "side": 1,
      "message": "Maybe add some more sensible output (use description of what you were trying to do and use the res.error)",
      "revId": "a08f208151d0cf55bbf63de9c7634bde5e1409f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
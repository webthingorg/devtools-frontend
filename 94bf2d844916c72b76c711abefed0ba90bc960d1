{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "32cb2b68_c61d250c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-09-19T06:01:42Z",
      "side": 1,
      "message": "I\u0027m wholly unfamiliar with this part of our code. Basically TIL that we built a cache for static templates on top of Lit, so I\u0027ll leave the review up to Jack.\n\nSuperficially I assume that this code affects the code path that most components use in DevTools? The only thing I\u0027m worried about is that for render-heavy code we now do more work to calculate the `staticValuesKey` and I have zero intuition if this is (more or less) for free, or if it impacts performance.",
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e297546e_73d2014f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-09-19T13:34:32Z",
      "side": 1,
      "message": "the lit change lgtm; I\u0027m not convinced on the need to change the setters in the insights code though ðŸ˜Š",
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5471a0c0_0b2a5d97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-09-19T13:37:28Z",
      "side": 1,
      "message": "My read of the code is that because we use static tags in the majority of places (the only place we wouldn\u0027t is this CL if it lands), I don\u0027t think there is that much of a perf hit (if any) as the cache key would never change so we still only compute once. @connor is that correct?",
      "parentUuid": "32cb2b68_c61d250c",
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d13eb72_fcd728da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-19T15:00:56Z",
      "side": 1,
      "message": "\u003e (the only place we wouldn\u0027t is this CL if it lands)\n\n`component.litTagName` is a static tag.\n\n\u003e as the cache key would never change so we still only compute once\n\nYes, the \"flatten\" only is called once per unique combination of (template string invocation, set of static tags).\n\nThe cache lookup for all static tags now use two maps for a double-key lookup (the template array strings from the global registry, and then the static tags join\u0027d together).\n\nRe: Performance impact\n\nhttps://trace.cafe/t/DesBXcue1T - trace of perf panel while moving around cnn.com (incl. a flamegraph of cnn.com). If you look up htmlStatics - which has all the cache key lookups and the call to Lit.html - the entire function is still just 0.1ms.\n\nNote, all this cache lookup stuff is more than just a performance improvement - without the strings array being the equal referentially (object \u003d\u003d\u003d object) Lit will re-create the component on each draw, causing constant flashes of content. Just mentioning b/c I did consider just removing this cache entirely - but that can\u0027t work.",
      "parentUuid": "5471a0c0_0b2a5d97",
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb15949b_adbed58d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-19T15:03:41Z",
      "side": 1,
      "message": "addressed elsewhere - but I\u0027ll just undo this part of the CL.",
      "parentUuid": "e297546e_73d2014f",
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff557e19_3ad3ebb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-09-19T15:13:58Z",
      "side": 1,
      "message": "leaving a lgtm to not block landing this whilst I am offline ðŸ˜„",
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea86f67e_f54d7c23",
        "filename": "front_end/panels/timeline/components/insights/Helpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-09-19T13:34:32Z",
      "side": 1,
      "message": "why do we need to make this change? Was setting each item individually problematic?\n\n(historically we preferred a data object but now with the scheduled renderer we are quite happy to set multiple properties)",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 71,
        "endChar": 3
      },
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e7dee37_c7618d48",
        "filename": "front_end/panels/timeline/components/insights/Helpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-19T14:31:14Z",
      "side": 1,
      "message": "Short answer: I stopped reading before getting to the section that says \"maybe don\u0027t use data setters\": https://chromium.googlesource.com/devtools/devtools-frontend/+/c59526e345ffcad992e7c1d5426bfbeb621da23d/front_end/ui/components/docs/building-ui-documentation/CreatingComponents.md#performance-concerns-with-data-passing - and I changed it assuming that `set data` was the preference given the type safety and the fewer calls to scheduleRender (which I understand is just costing a few map lookups for subsequent calls on each component).\n\nbetween the above doc and https://chromium.googlesource.com/devtools/devtools-frontend/+/c59526e345ffcad992e7c1d5426bfbeb621da23d/front_end/ui/components/docs/building-ui-documentation/ComponentPerformance.md I\u0027m left not totally sure of when to use which pattern (too nuanced / I\u0027m reading to quickly?). Do you see an opportunity to simplify/reduce the documented guidance here?",
      "parentUuid": "ea86f67e_f54d7c23",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 71,
        "endChar": 3
      },
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9625452_20f03c17",
        "filename": "front_end/panels/timeline/components/insights/Helpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2024-09-19T15:13:58Z",
      "side": 1,
      "message": "Apologies this is confusing; it\u0027s changed a bit over the years. I would say that now the preferred approach is individual setters; the look-up for the renderer isn\u0027t costly and it\u0027s preferred because it is easier to check if values have changed and if so early exit. Whereas if we do `.data\u003d{}` we are creating a brand new object every time.\n\nSo I would just undo this part of the CL and stick to individual setters like it had already.",
      "parentUuid": "1e7dee37_c7618d48",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 71,
        "endChar": 3
      },
      "revId": "94bf2d844916c72b76c711abefed0ba90bc960d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
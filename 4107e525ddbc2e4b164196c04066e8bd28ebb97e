{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "138b2065_fbe95127",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 489,
      "author": {
        "id": 1541419
      },
      "writtenOn": "2023-05-26T09:18:54Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/devtools/devtools-frontend/+/4567965\n\nI prefer it to fail by exhaustiveness check at the roll protocol if new PrefetchStatus. It prevents to forget update of strings.\nMoreover, current implementation throws an error beacuse it evaluates `undefined.name()`.",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e01848a_c051aa74",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 489,
      "author": {
        "id": 1517927
      },
      "writtenOn": "2023-05-29T02:01:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "138b2065_fbe95127",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d09c759e_03e9daa1",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 489,
      "author": {
        "id": 1541419
      },
      "writtenOn": "2023-05-29T04:47:12Z",
      "side": 1,
      "message": "Unfortunately, this (patchset 24) doesn\u0027t check exhaustiveness. In TypeScript, easy way of exhaustiveness check with switch is diverging the default clause with never type. My above CL utilizes it.\n\nAlso, could you add this instruction? https://docs.google.com/document/d/1PnrfowsZMt62PX1EvvTp2Nqs3ji1zrklrAEe1JYbkTk",
      "parentUuid": "9e01848a_c051aa74",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3deee613_a27bf1a6",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 489,
      "author": {
        "id": 1517927
      },
      "writtenOn": "2023-05-29T10:06:47Z",
      "side": 1,
      "message": "Hmm I see. I was thinking this can be prevented at compiled time. But I can\u0027t use `prefetchStatus as \u0027See https://docs.google.com/document/d/1PnrfowsZMt62PX1EvvTp2Nqs3ji1zrklrAEe1JYbkTk\u0027`, what is required to cast a variable to never type? I\u0027m kind of confused.",
      "parentUuid": "d09c759e_03e9daa1",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "003fcc72_389d3dec",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 489,
      "author": {
        "id": 1541419
      },
      "writtenOn": "2023-05-29T10:14:49Z",
      "side": 1,
      "message": "How my CL works: https://zenn.dev/qnighy/articles/462baa685c80e2\n\nI guess you can use `prefetchStatus as \u0027See https://docs.google.com/document/d/1PnrfowsZMt62PX1EvvTp2Nqs3ji1zrklrAEe1JYbkTk\u0027`.\nType of left hand side is `PrefetchStatus`, type of right hand side is `\u0027See https://docs.google.com/document/d/1PnrfowsZMt62PX1EvvTp2Nqs3ji1zrklrAEe1JYbkTk\u0027`. Always differs.",
      "parentUuid": "3deee613_a27bf1a6",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48b60996_d8fe33b8",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 489,
      "author": {
        "id": 1517927
      },
      "writtenOn": "2023-05-30T02:12:46Z",
      "side": 1,
      "message": "Hmmmm I tried, but it doesn\u0027t work locally and on CQ. https://ci.chromium.org/ui/p/devtools-frontend/builders/try/devtools_frontend_linux_dbg/b8779761323839780849/overview\nI\u0027m not quite sure about the difference between PrerenderStatus and PrefetchStatus.",
      "parentUuid": "003fcc72_389d3dec",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d61b7707_af1d653a",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 489,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2023-05-30T04:19:53Z",
      "side": 1,
      "message": "robertlin@: Looks like this CL is missing enums added recently and then the exhaustiveness check is failing as expected?\n\n```\n  kPrefetchNotEligibleBatterySaverEnabled \u003d 47,\n  kPrefetchNotEligiblePreloadingDisabled \u003d 48,\n  kPrefetchEvicted \u003d 49,\n```\n\nhttps://chromium-review.googlesource.com/c/chromium/src/+/4539261\nhttps://chromium-review.googlesource.com/c/chromium/src/+/4525497\n\n(Sorry if this is unrelated)",
      "parentUuid": "48b60996_d8fe33b8",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0642d655_e881a396",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 564,
      "author": {
        "id": 1541419
      },
      "writtenOn": "2023-05-26T09:18:54Z",
      "side": 1,
      "message": "[nit] In the other parts, I sort prefetch \u003c prerender (alphabetical order). Please follow this.",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7398dbbd_20f3b31b",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 564,
      "author": {
        "id": 1517927
      },
      "writtenOn": "2023-05-29T02:01:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0642d655_e881a396",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "150f6508_dddd8ccf",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 595,
      "author": {
        "id": 1541419
      },
      "writtenOn": "2023-05-26T09:18:54Z",
      "side": 1,
      "message": "Ditto (order)",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2e3268f_a39ee305",
        "filename": "front_end/panels/application/preloading/components/PreloadingDetailsReportView.ts",
        "patchSetId": 18
      },
      "lineNbr": 595,
      "author": {
        "id": 1517927
      },
      "writtenOn": "2023-05-29T02:01:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "150f6508_dddd8ccf",
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85a2632a_0cd21f5a",
        "filename": "test/unittests/front_end/panels/application/preloading/components/UsedPreloadingView_test.ts",
        "patchSetId": 18
      },
      "lineNbr": 134,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2023-05-26T05:50:20Z",
      "side": 1,
      "message": "Can we also have a test wit non-null status?",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 134,
        "endChar": 29
      },
      "revId": "4107e525ddbc2e4b164196c04066e8bd28ebb97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
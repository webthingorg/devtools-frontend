{
  "comments": [
    {
      "key": {
        "uuid": "010bdded_c5dd5e44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-09-08T07:33:24Z",
      "side": 1,
      "message": "My comments from the original CL https://chromium-review.googlesource.com/c/devtools/devtools-frontend/+/2391247 still apply to the code that you moved here.",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9931277_57292105",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-07T15:08:13Z",
      "side": 1,
      "message": "textContent is only null if element is a document or doctype node, which I think never applies to this case, since we only ever pass regular nodes that we create and contorl (of course, it would be good to double-check callsites to confirm this). In that case, it would be better to do an inline `/** @type */` cast instead.",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10312c87_a5545d76",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-09-08T07:33:24Z",
      "side": 1,
      "message": "This sounds like we should change the argument type to HTMLElement?",
      "parentUuid": "e9931277_57292105",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d83b74_55204968",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1439900
      },
      "writtenOn": "2020-09-08T08:43:50Z",
      "side": 1,
      "message": "Typescript doesn\u0027t seem to know this. Even if it is an HTMLElement .textContent is still `string | null`. The semantically most correct solution seems to be updating to HTMLElement but still casting. We have to update quite a lot of call sites to HTMLElement as well though. WDYT?",
      "parentUuid": "10312c87_a5545d76",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1271c12f_145ea834",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-09-09T14:15:03Z",
      "side": 1,
      "message": "Let\u0027s not update to HTMLElement just yet. For the casting vs || I defer to Mathias.",
      "parentUuid": "a5d83b74_55204968",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eecf6047_027ec007",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-09T14:28:04Z",
      "side": 1,
      "message": "I weakly prefer the comment-casting over `||` since it’s more precise — we explicitly never hit the non-element node case here.",
      "parentUuid": "1271c12f_145ea834",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90831d5b_7160de16",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-09-09T14:36:59Z",
      "side": 1,
      "message": "what about an explicit if(element.textContent \u003d\u003d\u003d null) throw(\"this went wrong\") or an early return?\n\nAnd then from then on in this code TypeScript will realise that element.textContent must exist.",
      "parentUuid": "eecf6047_027ec007",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48f6eb04_60d05f85",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1439900
      },
      "writtenOn": "2020-09-10T08:10:30Z",
      "side": 1,
      "message": "Early return seems like a good option to me. WDYT Mathias?",
      "parentUuid": "90831d5b_7160de16",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c0dbc90_bee55d48",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-10T08:20:11Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "48f6eb04_60d05f85",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9700b137_1b0ff030",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1439900
      },
      "writtenOn": "2020-09-10T09:16:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0c0dbc90_bee55d48",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a21518db_a48a534d",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-07T15:08:13Z",
      "side": 1,
      "message": "It looks like .show() actually allows omitting the document argument: https://source.chromium.org/chromium/chromium/src/+/master:third_party/devtools-frontend/src/front_end/ui/Dialog.js;l\u003d78-79;drc\u003d80d8265054b2c46496e85ff2a155b987bdb97b93 In that case, should we update its typings accordingly instead of changing this line?",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "391287c6_94d45e01",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1439900
      },
      "writtenOn": "2020-09-08T08:43:50Z",
      "side": 1,
      "message": "Aha. Dialog.js is not yet typescriptified, so it seems ts instead pulls the type from the superclass `GlassPane` which only takes a Document.\nTypescriptification of Dialog.js seems blocked (https://crrev.com/c/2354092).\nShould we maybe just mark this line `@ts-ignore`?",
      "parentUuid": "a21518db_a48a534d",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81659d51_6b9f48ea",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-09-09T14:15:03Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "391287c6_94d45e01",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c156bdb1_e7b5b68b",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-07T15:08:13Z",
      "side": 1,
      "message": "Unrelated to your change, but now that we’re here, let’s save a function call:\n\n    this._progressBarElement.classList.remove(\u0027filtered-widget-progress-fade\u0027, \u0027hidden\u0027);",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bcb769e_59afc495",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1439900
      },
      "writtenOn": "2020-09-08T08:43:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c156bdb1_e7b5b68b",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18d267e1_25e305ba",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-07T15:08:13Z",
      "side": 1,
      "message": "Style: let’s use a literal when possible:\n\n    [...bestItems, ...overflowItems, ...filteredItems]",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e0d2fdb_2c47fd99",
        "filename": "front_end/quick_open/FilteredListWidget.js",
        "patchSetId": 1
      },
      "lineNbr": 497,
      "author": {
        "id": 1439900
      },
      "writtenOn": "2020-09-08T08:43:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18d267e1_25e305ba",
      "revId": "d931fc1f0b59daed72971b2f294768ac986e96fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
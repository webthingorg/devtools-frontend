{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c15d8c2e_e0acf6b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2022-06-24T21:04:20Z",
      "side": 1,
      "message": "Is there a crbug for this or did you just notice it yourself?",
      "revId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a58f600_3043e755",
        "filename": "front_end/panels/lighthouse/LighthouseController.ts",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2022-06-24T21:04:54Z",
      "side": 1,
      "message": "This is a pretty big try/catch. Which line does the error happen?",
      "revId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c0ec553_af3867f9",
        "filename": "front_end/panels/lighthouse/LighthouseController.ts",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2022-06-29T23:50:10Z",
      "side": 1,
      "message": "313, `invoke_getUsageAndQuota` returns `{}`",
      "parentUuid": "1a58f600_3043e755",
      "revId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be083fda_8810c447",
        "filename": "front_end/panels/lighthouse/LighthouseController.ts",
        "patchSetId": 2
      },
      "lineNbr": 327,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2022-06-24T21:04:20Z",
      "side": 1,
      "message": "When catching and ignoring a specific error, it\u0027s important to check that the error being ignored is what you expect (and if not, re-throw).\n\nBut then, we\u0027re asserting on some error message (or doing an instanceof?) and in that case this may need a test to prevent upstream from breaking the try/catch behavior.",
      "revId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de77cb95_63eade20",
        "filename": "front_end/panels/lighthouse/LighthouseController.ts",
        "patchSetId": 2
      },
      "lineNbr": 327,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2022-06-29T23:50:10Z",
      "side": 1,
      "message": "There wasn\u0027t a specific error. This is the second time I\u0027ve had to come into this file to solve a bug where the return value disobeys our types. The catch block is supposed to catch any generic error because we don\u0027t want future breakages to fail fatally.",
      "parentUuid": "be083fda_8810c447",
      "revId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "78e82505c19c0636c46c0705e54ccd69ffa4d362",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}
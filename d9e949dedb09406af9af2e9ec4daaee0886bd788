{
  "comments": [
    {
      "key": {
        "uuid": "22374aaf_f549c748",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-08-19T11:13:41Z",
      "side": 1,
      "message": "PTAL, I am a bit unsure about this CL, let me know what you think.",
      "revId": "d9e949dedb09406af9af2e9ec4daaee0886bd788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee4470cf_70616e44",
        "filename": "front_end/ui/Icon.js",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-08-19T11:19:33Z",
      "side": 1,
      "message": "Technically this could be a regression, as we previously had the `console.assert`. But if DevTools builds and tests pass, I think we are good to go.",
      "range": {
        "startLine": 59,
        "startChar": 6,
        "endLine": 59,
        "endChar": 31
      },
      "revId": "d9e949dedb09406af9af2e9ec4daaee0886bd788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc9b0413_c3547c9e",
        "filename": "front_end/ui/Icon.js",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-08-19T11:19:33Z",
      "side": 1,
      "message": "Nit: This should be a `!Descriptor` right? Or is that not possible?",
      "range": {
        "startLine": 115,
        "startChar": 24,
        "endLine": 115,
        "endChar": 25
      },
      "revId": "d9e949dedb09406af9af2e9ec4daaee0886bd788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02d507b5_858519d9",
        "filename": "front_end/ui/Icon.js",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-08-19T11:13:41Z",
      "side": 1,
      "message": "Using @typdef {optionalFieldFoo?: string} causes a parse error in Closure. This was the only way to make both (Closure/TS) happy at the same time.",
      "range": {
        "startLine": 278,
        "startChar": 4,
        "endLine": 278,
        "endChar": 32
      },
      "revId": "d9e949dedb09406af9af2e9ec4daaee0886bd788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98101a38_8f982eaf",
        "filename": "front_end/ui/Icon.js",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-08-19T11:19:33Z",
      "side": 1,
      "message": "JSDoc doesn\u0027t have a concept of optional fields. Instead, you have to make it an explicit union of `(Type|undefined)` (sadly). It is my biggest pet peeve with JSDoc support in Closure.\n\nI would prefer to not introduce TypeScript-specific Typedef syntax, as it could get confusing. Could we mark the optional fields as `|undefined`? Yes that is more verbose (sadly), but it seems like the most maintainable solution forward.",
      "parentUuid": "02d507b5_858519d9",
      "range": {
        "startLine": 278,
        "startChar": 4,
        "endLine": 278,
        "endChar": 32
      },
      "revId": "d9e949dedb09406af9af2e9ec4daaee0886bd788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
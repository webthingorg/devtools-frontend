{
  "comments": [
    {
      "key": {
        "uuid": "2c9b5195_d758787a",
        "filename": "front_end/elements/Adorner.js",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1341669
      },
      "writtenOn": "2020-04-17T21:16:10Z",
      "side": 1,
      "message": "In the grid spec, we\u0027ve discussed being able to click/activate adorners. Do we plan to add click handlers/focusability/enter keypress handlers/callbacks here?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 39
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "325c541b_99eb2614",
        "filename": "front_end/elements/Adorner.js",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1341669
      },
      "writtenOn": "2020-04-17T21:16:10Z",
      "side": 1,
      "message": "We have the ARIAUtils.js file to set this attribute for most elements. look for the setAccessibleName function\n\nAlso, I\u0027m not sure exactly what the expected behavior for SR users would be. My guess is that the accessible name of the element in the tree outline would have it\u0027s accessible text updated to read out adorner names. I\u0027m not sure this would ever get read since it\u0027s not currently focusable?",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 79
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34d8ff4e_89c77866",
        "filename": "front_end/elements/Adorner.js",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-04-16T15:05:29Z",
      "side": 1,
      "message": "If we use `append` instead of `appendChild` here, we get the same functionality with added support for strings of HTML in addition to `HTMLElement`s. WDYT, does this seem worthwhile?",
      "range": {
        "startLine": 32,
        "startChar": 12,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1692625a_c72e73e1",
        "filename": "front_end/elements/ElementsTreeElement.js",
        "patchSetId": 1
      },
      "lineNbr": 1853,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-04-17T11:31:20Z",
      "side": 1,
      "message": "Should this add the adorner to this._adorners?\n\nWould it be possible to test these three methods?",
      "range": {
        "startLine": 1853,
        "startChar": 2,
        "endLine": 1853,
        "endChar": 11
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b868ab3b_eccaa558",
        "filename": "front_end/elements/ElementsTreeElement.js",
        "patchSetId": 1
      },
      "lineNbr": 1853,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2020-04-17T12:58:52Z",
      "side": 1,
      "message": "Yes eventually it should add itself to the internal list of _adorners. Now it\u0027s not done because I haven\u0027t figured out if/how ElementsTreeElement should provide APIs to reorder adorners, e.g. insert in the middle, at the front, etc. Thanks for noticing!\n\nIt\u0027s possible to test these three methods. I\u0027ll add the tests soon, together with Adorner\u0027s test as well.",
      "parentUuid": "1692625a_c72e73e1",
      "range": {
        "startLine": 1853,
        "startChar": 2,
        "endLine": 1853,
        "endChar": 11
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c552dac1_5e5676e4",
        "filename": "front_end/elements/elements.js",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-04-17T08:44:27Z",
      "side": 1,
      "message": "I don\u0027t think you need this given the import below :)",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bbab171_b6284cb0",
        "filename": "front_end/elements/elements.js",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1380460
      },
      "writtenOn": "2020-04-17T11:12:29Z",
      "side": 1,
      "message": "What are the other double-imports for? I was actually confused and thought it would be better to follow suit.",
      "parentUuid": "c552dac1_5e5676e4",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d2c1e49_96646852",
        "filename": "front_end/elements/elements.js",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-04-17T12:26:29Z",
      "side": 1,
      "message": "Oh Sorry I didn\u0027t realise so many are duplicated. I\u0027m not sure then - I\u0027ll ping Tim who probably has more context.",
      "parentUuid": "4bbab171_b6284cb0",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51da672a_4d06f0b3",
        "filename": "front_end/elements/elements.js",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-04-17T13:29:38Z",
      "side": 1,
      "message": "The side-effect import of `import \u0027./Adorner.js\u0027` is required if you put symbols on the global namespace in `Adorner.js` that are required by other files. If you don\u0027t do that (and I don\u0027t think you do), you don\u0027t need to add this side-effect import.",
      "parentUuid": "3d2c1e49_96646852",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cd30e02_8f0dd07a",
        "filename": "front_end/elements/elementsTreeOutline.css",
        "patchSetId": 1
      },
      "lineNbr": 367,
      "author": {
        "id": 1341669
      },
      "writtenOn": "2020-04-17T21:16:10Z",
      "side": 1,
      "message": "If I understand correctly, each type of adorner would need to set its own colors/size in css as they are added? Would it make sense to add these as properties on the custom element so they could be passed in at construction?",
      "range": {
        "startLine": 363,
        "startChar": 0,
        "endLine": 367,
        "endChar": 1
      },
      "revId": "3afb4765ddff32c8e54c5ac7f0ba4cf0d4074024",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b6c3225b_a93f4445",
        "filename": "front_end/generated/InspectorBackendCommands.js",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2023-07-03T06:52:28Z",
      "side": 1,
      "message": "should we have a typeRef to a primitive type?",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9ac1ff4_1301e2c8",
        "filename": "front_end/generated/InspectorBackendCommands.js",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1581285
      },
      "writtenOn": "2023-07-03T08:15:45Z",
      "side": 1,
      "message": "I figured that for arrays it made sense so that we know what type the array expects",
      "parentUuid": "b6c3225b_a93f4445",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d43adc15_3ebcfee3",
        "filename": "front_end/generated/InspectorBackendCommands.js",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2023-07-03T08:16:54Z",
      "side": 1,
      "message": "let\u0027s have the itemType and itemTypeRef for array? so that t here is no confusing about what kind of values are in the typeRefs?",
      "parentUuid": "f9ac1ff4_1301e2c8",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23e7b88a_1173f4a6",
        "filename": "front_end/generated/InspectorBackendCommands.js",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1581285
      },
      "writtenOn": "2023-07-03T08:21:21Z",
      "side": 1,
      "message": "Actually since I convert strings to boolean and numbers after there is not a real need to know if it\u0027s pritimime type so maybe lets just keep typeRef with typeRef being a real reference (so not primitive type)",
      "parentUuid": "d43adc15_3ebcfee3",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "592d0c45_de36f284",
        "filename": "front_end/generated/InspectorBackendCommands.js",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2023-07-03T08:27:09Z",
      "side": 1,
      "message": "I think we should not use typeRef for the array items nonetheless. Imagine the following protocol definition (not sure if we have it in practice but I think it might be possible if not now but later):\n\n```\ntype A extends object\n    B data\n\ntype B extends array of string\n``` \n\n\nso the type A will have the following parameters `[{\"name\", \"type\": \"array\", \"typeRef\": ???}]` should typeRef say B or string? I think we should only use it for B. WDYT?",
      "parentUuid": "23e7b88a_1173f4a6",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f68a0a64_8621c425",
        "filename": "front_end/panels/protocol_monitor/components/JSONEditor.ts",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2023-07-03T06:52:28Z",
      "side": 1,
      "message": "can we try to do this without an extra variable?",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a502570_218f9327",
        "filename": "front_end/panels/protocol_monitor/components/JSONEditor.ts",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 1581285
      },
      "writtenOn": "2023-07-03T08:15:45Z",
      "side": 1,
      "message": "I figured that for arrays it made sense so that we know what type the array expects",
      "parentUuid": "f68a0a64_8621c425",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b44e2a56_89c0e6fd",
        "filename": "front_end/panels/protocol_monitor/components/JSONEditor.ts",
        "patchSetId": 3
      },
      "lineNbr": 441,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2023-07-03T06:52:28Z",
      "side": 1,
      "message": "Nice!",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09e42d42_2c927be0",
        "filename": "scripts/build/code_generator_frontend.py",
        "patchSetId": 3
      },
      "lineNbr": 328,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2023-07-03T07:57:42Z",
      "side": 1,
      "message": "I think this check won\u0027t work as expected here? we are checking for the presence of the dot and this would not work now I assume (same is above)",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6097670f_ad6c61cb",
        "filename": "scripts/build/code_generator_frontend.py",
        "patchSetId": 3
      },
      "lineNbr": 328,
      "author": {
        "id": 1581285
      },
      "writtenOn": "2023-07-03T08:15:45Z",
      "side": 1,
      "message": "Yeah I have no idea why this : json_ref !\u003d \"\"  is here",
      "parentUuid": "09e42d42_2c927be0",
      "revId": "eb2661cd68be2c6f7d16bf40bebb08bea6036a90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
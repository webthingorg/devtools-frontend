{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e46a0c2_54f0ac37",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-10-04T04:38:57Z",
      "side": 1,
      "message": "lgtm",
      "revId": "dc81e30b23f151242443f0181858f68b826bae32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d20bb417_8d052391",
        "filename": "test/unittests/front_end/panels/application/InterestGroupStorageView_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2023-10-02T17:57:41Z",
      "side": 1,
      "message": "So I am a bit unsure as to what to do here --- the similar tests this was based on are disabled due to flakiness, and I haven\u0027t had much luck reproducing that (it doesn\u0027t help since there doesn\u0027t seem to be a working equivalent of --gtest_repeat, and the equivalent of --gtest_filter seems to fail to launch half the time).",
      "revId": "dc81e30b23f151242443f0181858f68b826bae32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "992bb07a_d8d1a07b",
        "filename": "test/unittests/front_end/panels/application/InterestGroupStorageView_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-10-04T04:38:57Z",
      "side": 1,
      "message": "If you mark a test as `it.only` it will only run that test. This also works on all `describe*` blocks.\n\nIn these tests the `await raf()` looks a bit suspicious to me. I don\u0027t think it guarantees that everything triggered by the dispatchedEvent finished running. Especially if the event listener triggers more async things.\n\nThe change is not that complex and the unit test similar to others, so I\u0027d be fine to also skip this unit test as well under the same crbug and let the owner fix it together with the rest.",
      "parentUuid": "d20bb417_8d052391",
      "revId": "dc81e30b23f151242443f0181858f68b826bae32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "289d1849_c4b82533",
        "filename": "test/unittests/front_end/panels/application/InterestGroupStorageView_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2023-10-04T14:11:36Z",
      "side": 1,
      "message": "\u003e If you mark a test as `it.only` it will only run that test. This also works on all `describe*` blocks.\n\nThat seems to fail some of the time the same way as --mocha-fgrep does:\n04 10 2023 09:47:46.036:INFO [Chrome Headless 119.0.0.0 (Linux x86_64)]: Connected on socket 8uEuYqV2fqUGCJtaAAAB with id 46555580\nChrome Headless 119.0.0.0 (Linux x86_64) ERROR\n  Uncaught Error loading out/Default/gen/test/unittests/front_end/test_setup/test_setup.js\n  at http://localhost:9876/context.html:7394:311\n\nFinished in 2.214 secs / 0 secs @ 09:47:48 GMT-0400 (Eastern Daylight Time)\n\nSUMMARY:\nâœ” 0 tests completed\n\n(This would be a bit more helpful if it printed anything about the error... and context.html looks to be template-expanded by something at runtime, so line numbers in it are unhelpful).\n\n\u003e \n\u003e In these tests the `await raf()` looks a bit suspicious to me. I don\u0027t think it guarantees that everything triggered by the dispatchedEvent finished running. Especially if the event listener triggers more async things.\n\nThis does look suspect since there is indeed some async processing happening, but the flake looks like a timeout, so that\u0027s probably not it (though I think the test fixture does weird stuff with requestAnimationFrame?). Is there a way of waiting on DOM contents somehow? An alternative would be to do a watch on setSidebarWidget like the sinon stuff but with a promise --- is something like that available? \n\n\u003e \n\u003e The change is not that complex and the unit test similar to others, so I\u0027d be fine to also skip this unit test as well under the same crbug and let the owner fix it together with the rest.\n\nWell... The author of the other tests is on the same team as me, and I don\u0027t think he knew about them being disabled until I mentioned it (and I may have been too vague), and he has enough of other fires to deal with. Though the bug is still open, so maybe it will get fixed from the devtools-frontend side...\n\nAnd it would be nice to have a test to be able to backport it, since it\u0027s a potentially confusing thing (although only if people are being silly, but then they need help from devtools more than usual?), and it\u0027s very early in new branch.",
      "parentUuid": "992bb07a_d8d1a07b",
      "revId": "dc81e30b23f151242443f0181858f68b826bae32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5914515b_249f0941",
        "filename": "test/unittests/front_end/panels/application/InterestGroupStorageView_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-10-04T15:13:22Z",
      "side": 1,
      "message": "Yeah I see the error you mentioned above myself and I tried to look into it but couldn\u0027t figure it out. Best guess it\u0027s the new headless mode that we enabled to run Karma.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/test/unittests/karma.conf.js;l\u003d241;drc\u003d8416b07f3bed542fcaaaa10274e46a462d273371\n\nIf you change the `--headless\u003dnew` to just `--headless` it improved the situation for me.\n\nAs for the async workload: We sometimes add an empty `FooDoneForTest` method to components that we call when the work is done. The test can then stub it out and with sinon. You can use `callFake` on a sinon stub to resolve a promise. That way you can basically `await` for the `FooDoneForTest` method to be called.",
      "parentUuid": "289d1849_c4b82533",
      "revId": "dc81e30b23f151242443f0181858f68b826bae32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46b021ea_4ed057be",
        "filename": "test/unittests/front_end/panels/application/InterestGroupStorageView_test.ts",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2023-10-04T15:39:16Z",
      "side": 1,
      "message": "Done it this way; thanks for the suggestion, and PTAL?",
      "parentUuid": "5914515b_249f0941",
      "revId": "dc81e30b23f151242443f0181858f68b826bae32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "510d10ab_39782bb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-30T07:12:36Z",
      "side": 1,
      "message": "I like the use of \u003cbutton\u003e over \u003cdiv\u003e here, and appreciate you providing the before/after videos. Thanks!\n\nThe code changes LGTM % nits, but please wait for Sigurd to also take a look.",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8c477ac_aec223ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-09-30T07:43:52Z",
      "side": 1,
      "message": "Overall LGTM with nits. \n\nFrom the UX perspective, I\u0027d prefer a vertical bar | for separating the groups, as it doesn\u0027t consume as much vertical space.",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb454bd6_04955bf0",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-30T07:12:36Z",
      "side": 1,
      "message": "nit: I would have ordered this the other way around. First make it hidden, then add the event listener. WDYT?",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0a24600_344a9342",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-09-30T20:58:49Z",
      "side": 1,
      "message": "Good idea, willfix",
      "parentUuid": "fb454bd6_04955bf0",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9eea879_3dc1d859",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-09-30T07:43:52Z",
      "side": 1,
      "message": "The old logic always created the counter, and hid it. Your refactoring introduces a lot of \n\n  if(this._violationCounter) \n\nchecks. Wouldn\u0027t it be easier to stay with the old logic and have it hidden by default?",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 34
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a235ed0_5f7b6e9e",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-09-30T20:58:49Z",
      "side": 1,
      "message": "Good question - previously, there would be experiment checks to see if Spotlight was enabled with initialization and every update call.\n\nAs an \"unstable\" experiment my intuition is that most users have it off. However, with the old logic, each update calls isEnabled and reads from local storage, and the initialization step creates an element that never is shown. Both feel like unnecessary performance hits.\n\nSince DevTools has to be restarted anyway for the experiment to be turned on, I figure it\u0027s better for the check to take place once during initialization, and only create/update the element if it exists. TypeScript recognizes the type as Element|null, so potential null pointer accesses should be prevented as well ðŸ˜Š",
      "parentUuid": "c9eea879_3dc1d859",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 34
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c236717a_580b81c6",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-10-01T06:53:59Z",
      "side": 1,
      "message": "I don\u0027t think the performance argument is very strong, and the old design was simpler.",
      "parentUuid": "9a235ed0_5f7b6e9e",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 34
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9bf4b25_cd1c9c7f",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-10-01T19:48:13Z",
      "side": 1,
      "message": "Hmm, I disagree - the old design enables the possibility of an intermediate state where the counter exists but isn\u0027t being used or could be mounted unintentionally (ex crbug 1132775). I feel it\u0027s overall safer to make the element null to remove the chance of that happening, and null checks should be TS-compiler enforced.",
      "parentUuid": "c236717a_580b81c6",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 34
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0d34e57_6f66493a",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-30T07:12:36Z",
      "side": 1,
      "message": "nit: Comments should be full sentences, so include a period at the end.",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "365aefda_f7685922",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-09-30T20:58:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a0d34e57_6f66493a",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02cc2fb2_a2a9bd33",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 148,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-09-30T07:43:52Z",
      "side": 1,
      "message": "Would it make sense to create a function for this logic? It is used 4 times.",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 148,
        "endChar": 5
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "507a6e47_ac9f7105",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 148,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-09-30T20:58:49Z",
      "side": 1,
      "message": "Good question - definitely considered this, but the localization engine makes it difficult. Concatenating the value and the singular / plural variants of the word results in a localized string that\u0027s just composed of two parameters, which is hard to provide context for translation. We also can\u0027t tack on \u0027s\u0027 to the end to make it plural, which would also not fare well with translation. Since the practical limit to the number of counters we show in DevTools is small, I think it\u0027s fine that this code is repeated here.",
      "parentUuid": "02cc2fb2_a2a9bd33",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 148,
        "endChar": 5
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "980ebd6f_45e22f6c",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 148,
      "author": {
        "id": 1119600
      },
      "writtenOn": "2020-10-01T06:53:59Z",
      "side": 1,
      "message": "Hmm, I would have thought this is a standard problem for localization (it must come up everywhere), so there should be a standard solution.",
      "parentUuid": "507a6e47_ac9f7105",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 148,
        "endChar": 5
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc487b9a_65cc4f24",
        "filename": "front_end/console_counters/WarningErrorCounter.js",
        "patchSetId": 8
      },
      "lineNbr": 148,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-10-01T19:48:13Z",
      "side": 1,
      "message": "Yeah, I agree. Unfortunately loc v1 doesn\u0027t support something like this because localized string declarations are shared across all of DevTools, and a generic concatenation or pluralization string  may not be suitable in context in a different location. Loc v2 is intended to resolve this by enabling strings to be isolated to their respective modules.",
      "parentUuid": "980ebd6f_45e22f6c",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 148,
        "endChar": 5
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fa71357_c2285af8",
        "filename": "front_end/issues/issues_strings.grdp",
        "patchSetId": 8
      },
      "lineNbr": 108,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-30T07:12:36Z",
      "side": 1,
      "message": "typo: Tooltip",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40c4a80f_6f7bbbe3",
        "filename": "front_end/issues/issues_strings.grdp",
        "patchSetId": 8
      },
      "lineNbr": 108,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-09-30T20:58:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8fa71357_c2285af8",
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "964243cf_42147ee3",
        "filename": "front_end/issues/issues_strings.grdp",
        "patchSetId": 8
      },
      "lineNbr": 132,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2020-09-30T07:12:36Z",
      "side": 1,
      "message": "same typo",
      "range": {
        "startLine": 132,
        "startChar": 70,
        "endLine": 132,
        "endChar": 76
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee013463_a76bb336",
        "filename": "front_end/issues/issues_strings.grdp",
        "patchSetId": 8
      },
      "lineNbr": 132,
      "author": {
        "id": 1363999
      },
      "writtenOn": "2020-09-30T20:58:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "964243cf_42147ee3",
      "range": {
        "startLine": 132,
        "startChar": 70,
        "endLine": 132,
        "endChar": 76
      },
      "revId": "826cb41a88d9eeef40e247e8313776bd2a914db6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d241fc7b_a01a7d83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1324251
      },
      "writtenOn": "2022-11-14T18:29:27Z",
      "side": 1,
      "message": "Thank you, please take another look!",
      "revId": "7b397abef92805bade1de9db5889ff4e05703e4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63281d8c_330fdf08",
        "filename": "test/unittests/front_end/panels/application/SharedStorageModel_test.ts",
        "patchSetId": 35
      },
      "lineNbr": 243,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-11-15T08:18:28Z",
      "side": 1,
      "message": "Why would you use spy for these commands and mock handlers for those above?\nI\u0027d fine with either way, but let\u0027s be consistent.",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 243,
        "endChar": 105
      },
      "revId": "7b397abef92805bade1de9db5889ff4e05703e4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046040a0_b324fb30",
        "filename": "test/unittests/front_end/panels/application/SharedStorageModel_test.ts",
        "patchSetId": 35
      },
      "lineNbr": 243,
      "author": {
        "id": 1324251
      },
      "writtenOn": "2022-11-15T15:07:31Z",
      "side": 1,
      "message": "They all have both spies and mock handlers (so I thought that I was being consistent).  They need the mock handlers for the test to work with the mock connection.  Do you want me to remove the spies?",
      "parentUuid": "63281d8c_330fdf08",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 243,
        "endChar": 105
      },
      "revId": "7b397abef92805bade1de9db5889ff4e05703e4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bafa6b9_a850c779",
        "filename": "test/unittests/front_end/panels/application/SharedStorageModel_test.ts",
        "patchSetId": 35
      },
      "lineNbr": 243,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-11-15T15:10:36Z",
      "side": 1,
      "message": "If all you want is to make these method return and make sure they were called, you can say \n\n    const getEntriesSpy \u003d sinon.stub(sharedStorageModel.storageAgent, \u0027invoke_getSharedStorageEntries\u0027).resolves({});\n    \n and remove calls to setMockConnectionResponseHandler",
      "parentUuid": "046040a0_b324fb30",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 243,
        "endChar": 105
      },
      "revId": "7b397abef92805bade1de9db5889ff4e05703e4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25f6b8be_80c07a03",
        "filename": "test/unittests/front_end/panels/application/SharedStorageModel_test.ts",
        "patchSetId": 35
      },
      "lineNbr": 243,
      "author": {
        "id": 1324251
      },
      "writtenOn": "2022-11-15T16:06:25Z",
      "side": 1,
      "message": "Thank you.  Apparently it\u0027s not quite as straightforward as that... it looks like I would have to implement `getError` according to the compiler:\n```\nArgument of type \u0027{}\u0027 is not assignable to parameter of type \u0027ProtocolResponseWithError\u0027.\n  Property \u0027getError\u0027 is missing in type \u0027{}\u0027 but required in type \u0027ProtocolResponseWithError\u0027.\n  ```",
      "parentUuid": "6bafa6b9_a850c779",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 243,
        "endChar": 105
      },
      "revId": "7b397abef92805bade1de9db5889ff4e05703e4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0470d5ef_c6b90d2b",
        "filename": "test/unittests/front_end/panels/application/SharedStorageModel_test.ts",
        "patchSetId": 35
      },
      "lineNbr": 243,
      "author": {
        "id": 1324251
      },
      "writtenOn": "2022-11-15T16:07:42Z",
      "side": 1,
      "message": "Which basically does the work of `MockConnection` over again.  Would you like me to remove the spies?",
      "parentUuid": "25f6b8be_80c07a03",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 243,
        "endChar": 105
      },
      "revId": "7b397abef92805bade1de9db5889ff4e05703e4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd3f6ba_8bd334a9",
        "filename": "test/unittests/front_end/panels/application/SharedStorageModel_test.ts",
        "patchSetId": 35
      },
      "lineNbr": 243,
      "author": {
        "id": 1511722
      },
      "writtenOn": "2022-11-15T16:10:48Z",
      "side": 1,
      "message": "Ok, replace `{}` with `{getError:()\u003d\u003enull}`\n\nIf you feel strongly about keeping `setMockConnectionResponseHandler` you can do that, and track invocations in it instead of spies. \n\nI just don\u0027t want us to mock the same thing twice in a slightly different way.",
      "parentUuid": "0470d5ef_c6b90d2b",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 243,
        "endChar": 105
      },
      "revId": "7b397abef92805bade1de9db5889ff4e05703e4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
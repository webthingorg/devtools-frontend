{
  "comments": [
    {
      "key": {
        "uuid": "32a4a2a1_b5a80939",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2020-06-15T14:01:21Z",
      "side": 1,
      "message": "Nit: The commit message should be a lot more descriptive, but I suppose that\u0027s already on the TODO list :-)",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "359edc78_0d1e70fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32a4a2a1_b5a80939",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abf18702_28325c00",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2020-06-15T14:01:21Z",
      "side": 1,
      "message": "This seems fairly complex and fairly limited. How about we filter by MIME type initially instead?",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79fd3d1e_9e1a88bd",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T14:10:28Z",
      "side": 1,
      "message": "That\u0027s not easily available on the script, is it? We could expose Script._language and string-compare with _targetScript.language, would that make sense?",
      "parentUuid": "abf18702_28325c00",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a862f681_3961036a",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2020-06-15T14:22:00Z",
      "side": 1,
      "message": "Hm, right, the MIME type is currently only available for `UISourceCode`. I guess filtering by just `scriptLanguage` would be a good start. We can always add stricter filtering later if necessary.",
      "parentUuid": "79fd3d1e_9e1a88bd",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4befba6d_186050d5",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a862f681_3961036a",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63fbbd87_af0a4f15",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-06-15T14:28:08Z",
      "side": 1,
      "message": "DebuggerLanguagePluginExtension, here and elsewhere.",
      "range": {
        "startLine": 354,
        "startChar": 14,
        "endLine": 354,
        "endChar": 36
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39a4fb09_7bb4b54e",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "No, this is supposed to take the interface.",
      "parentUuid": "63fbbd87_af0a4f15",
      "range": {
        "startLine": 354,
        "startChar": 14,
        "endLine": 354,
        "endChar": 36
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "864e28aa_6dff9d54",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 730,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-06-15T14:28:08Z",
      "side": 1,
      "message": "Is this still used?",
      "range": {
        "startLine": 730,
        "startChar": 13,
        "endLine": 730,
        "endChar": 35
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "129e043e_b69de47a",
        "filename": "front_end/bindings/DebuggerLanguagePlugins.js",
        "patchSetId": 1
      },
      "lineNbr": 730,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "Yes, I\u0027d like to keep the door open to other language plugin implementations.",
      "parentUuid": "864e28aa_6dff9d54",
      "range": {
        "startLine": 730,
        "startChar": 13,
        "endLine": 730,
        "endChar": 35
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "348c61ab_ef9b450d",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-06-15T14:28:08Z",
      "side": 1,
      "message": "Optional: Maybe what we want to do here is check if plugin has a member named method and, if so, call plugin[method](parameters). This has some nice properties: 1) A plugin developer could implement some methods and not others 2) It\u0027s future proof -- more arguments can be added in the future. I don\u0027t know if other plugin APIs work this way, though.",
      "range": {
        "startLine": 403,
        "startChar": 8,
        "endLine": 403,
        "endChar": 28
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59e68529_beb6fd07",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-06-15T14:28:08Z",
      "side": 1,
      "message": "Should this throw a DebuggerLanguagePluginError?",
      "range": {
        "startLine": 414,
        "startChar": 6,
        "endLine": 414,
        "endChar": 39
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77810d29_c8f6b94c",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "This class lives in the extension context, it doesn\u0027t have access to that type.",
      "parentUuid": "59e68529_beb6fd07",
      "range": {
        "startLine": 414,
        "startChar": 6,
        "endLine": 414,
        "endChar": 39
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e96ca54_e54f1157",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 434,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2020-06-15T14:01:21Z",
      "side": 1,
      "message": "What exactly is this `targetScript`?",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b0cee2c_93485a09",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 434,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T14:10:28Z",
      "side": 1,
      "message": "Essentially a selector for the kind of scripts the extension can provide debug info for. For C++/DWARF targetScript is {language: \u0027WebAssembly\u0027, symbol_types: [\u0027EmbeddedDWARF\u0027, \u0027ExternalDWARF\u0027]})",
      "parentUuid": "2e96ca54_e54f1157",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef5b2986_e95a9050",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 434,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2020-06-15T14:22:00Z",
      "side": 1,
      "message": "Let\u0027s only filter by language initially. As per previous comment, we can always make things more complex later. Also please rename this then, `targetScript` doesn\u0027t really make it clear that this is a filter. How about `scriptSelector` with type `{language: \u0027WebAssembly\u0027 | \u0027JavaScript\u0027}` initially?",
      "parentUuid": "6b0cee2c_93485a09",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83245915_bb0f90ec",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 434,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-06-15T14:28:08Z",
      "side": 1,
      "message": "This would be worth a doc string and type annotation.",
      "parentUuid": "6b0cee2c_93485a09",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01363efc_96af1940",
        "filename": "front_end/extensions/ExtensionAPI.js",
        "patchSetId": 1
      },
      "lineNbr": 434,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83245915_bb0f90ec",
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b92c6ab_15839a9c",
        "filename": "front_end/extensions/ExtensionServer.js",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-06-15T14:28:08Z",
      "side": 1,
      "message": "Change to \u0027languageServices\u0027 to match ExtensionApi.js",
      "range": {
        "startLine": 176,
        "startChar": 4,
        "endLine": 176,
        "endChar": 33
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8c1d64c_13349494",
        "filename": "front_end/extensions/ExtensionServer.js",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b92c6ab_15839a9c",
      "range": {
        "startLine": 176,
        "startChar": 4,
        "endLine": 176,
        "endChar": 33
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dcd7cbc_9500f9f0",
        "filename": "front_end/extensions/ExtensionServer.js",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2020-06-15T14:28:08Z",
      "side": 1,
      "message": "Should this be a DebuggerLanguagePluginError?",
      "range": {
        "startLine": 199,
        "startChar": 6,
        "endLine": 199,
        "endChar": 84
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "650b2688_c06b6a4b",
        "filename": "front_end/extensions/ExtensionServer.js",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2020-06-15T15:30:07Z",
      "side": 1,
      "message": "That would create a circular dependency between extensions and bindings. To do that the error would have to go into SDK. Is that worth it?",
      "parentUuid": "2dcd7cbc_9500f9f0",
      "range": {
        "startLine": 199,
        "startChar": 6,
        "endLine": 199,
        "endChar": 84
      },
      "revId": "632f6612251218ce6fa8fb6e0dafddd245348f1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}
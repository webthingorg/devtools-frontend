{
  "comments": [
    {
      "key": {
        "uuid": "0c2dbc4f_66bc7d11",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-02-11T08:25:17Z",
      "side": 1,
      "message": "did we resolve the discussion around the use of the bang here?\n\nI think I\u0027m happy with it but I don\u0027t feel that strongly either way; I\u0027d also be happy to say that we should avoid it and use checks that fail the test with nice messages.",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0bb9bfd_330514ea",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-02-11T10:38:46Z",
      "side": 1,
      "message": "For locating elements, I would rather we were explicit in dealing with the possible null values. It\u0027s minor, but from my experience it just makes matters clearer more quickly.",
      "parentUuid": "0c2dbc4f_66bc7d11",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8113834a_2b5c0a24",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-02-11T10:46:16Z",
      "side": 1,
      "message": "I would love a helper that asserted it existed (with a nice error) and was understood by TS so it could narrow the type from `X | null` to `X`:\n\n```\nconst elem \u003d document.querySelector(...) // type: Element | null\nassertExists(elem)\nelem.textContent // fine, because TS now has type: Element\n```\n\nI think if we made `assertExists` do:\n\n```\nassert.fail(\u0027Expected foo to exist\u0027)\nthrow new Error(\u0027to satisfy TS\u0027)\n```\n\nThat _might_ do it? May be out of scope of this CL though.",
      "parentUuid": "f0bb9bfd_330514ea",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73762841_34c66ab3",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-02-11T18:22:06Z",
      "side": 1,
      "message": "Let\u0027s fix this in a follow-up CL once we decide what path we want to choose.",
      "parentUuid": "8113834a_2b5c0a24",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2e6a542_e7a6f3c4",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-02-12T10:30:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "73762841_34c66ab3",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "927a35b0_cda7ab9e",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-02-12T11:03:04Z",
      "side": 1,
      "message": "nit: Can you catch this instead? In general I prefer avoiding the ! where we can.",
      "range": {
        "startLine": 46,
        "startChar": 53,
        "endLine": 46,
        "endChar": 54
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fdfaba8_89197d32",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-02-11T06:59:56Z",
      "side": 1,
      "message": "nits: Superfluous parens and its confusing that the lambda argument is also named index.",
      "range": {
        "startLine": 53,
        "startChar": 55,
        "endLine": 53,
        "endChar": 62
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dc1f09e_6a110671",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1189020
      },
      "writtenOn": "2020-02-11T10:38:46Z",
      "side": 1,
      "message": "I think style-wise we\u0027ve opted to always include parens for arrow functions (though we could change that if there are strong feelings). Agree on the param name. Maybe just use lineNumber?",
      "parentUuid": "7fdfaba8_89197d32",
      "range": {
        "startLine": 53,
        "startChar": 55,
        "endLine": 53,
        "endChar": 62
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff021216_63decc51",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2020-02-11T18:22:06Z",
      "side": 1,
      "message": "clang-format for ya ðŸ˜‹\n\nThe confusing part here is that the `index` variable in this lambda is scoped in the script *that runs in the DevTools frontend*. E.g. it is passed in on line 61. Otherwise, you can\u0027t access these variables. Thus, they are the same variable, but in a different scope.\n\nTherefore, I am inclined to keep it like this, since it is mostly Puppeteer quirks. That said, it would be great if we can somehow resolve this weirdness, but I am not sure what is possible here.",
      "parentUuid": "4dc1f09e_6a110671",
      "range": {
        "startLine": 53,
        "startChar": 55,
        "endLine": 53,
        "endChar": 62
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86297261_8a5e8255",
        "filename": "test/e2e/sources/can-format-sourcecode.ts",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-02-12T10:30:34Z",
      "side": 1,
      "message": "I think it would be nicer if those variables were the first arg(s) to `frontend.evaluate`, so this would be: `frontend.evaluate(index, index \u003d\u003e {...})`. WDYT? Again, prob one for a follow up CL.",
      "parentUuid": "ff021216_63decc51",
      "range": {
        "startLine": 53,
        "startChar": 55,
        "endLine": 53,
        "endChar": 62
      },
      "revId": "1fae186478a28e7ca593d1adf7caeceaf08175a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}
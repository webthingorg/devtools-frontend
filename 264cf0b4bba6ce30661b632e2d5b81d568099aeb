{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "42bda204_7ff86a3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T09:51:26Z",
      "side": 1,
      "message": "Thanks for the review Alex!",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6a21f84_8505302e",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-28T09:16:34Z",
      "side": 1,
      "message": "could it receive a negative address?",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f64f9a82_ff4c0af8",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T09:51:26Z",
      "side": 1,
      "message": "No, it shouldn\u0027t. Later the user can also edit the address to jump to via the navigator, but we will also catch that earlier. However, I think I would like to keep this as an additional safety guard. WDYT?",
      "parentUuid": "a6a21f84_8505302e",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5ff9723_82510c02",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-28T09:53:26Z",
      "side": 1,
      "message": "I would then throw in the constructor and return true in the valid() method, perhaps?",
      "parentUuid": "f64f9a82_ff4c0af8",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "891f6e28_87fe778b",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T14:04:42Z",
      "side": 1,
      "message": "SG! Done.",
      "parentUuid": "d5ff9723_82510c02",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f2ac221_afb3ca90",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-10-28T10:03:20Z",
      "side": 1,
      "message": "nit (and sorry, we should add this to the go/building-devtools-ui doc) but we should camel case these: `@pageNavigation` as it\u0027s closer to most of the built-in APIs in JS which are camelCased.",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 47
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d4ade31_aad5b17d",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T14:04:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f2ac221_afb3ca90",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 47
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8b24c80_339c6f82",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-28T09:16:34Z",
      "side": 1,
      "message": "does not the history manager handle empty history?",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eede1ae7_7dd625bd",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 90,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T09:51:26Z",
      "side": 1,
      "message": "True! Removed.",
      "parentUuid": "e8b24c80_339c6f82",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7de076a_36aa2030",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-10-28T10:03:20Z",
      "side": 1,
      "message": "can you omit this if you\u0027re not doing anything? Can\u0027t remember if JS/TS lets you not have a `default` case so I might be wrong.",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 23
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "962c2070_097c26aa",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T14:04:42Z",
      "side": 1,
      "message": "I\u0027m removing the switch case here as Alex suggested, then we don\u0027t have the default case either. But I tested to run without default case and it seems that TS/JS allow us to have a switch without default case :).",
      "parentUuid": "d7de076a_36aa2030",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 23
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc5fe1f5_5529a291",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-10-28T10:03:20Z",
      "side": 1,
      "message": "I\u0027d make this API:\n\nthis.jumpToAddress({ makeHistoryEntry: true, address: newAddress })\n\nAnd that way you don\u0027t need the comment next to the boolean flag. Also means if this API has to have more options in the future it\u0027s easily extensible.",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 64
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11a9eaf1_3ea146dd",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T14:04:42Z",
      "side": 1,
      "message": "Ah, makes sense! Will remember that for future changes. The code has been updated such that makeHistoryEntry is not required anymore, so in this case I\u0027ll leave it as is (just the `newAddress` as parameter).",
      "parentUuid": "dc5fe1f5_5529a291",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 64
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d555d3df_8f3d671a",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-10-28T09:16:34Z",
      "side": 1,
      "message": "Won\u0027t history.push handle the case when makeHistoryEntry \u003d\u003d false with its locks?",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "603c77bb_267547b2",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-10-28T09:51:26Z",
      "side": 1,
      "message": "also true! Removed the makeHistoryEntry parameter.",
      "parentUuid": "d555d3df_8f3d671a",
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb0ea093_4753a290",
        "filename": "front_end/linear_memory_inspector/LinearMemoryViewer.ts",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-10-28T10:03:20Z",
      "side": 1,
      "message": "I\u0027d again consider this being an object of options but I don\u0027t feel so strongly for constructors.\n\nJust think it makes call sites easier as it documents the arguments for you at call time.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 73
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4bd3f6c_eab7e917",
        "filename": "front_end/linear_memory_inspector/LinearMemoryViewer.ts",
        "patchSetId": 4
      },
      "lineNbr": 232,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-10-28T10:03:20Z",
      "side": 1,
      "message": "nit: you don\u0027t need the quotes around address here",
      "range": {
        "startLine": 232,
        "startChar": 0,
        "endLine": 232,
        "endChar": 22
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "740b9bbb_58a69e04",
        "filename": "test/unittests/front_end/helpers/DOMHelpers.ts",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-10-28T10:03:20Z",
      "side": 1,
      "message": "I think this name is a bit misleading: I took it to mean \"get the DOM element that represents the component\" whereas I think what it does is gets an element that\u0027s inside the component.\n\nMaybe I\u0027d go for `getElementWithinComponent` ? (and similarly for `getComponentElements`)",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 78
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e51c298b_90cd5622",
        "filename": "test/unittests/front_end/linear_memory_inspector/LinearMemoryInspector_test.ts",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1396442
      },
      "writtenOn": "2020-10-28T10:03:20Z",
      "side": 1,
      "message": "why do we need the Math.max here? Isn\u0027t it a bug if expectedAddressAfter goes below 0 ?",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 72
      },
      "revId": "264cf0b4bba6ce30661b632e2d5b81d568099aeb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
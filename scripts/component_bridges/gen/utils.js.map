{"version":3,"file":"utils.js","sourceRoot":"","sources":["../utils.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;;AAMtB,MAAM,4BAA4B,GAAG,CAAC,KAAkB,EAAE,iBAAyB,EACE,EAAE;IAC5F,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK,CAAC,eAAe,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC9E,OAAO,GAAG,CAAC,IAAI,CAAC,WAAW,KAAK,iBAAiB,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,IAAI,IAAI,CAAC;AAC9B,CAAC,CAAC;AAPW,QAAA,4BAA4B,gCAOvC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ts from 'typescript';\n\nimport {WalkerState} from './walk_tree.js';\n\nexport const findNodeForTypeReferenceName = (state: WalkerState, typeReferenceName: string): ts.InterfaceDeclaration|\n                                            ts.TypeAliasDeclaration|ts.EnumDeclaration|null => {\n  const matchingNode = [...state.foundInterfaces, ...state.foundEnums].find(dec => {\n    return dec.name.escapedText === typeReferenceName;\n  });\n\n  return matchingNode || null;\n};\n"]}
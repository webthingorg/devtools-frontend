{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {generateClosureBridge, GeneratedCode} from './generate_closure.js';\nimport {filePathToTypeScriptSourceFile, walkTree} from './walk_tree.js';\n\nconst chromeLicense = `// Copyright ${new Date().getFullYear()} The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n`;\n\nconst getFullBridgeFilePath = (inputFilePath: string) => {\n  const dir = path.dirname(inputFilePath);\n  const baseName = path.basename(inputFilePath, '.ts');\n  return path.join(dir, `${baseName}_bridge.js`);\n};\n\nexport const writeToDisk = (inputFilePath: string, generatedCode: GeneratedCode) => {\n  const baseName = path.basename(inputFilePath, '.ts');\n  const outputFileName = getFullBridgeFilePath(inputFilePath);\n\n  const importStatement = `import './${baseName}.js';`;\n\n  const types = generatedCode.types\n                    .map(typePart => {\n                      return typePart.join('\\n');\n                    })\n                    .join('\\n');\n  const classDeclaration = generatedCode.closureClass.join('\\n');\n  const creatorFunction = generatedCode.creatorFunction.join('\\n');\n  const imports = generatedCode.moduleImports.join('\\n');\n\n  /*\n   * We replace any `\\` with `/` here because the PRESUBMIT check rebuilds all\n   * bridge files And if we let it use OS-specific separators when outputting\n   * this comment it'll be different on Linux vs Windows systems. So to keep the\n   * output consistent we ensure we use Linux style separators here. This is\n   * only a comment to help the developer find the source file, so it's not a\n   * problem that the path isn't accurate on Windows.\n   */\n  const relativeFilePath = path.relative(process.cwd(), inputFilePath).replace(/\\\\/g, '/');\n\n  const byHandWarning = `/**\n* WARNING: do not modify this file by hand!\n* it was automatically generated by the bridge generator\n* if you made changes to the source code and need to update this file, run:\n*  npm run generate-bridge-file ${relativeFilePath}\n*/\n`;\n\n  // extra \\n to ensure ending with a linebreak at end of file\n  const finalCode = [chromeLicense, byHandWarning, importStatement, imports, types, classDeclaration, creatorFunction]\n                        .filter(x => {\n                          // Filter out any of the previous parts that were empty, to avoid\n                          // tonnes of blank lines in the bridge output.\n                          return !!x;\n                        })\n                        .join('\\n') +\n      '\\n';\n\n  fs.writeFileSync(outputFileName, finalCode, {encoding: 'utf8'});\n\n  return {\n    output: outputFileName,\n    code: finalCode,\n  };\n};\n\ninterface Options {\n  forceRewriting: boolean;\n  silenceOutput: boolean;\n}\n\nconst checkForManuallyEditedBridgeFile = (componentSourceFilePath: string): boolean => {\n  const bridgeFilePath = getFullBridgeFilePath(componentSourceFilePath);\n  if (!fs.existsSync(bridgeFilePath)) {\n    return false;\n  }\n\n  const contentsOfBridge = fs.readFileSync(bridgeFilePath, {encoding: 'utf-8'});\n  return contentsOfBridge.includes('MANUALLY_EDITED_BRIDGE=');\n};\n\nexport const parseTypeScriptComponent = (componentSourceFilePath: string, options: Options = {\n  forceRewriting: false,\n  silenceOutput: false,\n}) => {\n  if (!options.silenceOutput) {\n    console.log(`\\n${path.basename(componentSourceFilePath)}`);\n  }\n  const hasManuallyEditedBridge = checkForManuallyEditedBridgeFile(componentSourceFilePath);\n  if (hasManuallyEditedBridge && !options.forceRewriting) {\n    if (!options.silenceOutput) {\n      console.log('Skipping bridge generation; existing bridge file contains a `MANUALLY_EDITED_BRIDGE=` comment.');\n      console.log('To regenerate, pass the `--force` flag or remove that comment from the existing bridge and re-run.');\n    }\n    return {output: undefined, code: undefined};\n  }\n\n  const file = filePathToTypeScriptSourceFile(componentSourceFilePath);\n  const state = walkTree(file, componentSourceFilePath);\n  const generatedCode = generateClosureBridge(state);\n  return writeToDisk(componentSourceFilePath, generatedCode);\n};\n\nexport const main = (args: string[]) => {\n  const bridgeComponentPath = path.resolve(process.cwd(), args[0]);\n  const forceRewriting = args.includes('--force');\n  const silenceOutput = args.includes('--silent');\n\n  if (!bridgeComponentPath || !fs.existsSync(bridgeComponentPath)) {\n    throw new Error(`Could not find bridgeComponent path ${bridgeComponentPath}`);\n  }\n\n  const {output} = parseTypeScriptComponent(bridgeComponentPath, {forceRewriting, silenceOutput});\n\n  if (output && !silenceOutput) {\n    console.log('Wrote bridge file to', path.relative(process.cwd(), output));\n  }\n\n  return output;\n};\n\nif (require.main === module) {\n  main(process.argv.slice(2));\n}\n"]}
{"version":3,"file":"regenerate-all-bridges.js","sourceRoot":"","sources":["regenerate-all-bridges.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;;AAE7B,iDAAuC;AACvC,yBAAyB;AACzB,6BAA6B;AAE7B,+BAA2B;AAE3B,MAAM,gBAAgB,GAAG,CAAC,YAAoB,EAAe,EAAE;IAC7D,MAAM,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAE7D,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,8BAA8B,UAAU,EAAE,CAAC,CAAC;KAC7D;IAED,IAAI;QACF,MAAM,UAAU,GAAG,UAAI,CAAC,CAAC,UAAU,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,IAAI,UAAU,EAAE;YACd,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;YAC9D,OAAO,YAAY,CAAC;SACrB;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,8BAA8B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;QAC5F,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACrB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AAE1G,MAAM,oBAAoB,GAAG,CAAC,SAAiB,EAAE,aAAuB,EAAE,EAAE,EAAE;IAC5E,IAAI,mBAAmB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;QACtC,OAAO,UAAU,CAAC;KACnB;IAED,MAAM,iBAAiB,GAAG,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACpD,iBAAiB,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAC/D,IAAI,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE;YACvC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC5C;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YAC1C,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3B;IACH,CAAC,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC,CAAC;AACpE,MAAM,cAAc,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC;AAErD,MAAM,eAAe,GAAG,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;AAE3G,MAAM,eAAe,GAAG,sBAAsB,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;AAC1E,wBAAQ,CAAC,eAAe,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {execSync} from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {main} from './cli';\n\nconst regenerateBridge = (pathToBridge: string): string|null => {\n  const sourceFile = pathToBridge.replace('_bridge.js', '.ts');\n\n  if (!fs.existsSync(sourceFile)) {\n    throw new Error(`Could not find source file ${sourceFile}`);\n  }\n\n  try {\n    const outputPath = main([sourceFile, ...process.argv.slice(2)]);\n    if (outputPath) {\n      const relativePath = path.relative(process.cwd(), outputPath);\n      return relativePath;\n    }\n  } catch (e) {\n    console.error(`ERROR regenerating bridge (${path.relative(process.cwd(), pathToBridge)}):`);\n    console.log(e.stack);\n    process.exit(1);\n  }\n  return null;\n};\n\nconst excludedDirectories = new Set([path.resolve(path.join(process.cwd(), 'front_end', 'third_party'))]);\n\nconst searchForBridgeFiles = (directory: string, foundFiles: string[] = []) => {\n  if (excludedDirectories.has(directory)) {\n    return foundFiles;\n  }\n\n  const directoryContents = fs.readdirSync(directory);\n  directoryContents.forEach(fileOrDir => {\n    const fullPath = path.resolve(path.join(directory, fileOrDir));\n    if (fs.statSync(fullPath).isDirectory()) {\n      searchForBridgeFiles(fullPath, foundFiles);\n    } else if (fullPath.endsWith('_bridge.js')) {\n      foundFiles.push(fullPath);\n    }\n  });\n  return foundFiles;\n};\n\nconst rootDir = path.resolve(path.join(process.cwd(), 'front_end'));\nconst allBridgeFiles = searchForBridgeFiles(rootDir);\n\nconst filesToReformat = allBridgeFiles.map(filePath => regenerateBridge(filePath)).filter(x => x !== null);\n\nconst clFormatCommand = `git cl format --js ${filesToReformat.join(' ')}`;\nexecSync(clFormatCommand);\n"]}
{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cabf42ed_fcf2191c",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-09-03T17:46:31Z",
      "side": 1,
      "message": "this I prefix style isn\u0027t devtools convention. (i\u0027m happy for that but anyway)\n\nlets drop the I or rename or w/e",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6c09a89_c0715269",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-04T16:53:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cabf42ed_fcf2191c",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cba9cae_56a06f6b",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-09-03T17:46:31Z",
      "side": 1,
      "message": "wouldnt it not make it here cuz of L68?",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "049253cb_6cf34755",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-09-03T17:46:31Z",
      "side": 1,
      "message": "also do we need to parse to URL ? could also do a startsWith.",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3aeb769a_4fd37d45",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-04T16:53:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cba9cae_56a06f6b",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9698ce8d_2947f8c6",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-04T16:53:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "049253cb_6cf34755",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f718f4f_8c9c05a5",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-09-03T17:46:31Z",
      "side": 1,
      "message": "can you use the shorter name prettyplz\n\n```suggestion\n    traceData: RequiredData\u003ctypeof deps\u003e, context: NavigationInsightContext): Map\u003cstring, number\u003e {\n```",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "248e068e_7abfa442",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-04T16:53:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f718f4f_8c9c05a5",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a531b026_60eaab38",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-09-03T17:46:31Z",
      "side": 1,
      "message": "now that this is all here... i wonder using this treewalker would give us any different results vs iterating over `thread.events` and summing up their associated selfTimes",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df870c1c_a69a4a75",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-04T16:53:36Z",
      "side": 1,
      "message": "I changed it to this:\n\n```\nfor (const event of thread.entries) {\n  const node \u003d traceData.Renderer.entryToNode.get(event);\n  if (!node || !node.selfTime) {\n    continue;\n  }\n\n  const url \u003d Extras.URLForEntry.get(traceData as Handlers.Types.TraceParseData, event);\n  if (!url) {\n    continue;\n  }\n\n  selfTimeByUrl.set(url, node.selfTime + (selfTimeByUrl.get(url) ?? 0));\n}\n```\n\nAnd the tests still passed.\n\nHowever we need to apply a time window (which the CL leaves as a todo by using infinity), and the walkEntireTree method gives us that. Would you like the usage of walkEntireTree to be dropped and we recreate the logic of `treeNodeIsInWindow` (or just export it)?",
      "parentUuid": "a531b026_60eaab38",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8acfeba_0214cd85",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-09-04T16:57:59Z",
      "side": 1,
      "message": "sg. yeah recreate the logic.\n\ntbh i imagine that kinda function is also elsewhere.  `boundsIncludeTimeRange` looks the same.",
      "parentUuid": "df870c1c_a69a4a75",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1745f0ba_e86c32df",
        "filename": "front_end/models/trace/insights/ThirdPartyWeb.ts",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1378407
      },
      "writtenOn": "2024-09-04T17:05:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df870c1c_a69a4a75",
      "revId": "0ef5bb1ec74bc4ac44f264a0e343b06028efcade",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
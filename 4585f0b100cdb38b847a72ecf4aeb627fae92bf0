{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "995c4007_e2820675",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-03-13T17:17:22Z",
      "side": 1,
      "message": "Nice! Seems like this is really making things more simple! :D",
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e77b6619_0f76cf9e",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-03-13T17:17:22Z",
      "side": 1,
      "message": "why do we need to return null? Couldn\u0027t we always return an instance when we call this?",
      "range": {
        "startLine": 62,
        "startChar": 31,
        "endLine": 62,
        "endChar": 49
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de2f00a_a9a0f070",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1593257
      },
      "writtenOn": "2024-03-13T18:26:21Z",
      "side": 1,
      "message": "I\u0027m thinking we don\u0027t want to return an instance if entryToNodeMap has not previously been provided.\nThat way we\u0027d prevent trying to apply filter actions on entries when this map is not existent and we can\u0027t actually get the node for this entry (we need nodes for all hide operations). If it has been provided, it would never be null since we create it right when the map is passed.",
      "parentUuid": "e77b6619_0f76cf9e",
      "range": {
        "startLine": 62,
        "startChar": 31,
        "endLine": 62,
        "endChar": 49
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb0c37a8_44d9eafc",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-03-14T08:39:52Z",
      "side": 1,
      "message": "ah I see. Usually singletons in the codebase throw when the getter is called for the first time and the data to instatiate is not passed. That gives the advantage that we don\u0027t have to check if the instance is null/undefined everytime we call it. The disadvantage is that you need to ensure the instance is initialized properly at some point or it will throw.\n\nI think it\u0027d be nice to stick to this pattern for practicality and consitency but if you feel strong about it, I\u0027m happy to land it as-is as well.",
      "parentUuid": "7de2f00a_a9a0f070",
      "range": {
        "startLine": 62,
        "startChar": 31,
        "endLine": 62,
        "endChar": 49
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78949adb_cd59e908",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1593257
      },
      "writtenOn": "2024-03-14T09:46:50Z",
      "side": 1,
      "message": "I see. Changed it, let\u0027s stick to the pattern. Thank you!",
      "parentUuid": "cb0c37a8_44d9eafc",
      "range": {
        "startLine": 62,
        "startChar": 31,
        "endLine": 62,
        "endChar": 49
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ee4ff9b_804d4177",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-03-13T17:17:22Z",
      "side": 1,
      "message": "nit: let\u0027s rename the singleton so it doesn\u0027t collide with this function\u0027s name e.g `entriesFilterInstance`, etc.",
      "range": {
        "startLine": 64,
        "startChar": 6,
        "endLine": 64,
        "endChar": 14
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97a5d5f6_e766aac3",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1593257
      },
      "writtenOn": "2024-03-13T18:26:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ee4ff9b_804d4177",
      "range": {
        "startLine": 64,
        "startChar": 6,
        "endLine": 64,
        "endChar": 14
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dc78c7c_843510a0",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 73,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-03-13T17:17:22Z",
      "side": 1,
      "message": "It would be convenient if we also had a function to remove the singleton, especially for cleaning dirty test environments",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 73,
        "endChar": 1
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57e4b519_598fff26",
        "filename": "front_end/models/trace/EntriesFilter.ts",
        "patchSetId": 13
      },
      "lineNbr": 73,
      "author": {
        "id": 1593257
      },
      "writtenOn": "2024-03-13T18:26:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9dc78c7c_843510a0",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 73,
        "endChar": 1
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ab73ddd_6b73b881",
        "filename": "front_end/panels/timeline/TimelinePanel.ts",
        "patchSetId": 13
      },
      "lineNbr": 1192,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-03-13T17:17:22Z",
      "side": 1,
      "message": "I think we can safely remove this :P",
      "range": {
        "startLine": 1192,
        "startChar": 3,
        "endLine": 1192,
        "endChar": 146
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "227881d2_7647538d",
        "filename": "front_end/panels/timeline/TimelinePanel.ts",
        "patchSetId": 13
      },
      "lineNbr": 1192,
      "author": {
        "id": 1593257
      },
      "writtenOn": "2024-03-13T18:26:21Z",
      "side": 1,
      "message": "ooops yes :D",
      "parentUuid": "5ab73ddd_6b73b881",
      "range": {
        "startLine": 1192,
        "startChar": 3,
        "endLine": 1192,
        "endChar": 146
      },
      "revId": "4585f0b100cdb38b847a72ecf4aeb627fae92bf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
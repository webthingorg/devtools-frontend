{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e54cf70d_d1bff5cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-02-15T11:28:30Z",
      "side": 1,
      "message": "PTAL",
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12ba6b62_6574b6d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-02-15T12:52:56Z",
      "side": 1,
      "message": "I personally don\u0027t prefer duplicating such enums, which is why we combined them into one. However, I understand that the requirements of the localization system mandate this solution. Therefore, let\u0027s go for this, thanks for addressing the issue!",
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50660ad9_493b4943",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-02-15T12:57:32Z",
      "side": 1,
      "message": "IMHO we are not really duplicating though. We have an enum, and we have localized values for each enum value :)",
      "parentUuid": "12ba6b62_6574b6d8",
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4ad0f61_913d1273",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-02-15T13:12:16Z",
      "side": 1,
      "message": "That\u0027s true, but as I understand it there is no real usage of the enum itself, apart from obtaining the localized values. So the two combined in one enum makes sure the enum can\u0027t live \"on its own\". Still, I think this is a reasonable compromise given the localization requirements, so this is not a blocker.",
      "parentUuid": "50660ad9_493b4943",
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3239d4e_d4032ac3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-02-16T06:52:13Z",
      "side": 1,
      "message": "Uhhh, so I think we still have a bug, just found this: https://source.chromium.org/chromium/chromium/src/+/master:third_party/devtools-frontend/src/front_end/settings/SettingsScreen.ts;l\u003d252-269;drc\u003d3be612f745d15ae0600cff4b668840f88d31c730\n\nWe are hardcoding the English section names to a pre-defined order. The current and the existing CL only work because the english translation matches this hardcoded list. I\u0027ll redo the CL, feel free to remove your +1 vote for now.\n\n(I think this `explicitSectionOrder` just made the argument for the enum for us xD)",
      "parentUuid": "b4ad0f61_913d1273",
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f75f37fa_f7fa1711",
        "filename": "front_end/common/SettingRegistration.ts",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-02-15T12:52:56Z",
      "side": 1,
      "message": "Nit: let\u0027s add `assertNever` here to make sure we don\u0027t miss any:\n\n```\ndefault:\n  return Platform.assertNever(category, `Unknown settings category: ${category}`);\n```",
      "range": {
        "startLine": 94,
        "startChar": 4,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "474c59db_3000baa3",
        "filename": "front_end/common/SettingRegistration.ts",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-02-15T12:57:32Z",
      "side": 1,
      "message": "Do you mean if we force cast something to `SettingCategory`? For all other cases TS will complain as the function doesn\u0027t have a return statement so the switch MUST be exhaustive.",
      "parentUuid": "f75f37fa_f7fa1711",
      "range": {
        "startLine": 94,
        "startChar": 4,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c488dd7_5cb686f3",
        "filename": "front_end/common/SettingRegistration.ts",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-02-15T13:12:16Z",
      "side": 1,
      "message": "If TS already complains about missing values, then that\u0027s perfect. The `assertNever` tool is mostly a safeguard and a tool used to document exhaustiveness.",
      "parentUuid": "474c59db_3000baa3",
      "range": {
        "startLine": 94,
        "startChar": 4,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e639509b_9eaff242",
        "filename": "front_end/common/SettingRegistration.ts",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2021-02-16T06:52:13Z",
      "side": 1,
      "message": "I hope I interpreted your comment right, that its fine to leave this as-is. Otherwise there are 2 more arguments xD\n\nAdding in a `default` case will allow to statically miss cases again, and push the check to runtime.\n\nWe also can\u0027t move the check out of the default case and at the end of the function, because TS will complain about dead code.",
      "parentUuid": "8c488dd7_5cb686f3",
      "range": {
        "startLine": 94,
        "startChar": 4,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "365044491ec2f1b7091bf958227e2ec9dcd2bbe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
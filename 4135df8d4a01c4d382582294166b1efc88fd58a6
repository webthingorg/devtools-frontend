{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a473400d_dd613da5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-02-22T11:50:09Z",
      "side": 1,
      "message": "this is awesome, lgtm with small thoughts!",
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7a6147b_276b6c8a",
        "filename": "front_end/models/trace/Processor.test.ts",
        "patchSetId": 18
      },
      "lineNbr": 292,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-02-22T22:52:23Z",
      "side": 1,
      "message": "Oh we get a fresh opportunity to name things! \\o/ Let\u0027s apply a bit of https://github.com/GoogleChrome/lighthouse/blob/main/docs/new-audits.md#naming\n\nI could see us calling this one `RenderBlocking`. And it\u0027s the oracle for all things render-blocking. Yes, requests are probably the main/only thing, but... maybe we can have insights be broader/topical than we\u0027ve previously framed it.\n\n(Handlers are similarly topical).",
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3684ed5a_dc106da2",
        "filename": "front_end/models/trace/Processor.test.ts",
        "patchSetId": 18
      },
      "lineNbr": 292,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-02-23T00:12:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7a6147b_276b6c8a",
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96ef6f97_30f3c25f",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-02-22T11:50:09Z",
      "side": 1,
      "message": "since the processor now exports more data besides the handlers\u0027 output it\u0027s worth updating this name to be specific about what it returns (can be a follow up)",
      "range": {
        "startLine": 178,
        "startChar": 6,
        "endLine": 178,
        "endChar": 10
      },
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94c7193b_45a1783b",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-02-22T19:01:44Z",
      "side": 1,
      "message": "In my head `data` and `insights` represent two different things, but I can see how \"data\" would be the output of the trace processor and insights are an output.\n\nMaybe we could rename `data` to something like `models` but I would prefer that in a follow-up for sure",
      "parentUuid": "96ef6f97_30f3c25f",
      "range": {
        "startLine": 178,
        "startChar": 6,
        "endLine": 178,
        "endChar": 10
      },
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1040d4ac_b828ceb0",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-02-22T22:52:23Z",
      "side": 1,
      "message": "This obj is equivalent to `traceParsedData`. This name gets used all over.\n\nMight as well rename this getter to that.  it only lives for a very short period as `data`.  I can see it happening in this CL. :)",
      "parentUuid": "94c7193b_45a1783b",
      "range": {
        "startLine": 178,
        "startChar": 6,
        "endLine": 178,
        "endChar": 10
      },
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b0f700e_c3ab73c2",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-02-23T00:12:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1040d4ac_b828ceb0",
      "range": {
        "startLine": 178,
        "startChar": 6,
        "endLine": 178,
        "endChar": 10
      },
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6301414_6b006090",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 18
      },
      "lineNbr": 214,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-02-22T11:50:09Z",
      "side": 1,
      "message": "do we want to be explicit about the props of the insight runners or just rely on TS to figure that out? I guess that as with handlers we can\u0027t enforce a type directly because they are modules so I don\u0027t feel strong about it",
      "range": {
        "startLine": 214,
        "startChar": 34,
        "endLine": 214,
        "endChar": 41
      },
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a395877_328aab5a",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 18
      },
      "lineNbr": 214,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-02-22T19:01:44Z",
      "side": 1,
      "message": "I think we can rely on TS to figure it out. Like you said, these are modules and we would need to restructure as classes or something to enforce the type directly.\n\nIn the event that a handler doesn\u0027t implement `deps` or whatever TS should automatically detect it, the error will just appear here rather than on the module itself.\n\nPossibly related: I\u0027m planning on improving the type handling of deps in a follow-up",
      "parentUuid": "c6301414_6b006090",
      "range": {
        "startLine": 214,
        "startChar": 34,
        "endLine": 214,
        "endChar": 41
      },
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e76f2719_a83c5e59",
        "filename": "front_end/models/trace/Processor.ts",
        "patchSetId": 18
      },
      "lineNbr": 214,
      "author": {
        "id": 1447167
      },
      "writtenOn": "2024-02-23T10:02:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9a395877_328aab5a",
      "range": {
        "startLine": 214,
        "startChar": 34,
        "endLine": 214,
        "endChar": 41
      },
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "746f70e7_ad28f6fb",
        "filename": "front_end/models/trace/insights/RenderBlockingRequests.ts",
        "patchSetId": 18
      },
      "lineNbr": 17,
      "author": {
        "id": 1118499
      },
      "writtenOn": "2024-02-22T22:52:23Z",
      "side": 1,
      "message": "these .data() calls to handlers make a fresh copy of the data. (That\u0027s a separate problem).. \n\nBut regardless..  WDYT about receiving traceParsedData/data as a param of generateInsight and pulling off that?\n\nextending that thought a bit.. maybe your .some() check in Processor should check what\u0027s on traceParsedData instead of what handlers are registered.",
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38f0fc2d_f2dafe2d",
        "filename": "front_end/models/trace/insights/RenderBlockingRequests.ts",
        "patchSetId": 18
      },
      "lineNbr": 17,
      "author": {
        "id": 1534302
      },
      "writtenOn": "2024-02-22T23:55:44Z",
      "side": 1,
      "message": "Yeah that\u0027s how it was before, it\u0027s difficult to get the dependencies to play nicely with typescript. I will see if there is a way to go back though...",
      "parentUuid": "746f70e7_ad28f6fb",
      "revId": "4135df8d4a01c4d382582294166b1efc88fd58a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
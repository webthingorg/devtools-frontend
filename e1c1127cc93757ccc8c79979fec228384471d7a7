{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b7f37f7_9e251131",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-20T23:14:10Z",
      "side": 1,
      "message": "PTAL, thank you!",
      "revId": "e1c1127cc93757ccc8c79979fec228384471d7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23d071eb_37cee491",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-01-21T04:34:29Z",
      "side": 1,
      "message": "Might be worth thinking about how this will look/work if we move over to using AXNode from the testing CL. https://crrev.com/c/2636102\n\nHow will an AccessibilityNode component get the accessibilityModel to load in the new children? Maybe each AccessibilityNode contains a reference to it\u0027s enclosing AccessibilityTree component, which has an API for communicating with the AccessibilityModel?",
      "revId": "e1c1127cc93757ccc8c79979fec228384471d7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac94d763_9e3759ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-01-21T08:54:51Z",
      "side": 1,
      "message": "It sounds like a good approach. AXNode might have a method called `loadChildren` that would be defined in the SDKAXNode to AXNode mapping function. Then it can make use of the AccessibilityModel without the need for the new component to know about AccessibilityModel.",
      "parentUuid": "23d071eb_37cee491",
      "revId": "e1c1127cc93757ccc8c79979fec228384471d7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ee8f4f7_5dacab9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-22T03:18:36Z",
      "side": 1,
      "message": "Thanks Alex! I\u0027ve updated the patch to do this, PTAL again",
      "parentUuid": "ac94d763_9e3759ff",
      "revId": "e1c1127cc93757ccc8c79979fec228384471d7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a132a795_8bdc16df",
        "filename": "front_end/sdk/AccessibilityModel.js",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2021-01-21T06:29:12Z",
      "side": 1,
      "message": "Can we get this done *in some form* as part of the same CL? Even if itâ€™s not an ideal solution (e.g. setting a timer after leaving the a11y tree view), it would be better than nothing, and we could still have a TODO to improve it.",
      "revId": "e1c1127cc93757ccc8c79979fec228384471d7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63d38b51_cfa4d9b6",
        "filename": "front_end/sdk/AccessibilityModel.js",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-01-22T03:18:36Z",
      "side": 1,
      "message": "Done using a timer for now and added a todo.",
      "parentUuid": "a132a795_8bdc16df",
      "revId": "e1c1127cc93757ccc8c79979fec228384471d7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
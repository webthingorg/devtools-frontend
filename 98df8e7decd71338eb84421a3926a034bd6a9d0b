{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fab05f17_4f23680e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-08-30T17:46:21Z",
      "side": 1,
      "message": "ptal",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "534d125c_321fd60f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-30T19:01:35Z",
      "side": 1,
      "message": "LGTM thanks!",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d581952_b0b849ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-08-30T19:13:23Z",
      "side": 1,
      "message": "+Tim for core/OWNERS, ptal!",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04cda6e1_0c37203e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2021-08-31T08:36:22Z",
      "side": 1,
      "message": "Mathias, Tim, could you PTAL? ",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "152bcdd5_ad60ad52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2021-08-31T08:41:48Z",
      "side": 1,
      "message": "LGTM",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9b94975_9cdf5549",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-08-31T10:48:43Z",
      "side": 1,
      "message": "INFRA LGTM",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cf05e69_b11c0f72",
        "filename": "front_end/core/host/InspectorFrontendHost.ts",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 1214214
      },
      "writtenOn": "2021-08-31T08:41:48Z",
      "side": 1,
      "message": "Consider making this `async initialTargetId` to avoid the redundant Promise.resolve (https://crbug.com/1161501)",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61106850_74bbe3d5",
        "filename": "front_end/core/host/InspectorFrontendHost.ts",
        "patchSetId": 5
      },
      "lineNbr": 349,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-08-31T18:54:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cf05e69_b11c0f72",
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0cb7e3b_0343ebdb",
        "filename": "front_end/core/sdk/ChildTargetManager.ts",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-08-31T10:48:43Z",
      "side": 1,
      "message": "FYI this returns a promise, so this is technically a race-condition. Unfortunately we can\u0027t `await` in the constructor. Also, the `invoke_setAutoAttach` already returned a promise as well, so we aren\u0027t particularly in a worse state than we were before.",
      "range": {
        "startLine": 36,
        "startChar": 36,
        "endLine": 36,
        "endChar": 60
      },
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8ede101_b28afbf9",
        "filename": "front_end/core/sdk/ChildTargetManager.ts",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-08-31T18:54:54Z",
      "side": 1,
      "message": "This should be fine, all we care is for this to get completed before Runtime.runIfWaitingForDebugger, and we should be able to rely on usual protocol command sequencing for that (since the latter would round-trip through the renderer).",
      "parentUuid": "b0cb7e3b_0343ebdb",
      "range": {
        "startLine": 36,
        "startChar": 36,
        "endLine": 36,
        "endChar": 60
      },
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecc246ba_8952ff1e",
        "filename": "front_end/core/sdk/TargetManager.ts",
        "patchSetId": 5
      },
      "lineNbr": 256,
      "author": {
        "id": 1365394
      },
      "writtenOn": "2021-08-31T10:48:43Z",
      "side": 1,
      "message": "Nit: this returns a promise that we should probably await.",
      "range": {
        "startLine": 256,
        "startChar": 45,
        "endLine": 256,
        "endChar": 69
      },
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ee52288_4c790980",
        "filename": "front_end/core/sdk/TargetManager.ts",
        "patchSetId": 5
      },
      "lineNbr": 256,
      "author": {
        "id": 1115876
      },
      "writtenOn": "2021-08-31T18:54:54Z",
      "side": 1,
      "message": "I\u0027m reluctant to do that, because this has a potential chance of introducing a deadlock -- this is an async command that returns after a round-trip through the renderer (because of setReportChildWorkers in the implementation), so in case the renderer is non-responsive for whatever reason, we\u0027ll be stuck early at front-end initialization.\nOTOH, we don\u0027t depend on the effect of this at any particular point, the rest of target discovery workflow is supposed to be entirely asynchronous, i.e. based on attachedToTarget events that would occur for both pre-existing and newly created targets. The previous approach (relying on Target.setAutoAttach) was also entirely asynchronous and I\u0027m not aware of any issues this created.\nI\u0027ve added a comment on why we don\u0027t want an await here.",
      "parentUuid": "ecc246ba_8952ff1e",
      "range": {
        "startLine": 256,
        "startChar": 45,
        "endLine": 256,
        "endChar": 69
      },
      "revId": "98df8e7decd71338eb84421a3926a034bd6a9d0b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
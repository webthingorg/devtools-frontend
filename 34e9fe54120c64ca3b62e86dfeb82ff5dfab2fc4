{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2686c657_9b6da98a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1334873
      },
      "writtenOn": "2020-10-08T02:47:33Z",
      "side": 1,
      "message": "PTAL",
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "104e145e_5f929f01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-10-08T05:52:45Z",
      "side": 1,
      "message": "Overall looks good to me. Lets bikeshed if we want to introduce a short-hand syntax (see comment).\n\nPaul: I think someone from LON/architecture should be involved in reviewing this CL :)",
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaa82e8b_775fa6d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-10-08T07:39:28Z",
      "side": 1,
      "message": "Some questions, thanks",
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "296c4785_d53e3c42",
        "filename": "front_end/main/MainImpl.js",
        "patchSetId": 13
      },
      "lineNbr": 97,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-10-08T07:39:28Z",
      "side": 1,
      "message": "I thought we were going to use navigator.language?",
      "range": {
        "startLine": 97,
        "startChar": 23,
        "endLine": 97,
        "endChar": 64
      },
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59e71fa4_1ad039b2",
        "filename": "front_end/main/MainImpl.js",
        "patchSetId": 13
      },
      "lineNbr": 101,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-10-08T07:39:28Z",
      "side": 1,
      "message": "So the idea is that this loads locally for en-US.json (or any other file that is present)? And then falls back to the remote server if the locale file isn\u0027t available locally?",
      "range": {
        "startLine": 101,
        "startChar": 19,
        "endLine": 101,
        "endChar": 89
      },
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caf055f5_4c1de195",
        "filename": "front_end/settings/FrameworkBlackboxSettingsTab.js",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2020-10-08T05:52:45Z",
      "side": 1,
      "message": "General question: Should we introduce a short-hand syntax similar to `ls`?\n\nThis is, should we add something like:\n\n const i18n \u003d i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nThen all the use-sites here would simply become:\n\n i18n(UIStrings.debuggerWillSkipThroughThe);\n\nor\n\n i18n(UIStrings.blackboxScriptsWhoseNamesMatchS, {PH1: item.pattern});",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 96
      },
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5caf2f14_8822af0b",
        "filename": "front_end/settings/FrameworkBlackboxSettingsTab.js",
        "patchSetId": 13
      },
      "lineNbr": 75,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-10-08T07:39:28Z",
      "side": 1,
      "message": "I like this",
      "parentUuid": "caf055f5_4c1de195",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 96
      },
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97172535_4ce2923a",
        "filename": "front_end/settings/ModuleUIStrings.js",
        "patchSetId": 13
      },
      "lineNbr": 6,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-10-08T07:39:28Z",
      "side": 1,
      "message": "So this CL adds a module level strings structure (here) but doesn\u0027t remove them from settings_strings.grdp. Is that because we still use the old ones in the grdp file for now? And the plan is to port the \u0027module strings\u0027 over completely later?",
      "range": {
        "startLine": 6,
        "startChar": 13,
        "endLine": 6,
        "endChar": 22
      },
      "revId": "34e9fe54120c64ca3b62e86dfeb82ff5dfab2fc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
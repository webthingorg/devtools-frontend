{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2937e697_73e4512c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "Could you add tests for `externref`?",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41dddd47_b10051f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-23T12:03:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2937e697_73e4512c",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ab47498_5543bd96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-16T15:27:50Z",
      "side": 1,
      "message": "PTAL",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14b7d775_d866cf5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "Hi Jérôme,\n\nthanks a lot for your CL! I\u0027ve added a few questions/comments. The CL also doesn\u0027t seem to compile correctly, I\u0027ve started the CQ bots, see here for more info: https://ci.chromium.org/ui/p/devtools-frontend/builders/try/devtools_frontend_linux_dbg/b8749978481557419057/overview",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a7ad1c1_865e96a7",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "I\u0027d prefer to keep only dealing with `RemoteObject`s as before. I think you can return a `RemoteObject` in `CustomFormatters`, then you also don\u0027t need the wrapping function `wrapRemoteFunction` either.\n\nCorrect me if I\u0027m missing something :)",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b07dac1a_9d773c97",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-23T12:03:08Z",
      "side": 1,
      "message": "I don\u0027t think this can work. There are two kinds of remote objects. The ones that corresponds directly to a Javascript or Wasm value in the V8 engine, and the ones managed by the C/C++ plugin. The remote objects created in `CustomFormatters` are of the latter kind, when I want to return a remote object of the former kind.",
      "parentUuid": "7a7ad1c1_865e96a7",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73101082_52d293a0",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-24T10:54:27Z",
      "side": 1,
      "message": "You\u0027re right - in that case, could you add a comment to make the distinction clear?",
      "parentUuid": "b07dac1a_9d773c97",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0ff5f46_8cc4cfb7",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-24T12:57:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73101082_52d293a0",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "161e4bcd_b85f4830",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-04-24T12:59:44Z",
      "side": 1,
      "message": "Serializing the externref value to JSON and roundtripping it through the extension can be problematic, for instance if the value is huge or contains circular references.\n\nHave you considered returning the externref\u0027s location as an alternative? externref references are supposed to be opaque, so there\u0027s not really a need for the extension to look at the value. Returning the reference \"itself\" here we could just use existing devtools machinery to display big and circular objects.",
      "parentUuid": "73101082_52d293a0",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d28cff5_1a07a5f3",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-24T16:20:00Z",
      "side": 1,
      "message": "I\u0027m not serializing the whole value, but just the remote object returned by `Debugger.evaluateOnCallFrame`, which is not much more than an object id and a preview. The preview should usually be short. In particular, I have just checked that JavaScript strings get shortened. The existing devtools machinery is used to display the object.\n\nIndeed, one could just return the externref\u0027s location, and query its value in `DebuggerPlugin.ts`. It seems that would require some amount of refactoring, moving the relevant functions out of `ExtensionServer.ts`.\n\nAlternatively, one could roundtrip just the `RemoteObjectId` through the extension and query the JavaScript runtime at the end to get back a preview. If you are concerned about the size of the preview, that might be the simplest thing to do.",
      "parentUuid": "161e4bcd_b85f4830",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a646f22c_fb1d185d",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2024-04-25T11:54:53Z",
      "side": 1,
      "message": "Ah, I missed that it\u0027s the RemoteObject being handed out, not the actual value, that\u0027s my bad!\n\nI would really prefer not passing RemoteObjects or RemoteObjectIds to extensions. The objects/ids are an implementation detail that extensions should not rely on (if we pass them out, extensions will inevitably start depending on their internals). There\u0027s also a livetime issue, where DevTools discards RemoteObjects and invalidates IDs and the extension would not know about that.\n\nThis could work for the API: \ninterface ForeignObject {\n  valueClass: \u0027local\u0027|\u0027global\u0027|\u0027operand\u0027\n  index: number\n}\n\nI doubt the refactoring would be huge, it should actually simplify some things. For example, you might not have to keep a cache of externref values",
      "parentUuid": "1d28cff5_1a07a5f3",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e0dd41b_a9d04b64",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-25T16:03:14Z",
      "side": 1,
      "message": "I\u0027m now keeping track of the externref location, following your suggestion, rather than passing around a remote object.",
      "parentUuid": "a646f22c_fb1d185d",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "031313b9_0478562b",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-05-14T14:57:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e0dd41b_a9d04b64",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d72b7439_0bbc1821",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "Why not explicitly using {type: \u0027externref\u0027, value: string}? I think that\u0027s more explicit than using \u0027other\u0027",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfdb4eda_4a7bd456",
        "filename": "extension-api/ExtensionAPI.d.ts",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-24T10:54:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d72b7439_0bbc1821",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f37a00df_724ca286",
        "filename": "extensions/cxx_debugging/lib/WasmVendorPlugins.h",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "This is only used for `externref_t`, correct? So maybe rename to make that explicit, e.g.: `externref_type_sp`",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29b8375d_35dbc3d9",
        "filename": "extensions/cxx_debugging/lib/WasmVendorPlugins.h",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-23T12:03:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f37a00df_724ca286",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a28e509b_4e1a8994",
        "filename": "extensions/cxx_debugging/lib/WasmVendorPlugins.h",
        "patchSetId": 1
      },
      "lineNbr": 316,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "Shouldn\u0027t this be in ll. 317 instead, i.e. outside of the `if(!type_sp)`?",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e03188c_0016ffd9",
        "filename": "extensions/cxx_debugging/lib/WasmVendorPlugins.h",
        "patchSetId": 1
      },
      "lineNbr": 316,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-23T12:03:08Z",
      "side": 1,
      "message": "Oh, indeed!",
      "parentUuid": "a28e509b_4e1a8994",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36978d62_99b39a05",
        "filename": "extensions/cxx_debugging/src/Formatters.ts",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "I think we can return a `RemoteObject` here, instead of the `ForeignObject`.\nWe already have other instances where we create the `RemoteObject` as a return, so I don\u0027t see why the `ForeignObject` would be required here? I.e. you could already use `JSON.parse` on the value at this stage.",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b33236cf_403601c5",
        "filename": "extensions/cxx_debugging/src/Formatters.ts",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-24T10:54:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36978d62_99b39a05",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5e64b0_6ff6f84e",
        "filename": "extensions/cxx_debugging/src/Formatters.ts",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "You can merge the types in ll.274 and ll.275 into one line",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "072baf77_4f69b1b5",
        "filename": "extensions/cxx_debugging/src/Formatters.ts",
        "patchSetId": 1
      },
      "lineNbr": 275,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-23T12:03:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d5e64b0_6ff6f84e",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0baedab_2ef837f4",
        "filename": "extensions/cxx_debugging/src/WasmTypes.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "Why not directly use \u0027externref\u0027 instead of \u0027other\u0027?",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60265884_a0ced9a0",
        "filename": "extensions/cxx_debugging/src/WasmTypes.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-23T12:03:08Z",
      "side": 1,
      "message": "I would actually like the extension API to support all reference types, not just `externref`. But maybe `reftype` (following the Wasm specification) would be clearer than `other`?\n\nLLVM only support type `externref` at the moment, but I have written a compiler from OCaml to Wasm GC and I would like to experiment with generating DWARF information so that one can use the C/C++ plugin for debugging (or I may write my own plugin).",
      "parentUuid": "a0baedab_2ef837f4",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daa25016_08987819",
        "filename": "extensions/cxx_debugging/src/WasmTypes.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-24T10:54:27Z",
      "side": 1,
      "message": "Yes, let\u0027s go for reftype!",
      "parentUuid": "60265884_a0ced9a0",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fda69299_b9ac5d5f",
        "filename": "extensions/cxx_debugging/src/WasmTypes.ts",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-24T12:57:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "daa25016_08987819",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2472ff4_fea326df",
        "filename": "front_end/models/extensions/ExtensionServer.ts",
        "patchSetId": 1
      },
      "lineNbr": 367,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2024-04-22T11:18:56Z",
      "side": 1,
      "message": "Can we explicitly call out all cases (\u0027other\u0027 or \u0027externref\u0027 as suggested), and throw an error in the default case here?",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "629d047e_c16248b6",
        "filename": "front_end/models/extensions/ExtensionServer.ts",
        "patchSetId": 1
      },
      "lineNbr": 367,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-23T12:03:08Z",
      "side": 1,
      "message": "If one wants to support all reference types, not just `externref`, there is no easy way to call out all cases.",
      "parentUuid": "e2472ff4_fea326df",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8755791b_5a428753",
        "filename": "front_end/models/extensions/ExtensionServer.ts",
        "patchSetId": 1
      },
      "lineNbr": 367,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-04-24T12:57:58Z",
      "side": 1,
      "message": "I\u0027m now checking the type and subtype of the remote object, and correctly handling the case where the value does not actually exist.",
      "parentUuid": "629d047e_c16248b6",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "014b5957_d01e4183",
        "filename": "front_end/models/extensions/ExtensionServer.ts",
        "patchSetId": 1
      },
      "lineNbr": 367,
      "author": {
        "id": 1565770
      },
      "writtenOn": "2024-05-14T14:57:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8755791b_5a428753",
      "revId": "c10f8b05f113fb6250a092b9b6b2a75aea6c6506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
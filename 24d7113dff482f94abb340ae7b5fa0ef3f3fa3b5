{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "29329470_3a7a41dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2023-10-09T12:19:13Z",
      "side": 1,
      "message": "Does this really help? Is it really #buffer that\u0027s overflowing? But even if so, it looks to me like this is only moving the crash into the callers of #fetchChunk, all of which are themseves +\u003d-ing the chunks.",
      "revId": "24d7113dff482f94abb340ae7b5fa0ef3f3fa3b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6345ca69_d73da0c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-10-09T13:35:11Z",
      "side": 1,
      "message": "One of the reported RangeError was indeed the accumulation of `#buffer`. Moreover #fetchChunk does not only accumulate but consume from time to time. So depending on timing peak memory might not be as high.",
      "parentUuid": "29329470_3a7a41dd",
      "revId": "24d7113dff482f94abb340ae7b5fa0ef3f3fa3b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7db2cfb3_f73db850",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2023-10-09T14:02:07Z",
      "side": 1,
      "message": "What I meant was, if you check out the callers of #fetchChunk, they all concatenate all the chunks, too. Won\u0027t that mean that we now fail in one of the callers instead, if maybe a little later?",
      "parentUuid": "6345ca69_d73da0c5",
      "revId": "24d7113dff482f94abb340ae7b5fa0ef3f3fa3b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6064153c_5aa0cc20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-10-12T04:40:54Z",
      "side": 1,
      "message": "No, because `#fetchCunk` is called on an on-demand way and `#json` is conumed (shortend) while parsing. See e.g. \"parseArray\" which is called multiple times:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/front_end/entrypoints/heap_snapshot_worker/HeapSnapshotLoader.ts;l\u003d135;drc\u003d3a80260722c77d984a637b923cad4883857e57dc\n\nYou see similar calls to `#json.slice` in `parseUIntArray`.\n\nWe still run the risk that individual parts of the heapsnapshot are still too large to fit into a string, but chances are better with this CL.",
      "parentUuid": "7db2cfb3_f73db850",
      "revId": "24d7113dff482f94abb340ae7b5fa0ef3f3fa3b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35a97be6_064c4fd9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2023-10-12T08:25:37Z",
      "side": 1,
      "message": "That\u0027s fair. It\u0027s certainly helpful that with the CL the loader only hands out the small `write` chunks instead of aggregating them first!",
      "parentUuid": "6064153c_5aa0cc20",
      "revId": "24d7113dff482f94abb340ae7b5fa0ef3f3fa3b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
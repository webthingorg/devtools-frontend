{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "843cd31c_78a06a56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-11-04T12:37:16Z",
      "side": 1,
      "message": "Hi Jack and Alex!\n\nI\u0027m adding the part to show the linear memory inspector. This required also some changes in how we handle the Uint8Array, as the memory is too big to be transferred in one go.\n\nI\u0027ve updated the doc, here are the relevant sections (marked with NEW):\n\nhttps://docs.google.com/document/d/1LUOat3Q3pQ08IsnBQLrvL-4zWXSTgIuArb5ig3lEm-Y/edit#bookmark\u003did.koahcbpzoeg4\n\nhttps://docs.google.com/document/d/1LUOat3Q3pQ08IsnBQLrvL-4zWXSTgIuArb5ig3lEm-Y/edit#bookmark\u003did.jqbiuiwsck37\n\nPTAL!\n\nPS: Redness is due to web tests not finding linear_memory_inspector-legacy.js; trying to find out what\u0027s happening at the moment.\n\n",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "485fcf75_2bb309da",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 22,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-11-04T12:52:31Z",
      "side": 1,
      "message": "Question: how does memoryOffset work? is it an index within memory that the component should use? Or is it the start address that the memory starts with?",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e916da6a_e6384521",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 22,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-11-04T13:25:46Z",
      "side": 1,
      "message": "It is the start address that the memory starts with (such that we do not need to keep the whole memory, but only parts that we need).",
      "parentUuid": "485fcf75_2bb309da",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60305500_8cbd6f1f",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 22,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-11-04T14:27:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e916da6a_e6384521",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24003133_6e7d1c53",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 151,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-11-04T12:52:31Z",
      "side": 1,
      "message": "Perhaps return false or throw an Error?",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "baf54090_ef7ef1d7",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 151,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-11-04T13:25:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24003133_6e7d1c53",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c46018d_8de54916",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 155,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-11-04T12:52:31Z",
      "side": 1,
      "message": "Can it happen that this event is dispatched multiple times with different params and then memory updates come in in a different order?",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e270c16_b1419455",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 155,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-11-04T13:25:46Z",
      "side": 1,
      "message": "The memory request is always followed by the address that is to be displayed, i.e. the view (at least) cannot be out of sync. Regarding the ordering of events; I\u0027m not sure whether there can be a reordering of events handled (a quick search didn\u0027t give me any results about the order of javascript event handling; do you know what I should look for? Haven\u0027t worked much with JS yet).",
      "parentUuid": "2c46018d_8de54916",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eb471f6_7cd74865",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspector.ts",
        "patchSetId": 9
      },
      "lineNbr": 155,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-11-04T13:32:22Z",
      "side": 1,
      "message": "Events are sent and processed in order. But I think the handler of the events (fetching from the remote array) is async. So I am not sure if it\u0027d be fetching things in order if one of the requests takes longer.",
      "parentUuid": "2e270c16_b1419455",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "775b9376_267c43ec",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspectorPane.js",
        "patchSetId": 9
      },
      "lineNbr": 106,
      "author": {
        "id": 1410814
      },
      "writtenOn": "2020-11-04T12:52:31Z",
      "side": 1,
      "message": "question: does it have to be a web component?",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9c99d57_4c805488",
        "filename": "front_end/linear_memory_inspector/LinearMemoryInspectorPane.js",
        "patchSetId": 9
      },
      "lineNbr": 106,
      "author": {
        "id": 1396836
      },
      "writtenOn": "2020-11-04T13:25:46Z",
      "side": 1,
      "message": "Apparently it doesn\u0027t. I assumed that this has to be true as we are using a web component inside; but switching it off doesn\u0027t change anything in the view (since it\u0027s css classes that are set if that is true). Removed it! Thanks!",
      "parentUuid": "775b9376_267c43ec",
      "revId": "c6e6b6580f5371535d4713d8fa4b02ef4ba9c438",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}
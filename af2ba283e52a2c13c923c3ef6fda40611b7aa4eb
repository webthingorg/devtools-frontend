{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7595f496_3bba2b62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-08T01:58:14Z",
      "side": 1,
      "message": "PTAL thanks!",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "207ea005_114be06d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "First pass. Mostly to do with early returns. Will take another look!",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e933c72_7398ad26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Really happy to see this working!\n\nOnce again, a lot of comments, but they\u0027re just code cleanup/simplification. Happy to talk through them tomorrow :) ",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71e6449f_3babc19b",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Could we instead store the AccessibilityTree as a property on the AXNode?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52f73784_256d4b56",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71e6449f_3babc19b",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9ece319_1ee31c3b",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 15,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Since this always starts as false, do we need to pass it in?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44164afc_caa5210c",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 15,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Good point, it doesn\u0027t - removed",
      "parentUuid": "f9ece319_1ee31c3b",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cf601a5_061a62d6",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "I don\u0027t think we need to track this; we can compute it on the fly from the data.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05ace4bf_bb1f814e",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cf601a5_061a62d6",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db407ca_97983c4f",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "This should also handle updating the AXTree\u0027s selectedAXNode property, so you don\u0027t need to remember to keep them in sync.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4e9f75f_8749ccbb",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Could you please clarify, I\u0027m a little unsure if you mean that this function should also be calling selectedAXNode? Since selectedAXNode handles setting selected in line 44 of AccessibilityTree.ts would they not already be in sync?",
      "parentUuid": "9db407ca_97983c4f",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9724cae_a5acbafd",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-09T04:02:09Z",
      "side": 1,
      "message": "Oops, that was my mistake, sorry! You\u0027re right, AccessibilityTree is handling this.",
      "parentUuid": "d4e9f75f_8749ccbb",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a8e6e23_9115816e",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Should we call this.focus() after this.render(), just in case render() causes focus to be lost?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "468c5b1d_cbc3bd1c",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a8e6e23_9115816e",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9776f2e_633b82b3",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Maybe this should return AccessibilityNode | null? \n\nRather than relying on returning this, we can return null when appropriate (no next child) and null check at the calling site?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af92d138_3a187c51",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "I would have expected this to return the accessibility node which follows this one, not the one which follows the node with the given index. More like \"getNextSibling\", I guess.\n\nYou could implement that with something like:\n\n if (this.expanded) {\n   return this.getFirstChild(); // need to add these convenience methods\n }\n\n const parent \u003d this.getParentNode();\n if (!parent) {\n   return null;\n }\n const indexInParent \u003d parent.indexOf(this);  // convenience method\n if (indexInParent \u003c parent.children.length) {\n   return parent.getChild(indexInParent + 1); // convenience method\n } else {\n   return parent.getNextSibling();\n }\n\nThen have the callsite handle null by not moving the selection, as Meredith suggested.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd786bd1_7af2cccc",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af92d138_3a187c51",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "527c059e_e29c02a9",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9776f2e_633b82b3",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f878dd6_37a29103",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "can we restructure this for early returns to remove the else branch?\n\nInstead something like:\n\n```\n// Search parent for next child\nif (index is greater than number of children):\n  parent \u003d getParent()\n  if (!parent)\n    return this;\n  return parent.getNext(this.index)\n\n// Find next child\nnextChild \u003d this.axTree.nodeMap(...)\nreturn nextChild\n```\n\nCan return in same line as the get call to nodeMap as well, rather than storing in the nextChild function.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "383b26fc_f627dacd",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Removed the else block, and restructured the function using Alice\u0027s suggestion above. PTAL!",
      "parentUuid": "8f878dd6_37a29103",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf606935_85a38ff4",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 80,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Same comment as for getNext.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e31ec2_77e9f976",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 80,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Similarly, I would expect this to work relative to this node, although obviously this is a little trickier given you have to determine whether you need to go to the end of an expanded node above.\n\nSomething like:\n\n const parent \u003d this.getParentNode();\n if (!parent) {\n   return null;\n }\n const indexInParent \u003d parent.indexOf(this);\n if (indexInParent \u003d\u003d\u003d 0) {\n   return parent;\n } else {\n   let previousSibling \u003d parent.getChild(indexInParent - 1);\n   while (previousSibling.expanded) {\n     // lastChild() should only look at direct children\n     previousSibling \u003d previousSibling.lastChild();  \n   }\n   return previousSibling;\n }",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9a4d36b_29674c4c",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 80,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf606935_85a38ff4",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "043652b3_fb35fdb5",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 80,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72e31ec2_77e9f976",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "652e6663_e42faec5",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 109,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Why is this setting the selectedAXNode?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7c425ae_1dbacb47",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 109,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Removed - it doesn\u0027t need to be",
      "parentUuid": "652e6663_e42faec5",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cd9abe1_6d2e3d5a",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 132,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Most of this logic should be in getPrevious(), rather than here. This should just look like:\n\n const previousNode \u003d this.getPrevious();\n if (previousNode) {\n   axTree.selectedAXNode \u003d previousNode;\n }",
      "range": {
        "startLine": 118,
        "startChar": 1,
        "endLine": 132,
        "endChar": 0
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21f73a2f_10b20e68",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 132,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cd9abe1_6d2e3d5a",
      "range": {
        "startLine": 118,
        "startChar": 1,
        "endLine": 132,
        "endChar": 0
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e393a895_fe41fc99",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 136,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "When does this check fail? Why is it different to the check on line 114?",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 136,
        "endChar": 5
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3e0a72c_fabbc47f",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 136,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Good point it isn\u0027t necessary, updated this to be the same as line 114",
      "parentUuid": "e393a895_fe41fc99",
      "range": {
        "startLine": 134,
        "startChar": 0,
        "endLine": 136,
        "endChar": 5
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a13a86_b169019d",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 139,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Does the expanded property get set if the node has no children? Why is the second check needed?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aadac20b_4c20c357",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 139,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "It accidentally was being set! (I missed a case in the render function) Now fixed so this extra check is no longer needed",
      "parentUuid": "d8a13a86_b169019d",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a02622b_dc48e970",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 145,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Early return here: if (!parent) return.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e50a6577_3bf6b939",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 145,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a02622b_dc48e970",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76d20a68_282adea0",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 154,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Is it possible to move up the if (!this.axTree) check to here as well? Or will that break testing?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436f82d5_75d775aa",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 154,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Moved up - testing will need a fix, more coming soon",
      "parentUuid": "76d20a68_282adea0",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a66bef13_e04cf84d",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 252,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "mega nit (feel free to ignore): make this 0, and index++ after assigning it to the first node. Easier to understand imo.\n\nAlso you can do indexInParent: index++ to increment and assign the index in the same line. Note that index++ is post fix - it will return the value of index *before* it\u0027s been incremented (meaning if you initialize it to 0 it will set the index as 0 for the first node, and then increment to 1...)",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe701547_1a2eaa21",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 252,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Updated this based on Alice\u0027s suggestion to create a helper and calculate indices on the fly instead of storing it",
      "parentUuid": "a66bef13_e04cf84d",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e08e0f7_68c228dd",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 261,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "I don\u0027t think we even need to pass this in; you can calculate it on the fly.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cc13e38_c06fbc02",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 261,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e08e0f7_68c228dd",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac015a9a_ff4daf1b",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 334,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Can this check be added to the first one on line 305?",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "049ada95_42cf6421",
        "filename": "front_end/elements/AccessibilityNode.ts",
        "patchSetId": 8
      },
      "lineNbr": 334,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac015a9a_ff4daf1b",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "944d3d7e_8d735788",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Instead of exposing nodesMap directly (where we could modify it and cause chaos), we can write a simple getter for retrieving a node by ID for it.\n\ngetNodeByAXID(axid: number) : AccessibilityNode {...}\n\nSame way as we do for appendToNodeMap.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89735562_3092a8b4",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "944d3d7e_8d735788",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f208cd4_f9f4c342",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "This should just call \n\n this.selectedAXNode \u003d rootNode;\n\nand have the setter handle the rest of the logic.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a589a216_b80d19c6",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f208cd4_f9f4c342",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a9546b_63a39682",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "Each of these cases needs a stopPropagation() and/or preventDefault() (I can\u0027t remember exactly which is the critical one, sorry) to avoid the default behaviour of scrolling.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "954d313d_0967bd67",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Added preventDefault() before the switch case statements. Is this alright or should it go after the keypress function call in each case?",
      "parentUuid": "43a9546b_63a39682",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9116b8dd_ea1b7a9b",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-09T04:02:09Z",
      "side": 1,
      "message": "I think we don\u0027t want to call preventDefault() if we hit the \"default\" case (ugh, too many different meanings of \"default\"). That would mean that if you press something like escape, we\u0027re still calling preventDefault(), which might break other behaviour. \n\nSo yeah, I think either calling it after the xxPress() function, or just moving it into the function itself in each case, is best.",
      "parentUuid": "954d313d_0967bd67",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38d7fbd_b08640cf",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "I\u0027d call this getRootNode(), since we aren\u0027t actually searching to find it.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc6f78f8_39050820",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Renamed to getRoot() since getRootNode already exists in HTMLElement and doesn\u0027t want to be overwritten",
      "parentUuid": "e38d7fbd_b08640cf",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ffd6a76_7bca5b90",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 112,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "early return here\n\nif (!this.rootNode)\n  return null",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3228fdb6_95d7ff9c",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 112,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ffd6a76_7bca5b90",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35e8b88b_3afd64fb",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 120,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "selectRootNode()?",
      "range": {
        "startLine": 120,
        "startChar": 10,
        "endLine": 120,
        "endChar": 23
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92522178_4b98ecdc",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 120,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35e8b88b_3afd64fb",
      "range": {
        "startLine": 120,
        "startChar": 10,
        "endLine": 120,
        "endChar": 23
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ca0461_a600d483",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Early return.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "394cb161_764584df",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2ca0461_a600d483",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66a963a5_f28e0222",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 124,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "this.selectedAXNode \u003d rootNode;",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 40
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dbe82c5_b8078008",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 124,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66a963a5_f28e0222",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 124,
        "endChar": 40
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dcd5dce_e6a575b4",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 128,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "selectLastNode()?",
      "range": {
        "startLine": 128,
        "startChar": 10,
        "endLine": 128,
        "endChar": 22
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63a4b0a1_c65b7c04",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 128,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0dcd5dce_e6a575b4",
      "range": {
        "startLine": 128,
        "startChar": 10,
        "endLine": 128,
        "endChar": 22
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b78f733_9b574ecc",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1323906
      },
      "writtenOn": "2021-02-08T05:45:53Z",
      "side": 1,
      "message": "Early return.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7579cd17_3724bcaf",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b78f733_9b574ecc",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdd5400f_3dbf471e",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "I think getLastChild() should straightforwardly get the last direct child of a node, so this might need a little while loop to get the deepest last child. (Or you could write a separate helper method to get the deepest last child.)",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd7cb749_f886d60a",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Had to add a getter to check for the expanded state in the while loop. Just wanted to check if this is ok or if there is a better alternative?",
      "parentUuid": "fdd5400f_3dbf471e",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "548dcdfb_b7170a4c",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-09T04:02:09Z",
      "side": 1,
      "message": "I think that\u0027s good :)",
      "parentUuid": "cd7cb749_f886d60a",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab2a0a70_14128d2b",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "this.selectedAXNode \u003d lastNode;",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 134,
        "endChar": 42
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10b947b7_c0e5c553",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab2a0a70_14128d2b",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 134,
        "endChar": 42
      },
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4effd13c_8c5c1b30",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 149,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2021-02-08T06:13:53Z",
      "side": 1,
      "message": "We need a \u003cstyle\u003e block in here to put overflow: auto on the :host element.",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "623e9a5f_bebad55b",
        "filename": "front_end/elements/AccessibilityTree.ts",
        "patchSetId": 8
      },
      "lineNbr": 149,
      "author": {
        "id": 1475325
      },
      "writtenOn": "2021-02-09T03:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4effd13c_8c5c1b30",
      "revId": "af2ba283e52a2c13c923c3ef6fda40611b7aa4eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}